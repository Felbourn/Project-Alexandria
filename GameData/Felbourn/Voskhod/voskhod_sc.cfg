PART
{
    name = His_rn_voskhod_sc

    module = Part
    category = Pods
    subcategory = 0

    title = Voskhod Descent Module
    author = Felbourn
    manufacturer = Felbourn
    description = Descent module for the Voskhod spacecraft

    MODEL
	{  
        model = RN_Soyuz/Parts/7k/voskhod_sc
	}
    scale = 1
    rescaleFactor = 1

    node_stack_bottom = 0.0, -1.12398, 0.0,       0.0, -1.0, 0.0,   2
    node_stack_top = 0.0, 1.12364, 0.0,           0.0, 1.0, 0.0,    2
    node_stack_para = -0.81345, 0.2886, 0.0,      0.0, 1.0, 0.0,    2
    node_stack_airlock = 0.0, 0.29699, 0.92451,   0.0, 1.0, 0.0,    2
    attachRules = 1,0,1,1,0

    TechRequired = generalRocketry
    cost = 1800

    mass = 1

    dragModelType = default
    maximum_drag = 0.20
    minimum_drag = 0.2
    angularDrag = 2

    crashTolerance = 12
    breakingForce = 50
    breakingTorque = 50

    vesselType = Ship

    thermalMassModifier = 1
    emissiveConstant = 0.85
    maxTemp = 1200
    skinMaxTemp = 3200
    skinMassPerArea = 0.6

    RESOURCE
    {
    	name = ElectricCharge
    	amount = 10000
    	maxAmount = 10000
    }

    MODULE
    {
    	name = ModuleSAS
    	SASServiceLevel = 3
    }

    CrewCapacity = 3

    INTERNAL
    {
        name = GenericSpace3
    }

    MODULE
    {
    	name = ModuleCommand
    	minimumCrew = 1
    	
    	RESOURCE
    	{
    		name = ElectricCharge
    		rate = 0.01
    	}
    }

    MODULE
    {
        name = ModuleAblator
        ablativeResource = Ablator
        lossExp = -4000
        lossConst = 0.007
        pyrolysisLossFactor = 3000
        reentryConductivity = 0.01
        ablationTempThresh = 400
        charMin = 1
        charMax = 1
    }
    RESOURCE
    {
    	name = Ablator
    	amount = 200
    	maxAmount = 200
    }
	
    MODULE
    {
        name = ReflectiveShaderModule

        // Lower values for performance, higher values for aesthetics (you shouldn't ever need to go higher than 1024).
        CubeMapSize = 16

        // How deep the reflection will be ("how far the reflection camera will view")
        FarClipPlane = 500000000
		// How far away must something be before it is reflected
		NearClipPlane = .1

        // Set to false to render all 6 faces of the CubeMap at once (six times slower~)
        OneFacePerFrame = true

        // The shader to find. The reflective shaders are:
        // Reflective/Diffuse
        // Reflective/VertexLit
        // Reflective/Bumped Diffuse
		//Reflective/Bumped Specular
        ShaderName = Reflective/Bumped Diffuse
		realTimeReflection = False
		

        // The height of the parallax map. Values are accepted between 0.005 and 0.08.
        ParallaxHeight = 0.01

        // How reflective the reflection will be (Weakest 0.0 - 1.0 Strongest).
        ReflectionStrength = 0.50
		//ReflectionColor = 0, 0, 0, 0

        // Use this variable to specify which meshes to apply the shader to.
        // Not using this variable will default to the first found mesh.
        // Use the actual mesh name for the value. Or you could use:
        // all - to replace the shader on all meshes in the model.
        MeshesToChange = SC_Out,SC_HFOut,SC_HBOut,SC_CPanel

        // How shiny the specularity will be (if specular).
        // This value will be automatically set if it already exists on the previous shader and is not defined here.
        Shininess = 1.0
		updateRate = 130

        // These variables should be used together only.
        // These values will be automatically set if they already exist on the previous shader and are not defined here
        SpecColorR = 0.8
        SpecColorG = 0.8
        SpecColorB = 0.8
        SpecColorA = 0.8
		rimFalloff = 5.0
		rimColor = 0.8242, 0.6445, 0.1914, 1.0
		ReflectionColor = 0.6242, 0.6445, 0.69, 1.0
    }
}
