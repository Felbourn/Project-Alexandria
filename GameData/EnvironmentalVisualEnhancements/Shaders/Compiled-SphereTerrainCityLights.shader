// Compiled shader for all platforms, uncompressed size: 1117.8KB

Shader "EVE/TerrainCityLight" {
Properties {
 _Color ("Color Tint", Color) = (1,1,1,1)
 _SpecularColor ("Specular tint", Color) = (1,1,1,1)
 _SpecularPower ("Shininess", Float) = 0.078125
 _DetailDist ("Detail Distance", Range(0,1)) = 0.00875
 _CityOverlayTex ("Overlay (RGB)", 2D) = "white" {}
 _CityOverlayDetailScale ("Overlay Detail Scale", Range(0,1000)) = 80
 _CityDarkOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
 _CityLightOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
 _PlanetOpacity ("PlanetOpacity", Float) = 1
 _SunDir ("Sun Direction", Vector) = (1,1,1,1)
}
SubShader { 
 Tags { "QUEUE"="Transparent" "RenderMode"="Transparent" }


 // Stats for Vertex shader:
 //       d3d11 : 36 avg math (28..40)
 //        d3d9 : 42 avg math (37..46)
 //        gles : 264 avg math (254..277), 5 avg texture (3..9), 9 avg branch (9..13)
 //       gles3 : 263 avg math (254..277), 5 avg texture (3..9), 9 avg branch (9..13)
 //   glesdesktop : 264 avg math (254..277), 5 avg texture (3..9), 10 avg branch (9..13)
 //       metal : 22 avg math (21..23)
 //      opengl : 264 avg math (254..277), 5 avg texture (3..9), 10 avg branch (9..13)
 // Stats for Fragment shader:
 //       d3d11 : 94 avg math (87..105), 2 avg texture (0..6)
 //        d3d9 : 115 avg math (106..127), 11 avg texture (9..15)
 //       metal : 263 avg math (254..277), 5 avg texture (3..9), 9 avg branch (9..13)
 Pass {
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "QUEUE"="Transparent" "RenderMode"="Transparent" }
  Lighting On
  ZWrite Off
  Blend SrcAlpha OneMinusSrcAlpha
Program "vp" {
SubProgram "opengl " {
// Stats: 257 math, 4 textures, 9 branches
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (cse_2.xyz - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (tmpvar_3, tmpvar_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.xy = gl_MultiTexCoord0.xy;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(tmpvar_5.xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_WorldSpaceLightPos0.xyz));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_2).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor(
    (1.01 + tmpvar_7)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(tmpvar_7)
  ), 0.0, 1.0));
  xlv_TEXCOORD7 = normalize((cse_2.xyz - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD5);
  vec2 uv_6;
  float tmpvar_7;
  if ((abs(cse_5.z) > (1e-08 * abs(cse_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (cse_5.x / cse_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((cse_5.z < 0.0)) {
      if ((cse_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(cse_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(cse_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_5.y)
    )) * (1.5708 + (
      abs(cse_5.y)
     * 
      (-0.214602 + (abs(cse_5.y) * (0.0865667 + (
        abs(cse_5.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(cse_5.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(cse_5.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  cityoverlay_3 = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec2 uv_14;
  float tmpvar_15;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    float tmpvar_16;
    tmpvar_16 = (tmpvar_13.x / tmpvar_13.z);
    tmpvar_15 = (tmpvar_16 * inversesqrt((
      (tmpvar_16 * tmpvar_16)
     + 1.0)));
    tmpvar_15 = (sign(tmpvar_15) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_15)))
     * 
      (1.5708 + (abs(tmpvar_15) * (-0.214602 + (
        abs(tmpvar_15)
       * 
        (0.0865667 + (abs(tmpvar_15) * -0.0310296))
      ))))
    )));
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.14159;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.14159);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * tmpvar_15));
  uv_14.y = (0.31831 * (1.5708 - (
    sign(tmpvar_13.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.5708 + (
      abs(tmpvar_13.y)
     * 
      (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (
        abs(tmpvar_13.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_17;
  tmpvar_17 = ((uv_14 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_13);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((
    mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22)
   >= tmpvar_21.y))));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _CityOverlayDetailScale), tmpvar_20.xy, tmpvar_20.zw);
  citydarkoverlaydetail_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD5);
  vec2 uv_26;
  float tmpvar_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    float tmpvar_28;
    tmpvar_28 = (tmpvar_25.x / tmpvar_25.z);
    tmpvar_27 = (tmpvar_28 * inversesqrt((
      (tmpvar_28 * tmpvar_28)
     + 1.0)));
    tmpvar_27 = (sign(tmpvar_27) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_27)))
     * 
      (1.5708 + (abs(tmpvar_27) * (-0.214602 + (
        abs(tmpvar_27)
       * 
        (0.0865667 + (abs(tmpvar_27) * -0.0310296))
      ))))
    )));
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        tmpvar_27 += 3.14159;
      } else {
        tmpvar_27 = (tmpvar_27 - 3.14159);
      };
    };
  } else {
    tmpvar_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * tmpvar_27));
  uv_26.y = (0.31831 * (1.5708 - (
    sign(tmpvar_25.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_25.y)
    )) * (1.5708 + (
      abs(tmpvar_25.y)
     * 
      (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (
        abs(tmpvar_25.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_29;
  tmpvar_29 = ((uv_26 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_25.xz);
  vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_25.xz);
  vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_25);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.yxz, mix (tmpvar_33, tmpvar_33.zxy, vec3(tmpvar_34)), vec3(float((
    mix (tmpvar_33.x, tmpvar_33.z, tmpvar_34)
   >= tmpvar_33.y))));
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_35.zy) / abs(tmpvar_35.x)) * _CityOverlayDetailScale), tmpvar_32.xy, tmpvar_32.zw);
  citylightoverlaydetail_1.xyz = tmpvar_36.xyz;
  cityoverlay_3.w = (tmpvar_12.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_24.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_36.w * cityoverlay_3.w);
  color_4.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_36.xyz, citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  float atten_37;
  atten_37 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w;
  vec4 c_38;
  vec3 tmpvar_39;
  tmpvar_39 = normalize(_WorldSpaceLightPos0.xyz);
  vec3 tmpvar_40;
  tmpvar_40 = normalize(xlv_TEXCOORD4);
  float tmpvar_41;
  tmpvar_41 = dot (tmpvar_40, tmpvar_39);
  c_38.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_41) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_39 + normalize(xlv_TEXCOORD7)))
    , tmpvar_40), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_37 * 4.0));
  c_38.w = (tmpvar_41 * (atten_37 * 4.0));
  float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_38 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_42)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_42)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_43;
  tmpvar_43 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4.xyz = tmpvar_43.xyz;
  color_4.w = (tmpvar_43.w * _PlanetOpacity);
  gl_FragData[0] = color_4;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 41 math
Keywords { "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c15, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.x, c13, c13
rsq r0.x, r0.x
mov r0.w, c14.x
mul r0.xyz, r0.x, c13
mov r1.xy, v3
mov r1.z, v4.x
dp3 r1.w, -r1, r0
mov r0.xyz, v2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c14.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c14.y
add r0.y, r0, c14.w
mad o6.x, r0, r0.y, c15
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r2.xyz, -r0, c12
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mul o7.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
mov o5.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 36 math
Keywords { "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedoaehlmoahhchelnbdgpnlmacnfbcafifabaaaaaaoeahaaaaadaaaaaa
cmaaaaaapeaaaaaanmabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaakoaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapabaaaalhaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfceneb
emaafeeffiedepepfceeaafeebeoehefeofeaaklepfdeheooaaaaaaaaiaaaaaa
aiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
aaagaaaaeaaaabaaiaabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaad
bcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaabaaaaaaegbobaaaabaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaaficcabaaa
acaaaaaadkaabaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
hccabaaaacaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
adaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaajbcaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaadgaaaaafdcaabaaa
abaaaaaaegbabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaakbabaaaaeaaaaaa
baaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafccaabaaaaaaaaaaabkaabaaa
aaaaaaaaaaaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaialp
dcaaaaajiccabaaaadaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpdiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 257 math, 4 textures, 9 branches
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTexture0, vec2(tmpvar_57));
  mediump vec3 lightDir_59;
  lightDir_59 = tmpvar_56;
  mediump vec3 viewDir_60;
  viewDir_60 = xlv_TEXCOORD7;
  mediump vec3 normal_61;
  normal_61 = xlv_TEXCOORD4;
  mediump float atten_62;
  atten_62 = tmpvar_58.w;
  mediump vec4 c_63;
  mediump vec3 tmpvar_64;
  tmpvar_64 = normalize(lightDir_59);
  lightDir_59 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = normalize(viewDir_60);
  viewDir_60 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(normal_61);
  normal_61 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_64);
  highp float tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp (dot (normalize(
    (tmpvar_64 + tmpvar_65)
  ), tmpvar_66), 0.0, 1.0);
  tmpvar_68 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_67) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_68, _SpecularPower) * _SpecularColor.w)
  )) * (atten_62 * 4.0));
  c_63.xyz = tmpvar_70;
  c_63.w = (tmpvar_67 * (atten_62 * 4.0));
  highp vec3 tmpvar_71;
  tmpvar_71 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_72;
  lightDir_72 = tmpvar_71;
  mediump vec3 normal_73;
  normal_73 = xlv_TEXCOORD4;
  mediump float tmpvar_74;
  tmpvar_74 = dot (normal_73, lightDir_72);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_63 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_74)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_74)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_75;
  tmpvar_75 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_75.xyz;
  highp float tmpvar_76;
  tmpvar_76 = (tmpvar_75.w * _PlanetOpacity);
  color_5.w = tmpvar_76;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 257 math, 4 textures, 9 branches
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTexture0, vec2(tmpvar_57));
  mediump vec3 lightDir_59;
  lightDir_59 = tmpvar_56;
  mediump vec3 viewDir_60;
  viewDir_60 = xlv_TEXCOORD7;
  mediump vec3 normal_61;
  normal_61 = xlv_TEXCOORD4;
  mediump float atten_62;
  atten_62 = tmpvar_58.w;
  mediump vec4 c_63;
  mediump vec3 tmpvar_64;
  tmpvar_64 = normalize(lightDir_59);
  lightDir_59 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = normalize(viewDir_60);
  viewDir_60 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(normal_61);
  normal_61 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_64);
  highp float tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp (dot (normalize(
    (tmpvar_64 + tmpvar_65)
  ), tmpvar_66), 0.0, 1.0);
  tmpvar_68 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_67) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_68, _SpecularPower) * _SpecularColor.w)
  )) * (atten_62 * 4.0));
  c_63.xyz = tmpvar_70;
  c_63.w = (tmpvar_67 * (atten_62 * 4.0));
  highp vec3 tmpvar_71;
  tmpvar_71 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_72;
  lightDir_72 = tmpvar_71;
  mediump vec3 normal_73;
  normal_73 = xlv_TEXCOORD4;
  mediump float tmpvar_74;
  tmpvar_74 = dot (normal_73, lightDir_72);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_63 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_74)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_74)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_75;
  tmpvar_75 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_75.xyz;
  highp float tmpvar_76;
  tmpvar_76 = (tmpvar_75.w * _PlanetOpacity);
  color_5.w = tmpvar_76;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 257 math, 4 textures, 9 branches
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec4 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureGrad (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture (_LightTexture0, vec2(tmpvar_57));
  mediump vec3 lightDir_59;
  lightDir_59 = tmpvar_56;
  mediump vec3 viewDir_60;
  viewDir_60 = xlv_TEXCOORD7;
  mediump vec3 normal_61;
  normal_61 = xlv_TEXCOORD4;
  mediump float atten_62;
  atten_62 = tmpvar_58.w;
  mediump vec4 c_63;
  mediump vec3 tmpvar_64;
  tmpvar_64 = normalize(lightDir_59);
  lightDir_59 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = normalize(viewDir_60);
  viewDir_60 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(normal_61);
  normal_61 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_64);
  highp float tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp (dot (normalize(
    (tmpvar_64 + tmpvar_65)
  ), tmpvar_66), 0.0, 1.0);
  tmpvar_68 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_67) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_68, _SpecularPower) * _SpecularColor.w)
  )) * (atten_62 * 4.0));
  c_63.xyz = tmpvar_70;
  c_63.w = (tmpvar_67 * (atten_62 * 4.0));
  highp vec3 tmpvar_71;
  tmpvar_71 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_72;
  lightDir_72 = tmpvar_71;
  mediump vec3 normal_73;
  normal_73 = xlv_TEXCOORD4;
  mediump float tmpvar_74;
  tmpvar_74 = dot (normal_73, lightDir_72);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_63 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_74)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_74)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_75;
  tmpvar_75 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_75.xyz;
  highp float tmpvar_76;
  tmpvar_76 = (tmpvar_75.w * _PlanetOpacity);
  color_5.w = tmpvar_76;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 22 math
Keywords { "POINT" "SHADOWS_OFF" }
Bind "vertex" ATTR0
Bind "color" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 224
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesColor [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = half4(_mtl_i._glesColor);
  float3 tmpvar_2;
  tmpvar_2 = normalize(_mtl_i._glesNormal);
  half NdotL_3;
  float4 tmpvar_4;
  float4 tmpvar_5;
  float tmpvar_6;
  float4 cse_7;
  cse_7 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_8;
  tmpvar_8 = (cse_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_5.w = sqrt(dot (tmpvar_8, tmpvar_8));
  float4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = tmpvar_2;
  float4 tmpvar_10;
  tmpvar_10.xy = _mtl_i._glesMultiTexCoord0.xy;
  tmpvar_10.z = _mtl_i._glesMultiTexCoord1.x;
  tmpvar_10.w = _mtl_i._glesMultiTexCoord1.y;
  float3 tmpvar_11;
  tmpvar_11 = -(tmpvar_10.xyz);
  tmpvar_4 = float4(tmpvar_1);
  tmpvar_5.xyz = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = dot (tmpvar_11, normalize(_mtl_u._WorldSpaceLightPos0.xyz));
  NdotL_3 = half(tmpvar_12);
  half tmpvar_13;
  tmpvar_13 = mix ((half)1.0, clamp (floor(
    ((half)1.01 + NdotL_3)
  ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
    -(NdotL_3)
  ), (half)0.0, (half)1.0));
  tmpvar_6 = float(tmpvar_13);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._LightMatrix0 * cse_7).xyz;
  _mtl_o.xlv_TEXCOORD4 = normalize((_mtl_u._Object2World * tmpvar_9).xyz);
  _mtl_o.xlv_TEXCOORD5 = tmpvar_11;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD7 = normalize((cse_7.xyz - _mtl_u._WorldSpaceCameraPos));
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 254 math, 3 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 tmpvar_3;
  tmpvar_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (tmpvar_3, tmpvar_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.xy = gl_MultiTexCoord0.xy;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(tmpvar_5.xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_WorldSpaceLightPos0.xyz));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor(
    (1.01 + tmpvar_7)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(tmpvar_7)
  ), 0.0, 1.0));
  xlv_TEXCOORD7 = normalize((tmpvar_2 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD5);
  vec2 uv_6;
  float tmpvar_7;
  if ((abs(cse_5.z) > (1e-08 * abs(cse_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (cse_5.x / cse_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((cse_5.z < 0.0)) {
      if ((cse_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(cse_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(cse_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_5.y)
    )) * (1.5708 + (
      abs(cse_5.y)
     * 
      (-0.214602 + (abs(cse_5.y) * (0.0865667 + (
        abs(cse_5.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(cse_5.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(cse_5.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  cityoverlay_3 = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec2 uv_14;
  float tmpvar_15;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    float tmpvar_16;
    tmpvar_16 = (tmpvar_13.x / tmpvar_13.z);
    tmpvar_15 = (tmpvar_16 * inversesqrt((
      (tmpvar_16 * tmpvar_16)
     + 1.0)));
    tmpvar_15 = (sign(tmpvar_15) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_15)))
     * 
      (1.5708 + (abs(tmpvar_15) * (-0.214602 + (
        abs(tmpvar_15)
       * 
        (0.0865667 + (abs(tmpvar_15) * -0.0310296))
      ))))
    )));
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.14159;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.14159);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * tmpvar_15));
  uv_14.y = (0.31831 * (1.5708 - (
    sign(tmpvar_13.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.5708 + (
      abs(tmpvar_13.y)
     * 
      (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (
        abs(tmpvar_13.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_17;
  tmpvar_17 = ((uv_14 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_13);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((
    mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22)
   >= tmpvar_21.y))));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _CityOverlayDetailScale), tmpvar_20.xy, tmpvar_20.zw);
  citydarkoverlaydetail_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD5);
  vec2 uv_26;
  float tmpvar_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    float tmpvar_28;
    tmpvar_28 = (tmpvar_25.x / tmpvar_25.z);
    tmpvar_27 = (tmpvar_28 * inversesqrt((
      (tmpvar_28 * tmpvar_28)
     + 1.0)));
    tmpvar_27 = (sign(tmpvar_27) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_27)))
     * 
      (1.5708 + (abs(tmpvar_27) * (-0.214602 + (
        abs(tmpvar_27)
       * 
        (0.0865667 + (abs(tmpvar_27) * -0.0310296))
      ))))
    )));
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        tmpvar_27 += 3.14159;
      } else {
        tmpvar_27 = (tmpvar_27 - 3.14159);
      };
    };
  } else {
    tmpvar_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * tmpvar_27));
  uv_26.y = (0.31831 * (1.5708 - (
    sign(tmpvar_25.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_25.y)
    )) * (1.5708 + (
      abs(tmpvar_25.y)
     * 
      (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (
        abs(tmpvar_25.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_29;
  tmpvar_29 = ((uv_26 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_25.xz);
  vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_25.xz);
  vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_25);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.yxz, mix (tmpvar_33, tmpvar_33.zxy, vec3(tmpvar_34)), vec3(float((
    mix (tmpvar_33.x, tmpvar_33.z, tmpvar_34)
   >= tmpvar_33.y))));
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_35.zy) / abs(tmpvar_35.x)) * _CityOverlayDetailScale), tmpvar_32.xy, tmpvar_32.zw);
  citylightoverlaydetail_1.xyz = tmpvar_36.xyz;
  cityoverlay_3.w = (tmpvar_12.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_24.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_36.w * cityoverlay_3.w);
  color_4.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_36.xyz, citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 c_37;
  vec3 tmpvar_38;
  tmpvar_38 = normalize(_WorldSpaceLightPos0.xyz);
  vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD4);
  float tmpvar_40;
  tmpvar_40 = dot (tmpvar_39, tmpvar_38);
  c_37.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_40) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_38 + normalize(xlv_TEXCOORD7)))
    , tmpvar_39), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 4.0);
  c_37.w = (tmpvar_40 * 4.0);
  float tmpvar_41;
  tmpvar_41 = dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_37 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_41)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_41)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_42;
  tmpvar_42 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4.xyz = tmpvar_42.xyz;
  color_4.w = (tmpvar_42.w * _PlanetOpacity);
  gl_FragData[0] = color_4;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 37 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_WorldSpaceLightPos0]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord4 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
def c10, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c11, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.x, c9, c9
rsq r0.x, r0.x
mul r1.xyz, r0.x, c9
mov r1.w, c10.x
mov r0.xy, v3
mov r0.z, v4.x
dp3 r0.w, -r0, r1
mov r1.xyz, v2
dp4 r2.x, r1, c4
dp4 r2.z, r1, c6
dp4 r2.y, r1, c5
add r2.w, r0, c10.z
dp3 r1.x, r2, r2
rsq r1.x, r1.x
mul o3.xyz, r1.x, r2
frc r1.y, r2.w
add_sat r1.y, r2.w, -r1
add r1.w, r1.y, c10
mul_sat r2.x, -r0.w, c10.y
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mad o5.x, r2, r1.w, c11
mov o1, v1
mul o6.xyz, r0.w, -r1
mov o2.xyz, v2
rcp o2.w, r0.w
mov o4.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 28 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "UnityPerCamera" 0
BindCB  "UnityLighting" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedcbogfidkgfkiolkedkkdednbmllomegfabaaaaaaiaagaaaaadaaaaaa
cmaaaaaapeaaaaaameabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaakoaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapabaaaalhaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfceneb
emaafeeffiedepepfceeaafeebeoehefeofeaaklepfdeheomiaaaaaaahaaaaaa
aiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaalmaaaaaa
afaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaaahaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcleaeaaaaeaaaabaacnabaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaadbcbabaaaaeaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadiccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacacaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
abaaaaaaegbobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
aaaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaelaaaaaficcabaaaacaaaaaadkaabaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadgaaaaafhccabaaaacaaaaaaegbcbaaaacaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaa
acaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaajbcaabaaa
aaaaaaaaegiccaaaabaaaaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaa
aaaaaaaaegiccaaaabaaaaaaaaaaaaaadgaaaaafdcaabaaaabaaaaaaegbabaaa
adaaaaaadgaaaaafecaabaaaabaaaaaaakbabaaaaeaaaaaabaaaaaaibcaabaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaaghccabaaa
aeaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahccaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakoehibdpdicaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaacambebcaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaaaaaaaaah
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaialpdcaaaaajiccabaaa
adaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab
"
}
SubProgram "gles " {
// Stats: 254 math, 3 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec3 lightDirection_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - _WorldSpaceCameraPos);
  tmpvar_7.w = sqrt(dot (tmpvar_10, tmpvar_10));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec4 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord0.xy;
  tmpvar_12.z = tmpvar_3.x;
  tmpvar_12.w = tmpvar_3.y;
  highp vec3 tmpvar_13;
  tmpvar_13 = -(tmpvar_12.xyz);
  tmpvar_6 = tmpvar_1;
  tmpvar_7.xyz = tmpvar_2;
  lowp vec3 tmpvar_14;
  tmpvar_14 = normalize(_WorldSpaceLightPos0.xyz);
  lightDirection_5 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_13, lightDirection_5);
  NdotL_4 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_8 = tmpvar_16;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_11).xyz);
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  mediump vec3 lightDir_57;
  lightDir_57 = tmpvar_56;
  mediump vec3 viewDir_58;
  viewDir_58 = xlv_TEXCOORD7;
  mediump vec3 normal_59;
  normal_59 = xlv_TEXCOORD4;
  mediump vec4 c_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = normalize(lightDir_57);
  lightDir_57 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62 = normalize(viewDir_58);
  viewDir_58 = tmpvar_62;
  mediump vec3 tmpvar_63;
  tmpvar_63 = normalize(normal_59);
  normal_59 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_61);
  highp float tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = clamp (dot (normalize(
    (tmpvar_61 + tmpvar_62)
  ), tmpvar_63), 0.0, 1.0);
  tmpvar_65 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_64) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_65, _SpecularPower) * _SpecularColor.w)
  )) * 4.0);
  c_60.xyz = tmpvar_67;
  c_60.w = (tmpvar_64 * 4.0);
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_69;
  lightDir_69 = tmpvar_68;
  mediump vec3 normal_70;
  normal_70 = xlv_TEXCOORD4;
  mediump float tmpvar_71;
  tmpvar_71 = dot (normal_70, lightDir_69);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_60 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_71)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_71)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_72.xyz;
  highp float tmpvar_73;
  tmpvar_73 = (tmpvar_72.w * _PlanetOpacity);
  color_5.w = tmpvar_73;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 254 math, 3 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec3 lightDirection_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - _WorldSpaceCameraPos);
  tmpvar_7.w = sqrt(dot (tmpvar_10, tmpvar_10));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec4 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord0.xy;
  tmpvar_12.z = tmpvar_3.x;
  tmpvar_12.w = tmpvar_3.y;
  highp vec3 tmpvar_13;
  tmpvar_13 = -(tmpvar_12.xyz);
  tmpvar_6 = tmpvar_1;
  tmpvar_7.xyz = tmpvar_2;
  lowp vec3 tmpvar_14;
  tmpvar_14 = normalize(_WorldSpaceLightPos0.xyz);
  lightDirection_5 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_13, lightDirection_5);
  NdotL_4 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_8 = tmpvar_16;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_11).xyz);
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  mediump vec3 lightDir_57;
  lightDir_57 = tmpvar_56;
  mediump vec3 viewDir_58;
  viewDir_58 = xlv_TEXCOORD7;
  mediump vec3 normal_59;
  normal_59 = xlv_TEXCOORD4;
  mediump vec4 c_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = normalize(lightDir_57);
  lightDir_57 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62 = normalize(viewDir_58);
  viewDir_58 = tmpvar_62;
  mediump vec3 tmpvar_63;
  tmpvar_63 = normalize(normal_59);
  normal_59 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_61);
  highp float tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = clamp (dot (normalize(
    (tmpvar_61 + tmpvar_62)
  ), tmpvar_63), 0.0, 1.0);
  tmpvar_65 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_64) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_65, _SpecularPower) * _SpecularColor.w)
  )) * 4.0);
  c_60.xyz = tmpvar_67;
  c_60.w = (tmpvar_64 * 4.0);
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_69;
  lightDir_69 = tmpvar_68;
  mediump vec3 normal_70;
  normal_70 = xlv_TEXCOORD4;
  mediump float tmpvar_71;
  tmpvar_71 = dot (normal_70, lightDir_69);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_60 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_71)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_71)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_72.xyz;
  highp float tmpvar_73;
  tmpvar_73 = (tmpvar_72.w * _PlanetOpacity);
  color_5.w = tmpvar_73;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 254 math, 3 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec3 lightDirection_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = (_Object2World * _glesVertex).xyz;
  highp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9 - _WorldSpaceCameraPos);
  tmpvar_7.w = sqrt(dot (tmpvar_10, tmpvar_10));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec4 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord0.xy;
  tmpvar_12.z = tmpvar_3.x;
  tmpvar_12.w = tmpvar_3.y;
  highp vec3 tmpvar_13;
  tmpvar_13 = -(tmpvar_12.xyz);
  tmpvar_6 = tmpvar_1;
  tmpvar_7.xyz = tmpvar_2;
  lowp vec3 tmpvar_14;
  tmpvar_14 = normalize(_WorldSpaceLightPos0.xyz);
  lightDirection_5 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_13, lightDirection_5);
  NdotL_4 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_8 = tmpvar_16;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_11).xyz);
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = normalize((tmpvar_9 - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec4 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureGrad (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  mediump vec3 lightDir_57;
  lightDir_57 = tmpvar_56;
  mediump vec3 viewDir_58;
  viewDir_58 = xlv_TEXCOORD7;
  mediump vec3 normal_59;
  normal_59 = xlv_TEXCOORD4;
  mediump vec4 c_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = normalize(lightDir_57);
  lightDir_57 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62 = normalize(viewDir_58);
  viewDir_58 = tmpvar_62;
  mediump vec3 tmpvar_63;
  tmpvar_63 = normalize(normal_59);
  normal_59 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_61);
  highp float tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = clamp (dot (normalize(
    (tmpvar_61 + tmpvar_62)
  ), tmpvar_63), 0.0, 1.0);
  tmpvar_65 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_64) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_65, _SpecularPower) * _SpecularColor.w)
  )) * 4.0);
  c_60.xyz = tmpvar_67;
  c_60.w = (tmpvar_64 * 4.0);
  lowp vec3 tmpvar_68;
  tmpvar_68 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_69;
  lightDir_69 = tmpvar_68;
  mediump vec3 normal_70;
  normal_70 = xlv_TEXCOORD4;
  mediump float tmpvar_71;
  tmpvar_71 = dot (normal_70, lightDir_69);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_60 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_71)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_71)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_72;
  tmpvar_72 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_72.xyz;
  highp float tmpvar_73;
  tmpvar_73 = (tmpvar_72.w * _PlanetOpacity);
  color_5.w = tmpvar_73;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 21 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" ATTR0
Bind "color" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 160
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesColor [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = half4(_mtl_i._glesColor);
  float3 tmpvar_2;
  tmpvar_2 = normalize(_mtl_i._glesNormal);
  half NdotL_3;
  float3 lightDirection_4;
  float4 tmpvar_5;
  float4 tmpvar_6;
  float tmpvar_7;
  float3 tmpvar_8;
  tmpvar_8 = (_mtl_u._Object2World * _mtl_i._glesVertex).xyz;
  float3 tmpvar_9;
  tmpvar_9 = (tmpvar_8 - _mtl_u._WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  float4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  float4 tmpvar_11;
  tmpvar_11.xy = _mtl_i._glesMultiTexCoord0.xy;
  tmpvar_11.z = _mtl_i._glesMultiTexCoord1.x;
  tmpvar_11.w = _mtl_i._glesMultiTexCoord1.y;
  float3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = float4(tmpvar_1);
  tmpvar_6.xyz = tmpvar_2;
  half3 tmpvar_13;
  tmpvar_13 = normalize(_mtl_u._WorldSpaceLightPos0.xyz);
  lightDirection_4 = float3(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = dot (tmpvar_12, lightDirection_4);
  NdotL_3 = half(tmpvar_14);
  half tmpvar_15;
  tmpvar_15 = mix ((half)1.0, clamp (floor(
    ((half)1.01 + NdotL_3)
  ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
    -(NdotL_3)
  ), (half)0.0, (half)1.0));
  tmpvar_7 = float(tmpvar_15);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD4 = normalize((_mtl_u._Object2World * tmpvar_10).xyz);
  _mtl_o.xlv_TEXCOORD5 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD7 = normalize((tmpvar_8 - _mtl_u._WorldSpaceCameraPos));
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 263 math, 5 textures, 9 branches
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (cse_2.xyz - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (tmpvar_3, tmpvar_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.xy = gl_MultiTexCoord0.xy;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(tmpvar_5.xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_WorldSpaceLightPos0.xyz));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_2);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor(
    (1.01 + tmpvar_7)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(tmpvar_7)
  ), 0.0, 1.0));
  xlv_TEXCOORD7 = normalize((cse_2.xyz - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD5);
  vec2 uv_6;
  float tmpvar_7;
  if ((abs(cse_5.z) > (1e-08 * abs(cse_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (cse_5.x / cse_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((cse_5.z < 0.0)) {
      if ((cse_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(cse_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(cse_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_5.y)
    )) * (1.5708 + (
      abs(cse_5.y)
     * 
      (-0.214602 + (abs(cse_5.y) * (0.0865667 + (
        abs(cse_5.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(cse_5.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(cse_5.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  cityoverlay_3 = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec2 uv_14;
  float tmpvar_15;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    float tmpvar_16;
    tmpvar_16 = (tmpvar_13.x / tmpvar_13.z);
    tmpvar_15 = (tmpvar_16 * inversesqrt((
      (tmpvar_16 * tmpvar_16)
     + 1.0)));
    tmpvar_15 = (sign(tmpvar_15) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_15)))
     * 
      (1.5708 + (abs(tmpvar_15) * (-0.214602 + (
        abs(tmpvar_15)
       * 
        (0.0865667 + (abs(tmpvar_15) * -0.0310296))
      ))))
    )));
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.14159;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.14159);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * tmpvar_15));
  uv_14.y = (0.31831 * (1.5708 - (
    sign(tmpvar_13.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.5708 + (
      abs(tmpvar_13.y)
     * 
      (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (
        abs(tmpvar_13.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_17;
  tmpvar_17 = ((uv_14 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_13);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((
    mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22)
   >= tmpvar_21.y))));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _CityOverlayDetailScale), tmpvar_20.xy, tmpvar_20.zw);
  citydarkoverlaydetail_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD5);
  vec2 uv_26;
  float tmpvar_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    float tmpvar_28;
    tmpvar_28 = (tmpvar_25.x / tmpvar_25.z);
    tmpvar_27 = (tmpvar_28 * inversesqrt((
      (tmpvar_28 * tmpvar_28)
     + 1.0)));
    tmpvar_27 = (sign(tmpvar_27) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_27)))
     * 
      (1.5708 + (abs(tmpvar_27) * (-0.214602 + (
        abs(tmpvar_27)
       * 
        (0.0865667 + (abs(tmpvar_27) * -0.0310296))
      ))))
    )));
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        tmpvar_27 += 3.14159;
      } else {
        tmpvar_27 = (tmpvar_27 - 3.14159);
      };
    };
  } else {
    tmpvar_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * tmpvar_27));
  uv_26.y = (0.31831 * (1.5708 - (
    sign(tmpvar_25.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_25.y)
    )) * (1.5708 + (
      abs(tmpvar_25.y)
     * 
      (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (
        abs(tmpvar_25.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_29;
  tmpvar_29 = ((uv_26 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_25.xz);
  vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_25.xz);
  vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_25);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.yxz, mix (tmpvar_33, tmpvar_33.zxy, vec3(tmpvar_34)), vec3(float((
    mix (tmpvar_33.x, tmpvar_33.z, tmpvar_34)
   >= tmpvar_33.y))));
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_35.zy) / abs(tmpvar_35.x)) * _CityOverlayDetailScale), tmpvar_32.xy, tmpvar_32.zw);
  citylightoverlaydetail_1.xyz = tmpvar_36.xyz;
  cityoverlay_3.w = (tmpvar_12.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_24.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_36.w * cityoverlay_3.w);
  color_4.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_36.xyz, citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  float atten_37;
  atten_37 = ((float(
    (xlv_TEXCOORD2.z > 0.0)
  ) * texture2D (_LightTexture0, (
    (xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w)
   + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w);
  vec4 c_38;
  vec3 tmpvar_39;
  tmpvar_39 = normalize(_WorldSpaceLightPos0.xyz);
  vec3 tmpvar_40;
  tmpvar_40 = normalize(xlv_TEXCOORD4);
  float tmpvar_41;
  tmpvar_41 = dot (tmpvar_40, tmpvar_39);
  c_38.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_41) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_39 + normalize(xlv_TEXCOORD7)))
    , tmpvar_40), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_37 * 4.0));
  c_38.w = (tmpvar_41 * (atten_37 * 4.0));
  float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_38 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_42)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_42)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_43;
  tmpvar_43 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4.xyz = tmpvar_43.xyz;
  color_4.w = (tmpvar_43.w * _PlanetOpacity);
  gl_FragData[0] = color_4;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 42 math
Keywords { "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c15, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.x, c13, c13
rsq r0.x, r0.x
mov r0.w, c14.x
mul r0.xyz, r0.x, c13
mov r1.xy, v3
mov r1.z, v4.x
dp3 r1.w, -r1, r0
mov r0.xyz, v2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c14.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.z, v0, c6
dp4 r0.w, v0, c7
mul_sat r0.x, -r1.w, c14.y
add r0.y, r0, c14.w
mad o6.x, r0, r0.y, c15
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r2.xyz, -r0, c12
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o1, v1
dp4 o3.w, r0, c11
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mul o7.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
mov o5.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 36 math
Keywords { "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedobfahlccnlmpiijfafbffgkhhdcakgebabaaaaaaoeahaaaaadaaaaaa
cmaaaaaapeaaaaaanmabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaakoaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapabaaaalhaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfceneb
emaafeeffiedepepfceeaafeebeoehefeofeaaklepfdeheooaaaaaaaaiaaaaaa
aiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaaeaaaaaaaiahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
aaagaaaaeaaaabaaiaabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaad
bcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
hccabaaaaeaaaaaagfaaaaadiccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaabaaaaaaegbobaaaabaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaaficcabaaa
acaaaaaadkaabaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
hccabaaaacaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaa
adaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabaaaaaaj
bcaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
agaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaadgaaaaafdcaabaaaabaaaaaa
egbabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaakbabaaaaeaaaaaabaaaaaai
bcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaadgaaaaag
hccabaaaafaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaacambebcaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaa
aaaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaialpdcaaaaaj
iccabaaaaeaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}
SubProgram "gles " {
// Stats: 263 math, 5 textures, 9 branches
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  mediump vec3 lightDir_61;
  lightDir_61 = tmpvar_56;
  mediump vec3 viewDir_62;
  viewDir_62 = xlv_TEXCOORD7;
  mediump vec3 normal_63;
  normal_63 = xlv_TEXCOORD4;
  mediump float atten_64;
  atten_64 = ((float(
    (xlv_TEXCOORD2.z > 0.0)
  ) * tmpvar_57.w) * tmpvar_60.w);
  mediump vec4 c_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(lightDir_61);
  lightDir_61 = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(viewDir_62);
  viewDir_62 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = normalize(normal_63);
  normal_63 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_66);
  highp float tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = clamp (dot (normalize(
    (tmpvar_66 + tmpvar_67)
  ), tmpvar_68), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_69) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_70, _SpecularPower) * _SpecularColor.w)
  )) * (atten_64 * 4.0));
  c_65.xyz = tmpvar_72;
  c_65.w = (tmpvar_69 * (atten_64 * 4.0));
  highp vec3 tmpvar_73;
  tmpvar_73 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_74;
  lightDir_74 = tmpvar_73;
  mediump vec3 normal_75;
  normal_75 = xlv_TEXCOORD4;
  mediump float tmpvar_76;
  tmpvar_76 = dot (normal_75, lightDir_74);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_65 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_76)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_76)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_77.xyz;
  highp float tmpvar_78;
  tmpvar_78 = (tmpvar_77.w * _PlanetOpacity);
  color_5.w = tmpvar_78;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 263 math, 5 textures, 9 branches
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  mediump vec3 lightDir_61;
  lightDir_61 = tmpvar_56;
  mediump vec3 viewDir_62;
  viewDir_62 = xlv_TEXCOORD7;
  mediump vec3 normal_63;
  normal_63 = xlv_TEXCOORD4;
  mediump float atten_64;
  atten_64 = ((float(
    (xlv_TEXCOORD2.z > 0.0)
  ) * tmpvar_57.w) * tmpvar_60.w);
  mediump vec4 c_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(lightDir_61);
  lightDir_61 = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(viewDir_62);
  viewDir_62 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = normalize(normal_63);
  normal_63 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_66);
  highp float tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = clamp (dot (normalize(
    (tmpvar_66 + tmpvar_67)
  ), tmpvar_68), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_69) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_70, _SpecularPower) * _SpecularColor.w)
  )) * (atten_64 * 4.0));
  c_65.xyz = tmpvar_72;
  c_65.w = (tmpvar_69 * (atten_64 * 4.0));
  highp vec3 tmpvar_73;
  tmpvar_73 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_74;
  lightDir_74 = tmpvar_73;
  mediump vec3 normal_75;
  normal_75 = xlv_TEXCOORD4;
  mediump float tmpvar_76;
  tmpvar_76 = dot (normal_75, lightDir_74);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_65 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_76)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_76)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_77.xyz;
  highp float tmpvar_78;
  tmpvar_78 = (tmpvar_77.w * _PlanetOpacity);
  color_5.w = tmpvar_78;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 263 math, 5 textures, 9 branches
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureGrad (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_57 = texture (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture (_LightTextureB0, vec2(tmpvar_59));
  mediump vec3 lightDir_61;
  lightDir_61 = tmpvar_56;
  mediump vec3 viewDir_62;
  viewDir_62 = xlv_TEXCOORD7;
  mediump vec3 normal_63;
  normal_63 = xlv_TEXCOORD4;
  mediump float atten_64;
  atten_64 = ((float(
    (xlv_TEXCOORD2.z > 0.0)
  ) * tmpvar_57.w) * tmpvar_60.w);
  mediump vec4 c_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(lightDir_61);
  lightDir_61 = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(viewDir_62);
  viewDir_62 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = normalize(normal_63);
  normal_63 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_66);
  highp float tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = clamp (dot (normalize(
    (tmpvar_66 + tmpvar_67)
  ), tmpvar_68), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_69) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_70, _SpecularPower) * _SpecularColor.w)
  )) * (atten_64 * 4.0));
  c_65.xyz = tmpvar_72;
  c_65.w = (tmpvar_69 * (atten_64 * 4.0));
  highp vec3 tmpvar_73;
  tmpvar_73 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_74;
  lightDir_74 = tmpvar_73;
  mediump vec3 normal_75;
  normal_75 = xlv_TEXCOORD4;
  mediump float tmpvar_76;
  tmpvar_76 = dot (normal_75, lightDir_74);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_65 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_76)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_76)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_77.xyz;
  highp float tmpvar_78;
  tmpvar_78 = (tmpvar_77.w * _PlanetOpacity);
  color_5.w = tmpvar_78;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 22 math
Keywords { "SPOT" "SHADOWS_OFF" }
Bind "vertex" ATTR0
Bind "color" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 224
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesColor [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = half4(_mtl_i._glesColor);
  float3 tmpvar_2;
  tmpvar_2 = normalize(_mtl_i._glesNormal);
  half NdotL_3;
  float4 tmpvar_4;
  float4 tmpvar_5;
  float tmpvar_6;
  float4 cse_7;
  cse_7 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_8;
  tmpvar_8 = (cse_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_5.w = sqrt(dot (tmpvar_8, tmpvar_8));
  float4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = tmpvar_2;
  float4 tmpvar_10;
  tmpvar_10.xy = _mtl_i._glesMultiTexCoord0.xy;
  tmpvar_10.z = _mtl_i._glesMultiTexCoord1.x;
  tmpvar_10.w = _mtl_i._glesMultiTexCoord1.y;
  float3 tmpvar_11;
  tmpvar_11 = -(tmpvar_10.xyz);
  tmpvar_4 = float4(tmpvar_1);
  tmpvar_5.xyz = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = dot (tmpvar_11, normalize(_mtl_u._WorldSpaceLightPos0.xyz));
  NdotL_3 = half(tmpvar_12);
  half tmpvar_13;
  tmpvar_13 = mix ((half)1.0, clamp (floor(
    ((half)1.01 + NdotL_3)
  ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
    -(NdotL_3)
  ), (half)0.0, (half)1.0));
  tmpvar_6 = float(tmpvar_13);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._LightMatrix0 * cse_7);
  _mtl_o.xlv_TEXCOORD4 = normalize((_mtl_u._Object2World * tmpvar_9).xyz);
  _mtl_o.xlv_TEXCOORD5 = tmpvar_11;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD7 = normalize((cse_7.xyz - _mtl_u._WorldSpaceCameraPos));
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 258 math, 5 textures, 9 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (cse_2.xyz - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (tmpvar_3, tmpvar_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.xy = gl_MultiTexCoord0.xy;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(tmpvar_5.xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_WorldSpaceLightPos0.xyz));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_2).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor(
    (1.01 + tmpvar_7)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(tmpvar_7)
  ), 0.0, 1.0));
  xlv_TEXCOORD7 = normalize((cse_2.xyz - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD5);
  vec2 uv_6;
  float tmpvar_7;
  if ((abs(cse_5.z) > (1e-08 * abs(cse_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (cse_5.x / cse_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((cse_5.z < 0.0)) {
      if ((cse_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(cse_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(cse_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_5.y)
    )) * (1.5708 + (
      abs(cse_5.y)
     * 
      (-0.214602 + (abs(cse_5.y) * (0.0865667 + (
        abs(cse_5.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(cse_5.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(cse_5.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  cityoverlay_3 = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec2 uv_14;
  float tmpvar_15;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    float tmpvar_16;
    tmpvar_16 = (tmpvar_13.x / tmpvar_13.z);
    tmpvar_15 = (tmpvar_16 * inversesqrt((
      (tmpvar_16 * tmpvar_16)
     + 1.0)));
    tmpvar_15 = (sign(tmpvar_15) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_15)))
     * 
      (1.5708 + (abs(tmpvar_15) * (-0.214602 + (
        abs(tmpvar_15)
       * 
        (0.0865667 + (abs(tmpvar_15) * -0.0310296))
      ))))
    )));
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.14159;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.14159);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * tmpvar_15));
  uv_14.y = (0.31831 * (1.5708 - (
    sign(tmpvar_13.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.5708 + (
      abs(tmpvar_13.y)
     * 
      (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (
        abs(tmpvar_13.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_17;
  tmpvar_17 = ((uv_14 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_13);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((
    mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22)
   >= tmpvar_21.y))));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _CityOverlayDetailScale), tmpvar_20.xy, tmpvar_20.zw);
  citydarkoverlaydetail_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD5);
  vec2 uv_26;
  float tmpvar_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    float tmpvar_28;
    tmpvar_28 = (tmpvar_25.x / tmpvar_25.z);
    tmpvar_27 = (tmpvar_28 * inversesqrt((
      (tmpvar_28 * tmpvar_28)
     + 1.0)));
    tmpvar_27 = (sign(tmpvar_27) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_27)))
     * 
      (1.5708 + (abs(tmpvar_27) * (-0.214602 + (
        abs(tmpvar_27)
       * 
        (0.0865667 + (abs(tmpvar_27) * -0.0310296))
      ))))
    )));
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        tmpvar_27 += 3.14159;
      } else {
        tmpvar_27 = (tmpvar_27 - 3.14159);
      };
    };
  } else {
    tmpvar_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * tmpvar_27));
  uv_26.y = (0.31831 * (1.5708 - (
    sign(tmpvar_25.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_25.y)
    )) * (1.5708 + (
      abs(tmpvar_25.y)
     * 
      (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (
        abs(tmpvar_25.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_29;
  tmpvar_29 = ((uv_26 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_25.xz);
  vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_25.xz);
  vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_25);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.yxz, mix (tmpvar_33, tmpvar_33.zxy, vec3(tmpvar_34)), vec3(float((
    mix (tmpvar_33.x, tmpvar_33.z, tmpvar_34)
   >= tmpvar_33.y))));
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_35.zy) / abs(tmpvar_35.x)) * _CityOverlayDetailScale), tmpvar_32.xy, tmpvar_32.zw);
  citylightoverlaydetail_1.xyz = tmpvar_36.xyz;
  cityoverlay_3.w = (tmpvar_12.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_24.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_36.w * cityoverlay_3.w);
  color_4.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_36.xyz, citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  float atten_37;
  atten_37 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2))).w * textureCube (_LightTexture0, xlv_TEXCOORD2).w);
  vec4 c_38;
  vec3 tmpvar_39;
  tmpvar_39 = normalize(_WorldSpaceLightPos0.xyz);
  vec3 tmpvar_40;
  tmpvar_40 = normalize(xlv_TEXCOORD4);
  float tmpvar_41;
  tmpvar_41 = dot (tmpvar_40, tmpvar_39);
  c_38.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_41) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_39 + normalize(xlv_TEXCOORD7)))
    , tmpvar_40), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_37 * 4.0));
  c_38.w = (tmpvar_41 * (atten_37 * 4.0));
  float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_38 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_42)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_42)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_43;
  tmpvar_43 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4.xyz = tmpvar_43.xyz;
  color_4.w = (tmpvar_43.w * _PlanetOpacity);
  gl_FragData[0] = color_4;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 41 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c15, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.x, c13, c13
rsq r0.x, r0.x
mov r0.w, c14.x
mul r0.xyz, r0.x, c13
mov r1.xy, v3
mov r1.z, v4.x
dp3 r1.w, -r1, r0
mov r0.xyz, v2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c14.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c14.y
add r0.y, r0, c14.w
mad o6.x, r0, r0.y, c15
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r2.xyz, -r0, c12
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mul o7.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
mov o5.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 36 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedoaehlmoahhchelnbdgpnlmacnfbcafifabaaaaaaoeahaaaaadaaaaaa
cmaaaaaapeaaaaaanmabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaakoaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapabaaaalhaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfceneb
emaafeeffiedepepfceeaafeebeoehefeofeaaklepfdeheooaaaaaaaaiaaaaaa
aiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
aaagaaaaeaaaabaaiaabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaad
bcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaad
iccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaabaaaaaaegbobaaaabaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaaficcabaaa
acaaaaaadkaabaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
hccabaaaacaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaa
adaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
baaaaaajbcaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaadgaaaaafdcaabaaa
abaaaaaaegbabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaakbabaaaaeaaaaaa
baaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafccaabaaaaaaaaaaabkaabaaa
aaaaaaaaaaaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaialp
dcaaaaajiccabaaaadaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpdiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 258 math, 5 textures, 9 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp vec4 tmpvar_59;
  tmpvar_59 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  mediump vec3 lightDir_60;
  lightDir_60 = tmpvar_56;
  mediump vec3 viewDir_61;
  viewDir_61 = xlv_TEXCOORD7;
  mediump vec3 normal_62;
  normal_62 = xlv_TEXCOORD4;
  mediump float atten_63;
  atten_63 = (tmpvar_58.w * tmpvar_59.w);
  mediump vec4 c_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = normalize(lightDir_60);
  lightDir_60 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(viewDir_61);
  viewDir_61 = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(normal_62);
  normal_62 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_65);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (dot (normalize(
    (tmpvar_65 + tmpvar_66)
  ), tmpvar_67), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_68) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_69, _SpecularPower) * _SpecularColor.w)
  )) * (atten_63 * 4.0));
  c_64.xyz = tmpvar_71;
  c_64.w = (tmpvar_68 * (atten_63 * 4.0));
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_73;
  lightDir_73 = tmpvar_72;
  mediump vec3 normal_74;
  normal_74 = xlv_TEXCOORD4;
  mediump float tmpvar_75;
  tmpvar_75 = dot (normal_74, lightDir_73);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_64 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_75)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_75)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_76;
  tmpvar_76 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_76.xyz;
  highp float tmpvar_77;
  tmpvar_77 = (tmpvar_76.w * _PlanetOpacity);
  color_5.w = tmpvar_77;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 258 math, 5 textures, 9 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp vec4 tmpvar_59;
  tmpvar_59 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  mediump vec3 lightDir_60;
  lightDir_60 = tmpvar_56;
  mediump vec3 viewDir_61;
  viewDir_61 = xlv_TEXCOORD7;
  mediump vec3 normal_62;
  normal_62 = xlv_TEXCOORD4;
  mediump float atten_63;
  atten_63 = (tmpvar_58.w * tmpvar_59.w);
  mediump vec4 c_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = normalize(lightDir_60);
  lightDir_60 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(viewDir_61);
  viewDir_61 = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(normal_62);
  normal_62 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_65);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (dot (normalize(
    (tmpvar_65 + tmpvar_66)
  ), tmpvar_67), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_68) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_69, _SpecularPower) * _SpecularColor.w)
  )) * (atten_63 * 4.0));
  c_64.xyz = tmpvar_71;
  c_64.w = (tmpvar_68 * (atten_63 * 4.0));
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_73;
  lightDir_73 = tmpvar_72;
  mediump vec3 normal_74;
  normal_74 = xlv_TEXCOORD4;
  mediump float tmpvar_75;
  tmpvar_75 = dot (normal_74, lightDir_73);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_64 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_75)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_75)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_76;
  tmpvar_76 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_76.xyz;
  highp float tmpvar_77;
  tmpvar_77 = (tmpvar_76.w * _PlanetOpacity);
  color_5.w = tmpvar_77;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 258 math, 5 textures, 9 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec4 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureGrad (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture (_LightTextureB0, vec2(tmpvar_57));
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture (_LightTexture0, xlv_TEXCOORD2);
  mediump vec3 lightDir_60;
  lightDir_60 = tmpvar_56;
  mediump vec3 viewDir_61;
  viewDir_61 = xlv_TEXCOORD7;
  mediump vec3 normal_62;
  normal_62 = xlv_TEXCOORD4;
  mediump float atten_63;
  atten_63 = (tmpvar_58.w * tmpvar_59.w);
  mediump vec4 c_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = normalize(lightDir_60);
  lightDir_60 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(viewDir_61);
  viewDir_61 = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(normal_62);
  normal_62 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_65);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (dot (normalize(
    (tmpvar_65 + tmpvar_66)
  ), tmpvar_67), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_68) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_69, _SpecularPower) * _SpecularColor.w)
  )) * (atten_63 * 4.0));
  c_64.xyz = tmpvar_71;
  c_64.w = (tmpvar_68 * (atten_63 * 4.0));
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_73;
  lightDir_73 = tmpvar_72;
  mediump vec3 normal_74;
  normal_74 = xlv_TEXCOORD4;
  mediump float tmpvar_75;
  tmpvar_75 = dot (normal_74, lightDir_73);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_64 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_75)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_75)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_76;
  tmpvar_76 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_76.xyz;
  highp float tmpvar_77;
  tmpvar_77 = (tmpvar_76.w * _PlanetOpacity);
  color_5.w = tmpvar_77;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 22 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" ATTR0
Bind "color" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 224
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesColor [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = half4(_mtl_i._glesColor);
  float3 tmpvar_2;
  tmpvar_2 = normalize(_mtl_i._glesNormal);
  half NdotL_3;
  float4 tmpvar_4;
  float4 tmpvar_5;
  float tmpvar_6;
  float4 cse_7;
  cse_7 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_8;
  tmpvar_8 = (cse_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_5.w = sqrt(dot (tmpvar_8, tmpvar_8));
  float4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = tmpvar_2;
  float4 tmpvar_10;
  tmpvar_10.xy = _mtl_i._glesMultiTexCoord0.xy;
  tmpvar_10.z = _mtl_i._glesMultiTexCoord1.x;
  tmpvar_10.w = _mtl_i._glesMultiTexCoord1.y;
  float3 tmpvar_11;
  tmpvar_11 = -(tmpvar_10.xyz);
  tmpvar_4 = float4(tmpvar_1);
  tmpvar_5.xyz = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = dot (tmpvar_11, normalize(_mtl_u._WorldSpaceLightPos0.xyz));
  NdotL_3 = half(tmpvar_12);
  half tmpvar_13;
  tmpvar_13 = mix ((half)1.0, clamp (floor(
    ((half)1.01 + NdotL_3)
  ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
    -(NdotL_3)
  ), (half)0.0, (half)1.0));
  tmpvar_6 = float(tmpvar_13);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._LightMatrix0 * cse_7).xyz;
  _mtl_o.xlv_TEXCOORD4 = normalize((_mtl_u._Object2World * tmpvar_9).xyz);
  _mtl_o.xlv_TEXCOORD5 = tmpvar_11;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD7 = normalize((cse_7.xyz - _mtl_u._WorldSpaceCameraPos));
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 256 math, 4 textures, 9 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec2 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (cse_2.xyz - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (tmpvar_3, tmpvar_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.xy = gl_MultiTexCoord0.xy;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(tmpvar_5.xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_WorldSpaceLightPos0.xyz));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_2).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor(
    (1.01 + tmpvar_7)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(tmpvar_7)
  ), 0.0, 1.0));
  xlv_TEXCOORD7 = normalize((cse_2.xyz - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec4 xlv_TEXCOORD0;
varying vec2 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD5);
  vec2 uv_6;
  float tmpvar_7;
  if ((abs(cse_5.z) > (1e-08 * abs(cse_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (cse_5.x / cse_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((cse_5.z < 0.0)) {
      if ((cse_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(cse_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(cse_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_5.y)
    )) * (1.5708 + (
      abs(cse_5.y)
     * 
      (-0.214602 + (abs(cse_5.y) * (0.0865667 + (
        abs(cse_5.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(cse_5.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(cse_5.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  cityoverlay_3 = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec2 uv_14;
  float tmpvar_15;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    float tmpvar_16;
    tmpvar_16 = (tmpvar_13.x / tmpvar_13.z);
    tmpvar_15 = (tmpvar_16 * inversesqrt((
      (tmpvar_16 * tmpvar_16)
     + 1.0)));
    tmpvar_15 = (sign(tmpvar_15) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_15)))
     * 
      (1.5708 + (abs(tmpvar_15) * (-0.214602 + (
        abs(tmpvar_15)
       * 
        (0.0865667 + (abs(tmpvar_15) * -0.0310296))
      ))))
    )));
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.14159;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.14159);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * tmpvar_15));
  uv_14.y = (0.31831 * (1.5708 - (
    sign(tmpvar_13.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.5708 + (
      abs(tmpvar_13.y)
     * 
      (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (
        abs(tmpvar_13.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_17;
  tmpvar_17 = ((uv_14 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_13);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((
    mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22)
   >= tmpvar_21.y))));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _CityOverlayDetailScale), tmpvar_20.xy, tmpvar_20.zw);
  citydarkoverlaydetail_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD5);
  vec2 uv_26;
  float tmpvar_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    float tmpvar_28;
    tmpvar_28 = (tmpvar_25.x / tmpvar_25.z);
    tmpvar_27 = (tmpvar_28 * inversesqrt((
      (tmpvar_28 * tmpvar_28)
     + 1.0)));
    tmpvar_27 = (sign(tmpvar_27) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_27)))
     * 
      (1.5708 + (abs(tmpvar_27) * (-0.214602 + (
        abs(tmpvar_27)
       * 
        (0.0865667 + (abs(tmpvar_27) * -0.0310296))
      ))))
    )));
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        tmpvar_27 += 3.14159;
      } else {
        tmpvar_27 = (tmpvar_27 - 3.14159);
      };
    };
  } else {
    tmpvar_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * tmpvar_27));
  uv_26.y = (0.31831 * (1.5708 - (
    sign(tmpvar_25.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_25.y)
    )) * (1.5708 + (
      abs(tmpvar_25.y)
     * 
      (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (
        abs(tmpvar_25.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_29;
  tmpvar_29 = ((uv_26 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_25.xz);
  vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_25.xz);
  vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_25);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.yxz, mix (tmpvar_33, tmpvar_33.zxy, vec3(tmpvar_34)), vec3(float((
    mix (tmpvar_33.x, tmpvar_33.z, tmpvar_34)
   >= tmpvar_33.y))));
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_35.zy) / abs(tmpvar_35.x)) * _CityOverlayDetailScale), tmpvar_32.xy, tmpvar_32.zw);
  citylightoverlaydetail_1.xyz = tmpvar_36.xyz;
  cityoverlay_3.w = (tmpvar_12.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_24.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_36.w * cityoverlay_3.w);
  color_4.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_36.xyz, citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  float atten_37;
  atten_37 = texture2D (_LightTexture0, xlv_TEXCOORD2).w;
  vec4 c_38;
  vec3 tmpvar_39;
  tmpvar_39 = normalize(_WorldSpaceLightPos0.xyz);
  vec3 tmpvar_40;
  tmpvar_40 = normalize(xlv_TEXCOORD4);
  float tmpvar_41;
  tmpvar_41 = dot (tmpvar_40, tmpvar_39);
  c_38.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_41) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_39 + normalize(xlv_TEXCOORD7)))
    , tmpvar_40), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_37 * 4.0));
  c_38.w = (tmpvar_41 * (atten_37 * 4.0));
  float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_38 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_42)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_42)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_43;
  tmpvar_43 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4.xyz = tmpvar_43.xyz;
  color_4.w = (tmpvar_43.w * _PlanetOpacity);
  gl_FragData[0] = color_4;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 40 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c14, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c15, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.x, c13, c13
rsq r0.x, r0.x
mov r0.w, c14.x
mul r0.xyz, r0.x, c13
mov r1.xy, v3
mov r1.z, v4.x
dp3 r1.w, -r1, r0
mov r0.xyz, v2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c14.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
mul_sat r0.x, -r1.w, c14.y
add r0.y, r0, c14.w
mad o6.x, r0, r0.y, c15
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r2.xyz, -r0, c12
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o1, v1
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mul o7.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
mov o5.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 36 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecednfdjhaoehkpoenbijnldfghlpoblmaogabaaaaaaoeahaaaaadaaaaaa
cmaaaaaapeaaaaaanmabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaakoaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapabaaaalhaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfceneb
emaafeeffiedepepfceeaafeebeoehefeofeaaklepfdeheooaaaaaaaaiaaaaaa
aiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaadaaaaaaaealaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
aaagaaaaeaaaabaaiaabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaad
bcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaa
abaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaad
eccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaa
gfaaaaadhccabaaaagaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaabaaaaaaegbobaaaabaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaaficcabaaa
acaaaaaadkaabaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaaf
hccabaaaacaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaaegiacaaa
aaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaabaaaaaa
agaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaa
aaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaakdccabaaa
adaaaaaaegiacaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaabaaaaaaaaaaa
baaaaaajbcaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaadgaaaaafdcaabaaa
abaaaaaaegbabaaaadaaaaaadgaaaaafecaabaaaabaaaaaaakbabaaaaeaaaaaa
baaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaaegacbaaaaaaaaaaa
dgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaabaaaaaaaaaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafccaabaaaaaaaaaaabkaabaaa
aaaaaaaaaaaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaialp
dcaaaaajeccabaaaadaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpdiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
acaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 256 math, 4 textures, 9 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec3 lightDirection_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  highp vec4 cse_9;
  cse_9 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_10;
  tmpvar_10 = (cse_9.xyz - _WorldSpaceCameraPos);
  tmpvar_7.w = sqrt(dot (tmpvar_10, tmpvar_10));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec4 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord0.xy;
  tmpvar_12.z = tmpvar_3.x;
  tmpvar_12.w = tmpvar_3.y;
  highp vec3 tmpvar_13;
  tmpvar_13 = -(tmpvar_12.xyz);
  tmpvar_6 = tmpvar_1;
  tmpvar_7.xyz = tmpvar_2;
  lowp vec3 tmpvar_14;
  tmpvar_14 = normalize(_WorldSpaceLightPos0.xyz);
  lightDirection_5 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_13, lightDirection_5);
  NdotL_4 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_8 = tmpvar_16;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_9).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_11).xyz);
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = normalize((cse_9.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_LightTexture0, xlv_TEXCOORD2);
  mediump vec3 lightDir_58;
  lightDir_58 = tmpvar_56;
  mediump vec3 viewDir_59;
  viewDir_59 = xlv_TEXCOORD7;
  mediump vec3 normal_60;
  normal_60 = xlv_TEXCOORD4;
  mediump float atten_61;
  atten_61 = tmpvar_57.w;
  mediump vec4 c_62;
  mediump vec3 tmpvar_63;
  tmpvar_63 = normalize(lightDir_58);
  lightDir_58 = tmpvar_63;
  mediump vec3 tmpvar_64;
  tmpvar_64 = normalize(viewDir_59);
  viewDir_59 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = normalize(normal_60);
  normal_60 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_63);
  highp float tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp (dot (normalize(
    (tmpvar_63 + tmpvar_64)
  ), tmpvar_65), 0.0, 1.0);
  tmpvar_67 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_66) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_67, _SpecularPower) * _SpecularColor.w)
  )) * (atten_61 * 4.0));
  c_62.xyz = tmpvar_69;
  c_62.w = (tmpvar_66 * (atten_61 * 4.0));
  lowp vec3 tmpvar_70;
  tmpvar_70 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_71;
  lightDir_71 = tmpvar_70;
  mediump vec3 normal_72;
  normal_72 = xlv_TEXCOORD4;
  mediump float tmpvar_73;
  tmpvar_73 = dot (normal_72, lightDir_71);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_62 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_73)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_73)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_74.xyz;
  highp float tmpvar_75;
  tmpvar_75 = (tmpvar_74.w * _PlanetOpacity);
  color_5.w = tmpvar_75;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 256 math, 4 textures, 9 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec3 lightDirection_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  highp vec4 cse_9;
  cse_9 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_10;
  tmpvar_10 = (cse_9.xyz - _WorldSpaceCameraPos);
  tmpvar_7.w = sqrt(dot (tmpvar_10, tmpvar_10));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec4 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord0.xy;
  tmpvar_12.z = tmpvar_3.x;
  tmpvar_12.w = tmpvar_3.y;
  highp vec3 tmpvar_13;
  tmpvar_13 = -(tmpvar_12.xyz);
  tmpvar_6 = tmpvar_1;
  tmpvar_7.xyz = tmpvar_2;
  lowp vec3 tmpvar_14;
  tmpvar_14 = normalize(_WorldSpaceLightPos0.xyz);
  lightDirection_5 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_13, lightDirection_5);
  NdotL_4 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_8 = tmpvar_16;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_9).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_11).xyz);
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = normalize((cse_9.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_LightTexture0, xlv_TEXCOORD2);
  mediump vec3 lightDir_58;
  lightDir_58 = tmpvar_56;
  mediump vec3 viewDir_59;
  viewDir_59 = xlv_TEXCOORD7;
  mediump vec3 normal_60;
  normal_60 = xlv_TEXCOORD4;
  mediump float atten_61;
  atten_61 = tmpvar_57.w;
  mediump vec4 c_62;
  mediump vec3 tmpvar_63;
  tmpvar_63 = normalize(lightDir_58);
  lightDir_58 = tmpvar_63;
  mediump vec3 tmpvar_64;
  tmpvar_64 = normalize(viewDir_59);
  viewDir_59 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = normalize(normal_60);
  normal_60 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_63);
  highp float tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp (dot (normalize(
    (tmpvar_63 + tmpvar_64)
  ), tmpvar_65), 0.0, 1.0);
  tmpvar_67 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_66) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_67, _SpecularPower) * _SpecularColor.w)
  )) * (atten_61 * 4.0));
  c_62.xyz = tmpvar_69;
  c_62.w = (tmpvar_66 * (atten_61 * 4.0));
  lowp vec3 tmpvar_70;
  tmpvar_70 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_71;
  lightDir_71 = tmpvar_70;
  mediump vec3 normal_72;
  normal_72 = xlv_TEXCOORD4;
  mediump float tmpvar_73;
  tmpvar_73 = dot (normal_72, lightDir_71);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_62 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_73)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_73)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_74.xyz;
  highp float tmpvar_75;
  tmpvar_75 = (tmpvar_74.w * _PlanetOpacity);
  color_5.w = tmpvar_75;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 256 math, 4 textures, 9 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec3 lightDirection_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  highp vec4 cse_9;
  cse_9 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_10;
  tmpvar_10 = (cse_9.xyz - _WorldSpaceCameraPos);
  tmpvar_7.w = sqrt(dot (tmpvar_10, tmpvar_10));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec4 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord0.xy;
  tmpvar_12.z = tmpvar_3.x;
  tmpvar_12.w = tmpvar_3.y;
  highp vec3 tmpvar_13;
  tmpvar_13 = -(tmpvar_12.xyz);
  tmpvar_6 = tmpvar_1;
  tmpvar_7.xyz = tmpvar_2;
  lowp vec3 tmpvar_14;
  tmpvar_14 = normalize(_WorldSpaceLightPos0.xyz);
  lightDirection_5 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_13, lightDirection_5);
  NdotL_4 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_8 = tmpvar_16;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_9).xy;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_11).xyz);
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = normalize((cse_9.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec4 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureGrad (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture (_LightTexture0, xlv_TEXCOORD2);
  mediump vec3 lightDir_58;
  lightDir_58 = tmpvar_56;
  mediump vec3 viewDir_59;
  viewDir_59 = xlv_TEXCOORD7;
  mediump vec3 normal_60;
  normal_60 = xlv_TEXCOORD4;
  mediump float atten_61;
  atten_61 = tmpvar_57.w;
  mediump vec4 c_62;
  mediump vec3 tmpvar_63;
  tmpvar_63 = normalize(lightDir_58);
  lightDir_58 = tmpvar_63;
  mediump vec3 tmpvar_64;
  tmpvar_64 = normalize(viewDir_59);
  viewDir_59 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = normalize(normal_60);
  normal_60 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_63);
  highp float tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp (dot (normalize(
    (tmpvar_63 + tmpvar_64)
  ), tmpvar_65), 0.0, 1.0);
  tmpvar_67 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_66) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_67, _SpecularPower) * _SpecularColor.w)
  )) * (atten_61 * 4.0));
  c_62.xyz = tmpvar_69;
  c_62.w = (tmpvar_66 * (atten_61 * 4.0));
  lowp vec3 tmpvar_70;
  tmpvar_70 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_71;
  lightDir_71 = tmpvar_70;
  mediump vec3 normal_72;
  normal_72 = xlv_TEXCOORD4;
  mediump float tmpvar_73;
  tmpvar_73 = dot (normal_72, lightDir_71);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_62 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_73)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_73)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_74.xyz;
  highp float tmpvar_75;
  tmpvar_75 = (tmpvar_74.w * _PlanetOpacity);
  color_5.w = tmpvar_75;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 22 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" ATTR0
Bind "color" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 224
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesColor [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD1;
  float2 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = half4(_mtl_i._glesColor);
  float3 tmpvar_2;
  tmpvar_2 = normalize(_mtl_i._glesNormal);
  half NdotL_3;
  float3 lightDirection_4;
  float4 tmpvar_5;
  float4 tmpvar_6;
  float tmpvar_7;
  float4 cse_8;
  cse_8 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  float4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  float4 tmpvar_11;
  tmpvar_11.xy = _mtl_i._glesMultiTexCoord0.xy;
  tmpvar_11.z = _mtl_i._glesMultiTexCoord1.x;
  tmpvar_11.w = _mtl_i._glesMultiTexCoord1.y;
  float3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = float4(tmpvar_1);
  tmpvar_6.xyz = tmpvar_2;
  half3 tmpvar_13;
  tmpvar_13 = normalize(_mtl_u._WorldSpaceLightPos0.xyz);
  lightDirection_4 = float3(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = dot (tmpvar_12, lightDirection_4);
  NdotL_3 = half(tmpvar_14);
  half tmpvar_15;
  tmpvar_15 = mix ((half)1.0, clamp (floor(
    ((half)1.01 + NdotL_3)
  ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
    -(NdotL_3)
  ), (half)0.0, (half)1.0));
  tmpvar_7 = float(tmpvar_15);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._LightMatrix0 * cse_8).xy;
  _mtl_o.xlv_TEXCOORD4 = normalize((_mtl_u._Object2World * tmpvar_10).xyz);
  _mtl_o.xlv_TEXCOORD5 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD7 = normalize((cse_8.xyz - _mtl_u._WorldSpaceCameraPos));
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 267 math, 6 textures, 10 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (cse_2.xyz - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (tmpvar_3, tmpvar_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.xy = gl_MultiTexCoord0.xy;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(tmpvar_5.xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_WorldSpaceLightPos0.xyz));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_2);
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_2);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor(
    (1.01 + tmpvar_7)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(tmpvar_7)
  ), 0.0, 1.0));
  xlv_TEXCOORD7 = normalize((cse_2.xyz - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD5);
  vec2 uv_6;
  float tmpvar_7;
  if ((abs(cse_5.z) > (1e-08 * abs(cse_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (cse_5.x / cse_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((cse_5.z < 0.0)) {
      if ((cse_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(cse_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(cse_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_5.y)
    )) * (1.5708 + (
      abs(cse_5.y)
     * 
      (-0.214602 + (abs(cse_5.y) * (0.0865667 + (
        abs(cse_5.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(cse_5.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(cse_5.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  cityoverlay_3 = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec2 uv_14;
  float tmpvar_15;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    float tmpvar_16;
    tmpvar_16 = (tmpvar_13.x / tmpvar_13.z);
    tmpvar_15 = (tmpvar_16 * inversesqrt((
      (tmpvar_16 * tmpvar_16)
     + 1.0)));
    tmpvar_15 = (sign(tmpvar_15) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_15)))
     * 
      (1.5708 + (abs(tmpvar_15) * (-0.214602 + (
        abs(tmpvar_15)
       * 
        (0.0865667 + (abs(tmpvar_15) * -0.0310296))
      ))))
    )));
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.14159;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.14159);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * tmpvar_15));
  uv_14.y = (0.31831 * (1.5708 - (
    sign(tmpvar_13.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.5708 + (
      abs(tmpvar_13.y)
     * 
      (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (
        abs(tmpvar_13.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_17;
  tmpvar_17 = ((uv_14 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_13);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((
    mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22)
   >= tmpvar_21.y))));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _CityOverlayDetailScale), tmpvar_20.xy, tmpvar_20.zw);
  citydarkoverlaydetail_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD5);
  vec2 uv_26;
  float tmpvar_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    float tmpvar_28;
    tmpvar_28 = (tmpvar_25.x / tmpvar_25.z);
    tmpvar_27 = (tmpvar_28 * inversesqrt((
      (tmpvar_28 * tmpvar_28)
     + 1.0)));
    tmpvar_27 = (sign(tmpvar_27) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_27)))
     * 
      (1.5708 + (abs(tmpvar_27) * (-0.214602 + (
        abs(tmpvar_27)
       * 
        (0.0865667 + (abs(tmpvar_27) * -0.0310296))
      ))))
    )));
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        tmpvar_27 += 3.14159;
      } else {
        tmpvar_27 = (tmpvar_27 - 3.14159);
      };
    };
  } else {
    tmpvar_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * tmpvar_27));
  uv_26.y = (0.31831 * (1.5708 - (
    sign(tmpvar_25.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_25.y)
    )) * (1.5708 + (
      abs(tmpvar_25.y)
     * 
      (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (
        abs(tmpvar_25.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_29;
  tmpvar_29 = ((uv_26 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_25.xz);
  vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_25.xz);
  vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_25);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.yxz, mix (tmpvar_33, tmpvar_33.zxy, vec3(tmpvar_34)), vec3(float((
    mix (tmpvar_33.x, tmpvar_33.z, tmpvar_34)
   >= tmpvar_33.y))));
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_35.zy) / abs(tmpvar_35.x)) * _CityOverlayDetailScale), tmpvar_32.xy, tmpvar_32.zw);
  citylightoverlaydetail_1.xyz = tmpvar_36.xyz;
  cityoverlay_3.w = (tmpvar_12.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_24.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_36.w * cityoverlay_3.w);
  color_4.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_36.xyz, citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_38;
  tmpvar_38 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 tmpvar_39;
  tmpvar_39 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  float tmpvar_40;
  if ((tmpvar_39.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_40 = _LightShadowData.x;
  } else {
    tmpvar_40 = 1.0;
  };
  float atten_41;
  atten_41 = (((
    float((xlv_TEXCOORD2.z > 0.0))
   * tmpvar_37.w) * tmpvar_38.w) * tmpvar_40);
  vec4 c_42;
  vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0.xyz);
  vec3 tmpvar_44;
  tmpvar_44 = normalize(xlv_TEXCOORD4);
  float tmpvar_45;
  tmpvar_45 = dot (tmpvar_44, tmpvar_43);
  c_42.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_45) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_43 + normalize(xlv_TEXCOORD7)))
    , tmpvar_44), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_41 * 4.0));
  c_42.w = (tmpvar_45 * (atten_41 * 4.0));
  float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_42 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_46)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_46)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_47;
  tmpvar_47 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4.xyz = tmpvar_47.xyz;
  color_4.w = (tmpvar_47.w * _PlanetOpacity);
  gl_FragData[0] = color_4;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 46 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c19, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.x, c17, c17
rsq r0.x, r0.x
mov r0.w, c18.x
mul r0.xyz, r0.x, c17
mov r1.xy, v3
mov r1.z, v4.x
dp3 r1.w, -r1, r0
mov r0.xyz, v2
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c18.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c18.y
add r0.y, r0, c18.w
mad o7.x, r0, r0.y, c19
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r2.xyz, -r0, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o1, v1
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "gles " {
// Stats: 267 math, 6 textures, 10 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8);
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_8);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp float tmpvar_61;
  mediump float shadow_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_64;
  if ((tmpvar_63.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_64 = _LightShadowData.x;
  } else {
    tmpvar_64 = 1.0;
  };
  shadow_62 = tmpvar_64;
  tmpvar_61 = shadow_62;
  mediump vec3 lightDir_65;
  lightDir_65 = tmpvar_56;
  mediump vec3 viewDir_66;
  viewDir_66 = xlv_TEXCOORD7;
  mediump vec3 normal_67;
  normal_67 = xlv_TEXCOORD4;
  mediump float atten_68;
  atten_68 = (((
    float((xlv_TEXCOORD2.z > 0.0))
   * tmpvar_57.w) * tmpvar_60.w) * tmpvar_61);
  mediump vec4 c_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(lightDir_65);
  lightDir_65 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(viewDir_66);
  viewDir_66 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = normalize(normal_67);
  normal_67 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = dot (tmpvar_72, tmpvar_70);
  highp float tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp (dot (normalize(
    (tmpvar_70 + tmpvar_71)
  ), tmpvar_72), 0.0, 1.0);
  tmpvar_74 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_73) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_74, _SpecularPower) * _SpecularColor.w)
  )) * (atten_68 * 4.0));
  c_69.xyz = tmpvar_76;
  c_69.w = (tmpvar_73 * (atten_68 * 4.0));
  highp vec3 tmpvar_77;
  tmpvar_77 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_78;
  lightDir_78 = tmpvar_77;
  mediump vec3 normal_79;
  normal_79 = xlv_TEXCOORD4;
  mediump float tmpvar_80;
  tmpvar_80 = dot (normal_79, lightDir_78);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_69 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_80)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_80)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_81.xyz;
  highp float tmpvar_82;
  tmpvar_82 = (tmpvar_81.w * _PlanetOpacity);
  color_5.w = tmpvar_82;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 267 math, 6 textures, 10 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8);
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_8);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp float tmpvar_61;
  mediump float shadow_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_64;
  if ((tmpvar_63.x < (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))) {
    tmpvar_64 = _LightShadowData.x;
  } else {
    tmpvar_64 = 1.0;
  };
  shadow_62 = tmpvar_64;
  tmpvar_61 = shadow_62;
  mediump vec3 lightDir_65;
  lightDir_65 = tmpvar_56;
  mediump vec3 viewDir_66;
  viewDir_66 = xlv_TEXCOORD7;
  mediump vec3 normal_67;
  normal_67 = xlv_TEXCOORD4;
  mediump float atten_68;
  atten_68 = (((
    float((xlv_TEXCOORD2.z > 0.0))
   * tmpvar_57.w) * tmpvar_60.w) * tmpvar_61);
  mediump vec4 c_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(lightDir_65);
  lightDir_65 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(viewDir_66);
  viewDir_66 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = normalize(normal_67);
  normal_67 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = dot (tmpvar_72, tmpvar_70);
  highp float tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp (dot (normalize(
    (tmpvar_70 + tmpvar_71)
  ), tmpvar_72), 0.0, 1.0);
  tmpvar_74 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_73) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_74, _SpecularPower) * _SpecularColor.w)
  )) * (atten_68 * 4.0));
  c_69.xyz = tmpvar_76;
  c_69.w = (tmpvar_73 * (atten_68 * 4.0));
  highp vec3 tmpvar_77;
  tmpvar_77 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_78;
  lightDir_78 = tmpvar_77;
  mediump vec3 normal_79;
  normal_79 = xlv_TEXCOORD4;
  mediump float tmpvar_80;
  tmpvar_80 = dot (normal_79, lightDir_78);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_69 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_80)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_80)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_81.xyz;
  highp float tmpvar_82;
  tmpvar_82 = (tmpvar_81.w * _PlanetOpacity);
  color_5.w = tmpvar_82;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 267 math, 6 textures, 9 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (cse_2.xyz - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (tmpvar_3, tmpvar_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.xy = gl_MultiTexCoord0.xy;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(tmpvar_5.xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_WorldSpaceLightPos0.xyz));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_2);
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_2);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor(
    (1.01 + tmpvar_7)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(tmpvar_7)
  ), 0.0, 1.0));
  xlv_TEXCOORD7 = normalize((cse_2.xyz - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightShadowData;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD5);
  vec2 uv_6;
  float tmpvar_7;
  if ((abs(cse_5.z) > (1e-08 * abs(cse_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (cse_5.x / cse_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((cse_5.z < 0.0)) {
      if ((cse_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(cse_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(cse_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_5.y)
    )) * (1.5708 + (
      abs(cse_5.y)
     * 
      (-0.214602 + (abs(cse_5.y) * (0.0865667 + (
        abs(cse_5.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(cse_5.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(cse_5.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  cityoverlay_3 = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec2 uv_14;
  float tmpvar_15;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    float tmpvar_16;
    tmpvar_16 = (tmpvar_13.x / tmpvar_13.z);
    tmpvar_15 = (tmpvar_16 * inversesqrt((
      (tmpvar_16 * tmpvar_16)
     + 1.0)));
    tmpvar_15 = (sign(tmpvar_15) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_15)))
     * 
      (1.5708 + (abs(tmpvar_15) * (-0.214602 + (
        abs(tmpvar_15)
       * 
        (0.0865667 + (abs(tmpvar_15) * -0.0310296))
      ))))
    )));
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.14159;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.14159);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * tmpvar_15));
  uv_14.y = (0.31831 * (1.5708 - (
    sign(tmpvar_13.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.5708 + (
      abs(tmpvar_13.y)
     * 
      (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (
        abs(tmpvar_13.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_17;
  tmpvar_17 = ((uv_14 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_13);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((
    mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22)
   >= tmpvar_21.y))));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _CityOverlayDetailScale), tmpvar_20.xy, tmpvar_20.zw);
  citydarkoverlaydetail_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD5);
  vec2 uv_26;
  float tmpvar_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    float tmpvar_28;
    tmpvar_28 = (tmpvar_25.x / tmpvar_25.z);
    tmpvar_27 = (tmpvar_28 * inversesqrt((
      (tmpvar_28 * tmpvar_28)
     + 1.0)));
    tmpvar_27 = (sign(tmpvar_27) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_27)))
     * 
      (1.5708 + (abs(tmpvar_27) * (-0.214602 + (
        abs(tmpvar_27)
       * 
        (0.0865667 + (abs(tmpvar_27) * -0.0310296))
      ))))
    )));
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        tmpvar_27 += 3.14159;
      } else {
        tmpvar_27 = (tmpvar_27 - 3.14159);
      };
    };
  } else {
    tmpvar_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * tmpvar_27));
  uv_26.y = (0.31831 * (1.5708 - (
    sign(tmpvar_25.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_25.y)
    )) * (1.5708 + (
      abs(tmpvar_25.y)
     * 
      (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (
        abs(tmpvar_25.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_29;
  tmpvar_29 = ((uv_26 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_25.xz);
  vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_25.xz);
  vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_25);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.yxz, mix (tmpvar_33, tmpvar_33.zxy, vec3(tmpvar_34)), vec3(float((
    mix (tmpvar_33.x, tmpvar_33.z, tmpvar_34)
   >= tmpvar_33.y))));
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_35.zy) / abs(tmpvar_35.x)) * _CityOverlayDetailScale), tmpvar_32.xy, tmpvar_32.zw);
  citylightoverlaydetail_1.xyz = tmpvar_36.xyz;
  cityoverlay_3.w = (tmpvar_12.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_24.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_36.w * cityoverlay_3.w);
  color_4.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_36.xyz, citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  float atten_37;
  atten_37 = (((
    float((xlv_TEXCOORD2.z > 0.0))
   * texture2D (_LightTexture0, 
    ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)
  ).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x * 
    (1.0 - _LightShadowData.x)
  )));
  vec4 c_38;
  vec3 tmpvar_39;
  tmpvar_39 = normalize(_WorldSpaceLightPos0.xyz);
  vec3 tmpvar_40;
  tmpvar_40 = normalize(xlv_TEXCOORD4);
  float tmpvar_41;
  tmpvar_41 = dot (tmpvar_40, tmpvar_39);
  c_38.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_41) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_39 + normalize(xlv_TEXCOORD7)))
    , tmpvar_40), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_37 * 4.0));
  c_38.w = (tmpvar_41 * (atten_37 * 4.0));
  float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_38 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_42)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_42)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_43;
  tmpvar_43 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4.xyz = tmpvar_43.xyz;
  color_4.w = (tmpvar_43.w * _PlanetOpacity);
  gl_FragData[0] = color_4;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 46 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c19, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.x, c17, c17
rsq r0.x, r0.x
mov r0.w, c18.x
mul r0.xyz, r0.x, c17
mov r1.xy, v3
mov r1.z, v4.x
dp3 r1.w, -r1, r0
mov r0.xyz, v2
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c18.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c18.y
add r0.y, r0, c18.w
mad o7.x, r0, r0.y, c19
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r2.xyz, -r0, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o1, v1
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 40 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityShadows" 416
Matrix 128 [unity_World2Shadow0]
Matrix 192 [unity_World2Shadow1]
Matrix 256 [unity_World2Shadow2]
Matrix 320 [unity_World2Shadow3]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityShadows" 3
BindCB  "UnityPerDraw" 4
"vs_4_0
eefiecedhcbffcpagcnmiddadgnhdgfeleebmjgpabaaaaaalaaiaaaaadaaaaaa
cmaaaaaapeaaaaaapeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaakoaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapabaaaalhaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfceneb
emaafeeffiedepepfceeaafeebeoehefeofeaaklepfdeheopiaaaaaaajaaaaaa
aiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcleagaaaaeaaaabaa
knabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
amaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaadbcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
iccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
aeaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
dgaaaaafpccabaaaabaaaaaaegbobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaaficcabaaaacaaaaaadkaabaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaahaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaacaaaaaaegbcbaaa
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaa
aeaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaaadaaaaaaalaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaa
egiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
amaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabaaaaaajbcaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
dgaaaaafdcaabaaaabaaaaaaegbabaaaadaaaaaadgaaaaafecaabaaaabaaaaaa
akbabaaaaeaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaaabaaaaaa
aaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaialpdcaaaaajiccabaaaafaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}
SubProgram "gles " {
// Stats: 267 math, 6 textures, 9 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8);
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_8);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp float tmpvar_61;
  mediump float shadow_62;
  lowp float tmpvar_63;
  tmpvar_63 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_64;
  tmpvar_64 = tmpvar_63;
  highp float tmpvar_65;
  tmpvar_65 = (_LightShadowData.x + (tmpvar_64 * (1.0 - _LightShadowData.x)));
  shadow_62 = tmpvar_65;
  tmpvar_61 = shadow_62;
  mediump vec3 lightDir_66;
  lightDir_66 = tmpvar_56;
  mediump vec3 viewDir_67;
  viewDir_67 = xlv_TEXCOORD7;
  mediump vec3 normal_68;
  normal_68 = xlv_TEXCOORD4;
  mediump float atten_69;
  atten_69 = (((
    float((xlv_TEXCOORD2.z > 0.0))
   * tmpvar_57.w) * tmpvar_60.w) * tmpvar_61);
  mediump vec4 c_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(lightDir_66);
  lightDir_66 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = normalize(viewDir_67);
  viewDir_67 = tmpvar_72;
  mediump vec3 tmpvar_73;
  tmpvar_73 = normalize(normal_68);
  normal_68 = tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = dot (tmpvar_73, tmpvar_71);
  highp float tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (dot (normalize(
    (tmpvar_71 + tmpvar_72)
  ), tmpvar_73), 0.0, 1.0);
  tmpvar_75 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_74) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_75, _SpecularPower) * _SpecularColor.w)
  )) * (atten_69 * 4.0));
  c_70.xyz = tmpvar_77;
  c_70.w = (tmpvar_74 * (atten_69 * 4.0));
  highp vec3 tmpvar_78;
  tmpvar_78 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_79;
  lightDir_79 = tmpvar_78;
  mediump vec3 normal_80;
  normal_80 = xlv_TEXCOORD4;
  mediump float tmpvar_81;
  tmpvar_81 = dot (normal_80, lightDir_79);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_70 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_81)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_81)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_82;
  tmpvar_82 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_82.xyz;
  highp float tmpvar_83;
  tmpvar_83 = (tmpvar_82.w * _PlanetOpacity);
  color_5.w = tmpvar_83;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 267 math, 6 textures, 9 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8);
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_8);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureGrad (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_57 = texture (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture (_LightTextureB0, vec2(tmpvar_59));
  lowp float tmpvar_61;
  mediump float shadow_62;
  mediump float tmpvar_63;
  tmpvar_63 = textureProj (_ShadowMapTexture, xlv_TEXCOORD3);
  highp float tmpvar_64;
  tmpvar_64 = (_LightShadowData.x + (tmpvar_63 * (1.0 - _LightShadowData.x)));
  shadow_62 = tmpvar_64;
  tmpvar_61 = shadow_62;
  mediump vec3 lightDir_65;
  lightDir_65 = tmpvar_56;
  mediump vec3 viewDir_66;
  viewDir_66 = xlv_TEXCOORD7;
  mediump vec3 normal_67;
  normal_67 = xlv_TEXCOORD4;
  mediump float atten_68;
  atten_68 = (((
    float((xlv_TEXCOORD2.z > 0.0))
   * tmpvar_57.w) * tmpvar_60.w) * tmpvar_61);
  mediump vec4 c_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(lightDir_65);
  lightDir_65 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(viewDir_66);
  viewDir_66 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = normalize(normal_67);
  normal_67 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = dot (tmpvar_72, tmpvar_70);
  highp float tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp (dot (normalize(
    (tmpvar_70 + tmpvar_71)
  ), tmpvar_72), 0.0, 1.0);
  tmpvar_74 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_73) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_74, _SpecularPower) * _SpecularColor.w)
  )) * (atten_68 * 4.0));
  c_69.xyz = tmpvar_76;
  c_69.w = (tmpvar_73 * (atten_68 * 4.0));
  highp vec3 tmpvar_77;
  tmpvar_77 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_78;
  lightDir_78 = tmpvar_77;
  mediump vec3 normal_79;
  normal_79 = xlv_TEXCOORD4;
  mediump float tmpvar_80;
  tmpvar_80 = dot (normal_79, lightDir_78);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_69 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_80)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_80)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_81.xyz;
  highp float tmpvar_82;
  tmpvar_82 = (tmpvar_81.w * _PlanetOpacity);
  color_5.w = tmpvar_82;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 23 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" ATTR0
Bind "color" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 480
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [_Object2World]
Matrix 416 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesColor [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = half4(_mtl_i._glesColor);
  float3 tmpvar_2;
  tmpvar_2 = normalize(_mtl_i._glesNormal);
  half NdotL_3;
  float4 tmpvar_4;
  float4 tmpvar_5;
  float tmpvar_6;
  float4 cse_7;
  cse_7 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_8;
  tmpvar_8 = (cse_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_5.w = sqrt(dot (tmpvar_8, tmpvar_8));
  float4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = tmpvar_2;
  float4 tmpvar_10;
  tmpvar_10.xy = _mtl_i._glesMultiTexCoord0.xy;
  tmpvar_10.z = _mtl_i._glesMultiTexCoord1.x;
  tmpvar_10.w = _mtl_i._glesMultiTexCoord1.y;
  float3 tmpvar_11;
  tmpvar_11 = -(tmpvar_10.xyz);
  tmpvar_4 = float4(tmpvar_1);
  tmpvar_5.xyz = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = dot (tmpvar_11, normalize(_mtl_u._WorldSpaceLightPos0.xyz));
  NdotL_3 = half(tmpvar_12);
  half tmpvar_13;
  tmpvar_13 = mix ((half)1.0, clamp (floor(
    ((half)1.01 + NdotL_3)
  ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
    -(NdotL_3)
  ), (half)0.0, (half)1.0));
  tmpvar_6 = float(tmpvar_13);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._LightMatrix0 * cse_7);
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u.unity_World2Shadow[0] * cse_7);
  _mtl_o.xlv_TEXCOORD4 = normalize((_mtl_u._Object2World * tmpvar_9).xyz);
  _mtl_o.xlv_TEXCOORD5 = tmpvar_11;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD7 = normalize((cse_7.xyz - _mtl_u._WorldSpaceCameraPos));
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 256 math, 4 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex).xyz;
  vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (tmpvar_4, tmpvar_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.xy = gl_MultiTexCoord0.xy;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(tmpvar_6.xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_WorldSpaceLightPos0.xyz));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor(
    (1.01 + tmpvar_8)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(tmpvar_8)
  ), 0.0, 1.0));
  xlv_TEXCOORD7 = normalize((tmpvar_3 - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD5);
  vec2 uv_6;
  float tmpvar_7;
  if ((abs(cse_5.z) > (1e-08 * abs(cse_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (cse_5.x / cse_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((cse_5.z < 0.0)) {
      if ((cse_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(cse_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(cse_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_5.y)
    )) * (1.5708 + (
      abs(cse_5.y)
     * 
      (-0.214602 + (abs(cse_5.y) * (0.0865667 + (
        abs(cse_5.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(cse_5.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(cse_5.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  cityoverlay_3 = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec2 uv_14;
  float tmpvar_15;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    float tmpvar_16;
    tmpvar_16 = (tmpvar_13.x / tmpvar_13.z);
    tmpvar_15 = (tmpvar_16 * inversesqrt((
      (tmpvar_16 * tmpvar_16)
     + 1.0)));
    tmpvar_15 = (sign(tmpvar_15) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_15)))
     * 
      (1.5708 + (abs(tmpvar_15) * (-0.214602 + (
        abs(tmpvar_15)
       * 
        (0.0865667 + (abs(tmpvar_15) * -0.0310296))
      ))))
    )));
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.14159;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.14159);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * tmpvar_15));
  uv_14.y = (0.31831 * (1.5708 - (
    sign(tmpvar_13.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.5708 + (
      abs(tmpvar_13.y)
     * 
      (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (
        abs(tmpvar_13.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_17;
  tmpvar_17 = ((uv_14 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_13);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((
    mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22)
   >= tmpvar_21.y))));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _CityOverlayDetailScale), tmpvar_20.xy, tmpvar_20.zw);
  citydarkoverlaydetail_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD5);
  vec2 uv_26;
  float tmpvar_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    float tmpvar_28;
    tmpvar_28 = (tmpvar_25.x / tmpvar_25.z);
    tmpvar_27 = (tmpvar_28 * inversesqrt((
      (tmpvar_28 * tmpvar_28)
     + 1.0)));
    tmpvar_27 = (sign(tmpvar_27) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_27)))
     * 
      (1.5708 + (abs(tmpvar_27) * (-0.214602 + (
        abs(tmpvar_27)
       * 
        (0.0865667 + (abs(tmpvar_27) * -0.0310296))
      ))))
    )));
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        tmpvar_27 += 3.14159;
      } else {
        tmpvar_27 = (tmpvar_27 - 3.14159);
      };
    };
  } else {
    tmpvar_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * tmpvar_27));
  uv_26.y = (0.31831 * (1.5708 - (
    sign(tmpvar_25.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_25.y)
    )) * (1.5708 + (
      abs(tmpvar_25.y)
     * 
      (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (
        abs(tmpvar_25.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_29;
  tmpvar_29 = ((uv_26 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_25.xz);
  vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_25.xz);
  vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_25);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.yxz, mix (tmpvar_33, tmpvar_33.zxy, vec3(tmpvar_34)), vec3(float((
    mix (tmpvar_33.x, tmpvar_33.z, tmpvar_34)
   >= tmpvar_33.y))));
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_35.zy) / abs(tmpvar_35.x)) * _CityOverlayDetailScale), tmpvar_32.xy, tmpvar_32.zw);
  citylightoverlaydetail_1.xyz = tmpvar_36.xyz;
  cityoverlay_3.w = (tmpvar_12.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_24.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_36.w * cityoverlay_3.w);
  color_4.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_36.xyz, citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 tmpvar_37;
  tmpvar_37 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2);
  vec4 c_38;
  vec3 tmpvar_39;
  tmpvar_39 = normalize(_WorldSpaceLightPos0.xyz);
  vec3 tmpvar_40;
  tmpvar_40 = normalize(xlv_TEXCOORD4);
  float tmpvar_41;
  tmpvar_41 = dot (tmpvar_40, tmpvar_39);
  c_38.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_41) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_39 + normalize(xlv_TEXCOORD7)))
    , tmpvar_40), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_37.x * 4.0));
  c_38.w = (tmpvar_41 * (tmpvar_37.x * 4.0));
  float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_38 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_42)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_42)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_43;
  tmpvar_43 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4.xyz = tmpvar_43.xyz;
  color_4.w = (tmpvar_43.w * _PlanetOpacity);
  gl_FragData[0] = color_4;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 42 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Vector 11 [_WorldSpaceLightPos0]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord4 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c12, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c13, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.x, c11, c11
rsq r0.x, r0.x
mul r1.xyz, r0.x, c11
mov r1.w, c12.x
mov r0.xy, v3
mov r0.z, v4.x
dp3 r0.w, -r0, r1
mov r1.xyz, v2
add r2.w, r0, c12.z
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r1.x, r2, r2
rsq r1.x, r1.x
mul o4.xyz, r1.x, r2
frc r1.y, r2.w
add_sat r1.y, r2.w, -r1
add r1.z, r1.y, c12.w
mul_sat r0.w, -r0, c12.y
mad o6.x, r0.w, r1.z, c13.y
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r2.xyz, r1.xyww, c13.x
mul r2.y, r2, c9.x
mad o3.xy, r2.z, c10.zwzw, r2
dp4 r2.z, v0, c6
dp4 r2.x, v0, c4
dp4 r2.y, v0, c5
add r2.xyz, -r2, c8
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mov o0, r1
mov o1, v1
mov o3.zw, r1
mul o7.xyz, r0.w, -r2
mov o2.xyz, v2
rcp o2.w, r0.w
mov o5.xyz, -r0
"
}
SubProgram "d3d11 " {
// Stats: 31 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "UnityPerCamera" 0
BindCB  "UnityLighting" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecediihnjeclhibiblblfeffhohdgapphcfaabaaaaaadaahaaaaadaaaaaa
cmaaaaaapeaaaaaanmabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaakoaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapabaaaalhaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfceneb
emaafeeffiedepepfceeaafeebeoehefeofeaaklepfdeheooaaaaaaaaiaaaaaa
aiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaneaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaaeaaaaaaaiahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emafaaaaeaaaabaafdabaaaafjaaaaaeegiocaaaaaaaaaaaagaaaaaafjaaaaae
egiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaadaaaaaafpaaaaadbcbabaaaaeaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadpccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadiccabaaa
aeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaabaaaaaaegbobaaa
abaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaa
anaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaf
iccabaaaacaaaaaadkaabaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
dgaaaaafhccabaaaacaaaaaaegbcbaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaaaaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
mccabaaaadaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaadaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabaaaaaajbcaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
dgaaaaafdcaabaaaabaaaaaaegbabaaaadaaaaaadgaaaaafecaabaaaabaaaaaa
akbabaaaaeaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaghccabaaaafaaaaaaegacbaiaebaaaaaaabaaaaaa
aaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaialpdcaaaaajiccabaaaaeaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}
SubProgram "gles " {
// Stats: 260 math, 4 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec3 lightDirection_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  highp vec4 cse_9;
  cse_9 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_10;
  tmpvar_10 = (cse_9.xyz - _WorldSpaceCameraPos);
  tmpvar_7.w = sqrt(dot (tmpvar_10, tmpvar_10));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec4 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord0.xy;
  tmpvar_12.z = tmpvar_3.x;
  tmpvar_12.w = tmpvar_3.y;
  highp vec3 tmpvar_13;
  tmpvar_13 = -(tmpvar_12.xyz);
  tmpvar_6 = tmpvar_1;
  tmpvar_7.xyz = tmpvar_2;
  lowp vec3 tmpvar_14;
  tmpvar_14 = normalize(_WorldSpaceLightPos0.xyz);
  lightDirection_5 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_13, lightDirection_5);
  NdotL_4 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_8 = tmpvar_16;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * cse_9);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_11).xyz);
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = normalize((cse_9.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp float tmpvar_57;
  mediump float lightShadowDataX_58;
  highp float dist_59;
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = _LightShadowData.x;
  lightShadowDataX_58 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = max (float((dist_59 > 
    (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w)
  )), lightShadowDataX_58);
  tmpvar_57 = tmpvar_62;
  mediump vec3 lightDir_63;
  lightDir_63 = tmpvar_56;
  mediump vec3 viewDir_64;
  viewDir_64 = xlv_TEXCOORD7;
  mediump vec3 normal_65;
  normal_65 = xlv_TEXCOORD4;
  mediump float atten_66;
  atten_66 = tmpvar_57;
  mediump vec4 c_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = normalize(lightDir_63);
  lightDir_63 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = normalize(viewDir_64);
  viewDir_64 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(normal_65);
  normal_65 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = dot (tmpvar_70, tmpvar_68);
  highp float tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = clamp (dot (normalize(
    (tmpvar_68 + tmpvar_69)
  ), tmpvar_70), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_71) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_72, _SpecularPower) * _SpecularColor.w)
  )) * (atten_66 * 4.0));
  c_67.xyz = tmpvar_74;
  c_67.w = (tmpvar_71 * (atten_66 * 4.0));
  lowp vec3 tmpvar_75;
  tmpvar_75 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_76;
  lightDir_76 = tmpvar_75;
  mediump vec3 normal_77;
  normal_77 = xlv_TEXCOORD4;
  mediump float tmpvar_78;
  tmpvar_78 = dot (normal_77, lightDir_76);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_67 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_78)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_78)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_79.xyz;
  highp float tmpvar_80;
  tmpvar_80 = (tmpvar_79.w * _PlanetOpacity);
  color_5.w = tmpvar_80;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 260 math, 4 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec3 lightDirection_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  highp vec4 cse_9;
  cse_9 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_10;
  tmpvar_10 = (cse_9.xyz - _WorldSpaceCameraPos);
  tmpvar_7.w = sqrt(dot (tmpvar_10, tmpvar_10));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec4 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord0.xy;
  tmpvar_12.z = tmpvar_3.x;
  tmpvar_12.w = tmpvar_3.y;
  highp vec3 tmpvar_13;
  tmpvar_13 = -(tmpvar_12.xyz);
  tmpvar_6 = tmpvar_1;
  tmpvar_7.xyz = tmpvar_2;
  lowp vec3 tmpvar_14;
  tmpvar_14 = normalize(_WorldSpaceLightPos0.xyz);
  lightDirection_5 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_13, lightDirection_5);
  NdotL_4 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_8 = tmpvar_16;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * cse_9);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_11).xyz);
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = normalize((cse_9.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp float tmpvar_57;
  mediump float lightShadowDataX_58;
  highp float dist_59;
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD2).x;
  dist_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = _LightShadowData.x;
  lightShadowDataX_58 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = max (float((dist_59 > 
    (xlv_TEXCOORD2.z / xlv_TEXCOORD2.w)
  )), lightShadowDataX_58);
  tmpvar_57 = tmpvar_62;
  mediump vec3 lightDir_63;
  lightDir_63 = tmpvar_56;
  mediump vec3 viewDir_64;
  viewDir_64 = xlv_TEXCOORD7;
  mediump vec3 normal_65;
  normal_65 = xlv_TEXCOORD4;
  mediump float atten_66;
  atten_66 = tmpvar_57;
  mediump vec4 c_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = normalize(lightDir_63);
  lightDir_63 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = normalize(viewDir_64);
  viewDir_64 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(normal_65);
  normal_65 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = dot (tmpvar_70, tmpvar_68);
  highp float tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = clamp (dot (normalize(
    (tmpvar_68 + tmpvar_69)
  ), tmpvar_70), 0.0, 1.0);
  tmpvar_72 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_71) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_72, _SpecularPower) * _SpecularColor.w)
  )) * (atten_66 * 4.0));
  c_67.xyz = tmpvar_74;
  c_67.w = (tmpvar_71 * (atten_66 * 4.0));
  lowp vec3 tmpvar_75;
  tmpvar_75 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_76;
  lightDir_76 = tmpvar_75;
  mediump vec3 normal_77;
  normal_77 = xlv_TEXCOORD4;
  mediump float tmpvar_78;
  tmpvar_78 = dot (normal_77, lightDir_76);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_67 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_78)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_78)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_79.xyz;
  highp float tmpvar_80;
  tmpvar_80 = (tmpvar_79.w * _PlanetOpacity);
  color_5.w = tmpvar_80;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 257 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  vec3 tmpvar_4;
  tmpvar_4 = (cse_3.xyz - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (tmpvar_4, tmpvar_4));
  vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = gl_Normal;
  vec4 tmpvar_6;
  tmpvar_6.xy = gl_MultiTexCoord0.xy;
  tmpvar_6.z = gl_MultiTexCoord1.x;
  tmpvar_6.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_7;
  tmpvar_7 = -(tmpvar_6.xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_8;
  tmpvar_8 = dot (tmpvar_7, normalize(_WorldSpaceLightPos0.xyz));
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_2 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD3 = o_9;
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor(
    (1.01 + tmpvar_8)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(tmpvar_8)
  ), 0.0, 1.0));
  xlv_TEXCOORD7 = normalize((cse_3.xyz - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec4 xlv_TEXCOORD0;
varying vec2 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD5);
  vec2 uv_6;
  float tmpvar_7;
  if ((abs(cse_5.z) > (1e-08 * abs(cse_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (cse_5.x / cse_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((cse_5.z < 0.0)) {
      if ((cse_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(cse_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(cse_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_5.y)
    )) * (1.5708 + (
      abs(cse_5.y)
     * 
      (-0.214602 + (abs(cse_5.y) * (0.0865667 + (
        abs(cse_5.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(cse_5.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(cse_5.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  cityoverlay_3 = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec2 uv_14;
  float tmpvar_15;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    float tmpvar_16;
    tmpvar_16 = (tmpvar_13.x / tmpvar_13.z);
    tmpvar_15 = (tmpvar_16 * inversesqrt((
      (tmpvar_16 * tmpvar_16)
     + 1.0)));
    tmpvar_15 = (sign(tmpvar_15) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_15)))
     * 
      (1.5708 + (abs(tmpvar_15) * (-0.214602 + (
        abs(tmpvar_15)
       * 
        (0.0865667 + (abs(tmpvar_15) * -0.0310296))
      ))))
    )));
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.14159;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.14159);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * tmpvar_15));
  uv_14.y = (0.31831 * (1.5708 - (
    sign(tmpvar_13.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.5708 + (
      abs(tmpvar_13.y)
     * 
      (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (
        abs(tmpvar_13.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_17;
  tmpvar_17 = ((uv_14 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_13);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((
    mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22)
   >= tmpvar_21.y))));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _CityOverlayDetailScale), tmpvar_20.xy, tmpvar_20.zw);
  citydarkoverlaydetail_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD5);
  vec2 uv_26;
  float tmpvar_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    float tmpvar_28;
    tmpvar_28 = (tmpvar_25.x / tmpvar_25.z);
    tmpvar_27 = (tmpvar_28 * inversesqrt((
      (tmpvar_28 * tmpvar_28)
     + 1.0)));
    tmpvar_27 = (sign(tmpvar_27) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_27)))
     * 
      (1.5708 + (abs(tmpvar_27) * (-0.214602 + (
        abs(tmpvar_27)
       * 
        (0.0865667 + (abs(tmpvar_27) * -0.0310296))
      ))))
    )));
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        tmpvar_27 += 3.14159;
      } else {
        tmpvar_27 = (tmpvar_27 - 3.14159);
      };
    };
  } else {
    tmpvar_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * tmpvar_27));
  uv_26.y = (0.31831 * (1.5708 - (
    sign(tmpvar_25.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_25.y)
    )) * (1.5708 + (
      abs(tmpvar_25.y)
     * 
      (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (
        abs(tmpvar_25.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_29;
  tmpvar_29 = ((uv_26 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_25.xz);
  vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_25.xz);
  vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_25);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.yxz, mix (tmpvar_33, tmpvar_33.zxy, vec3(tmpvar_34)), vec3(float((
    mix (tmpvar_33.x, tmpvar_33.z, tmpvar_34)
   >= tmpvar_33.y))));
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_35.zy) / abs(tmpvar_35.x)) * _CityOverlayDetailScale), tmpvar_32.xy, tmpvar_32.zw);
  citylightoverlaydetail_1.xyz = tmpvar_36.xyz;
  cityoverlay_3.w = (tmpvar_12.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_24.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_36.w * cityoverlay_3.w);
  color_4.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_36.xyz, citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  float atten_37;
  atten_37 = (texture2D (_LightTexture0, xlv_TEXCOORD2).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x);
  vec4 c_38;
  vec3 tmpvar_39;
  tmpvar_39 = normalize(_WorldSpaceLightPos0.xyz);
  vec3 tmpvar_40;
  tmpvar_40 = normalize(xlv_TEXCOORD4);
  float tmpvar_41;
  tmpvar_41 = dot (tmpvar_40, tmpvar_39);
  c_38.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_41) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_39 + normalize(xlv_TEXCOORD7)))
    , tmpvar_40), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_37 * 4.0));
  c_38.w = (tmpvar_41 * (atten_37 * 4.0));
  float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_38 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_42)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_42)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_43;
  tmpvar_43 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4.xyz = tmpvar_43.xyz;
  color_4.w = (tmpvar_43.w * _PlanetOpacity);
  gl_FragData[0] = color_4;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 45 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.x, c15, c15
rsq r0.x, r0.x
mov r0.w, c16.x
dp4 r3.w, v0, c3
dp4 r3.z, v0, c2
mul r0.xyz, r0.x, c15
mov r1.xy, v3
mov r1.z, v4.x
dp3 r1.w, -r1, r0
mov r0.xyz, v2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r0.x, r2, r2
add r2.w, r1, c16.z
rsq r0.x, r0.x
frc r0.y, r2.w
mul o5.xyz, r0.x, r2
add_sat r0.y, r2.w, -r0
add r2.x, r0.y, c16.w
mul_sat r0.w, -r1, c16.y
mad o7.x, r0.w, r2, c17.y
dp4 r3.x, v0, c0
dp4 r3.y, v0, c1
mul r0.xyz, r3.xyww, c17.x
mul r0.y, r0, c13.x
mad o4.xy, r0.z, c14.zwzw, r0
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r2.xyz, -r0, c12
dp4 o3.y, r0, c9
dp3 r1.w, r2, r2
dp4 o3.x, r0, c8
rsq r0.x, r1.w
mov o0, r3
mov o1, v1
mov o4.zw, r3
mul o8.xyz, r0.x, -r2
mov o2.xyz, v2
rcp o2.w, r0.x
mov o6.xyz, -r1
"
}
SubProgram "d3d11 " {
// Stats: 39 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
ConstBuffer "$Globals" 384
Matrix 80 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedlfagacnmilpllbdgckapfjlegiookjciabaaaaaajeaiaaaaadaaaaaa
cmaaaaaapeaaaaaapeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaakoaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapabaaaalhaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfceneb
emaafeeffiedepepfceeaafeebeoehefeofeaaklepfdeheopiaaaaaaajaaaaaa
aiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
adamaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaadaaaaaaaealaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcjiagaaaaeaaaabaa
kgabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaadbcbabaaaaeaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaadeccabaaaadaaaaaa
gfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaa
agaaaaaagfaaaaadhccabaaaahaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaa
aaaaaaaadgaaaaafpccabaaaabaaaaaaegbobaaaabaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaaficcabaaaacaaaaaadkaabaaa
abaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaa
ahaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaaacaaaaaa
egbcbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaa
adaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaidcaabaaaacaaaaaafgafbaaaabaaaaaaegiacaaaaaaaaaaaagaaaaaa
dcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaafaaaaaaagaabaaaabaaaaaa
egaabaaaacaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaahaaaaaa
kgakbaaaabaaaaaaegaabaaaabaaaaaadcaaaaakdccabaaaadaaaaaaegiacaaa
aaaaaaaaaiaaaaaapgapbaaaabaaaaaaegaabaaaabaaaaaabaaaaaajbcaabaaa
abaaaaaaegiccaaaacaaaaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaagaabaaa
abaaaaaaegiccaaaacaaaaaaaaaaaaaadgaaaaafdcaabaaaacaaaaaaegbabaaa
adaaaaaadgaaaaafecaabaaaacaaaaaaakbabaaaaeaaaaaabaaaaaaibcaabaaa
abaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaabaaaaaadgaaaaaghccabaaa
agaaaaaaegacbaiaebaaaaaaacaaaaaaaaaaaaahccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaakoehibdpdicaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaacambebcaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaialpdcaaaaajeccabaaa
adaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaai
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaak
ncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadp
aaaaaadpdgaaaaafmccabaaaaeaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaa
aeaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 261 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec3 lightDirection_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  highp vec4 cse_9;
  cse_9 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_10;
  tmpvar_10 = (cse_9.xyz - _WorldSpaceCameraPos);
  tmpvar_7.w = sqrt(dot (tmpvar_10, tmpvar_10));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec4 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord0.xy;
  tmpvar_12.z = tmpvar_3.x;
  tmpvar_12.w = tmpvar_3.y;
  highp vec3 tmpvar_13;
  tmpvar_13 = -(tmpvar_12.xyz);
  tmpvar_6 = tmpvar_1;
  tmpvar_7.xyz = tmpvar_2;
  lowp vec3 tmpvar_14;
  tmpvar_14 = normalize(_WorldSpaceLightPos0.xyz);
  lightDirection_5 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_13, lightDirection_5);
  NdotL_4 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_8 = tmpvar_16;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_9).xy;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_9);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_11).xyz);
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = normalize((cse_9.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_LightTexture0, xlv_TEXCOORD2);
  lowp float tmpvar_58;
  mediump float lightShadowDataX_59;
  highp float dist_60;
  lowp float tmpvar_61;
  tmpvar_61 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_60 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = _LightShadowData.x;
  lightShadowDataX_59 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = max (float((dist_60 > 
    (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w)
  )), lightShadowDataX_59);
  tmpvar_58 = tmpvar_63;
  mediump vec3 lightDir_64;
  lightDir_64 = tmpvar_56;
  mediump vec3 viewDir_65;
  viewDir_65 = xlv_TEXCOORD7;
  mediump vec3 normal_66;
  normal_66 = xlv_TEXCOORD4;
  mediump float atten_67;
  atten_67 = (tmpvar_57.w * tmpvar_58);
  mediump vec4 c_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = normalize(lightDir_64);
  lightDir_64 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(viewDir_65);
  viewDir_65 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(normal_66);
  normal_66 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_69);
  highp float tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = clamp (dot (normalize(
    (tmpvar_69 + tmpvar_70)
  ), tmpvar_71), 0.0, 1.0);
  tmpvar_73 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_72) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_73, _SpecularPower) * _SpecularColor.w)
  )) * (atten_67 * 4.0));
  c_68.xyz = tmpvar_75;
  c_68.w = (tmpvar_72 * (atten_67 * 4.0));
  lowp vec3 tmpvar_76;
  tmpvar_76 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_77;
  lightDir_77 = tmpvar_76;
  mediump vec3 normal_78;
  normal_78 = xlv_TEXCOORD4;
  mediump float tmpvar_79;
  tmpvar_79 = dot (normal_78, lightDir_77);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_68 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_79)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_79)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_80.xyz;
  highp float tmpvar_81;
  tmpvar_81 = (tmpvar_80.w * _PlanetOpacity);
  color_5.w = tmpvar_81;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 261 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec3 lightDirection_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  highp vec4 cse_9;
  cse_9 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_10;
  tmpvar_10 = (cse_9.xyz - _WorldSpaceCameraPos);
  tmpvar_7.w = sqrt(dot (tmpvar_10, tmpvar_10));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec4 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord0.xy;
  tmpvar_12.z = tmpvar_3.x;
  tmpvar_12.w = tmpvar_3.y;
  highp vec3 tmpvar_13;
  tmpvar_13 = -(tmpvar_12.xyz);
  tmpvar_6 = tmpvar_1;
  tmpvar_7.xyz = tmpvar_2;
  lowp vec3 tmpvar_14;
  tmpvar_14 = normalize(_WorldSpaceLightPos0.xyz);
  lightDirection_5 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_13, lightDirection_5);
  NdotL_4 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_8 = tmpvar_16;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_9).xy;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_9);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_11).xyz);
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = normalize((cse_9.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_LightTexture0, xlv_TEXCOORD2);
  lowp float tmpvar_58;
  mediump float lightShadowDataX_59;
  highp float dist_60;
  lowp float tmpvar_61;
  tmpvar_61 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_60 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = _LightShadowData.x;
  lightShadowDataX_59 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = max (float((dist_60 > 
    (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w)
  )), lightShadowDataX_59);
  tmpvar_58 = tmpvar_63;
  mediump vec3 lightDir_64;
  lightDir_64 = tmpvar_56;
  mediump vec3 viewDir_65;
  viewDir_65 = xlv_TEXCOORD7;
  mediump vec3 normal_66;
  normal_66 = xlv_TEXCOORD4;
  mediump float atten_67;
  atten_67 = (tmpvar_57.w * tmpvar_58);
  mediump vec4 c_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = normalize(lightDir_64);
  lightDir_64 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(viewDir_65);
  viewDir_65 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(normal_66);
  normal_66 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_69);
  highp float tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = clamp (dot (normalize(
    (tmpvar_69 + tmpvar_70)
  ), tmpvar_71), 0.0, 1.0);
  tmpvar_73 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_72) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_73, _SpecularPower) * _SpecularColor.w)
  )) * (atten_67 * 4.0));
  c_68.xyz = tmpvar_75;
  c_68.w = (tmpvar_72 * (atten_67 * 4.0));
  lowp vec3 tmpvar_76;
  tmpvar_76 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_77;
  lightDir_77 = tmpvar_76;
  mediump vec3 normal_78;
  normal_78 = xlv_TEXCOORD4;
  mediump float tmpvar_79;
  tmpvar_79 = dot (normal_78, lightDir_77);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_68 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_79)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_79)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_80.xyz;
  highp float tmpvar_81;
  tmpvar_81 = (tmpvar_80.w * _PlanetOpacity);
  color_5.w = tmpvar_81;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 265 math, 5 textures, 10 branches
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (cse_2.xyz - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (tmpvar_3, tmpvar_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.xy = gl_MultiTexCoord0.xy;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(tmpvar_5.xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_WorldSpaceLightPos0.xyz));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_2).xyz;
  xlv_TEXCOORD3 = (cse_2.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor(
    (1.01 + tmpvar_7)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(tmpvar_7)
  ), 0.0, 1.0));
  xlv_TEXCOORD7 = normalize((cse_2.xyz - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD5);
  vec2 uv_6;
  float tmpvar_7;
  if ((abs(cse_5.z) > (1e-08 * abs(cse_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (cse_5.x / cse_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((cse_5.z < 0.0)) {
      if ((cse_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(cse_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(cse_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_5.y)
    )) * (1.5708 + (
      abs(cse_5.y)
     * 
      (-0.214602 + (abs(cse_5.y) * (0.0865667 + (
        abs(cse_5.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(cse_5.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(cse_5.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  cityoverlay_3 = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec2 uv_14;
  float tmpvar_15;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    float tmpvar_16;
    tmpvar_16 = (tmpvar_13.x / tmpvar_13.z);
    tmpvar_15 = (tmpvar_16 * inversesqrt((
      (tmpvar_16 * tmpvar_16)
     + 1.0)));
    tmpvar_15 = (sign(tmpvar_15) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_15)))
     * 
      (1.5708 + (abs(tmpvar_15) * (-0.214602 + (
        abs(tmpvar_15)
       * 
        (0.0865667 + (abs(tmpvar_15) * -0.0310296))
      ))))
    )));
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.14159;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.14159);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * tmpvar_15));
  uv_14.y = (0.31831 * (1.5708 - (
    sign(tmpvar_13.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.5708 + (
      abs(tmpvar_13.y)
     * 
      (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (
        abs(tmpvar_13.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_17;
  tmpvar_17 = ((uv_14 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_13);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((
    mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22)
   >= tmpvar_21.y))));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _CityOverlayDetailScale), tmpvar_20.xy, tmpvar_20.zw);
  citydarkoverlaydetail_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD5);
  vec2 uv_26;
  float tmpvar_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    float tmpvar_28;
    tmpvar_28 = (tmpvar_25.x / tmpvar_25.z);
    tmpvar_27 = (tmpvar_28 * inversesqrt((
      (tmpvar_28 * tmpvar_28)
     + 1.0)));
    tmpvar_27 = (sign(tmpvar_27) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_27)))
     * 
      (1.5708 + (abs(tmpvar_27) * (-0.214602 + (
        abs(tmpvar_27)
       * 
        (0.0865667 + (abs(tmpvar_27) * -0.0310296))
      ))))
    )));
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        tmpvar_27 += 3.14159;
      } else {
        tmpvar_27 = (tmpvar_27 - 3.14159);
      };
    };
  } else {
    tmpvar_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * tmpvar_27));
  uv_26.y = (0.31831 * (1.5708 - (
    sign(tmpvar_25.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_25.y)
    )) * (1.5708 + (
      abs(tmpvar_25.y)
     * 
      (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (
        abs(tmpvar_25.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_29;
  tmpvar_29 = ((uv_26 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_25.xz);
  vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_25.xz);
  vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_25);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.yxz, mix (tmpvar_33, tmpvar_33.zxy, vec3(tmpvar_34)), vec3(float((
    mix (tmpvar_33.x, tmpvar_33.z, tmpvar_34)
   >= tmpvar_33.y))));
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_35.zy) / abs(tmpvar_35.x)) * _CityOverlayDetailScale), tmpvar_32.xy, tmpvar_32.zw);
  citylightoverlaydetail_1.xyz = tmpvar_36.xyz;
  cityoverlay_3.w = (tmpvar_12.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_24.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_36.w * cityoverlay_3.w);
  color_4.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_36.xyz, citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  float tmpvar_38;
  tmpvar_38 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * _LightPositionRange.w) * 0.97);
  float tmpvar_39;
  tmpvar_39 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float tmpvar_40;
  if ((tmpvar_39 < tmpvar_38)) {
    tmpvar_40 = _LightShadowData.x;
  } else {
    tmpvar_40 = 1.0;
  };
  float atten_41;
  atten_41 = (tmpvar_37.w * tmpvar_40);
  vec4 c_42;
  vec3 tmpvar_43;
  tmpvar_43 = normalize(_WorldSpaceLightPos0.xyz);
  vec3 tmpvar_44;
  tmpvar_44 = normalize(xlv_TEXCOORD4);
  float tmpvar_45;
  tmpvar_45 = dot (tmpvar_44, tmpvar_43);
  c_42.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_45) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_43 + normalize(xlv_TEXCOORD7)))
    , tmpvar_44), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_41 * 4.0));
  c_42.w = (tmpvar_45 * (atten_41 * 4.0));
  float tmpvar_46;
  tmpvar_46 = dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_42 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_46)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_46)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_47;
  tmpvar_47 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4.xyz = tmpvar_47.xyz;
  color_4.w = (tmpvar_47.w * _PlanetOpacity);
  gl_FragData[0] = color_4;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 42 math
Keywords { "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.x, c13, c13
rsq r0.x, r0.x
mov r0.w, c15.x
mul r0.xyz, r0.x, c13
mov r1.xy, v3
mov r1.z, v4.x
dp3 r1.w, -r1, r0
mov r0.xyz, v2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o7.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r2.xyz, -r0, c12
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c14
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 37 math
Keywords { "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedgkcnbnhclafdebmclaekemekpbnikdckabaaaaaacmaiaaaaadaaaaaa
cmaaaaaapeaaaaaapeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaakoaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapabaaaalhaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfceneb
emaafeeffiedepepfceeaafeebeoehefeofeaaklepfdeheopiaaaaaaajaaaaaa
aiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdaagaaaaeaaaabaa
imabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaadbcbabaaaaeaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadiccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaa
agaaaaaagfaaaaadhccabaaaahaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaabaaaaaaegbobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
elaaaaaficcabaaaacaaaaaaakaabaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhccabaaaahaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaacaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabaaaaaajbcaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
dgaaaaafdcaabaaaabaaaaaaegbabaaaadaaaaaadgaaaaafecaabaaaabaaaaaa
akbabaaaaeaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaaabaaaaaa
aaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaialpdcaaaaajiccabaaaadaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 265 math, 5 textures, 10 branches
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD3 = (cse_8.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTexture0, vec2(tmpvar_57));
  highp float tmpvar_59;
  tmpvar_59 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_60;
  lowp vec4 tmpvar_61;
  tmpvar_61 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_60 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = dot (packDist_60, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp float tmpvar_63;
  if ((tmpvar_62 < tmpvar_59)) {
    tmpvar_63 = _LightShadowData.x;
  } else {
    tmpvar_63 = 1.0;
  };
  mediump vec3 lightDir_64;
  lightDir_64 = tmpvar_56;
  mediump vec3 viewDir_65;
  viewDir_65 = xlv_TEXCOORD7;
  mediump vec3 normal_66;
  normal_66 = xlv_TEXCOORD4;
  mediump float atten_67;
  atten_67 = (tmpvar_58.w * tmpvar_63);
  mediump vec4 c_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = normalize(lightDir_64);
  lightDir_64 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(viewDir_65);
  viewDir_65 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(normal_66);
  normal_66 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_69);
  highp float tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = clamp (dot (normalize(
    (tmpvar_69 + tmpvar_70)
  ), tmpvar_71), 0.0, 1.0);
  tmpvar_73 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_72) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_73, _SpecularPower) * _SpecularColor.w)
  )) * (atten_67 * 4.0));
  c_68.xyz = tmpvar_75;
  c_68.w = (tmpvar_72 * (atten_67 * 4.0));
  highp vec3 tmpvar_76;
  tmpvar_76 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_77;
  lightDir_77 = tmpvar_76;
  mediump vec3 normal_78;
  normal_78 = xlv_TEXCOORD4;
  mediump float tmpvar_79;
  tmpvar_79 = dot (normal_78, lightDir_77);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_68 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_79)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_79)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_80.xyz;
  highp float tmpvar_81;
  tmpvar_81 = (tmpvar_80.w * _PlanetOpacity);
  color_5.w = tmpvar_81;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 265 math, 5 textures, 10 branches
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD3 = (cse_8.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTexture0, vec2(tmpvar_57));
  highp float tmpvar_59;
  tmpvar_59 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_60;
  lowp vec4 tmpvar_61;
  tmpvar_61 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_60 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = dot (packDist_60, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp float tmpvar_63;
  if ((tmpvar_62 < tmpvar_59)) {
    tmpvar_63 = _LightShadowData.x;
  } else {
    tmpvar_63 = 1.0;
  };
  mediump vec3 lightDir_64;
  lightDir_64 = tmpvar_56;
  mediump vec3 viewDir_65;
  viewDir_65 = xlv_TEXCOORD7;
  mediump vec3 normal_66;
  normal_66 = xlv_TEXCOORD4;
  mediump float atten_67;
  atten_67 = (tmpvar_58.w * tmpvar_63);
  mediump vec4 c_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = normalize(lightDir_64);
  lightDir_64 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(viewDir_65);
  viewDir_65 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(normal_66);
  normal_66 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_69);
  highp float tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = clamp (dot (normalize(
    (tmpvar_69 + tmpvar_70)
  ), tmpvar_71), 0.0, 1.0);
  tmpvar_73 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_72) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_73, _SpecularPower) * _SpecularColor.w)
  )) * (atten_67 * 4.0));
  c_68.xyz = tmpvar_75;
  c_68.w = (tmpvar_72 * (atten_67 * 4.0));
  highp vec3 tmpvar_76;
  tmpvar_76 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_77;
  lightDir_77 = tmpvar_76;
  mediump vec3 normal_78;
  normal_78 = xlv_TEXCOORD4;
  mediump float tmpvar_79;
  tmpvar_79 = dot (normal_78, lightDir_77);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_68 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_79)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_79)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_80.xyz;
  highp float tmpvar_81;
  tmpvar_81 = (tmpvar_80.w * _PlanetOpacity);
  color_5.w = tmpvar_81;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 265 math, 5 textures, 10 branches
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD3 = (cse_8.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec4 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureGrad (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture (_LightTexture0, vec2(tmpvar_57));
  highp float tmpvar_59;
  tmpvar_59 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_60;
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_60 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = dot (packDist_60, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp float tmpvar_63;
  if ((tmpvar_62 < tmpvar_59)) {
    tmpvar_63 = _LightShadowData.x;
  } else {
    tmpvar_63 = 1.0;
  };
  mediump vec3 lightDir_64;
  lightDir_64 = tmpvar_56;
  mediump vec3 viewDir_65;
  viewDir_65 = xlv_TEXCOORD7;
  mediump vec3 normal_66;
  normal_66 = xlv_TEXCOORD4;
  mediump float atten_67;
  atten_67 = (tmpvar_58.w * tmpvar_63);
  mediump vec4 c_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = normalize(lightDir_64);
  lightDir_64 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(viewDir_65);
  viewDir_65 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(normal_66);
  normal_66 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_69);
  highp float tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = clamp (dot (normalize(
    (tmpvar_69 + tmpvar_70)
  ), tmpvar_71), 0.0, 1.0);
  tmpvar_73 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_72) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_73, _SpecularPower) * _SpecularColor.w)
  )) * (atten_67 * 4.0));
  c_68.xyz = tmpvar_75;
  c_68.w = (tmpvar_72 * (atten_67 * 4.0));
  highp vec3 tmpvar_76;
  tmpvar_76 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_77;
  lightDir_77 = tmpvar_76;
  mediump vec3 normal_78;
  normal_78 = xlv_TEXCOORD4;
  mediump float tmpvar_79;
  tmpvar_79 = dot (normal_78, lightDir_77);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_68 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_79)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_79)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_80.xyz;
  highp float tmpvar_81;
  tmpvar_81 = (tmpvar_80.w * _PlanetOpacity);
  color_5.w = tmpvar_81;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 23 math
Keywords { "POINT" "SHADOWS_CUBE" }
Bind "vertex" ATTR0
Bind "color" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 240
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [_Object2World]
Matrix 176 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesColor [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = half4(_mtl_i._glesColor);
  float3 tmpvar_2;
  tmpvar_2 = normalize(_mtl_i._glesNormal);
  half NdotL_3;
  float4 tmpvar_4;
  float4 tmpvar_5;
  float tmpvar_6;
  float4 cse_7;
  cse_7 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_8;
  tmpvar_8 = (cse_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_5.w = sqrt(dot (tmpvar_8, tmpvar_8));
  float4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = tmpvar_2;
  float4 tmpvar_10;
  tmpvar_10.xy = _mtl_i._glesMultiTexCoord0.xy;
  tmpvar_10.z = _mtl_i._glesMultiTexCoord1.x;
  tmpvar_10.w = _mtl_i._glesMultiTexCoord1.y;
  float3 tmpvar_11;
  tmpvar_11 = -(tmpvar_10.xyz);
  tmpvar_4 = float4(tmpvar_1);
  tmpvar_5.xyz = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = dot (tmpvar_11, normalize(_mtl_u._WorldSpaceLightPos0.xyz));
  NdotL_3 = half(tmpvar_12);
  half tmpvar_13;
  tmpvar_13 = mix ((half)1.0, clamp (floor(
    ((half)1.01 + NdotL_3)
  ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
    -(NdotL_3)
  ), (half)0.0, (half)1.0));
  tmpvar_6 = float(tmpvar_13);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._LightMatrix0 * cse_7).xyz;
  _mtl_o.xlv_TEXCOORD3 = (cse_7.xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.xlv_TEXCOORD4 = normalize((_mtl_u._Object2World * tmpvar_9).xyz);
  _mtl_o.xlv_TEXCOORD5 = tmpvar_11;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD7 = normalize((cse_7.xyz - _mtl_u._WorldSpaceCameraPos));
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 266 math, 6 textures, 10 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (cse_2.xyz - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (tmpvar_3, tmpvar_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.xy = gl_MultiTexCoord0.xy;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(tmpvar_5.xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_WorldSpaceLightPos0.xyz));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_2).xyz;
  xlv_TEXCOORD3 = (cse_2.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor(
    (1.01 + tmpvar_7)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(tmpvar_7)
  ), 0.0, 1.0));
  xlv_TEXCOORD7 = normalize((cse_2.xyz - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD5);
  vec2 uv_6;
  float tmpvar_7;
  if ((abs(cse_5.z) > (1e-08 * abs(cse_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (cse_5.x / cse_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((cse_5.z < 0.0)) {
      if ((cse_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(cse_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(cse_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_5.y)
    )) * (1.5708 + (
      abs(cse_5.y)
     * 
      (-0.214602 + (abs(cse_5.y) * (0.0865667 + (
        abs(cse_5.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(cse_5.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(cse_5.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  cityoverlay_3 = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec2 uv_14;
  float tmpvar_15;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    float tmpvar_16;
    tmpvar_16 = (tmpvar_13.x / tmpvar_13.z);
    tmpvar_15 = (tmpvar_16 * inversesqrt((
      (tmpvar_16 * tmpvar_16)
     + 1.0)));
    tmpvar_15 = (sign(tmpvar_15) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_15)))
     * 
      (1.5708 + (abs(tmpvar_15) * (-0.214602 + (
        abs(tmpvar_15)
       * 
        (0.0865667 + (abs(tmpvar_15) * -0.0310296))
      ))))
    )));
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.14159;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.14159);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * tmpvar_15));
  uv_14.y = (0.31831 * (1.5708 - (
    sign(tmpvar_13.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.5708 + (
      abs(tmpvar_13.y)
     * 
      (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (
        abs(tmpvar_13.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_17;
  tmpvar_17 = ((uv_14 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_13);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((
    mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22)
   >= tmpvar_21.y))));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _CityOverlayDetailScale), tmpvar_20.xy, tmpvar_20.zw);
  citydarkoverlaydetail_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD5);
  vec2 uv_26;
  float tmpvar_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    float tmpvar_28;
    tmpvar_28 = (tmpvar_25.x / tmpvar_25.z);
    tmpvar_27 = (tmpvar_28 * inversesqrt((
      (tmpvar_28 * tmpvar_28)
     + 1.0)));
    tmpvar_27 = (sign(tmpvar_27) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_27)))
     * 
      (1.5708 + (abs(tmpvar_27) * (-0.214602 + (
        abs(tmpvar_27)
       * 
        (0.0865667 + (abs(tmpvar_27) * -0.0310296))
      ))))
    )));
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        tmpvar_27 += 3.14159;
      } else {
        tmpvar_27 = (tmpvar_27 - 3.14159);
      };
    };
  } else {
    tmpvar_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * tmpvar_27));
  uv_26.y = (0.31831 * (1.5708 - (
    sign(tmpvar_25.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_25.y)
    )) * (1.5708 + (
      abs(tmpvar_25.y)
     * 
      (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (
        abs(tmpvar_25.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_29;
  tmpvar_29 = ((uv_26 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_25.xz);
  vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_25.xz);
  vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_25);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.yxz, mix (tmpvar_33, tmpvar_33.zxy, vec3(tmpvar_34)), vec3(float((
    mix (tmpvar_33.x, tmpvar_33.z, tmpvar_34)
   >= tmpvar_33.y))));
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_35.zy) / abs(tmpvar_35.x)) * _CityOverlayDetailScale), tmpvar_32.xy, tmpvar_32.zw);
  citylightoverlaydetail_1.xyz = tmpvar_36.xyz;
  cityoverlay_3.w = (tmpvar_12.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_24.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_36.w * cityoverlay_3.w);
  color_4.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_36.xyz, citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_38;
  tmpvar_38 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  float tmpvar_39;
  tmpvar_39 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * _LightPositionRange.w) * 0.97);
  float tmpvar_40;
  tmpvar_40 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD3), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float tmpvar_41;
  if ((tmpvar_40 < tmpvar_39)) {
    tmpvar_41 = _LightShadowData.x;
  } else {
    tmpvar_41 = 1.0;
  };
  float atten_42;
  atten_42 = ((tmpvar_37.w * tmpvar_38.w) * tmpvar_41);
  vec4 c_43;
  vec3 tmpvar_44;
  tmpvar_44 = normalize(_WorldSpaceLightPos0.xyz);
  vec3 tmpvar_45;
  tmpvar_45 = normalize(xlv_TEXCOORD4);
  float tmpvar_46;
  tmpvar_46 = dot (tmpvar_45, tmpvar_44);
  c_43.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_46) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_44 + normalize(xlv_TEXCOORD7)))
    , tmpvar_45), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_42 * 4.0));
  c_43.w = (tmpvar_46 * (atten_42 * 4.0));
  float tmpvar_47;
  tmpvar_47 = dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_43 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_47)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_47)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_48;
  tmpvar_48 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4.xyz = tmpvar_48.xyz;
  color_4.w = (tmpvar_48.w * _PlanetOpacity);
  gl_FragData[0] = color_4;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 42 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.x, c13, c13
rsq r0.x, r0.x
mov r0.w, c15.x
mul r0.xyz, r0.x, c13
mov r1.xy, v3
mov r1.z, v4.x
dp3 r1.w, -r1, r0
mov r0.xyz, v2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o7.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r2.xyz, -r0, c12
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c14
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 37 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedgkcnbnhclafdebmclaekemekpbnikdckabaaaaaacmaiaaaaadaaaaaa
cmaaaaaapeaaaaaapeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaakoaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapabaaaalhaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfceneb
emaafeeffiedepepfceeaafeebeoehefeofeaaklepfdeheopiaaaaaaajaaaaaa
aiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdaagaaaaeaaaabaa
imabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaadbcbabaaaaeaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadiccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaa
agaaaaaagfaaaaadhccabaaaahaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaabaaaaaaegbobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
elaaaaaficcabaaaacaaaaaaakaabaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhccabaaaahaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaacaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabaaaaaajbcaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
dgaaaaafdcaabaaaabaaaaaaegbabaaaadaaaaaadgaaaaafecaabaaaabaaaaaa
akbabaaaaeaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaaabaaaaaa
aaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaialpdcaaaaajiccabaaaadaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 266 math, 6 textures, 10 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD3 = (cse_8.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp vec4 tmpvar_59;
  tmpvar_59 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_60;
  tmpvar_60 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_61;
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_61 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = dot (packDist_61, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp float tmpvar_64;
  if ((tmpvar_63 < tmpvar_60)) {
    tmpvar_64 = _LightShadowData.x;
  } else {
    tmpvar_64 = 1.0;
  };
  mediump vec3 lightDir_65;
  lightDir_65 = tmpvar_56;
  mediump vec3 viewDir_66;
  viewDir_66 = xlv_TEXCOORD7;
  mediump vec3 normal_67;
  normal_67 = xlv_TEXCOORD4;
  mediump float atten_68;
  atten_68 = ((tmpvar_58.w * tmpvar_59.w) * tmpvar_64);
  mediump vec4 c_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(lightDir_65);
  lightDir_65 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(viewDir_66);
  viewDir_66 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = normalize(normal_67);
  normal_67 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = dot (tmpvar_72, tmpvar_70);
  highp float tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp (dot (normalize(
    (tmpvar_70 + tmpvar_71)
  ), tmpvar_72), 0.0, 1.0);
  tmpvar_74 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_73) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_74, _SpecularPower) * _SpecularColor.w)
  )) * (atten_68 * 4.0));
  c_69.xyz = tmpvar_76;
  c_69.w = (tmpvar_73 * (atten_68 * 4.0));
  highp vec3 tmpvar_77;
  tmpvar_77 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_78;
  lightDir_78 = tmpvar_77;
  mediump vec3 normal_79;
  normal_79 = xlv_TEXCOORD4;
  mediump float tmpvar_80;
  tmpvar_80 = dot (normal_79, lightDir_78);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_69 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_80)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_80)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_81.xyz;
  highp float tmpvar_82;
  tmpvar_82 = (tmpvar_81.w * _PlanetOpacity);
  color_5.w = tmpvar_82;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 266 math, 6 textures, 10 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD3 = (cse_8.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp vec4 tmpvar_59;
  tmpvar_59 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_60;
  tmpvar_60 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_61;
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_61 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = dot (packDist_61, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp float tmpvar_64;
  if ((tmpvar_63 < tmpvar_60)) {
    tmpvar_64 = _LightShadowData.x;
  } else {
    tmpvar_64 = 1.0;
  };
  mediump vec3 lightDir_65;
  lightDir_65 = tmpvar_56;
  mediump vec3 viewDir_66;
  viewDir_66 = xlv_TEXCOORD7;
  mediump vec3 normal_67;
  normal_67 = xlv_TEXCOORD4;
  mediump float atten_68;
  atten_68 = ((tmpvar_58.w * tmpvar_59.w) * tmpvar_64);
  mediump vec4 c_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(lightDir_65);
  lightDir_65 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(viewDir_66);
  viewDir_66 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = normalize(normal_67);
  normal_67 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = dot (tmpvar_72, tmpvar_70);
  highp float tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp (dot (normalize(
    (tmpvar_70 + tmpvar_71)
  ), tmpvar_72), 0.0, 1.0);
  tmpvar_74 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_73) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_74, _SpecularPower) * _SpecularColor.w)
  )) * (atten_68 * 4.0));
  c_69.xyz = tmpvar_76;
  c_69.w = (tmpvar_73 * (atten_68 * 4.0));
  highp vec3 tmpvar_77;
  tmpvar_77 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_78;
  lightDir_78 = tmpvar_77;
  mediump vec3 normal_79;
  normal_79 = xlv_TEXCOORD4;
  mediump float tmpvar_80;
  tmpvar_80 = dot (normal_79, lightDir_78);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_69 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_80)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_80)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_81.xyz;
  highp float tmpvar_82;
  tmpvar_82 = (tmpvar_81.w * _PlanetOpacity);
  color_5.w = tmpvar_82;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 266 math, 6 textures, 10 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD3 = (cse_8.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec4 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureGrad (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture (_LightTextureB0, vec2(tmpvar_57));
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_60;
  tmpvar_60 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_61;
  lowp vec4 tmpvar_62;
  tmpvar_62 = texture (_ShadowMapTexture, xlv_TEXCOORD3);
  packDist_61 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = dot (packDist_61, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp float tmpvar_64;
  if ((tmpvar_63 < tmpvar_60)) {
    tmpvar_64 = _LightShadowData.x;
  } else {
    tmpvar_64 = 1.0;
  };
  mediump vec3 lightDir_65;
  lightDir_65 = tmpvar_56;
  mediump vec3 viewDir_66;
  viewDir_66 = xlv_TEXCOORD7;
  mediump vec3 normal_67;
  normal_67 = xlv_TEXCOORD4;
  mediump float atten_68;
  atten_68 = ((tmpvar_58.w * tmpvar_59.w) * tmpvar_64);
  mediump vec4 c_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(lightDir_65);
  lightDir_65 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(viewDir_66);
  viewDir_66 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = normalize(normal_67);
  normal_67 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = dot (tmpvar_72, tmpvar_70);
  highp float tmpvar_74;
  mediump float tmpvar_75;
  tmpvar_75 = clamp (dot (normalize(
    (tmpvar_70 + tmpvar_71)
  ), tmpvar_72), 0.0, 1.0);
  tmpvar_74 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_73) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_74, _SpecularPower) * _SpecularColor.w)
  )) * (atten_68 * 4.0));
  c_69.xyz = tmpvar_76;
  c_69.w = (tmpvar_73 * (atten_68 * 4.0));
  highp vec3 tmpvar_77;
  tmpvar_77 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_78;
  lightDir_78 = tmpvar_77;
  mediump vec3 normal_79;
  normal_79 = xlv_TEXCOORD4;
  mediump float tmpvar_80;
  tmpvar_80 = dot (normal_79, lightDir_78);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_69 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_80)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_80)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_81;
  tmpvar_81 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_81.xyz;
  highp float tmpvar_82;
  tmpvar_82 = (tmpvar_81.w * _PlanetOpacity);
  color_5.w = tmpvar_82;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 23 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" ATTR0
Bind "color" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 240
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [_Object2World]
Matrix 176 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesColor [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = half4(_mtl_i._glesColor);
  float3 tmpvar_2;
  tmpvar_2 = normalize(_mtl_i._glesNormal);
  half NdotL_3;
  float4 tmpvar_4;
  float4 tmpvar_5;
  float tmpvar_6;
  float4 cse_7;
  cse_7 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_8;
  tmpvar_8 = (cse_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_5.w = sqrt(dot (tmpvar_8, tmpvar_8));
  float4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = tmpvar_2;
  float4 tmpvar_10;
  tmpvar_10.xy = _mtl_i._glesMultiTexCoord0.xy;
  tmpvar_10.z = _mtl_i._glesMultiTexCoord1.x;
  tmpvar_10.w = _mtl_i._glesMultiTexCoord1.y;
  float3 tmpvar_11;
  tmpvar_11 = -(tmpvar_10.xyz);
  tmpvar_4 = float4(tmpvar_1);
  tmpvar_5.xyz = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = dot (tmpvar_11, normalize(_mtl_u._WorldSpaceLightPos0.xyz));
  NdotL_3 = half(tmpvar_12);
  half tmpvar_13;
  tmpvar_13 = mix ((half)1.0, clamp (floor(
    ((half)1.01 + NdotL_3)
  ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
    -(NdotL_3)
  ), (half)0.0, (half)1.0));
  tmpvar_6 = float(tmpvar_13);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._LightMatrix0 * cse_7).xyz;
  _mtl_o.xlv_TEXCOORD3 = (cse_7.xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.xlv_TEXCOORD4 = normalize((_mtl_u._Object2World * tmpvar_9).xyz);
  _mtl_o.xlv_TEXCOORD5 = tmpvar_11;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD7 = normalize((cse_7.xyz - _mtl_u._WorldSpaceCameraPos));
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 275 math, 9 textures, 13 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (cse_2.xyz - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (tmpvar_3, tmpvar_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.xy = gl_MultiTexCoord0.xy;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(tmpvar_5.xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_WorldSpaceLightPos0.xyz));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_2);
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_2);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor(
    (1.01 + tmpvar_7)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(tmpvar_7)
  ), 0.0, 1.0));
  xlv_TEXCOORD7 = normalize((cse_2.xyz - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD5);
  vec2 uv_6;
  float tmpvar_7;
  if ((abs(cse_5.z) > (1e-08 * abs(cse_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (cse_5.x / cse_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((cse_5.z < 0.0)) {
      if ((cse_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(cse_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(cse_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_5.y)
    )) * (1.5708 + (
      abs(cse_5.y)
     * 
      (-0.214602 + (abs(cse_5.y) * (0.0865667 + (
        abs(cse_5.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(cse_5.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(cse_5.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  cityoverlay_3 = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec2 uv_14;
  float tmpvar_15;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    float tmpvar_16;
    tmpvar_16 = (tmpvar_13.x / tmpvar_13.z);
    tmpvar_15 = (tmpvar_16 * inversesqrt((
      (tmpvar_16 * tmpvar_16)
     + 1.0)));
    tmpvar_15 = (sign(tmpvar_15) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_15)))
     * 
      (1.5708 + (abs(tmpvar_15) * (-0.214602 + (
        abs(tmpvar_15)
       * 
        (0.0865667 + (abs(tmpvar_15) * -0.0310296))
      ))))
    )));
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.14159;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.14159);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * tmpvar_15));
  uv_14.y = (0.31831 * (1.5708 - (
    sign(tmpvar_13.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.5708 + (
      abs(tmpvar_13.y)
     * 
      (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (
        abs(tmpvar_13.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_17;
  tmpvar_17 = ((uv_14 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_13);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((
    mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22)
   >= tmpvar_21.y))));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _CityOverlayDetailScale), tmpvar_20.xy, tmpvar_20.zw);
  citydarkoverlaydetail_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD5);
  vec2 uv_26;
  float tmpvar_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    float tmpvar_28;
    tmpvar_28 = (tmpvar_25.x / tmpvar_25.z);
    tmpvar_27 = (tmpvar_28 * inversesqrt((
      (tmpvar_28 * tmpvar_28)
     + 1.0)));
    tmpvar_27 = (sign(tmpvar_27) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_27)))
     * 
      (1.5708 + (abs(tmpvar_27) * (-0.214602 + (
        abs(tmpvar_27)
       * 
        (0.0865667 + (abs(tmpvar_27) * -0.0310296))
      ))))
    )));
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        tmpvar_27 += 3.14159;
      } else {
        tmpvar_27 = (tmpvar_27 - 3.14159);
      };
    };
  } else {
    tmpvar_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * tmpvar_27));
  uv_26.y = (0.31831 * (1.5708 - (
    sign(tmpvar_25.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_25.y)
    )) * (1.5708 + (
      abs(tmpvar_25.y)
     * 
      (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (
        abs(tmpvar_25.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_29;
  tmpvar_29 = ((uv_26 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_25.xz);
  vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_25.xz);
  vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_25);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.yxz, mix (tmpvar_33, tmpvar_33.zxy, vec3(tmpvar_34)), vec3(float((
    mix (tmpvar_33.x, tmpvar_33.z, tmpvar_34)
   >= tmpvar_33.y))));
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_35.zy) / abs(tmpvar_35.x)) * _CityOverlayDetailScale), tmpvar_32.xy, tmpvar_32.zw);
  citylightoverlaydetail_1.xyz = tmpvar_36.xyz;
  cityoverlay_3.w = (tmpvar_12.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_24.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_36.w * cityoverlay_3.w);
  color_4.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_36.xyz, citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTexture0, ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5));
  vec4 tmpvar_38;
  tmpvar_38 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz)));
  vec4 shadowVals_39;
  vec3 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadowVals_39.x = texture2D (_ShadowMapTexture, (tmpvar_40.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_39.y = texture2D (_ShadowMapTexture, (tmpvar_40.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_39.z = texture2D (_ShadowMapTexture, (tmpvar_40.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_39.w = texture2D (_ShadowMapTexture, (tmpvar_40.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_41;
  tmpvar_41 = lessThan (shadowVals_39, tmpvar_40.zzzz);
  vec4 tmpvar_42;
  tmpvar_42 = _LightShadowData.xxxx;
  float tmpvar_43;
  if (tmpvar_41.x) {
    tmpvar_43 = tmpvar_42.x;
  } else {
    tmpvar_43 = 1.0;
  };
  float tmpvar_44;
  if (tmpvar_41.y) {
    tmpvar_44 = tmpvar_42.y;
  } else {
    tmpvar_44 = 1.0;
  };
  float tmpvar_45;
  if (tmpvar_41.z) {
    tmpvar_45 = tmpvar_42.z;
  } else {
    tmpvar_45 = 1.0;
  };
  float tmpvar_46;
  if (tmpvar_41.w) {
    tmpvar_46 = tmpvar_42.w;
  } else {
    tmpvar_46 = 1.0;
  };
  vec4 tmpvar_47;
  tmpvar_47.x = tmpvar_43;
  tmpvar_47.y = tmpvar_44;
  tmpvar_47.z = tmpvar_45;
  tmpvar_47.w = tmpvar_46;
  float atten_48;
  atten_48 = (((
    float((xlv_TEXCOORD2.z > 0.0))
   * tmpvar_37.w) * tmpvar_38.w) * dot (tmpvar_47, vec4(0.25, 0.25, 0.25, 0.25)));
  vec4 c_49;
  vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0.xyz);
  vec3 tmpvar_51;
  tmpvar_51 = normalize(xlv_TEXCOORD4);
  float tmpvar_52;
  tmpvar_52 = dot (tmpvar_51, tmpvar_50);
  c_49.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_52) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_50 + normalize(xlv_TEXCOORD7)))
    , tmpvar_51), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_48 * 4.0));
  c_49.w = (tmpvar_52 * (atten_48 * 4.0));
  float tmpvar_53;
  tmpvar_53 = dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_49 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_53)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_53)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_54;
  tmpvar_54 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4.xyz = tmpvar_54.xyz;
  color_4.w = (tmpvar_54.w * _PlanetOpacity);
  gl_FragData[0] = color_4;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 46 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c19, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.x, c17, c17
rsq r0.x, r0.x
mov r0.w, c18.x
mul r0.xyz, r0.x, c17
mov r1.xy, v3
mov r1.z, v4.x
dp3 r1.w, -r1, r0
mov r0.xyz, v2
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c18.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c18.y
add r0.y, r0, c18.w
mad o7.x, r0, r0.y, c19
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r2.xyz, -r0, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o1, v1
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "gles " {
// Stats: 275 math, 9 textures, 13 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8);
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_8);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp float tmpvar_61;
  highp vec4 shadowVals_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_64;
  P_64 = (tmpvar_63.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_65;
  tmpvar_65 = texture2D (_ShadowMapTexture, P_64).x;
  shadowVals_62.x = tmpvar_65;
  highp vec2 P_66;
  P_66 = (tmpvar_63.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_67;
  tmpvar_67 = texture2D (_ShadowMapTexture, P_66).x;
  shadowVals_62.y = tmpvar_67;
  highp vec2 P_68;
  P_68 = (tmpvar_63.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_ShadowMapTexture, P_68).x;
  shadowVals_62.z = tmpvar_69;
  highp vec2 P_70;
  P_70 = (tmpvar_63.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_ShadowMapTexture, P_70).x;
  shadowVals_62.w = tmpvar_71;
  bvec4 tmpvar_72;
  tmpvar_72 = lessThan (shadowVals_62, tmpvar_63.zzzz);
  highp vec4 tmpvar_73;
  tmpvar_73 = _LightShadowData.xxxx;
  highp float tmpvar_74;
  if (tmpvar_72.x) {
    tmpvar_74 = tmpvar_73.x;
  } else {
    tmpvar_74 = 1.0;
  };
  highp float tmpvar_75;
  if (tmpvar_72.y) {
    tmpvar_75 = tmpvar_73.y;
  } else {
    tmpvar_75 = 1.0;
  };
  highp float tmpvar_76;
  if (tmpvar_72.z) {
    tmpvar_76 = tmpvar_73.z;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_72.w) {
    tmpvar_77 = tmpvar_73.w;
  } else {
    tmpvar_77 = 1.0;
  };
  mediump vec4 tmpvar_78;
  tmpvar_78.x = tmpvar_74;
  tmpvar_78.y = tmpvar_75;
  tmpvar_78.z = tmpvar_76;
  tmpvar_78.w = tmpvar_77;
  mediump float tmpvar_79;
  tmpvar_79 = dot (tmpvar_78, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_79;
  mediump vec3 lightDir_80;
  lightDir_80 = tmpvar_56;
  mediump vec3 viewDir_81;
  viewDir_81 = xlv_TEXCOORD7;
  mediump vec3 normal_82;
  normal_82 = xlv_TEXCOORD4;
  mediump float atten_83;
  atten_83 = (((
    float((xlv_TEXCOORD2.z > 0.0))
   * tmpvar_57.w) * tmpvar_60.w) * tmpvar_61);
  mediump vec4 c_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = normalize(lightDir_80);
  lightDir_80 = tmpvar_85;
  mediump vec3 tmpvar_86;
  tmpvar_86 = normalize(viewDir_81);
  viewDir_81 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = normalize(normal_82);
  normal_82 = tmpvar_87;
  mediump float tmpvar_88;
  tmpvar_88 = dot (tmpvar_87, tmpvar_85);
  highp float tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp (dot (normalize(
    (tmpvar_85 + tmpvar_86)
  ), tmpvar_87), 0.0, 1.0);
  tmpvar_89 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_88) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_89, _SpecularPower) * _SpecularColor.w)
  )) * (atten_83 * 4.0));
  c_84.xyz = tmpvar_91;
  c_84.w = (tmpvar_88 * (atten_83 * 4.0));
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_93;
  lightDir_93 = tmpvar_92;
  mediump vec3 normal_94;
  normal_94 = xlv_TEXCOORD4;
  mediump float tmpvar_95;
  tmpvar_95 = dot (normal_94, lightDir_93);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_84 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_95)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_95)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_96;
  tmpvar_96 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_96.xyz;
  highp float tmpvar_97;
  tmpvar_97 = (tmpvar_96.w * _PlanetOpacity);
  color_5.w = tmpvar_97;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 275 math, 9 textures, 13 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8);
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_8);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp float tmpvar_61;
  highp vec4 shadowVals_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec2 P_64;
  P_64 = (tmpvar_63.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_65;
  tmpvar_65 = texture2D (_ShadowMapTexture, P_64).x;
  shadowVals_62.x = tmpvar_65;
  highp vec2 P_66;
  P_66 = (tmpvar_63.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_67;
  tmpvar_67 = texture2D (_ShadowMapTexture, P_66).x;
  shadowVals_62.y = tmpvar_67;
  highp vec2 P_68;
  P_68 = (tmpvar_63.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_ShadowMapTexture, P_68).x;
  shadowVals_62.z = tmpvar_69;
  highp vec2 P_70;
  P_70 = (tmpvar_63.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_ShadowMapTexture, P_70).x;
  shadowVals_62.w = tmpvar_71;
  bvec4 tmpvar_72;
  tmpvar_72 = lessThan (shadowVals_62, tmpvar_63.zzzz);
  highp vec4 tmpvar_73;
  tmpvar_73 = _LightShadowData.xxxx;
  highp float tmpvar_74;
  if (tmpvar_72.x) {
    tmpvar_74 = tmpvar_73.x;
  } else {
    tmpvar_74 = 1.0;
  };
  highp float tmpvar_75;
  if (tmpvar_72.y) {
    tmpvar_75 = tmpvar_73.y;
  } else {
    tmpvar_75 = 1.0;
  };
  highp float tmpvar_76;
  if (tmpvar_72.z) {
    tmpvar_76 = tmpvar_73.z;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_72.w) {
    tmpvar_77 = tmpvar_73.w;
  } else {
    tmpvar_77 = 1.0;
  };
  mediump vec4 tmpvar_78;
  tmpvar_78.x = tmpvar_74;
  tmpvar_78.y = tmpvar_75;
  tmpvar_78.z = tmpvar_76;
  tmpvar_78.w = tmpvar_77;
  mediump float tmpvar_79;
  tmpvar_79 = dot (tmpvar_78, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_79;
  mediump vec3 lightDir_80;
  lightDir_80 = tmpvar_56;
  mediump vec3 viewDir_81;
  viewDir_81 = xlv_TEXCOORD7;
  mediump vec3 normal_82;
  normal_82 = xlv_TEXCOORD4;
  mediump float atten_83;
  atten_83 = (((
    float((xlv_TEXCOORD2.z > 0.0))
   * tmpvar_57.w) * tmpvar_60.w) * tmpvar_61);
  mediump vec4 c_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = normalize(lightDir_80);
  lightDir_80 = tmpvar_85;
  mediump vec3 tmpvar_86;
  tmpvar_86 = normalize(viewDir_81);
  viewDir_81 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = normalize(normal_82);
  normal_82 = tmpvar_87;
  mediump float tmpvar_88;
  tmpvar_88 = dot (tmpvar_87, tmpvar_85);
  highp float tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp (dot (normalize(
    (tmpvar_85 + tmpvar_86)
  ), tmpvar_87), 0.0, 1.0);
  tmpvar_89 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_88) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_89, _SpecularPower) * _SpecularColor.w)
  )) * (atten_83 * 4.0));
  c_84.xyz = tmpvar_91;
  c_84.w = (tmpvar_88 * (atten_83 * 4.0));
  highp vec3 tmpvar_92;
  tmpvar_92 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_93;
  lightDir_93 = tmpvar_92;
  mediump vec3 normal_94;
  normal_94 = xlv_TEXCOORD4;
  mediump float tmpvar_95;
  tmpvar_95 = dot (normal_94, lightDir_93);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_84 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_95)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_95)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_96;
  tmpvar_96 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_96.xyz;
  highp float tmpvar_97;
  tmpvar_97 = (tmpvar_96.w * _PlanetOpacity);
  color_5.w = tmpvar_97;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 273 math, 9 textures, 9 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (cse_2.xyz - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (tmpvar_3, tmpvar_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.xy = gl_MultiTexCoord0.xy;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(tmpvar_5.xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_WorldSpaceLightPos0.xyz));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_2);
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_2);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor(
    (1.01 + tmpvar_7)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(tmpvar_7)
  ), 0.0, 1.0));
  xlv_TEXCOORD7 = normalize((cse_2.xyz - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightShadowData;
uniform sampler2DShadow _ShadowMapTexture;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD5);
  vec2 uv_6;
  float tmpvar_7;
  if ((abs(cse_5.z) > (1e-08 * abs(cse_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (cse_5.x / cse_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((cse_5.z < 0.0)) {
      if ((cse_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(cse_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(cse_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_5.y)
    )) * (1.5708 + (
      abs(cse_5.y)
     * 
      (-0.214602 + (abs(cse_5.y) * (0.0865667 + (
        abs(cse_5.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(cse_5.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(cse_5.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  cityoverlay_3 = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec2 uv_14;
  float tmpvar_15;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    float tmpvar_16;
    tmpvar_16 = (tmpvar_13.x / tmpvar_13.z);
    tmpvar_15 = (tmpvar_16 * inversesqrt((
      (tmpvar_16 * tmpvar_16)
     + 1.0)));
    tmpvar_15 = (sign(tmpvar_15) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_15)))
     * 
      (1.5708 + (abs(tmpvar_15) * (-0.214602 + (
        abs(tmpvar_15)
       * 
        (0.0865667 + (abs(tmpvar_15) * -0.0310296))
      ))))
    )));
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.14159;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.14159);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * tmpvar_15));
  uv_14.y = (0.31831 * (1.5708 - (
    sign(tmpvar_13.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.5708 + (
      abs(tmpvar_13.y)
     * 
      (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (
        abs(tmpvar_13.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_17;
  tmpvar_17 = ((uv_14 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_13);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((
    mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22)
   >= tmpvar_21.y))));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _CityOverlayDetailScale), tmpvar_20.xy, tmpvar_20.zw);
  citydarkoverlaydetail_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD5);
  vec2 uv_26;
  float tmpvar_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    float tmpvar_28;
    tmpvar_28 = (tmpvar_25.x / tmpvar_25.z);
    tmpvar_27 = (tmpvar_28 * inversesqrt((
      (tmpvar_28 * tmpvar_28)
     + 1.0)));
    tmpvar_27 = (sign(tmpvar_27) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_27)))
     * 
      (1.5708 + (abs(tmpvar_27) * (-0.214602 + (
        abs(tmpvar_27)
       * 
        (0.0865667 + (abs(tmpvar_27) * -0.0310296))
      ))))
    )));
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        tmpvar_27 += 3.14159;
      } else {
        tmpvar_27 = (tmpvar_27 - 3.14159);
      };
    };
  } else {
    tmpvar_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * tmpvar_27));
  uv_26.y = (0.31831 * (1.5708 - (
    sign(tmpvar_25.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_25.y)
    )) * (1.5708 + (
      abs(tmpvar_25.y)
     * 
      (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (
        abs(tmpvar_25.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_29;
  tmpvar_29 = ((uv_26 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_25.xz);
  vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_25.xz);
  vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_25);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.yxz, mix (tmpvar_33, tmpvar_33.zxy, vec3(tmpvar_34)), vec3(float((
    mix (tmpvar_33.x, tmpvar_33.z, tmpvar_34)
   >= tmpvar_33.y))));
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_35.zy) / abs(tmpvar_35.x)) * _CityOverlayDetailScale), tmpvar_32.xy, tmpvar_32.zw);
  citylightoverlaydetail_1.xyz = tmpvar_36.xyz;
  cityoverlay_3.w = (tmpvar_12.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_24.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_36.w * cityoverlay_3.w);
  color_4.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_36.xyz, citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 shadows_37;
  vec3 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  shadows_37.x = shadow2D (_ShadowMapTexture, (tmpvar_38 + _ShadowOffsets[0].xyz)).x;
  shadows_37.y = shadow2D (_ShadowMapTexture, (tmpvar_38 + _ShadowOffsets[1].xyz)).x;
  shadows_37.z = shadow2D (_ShadowMapTexture, (tmpvar_38 + _ShadowOffsets[2].xyz)).x;
  shadows_37.w = shadow2D (_ShadowMapTexture, (tmpvar_38 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_39;
  tmpvar_39 = (_LightShadowData.xxxx + (shadows_37 * (1.0 - _LightShadowData.xxxx)));
  shadows_37 = tmpvar_39;
  float atten_40;
  atten_40 = (((
    float((xlv_TEXCOORD2.z > 0.0))
   * texture2D (_LightTexture0, 
    ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5)
  ).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz))).w) * dot (tmpvar_39, vec4(0.25, 0.25, 0.25, 0.25)));
  vec4 c_41;
  vec3 tmpvar_42;
  tmpvar_42 = normalize(_WorldSpaceLightPos0.xyz);
  vec3 tmpvar_43;
  tmpvar_43 = normalize(xlv_TEXCOORD4);
  float tmpvar_44;
  tmpvar_44 = dot (tmpvar_43, tmpvar_42);
  c_41.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_44) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_42 + normalize(xlv_TEXCOORD7)))
    , tmpvar_43), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_40 * 4.0));
  c_41.w = (tmpvar_44 * (atten_40 * 4.0));
  float tmpvar_45;
  tmpvar_45 = dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_41 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_45)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_45)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_46;
  tmpvar_46 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4.xyz = tmpvar_46.xyz;
  color_4.w = (tmpvar_46.w * _PlanetOpacity);
  gl_FragData[0] = color_4;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 46 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c18, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c19, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.x, c17, c17
rsq r0.x, r0.x
mov r0.w, c18.x
mul r0.xyz, r0.x, c17
mov r1.xy, v3
mov r1.z, v4.x
dp3 r1.w, -r1, r0
mov r0.xyz, v2
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
add r2.w, r1, c18.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.z, v0, c10
dp4 r0.w, v0, c11
mul_sat r0.x, -r1.w, c18.y
add r0.y, r0, c18.w
mad o7.x, r0, r0.y, c19
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
add r2.xyz, -r0, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o1, v1
dp4 o3.w, r0, c15
dp4 o3.z, r0, c14
dp4 o3.y, r0, c13
dp4 o3.x, r0, c12
dp4 o4.w, r0, c7
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 40 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
ConstBuffer "$Globals" 384
Matrix 80 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityShadows" 416
Matrix 128 [unity_World2Shadow0]
Matrix 192 [unity_World2Shadow1]
Matrix 256 [unity_World2Shadow2]
Matrix 320 [unity_World2Shadow3]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityShadows" 3
BindCB  "UnityPerDraw" 4
"vs_4_0
eefiecedkkngddnemjhmkfcikkfenbkmaialpanjabaaaaaalaaiaaaaadaaaaaa
cmaaaaaapeaaaaaapeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaakoaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapabaaaalhaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfceneb
emaafeeffiedepepfceeaafeebeoehefeofeaaklepfdeheopiaaaaaaajaaaaaa
aiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
apaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaaomaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaafaaaaaaaiahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcleagaaaaeaaaabaa
knabaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
amaaaaaafjaaaaaeegiocaaaaeaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaadbcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadpccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
iccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaa
giaaaaacacaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
aeaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaaeaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
dgaaaaafpccabaaaabaaaaaaegbobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaaficcabaaaacaaaaaadkaabaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaahaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaacaaaaaaegbcbaaa
acaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaaeaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaagaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaahaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaadaaaaaaegiocaaaaaaaaaaa
aiaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaakaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpccabaaaaeaaaaaaegiocaaaadaaaaaaalaaaaaapgapbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaa
egiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
amaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaaeaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabaaaaaajbcaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
dgaaaaafdcaabaaaabaaaaaaegbabaaaadaaaaaadgaaaaafecaabaaaabaaaaaa
akbabaaaaeaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaaabaaaaaa
aaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaialpdcaaaaajiccabaaaafaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}
SubProgram "gles " {
// Stats: 273 math, 9 textures, 9 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8);
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_8);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_57 = texture2D (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture2D (_LightTextureB0, vec2(tmpvar_59));
  lowp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec3 coord_64;
  coord_64 = (tmpvar_63 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_65;
  tmpvar_65 = shadow2DEXT (_ShadowMapTexture, coord_64);
  shadows_62.x = tmpvar_65;
  highp vec3 coord_66;
  coord_66 = (tmpvar_63 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_67;
  tmpvar_67 = shadow2DEXT (_ShadowMapTexture, coord_66);
  shadows_62.y = tmpvar_67;
  highp vec3 coord_68;
  coord_68 = (tmpvar_63 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_69;
  tmpvar_69 = shadow2DEXT (_ShadowMapTexture, coord_68);
  shadows_62.z = tmpvar_69;
  highp vec3 coord_70;
  coord_70 = (tmpvar_63 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_71;
  tmpvar_71 = shadow2DEXT (_ShadowMapTexture, coord_70);
  shadows_62.w = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = (_LightShadowData.xxxx + (shadows_62 * (1.0 - _LightShadowData.xxxx)));
  shadows_62 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_73;
  mediump vec3 lightDir_74;
  lightDir_74 = tmpvar_56;
  mediump vec3 viewDir_75;
  viewDir_75 = xlv_TEXCOORD7;
  mediump vec3 normal_76;
  normal_76 = xlv_TEXCOORD4;
  mediump float atten_77;
  atten_77 = (((
    float((xlv_TEXCOORD2.z > 0.0))
   * tmpvar_57.w) * tmpvar_60.w) * tmpvar_61);
  mediump vec4 c_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(lightDir_74);
  lightDir_74 = tmpvar_79;
  mediump vec3 tmpvar_80;
  tmpvar_80 = normalize(viewDir_75);
  viewDir_75 = tmpvar_80;
  mediump vec3 tmpvar_81;
  tmpvar_81 = normalize(normal_76);
  normal_76 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = dot (tmpvar_81, tmpvar_79);
  highp float tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalize(
    (tmpvar_79 + tmpvar_80)
  ), tmpvar_81), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_82) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_83, _SpecularPower) * _SpecularColor.w)
  )) * (atten_77 * 4.0));
  c_78.xyz = tmpvar_85;
  c_78.w = (tmpvar_82 * (atten_77 * 4.0));
  highp vec3 tmpvar_86;
  tmpvar_86 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_87;
  lightDir_87 = tmpvar_86;
  mediump vec3 normal_88;
  normal_88 = xlv_TEXCOORD4;
  mediump float tmpvar_89;
  tmpvar_89 = dot (normal_88, lightDir_87);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_78 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_89)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_89)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_90;
  tmpvar_90 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_90.xyz;
  highp float tmpvar_91;
  tmpvar_91 = (tmpvar_90.w * _PlanetOpacity);
  color_5.w = tmpvar_91;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 273 math, 9 textures, 9 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8);
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_8);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureGrad (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = ((xlv_TEXCOORD2.xy / xlv_TEXCOORD2.w) + 0.5);
  tmpvar_57 = texture (_LightTexture0, P_58);
  highp float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD2.xyz, xlv_TEXCOORD2.xyz);
  lowp vec4 tmpvar_60;
  tmpvar_60 = texture (_LightTextureB0, vec2(tmpvar_59));
  lowp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (xlv_TEXCOORD3.xyz / xlv_TEXCOORD3.w);
  highp vec3 coord_64;
  coord_64 = (tmpvar_63 + _ShadowOffsets[0].xyz);
  mediump float tmpvar_65;
  tmpvar_65 = texture (_ShadowMapTexture, coord_64);
  shadows_62.x = tmpvar_65;
  highp vec3 coord_66;
  coord_66 = (tmpvar_63 + _ShadowOffsets[1].xyz);
  mediump float tmpvar_67;
  tmpvar_67 = texture (_ShadowMapTexture, coord_66);
  shadows_62.y = tmpvar_67;
  highp vec3 coord_68;
  coord_68 = (tmpvar_63 + _ShadowOffsets[2].xyz);
  mediump float tmpvar_69;
  tmpvar_69 = texture (_ShadowMapTexture, coord_68);
  shadows_62.z = tmpvar_69;
  highp vec3 coord_70;
  coord_70 = (tmpvar_63 + _ShadowOffsets[3].xyz);
  mediump float tmpvar_71;
  tmpvar_71 = texture (_ShadowMapTexture, coord_70);
  shadows_62.w = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = (_LightShadowData.xxxx + (shadows_62 * (1.0 - _LightShadowData.xxxx)));
  shadows_62 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_73;
  mediump vec3 lightDir_74;
  lightDir_74 = tmpvar_56;
  mediump vec3 viewDir_75;
  viewDir_75 = xlv_TEXCOORD7;
  mediump vec3 normal_76;
  normal_76 = xlv_TEXCOORD4;
  mediump float atten_77;
  atten_77 = (((
    float((xlv_TEXCOORD2.z > 0.0))
   * tmpvar_57.w) * tmpvar_60.w) * tmpvar_61);
  mediump vec4 c_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(lightDir_74);
  lightDir_74 = tmpvar_79;
  mediump vec3 tmpvar_80;
  tmpvar_80 = normalize(viewDir_75);
  viewDir_75 = tmpvar_80;
  mediump vec3 tmpvar_81;
  tmpvar_81 = normalize(normal_76);
  normal_76 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = dot (tmpvar_81, tmpvar_79);
  highp float tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalize(
    (tmpvar_79 + tmpvar_80)
  ), tmpvar_81), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_82) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_83, _SpecularPower) * _SpecularColor.w)
  )) * (atten_77 * 4.0));
  c_78.xyz = tmpvar_85;
  c_78.w = (tmpvar_82 * (atten_77 * 4.0));
  highp vec3 tmpvar_86;
  tmpvar_86 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_87;
  lightDir_87 = tmpvar_86;
  mediump vec3 normal_88;
  normal_88 = xlv_TEXCOORD4;
  mediump float tmpvar_89;
  tmpvar_89 = dot (normal_88, lightDir_87);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_78 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_89)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_89)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_90;
  tmpvar_90 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_90.xyz;
  highp float tmpvar_91;
  tmpvar_91 = (tmpvar_90.w * _PlanetOpacity);
  color_5.w = tmpvar_91;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 23 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" ATTR0
Bind "color" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 480
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [_Object2World]
Matrix 416 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesColor [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = half4(_mtl_i._glesColor);
  float3 tmpvar_2;
  tmpvar_2 = normalize(_mtl_i._glesNormal);
  half NdotL_3;
  float4 tmpvar_4;
  float4 tmpvar_5;
  float tmpvar_6;
  float4 cse_7;
  cse_7 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_8;
  tmpvar_8 = (cse_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_5.w = sqrt(dot (tmpvar_8, tmpvar_8));
  float4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = tmpvar_2;
  float4 tmpvar_10;
  tmpvar_10.xy = _mtl_i._glesMultiTexCoord0.xy;
  tmpvar_10.z = _mtl_i._glesMultiTexCoord1.x;
  tmpvar_10.w = _mtl_i._glesMultiTexCoord1.y;
  float3 tmpvar_11;
  tmpvar_11 = -(tmpvar_10.xyz);
  tmpvar_4 = float4(tmpvar_1);
  tmpvar_5.xyz = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = dot (tmpvar_11, normalize(_mtl_u._WorldSpaceLightPos0.xyz));
  NdotL_3 = half(tmpvar_12);
  half tmpvar_13;
  tmpvar_13 = mix ((half)1.0, clamp (floor(
    ((half)1.01 + NdotL_3)
  ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
    -(NdotL_3)
  ), (half)0.0, (half)1.0));
  tmpvar_6 = float(tmpvar_13);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._LightMatrix0 * cse_7);
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u.unity_World2Shadow[0] * cse_7);
  _mtl_o.xlv_TEXCOORD4 = normalize((_mtl_u._Object2World * tmpvar_9).xyz);
  _mtl_o.xlv_TEXCOORD5 = tmpvar_11;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD7 = normalize((cse_7.xyz - _mtl_u._WorldSpaceCameraPos));
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 276 math, 8 textures, 13 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (cse_2.xyz - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (tmpvar_3, tmpvar_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.xy = gl_MultiTexCoord0.xy;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(tmpvar_5.xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_WorldSpaceLightPos0.xyz));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_2).xyz;
  xlv_TEXCOORD3 = (cse_2.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor(
    (1.01 + tmpvar_7)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(tmpvar_7)
  ), 0.0, 1.0));
  xlv_TEXCOORD7 = normalize((cse_2.xyz - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD5);
  vec2 uv_6;
  float tmpvar_7;
  if ((abs(cse_5.z) > (1e-08 * abs(cse_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (cse_5.x / cse_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((cse_5.z < 0.0)) {
      if ((cse_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(cse_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(cse_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_5.y)
    )) * (1.5708 + (
      abs(cse_5.y)
     * 
      (-0.214602 + (abs(cse_5.y) * (0.0865667 + (
        abs(cse_5.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(cse_5.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(cse_5.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  cityoverlay_3 = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec2 uv_14;
  float tmpvar_15;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    float tmpvar_16;
    tmpvar_16 = (tmpvar_13.x / tmpvar_13.z);
    tmpvar_15 = (tmpvar_16 * inversesqrt((
      (tmpvar_16 * tmpvar_16)
     + 1.0)));
    tmpvar_15 = (sign(tmpvar_15) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_15)))
     * 
      (1.5708 + (abs(tmpvar_15) * (-0.214602 + (
        abs(tmpvar_15)
       * 
        (0.0865667 + (abs(tmpvar_15) * -0.0310296))
      ))))
    )));
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.14159;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.14159);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * tmpvar_15));
  uv_14.y = (0.31831 * (1.5708 - (
    sign(tmpvar_13.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.5708 + (
      abs(tmpvar_13.y)
     * 
      (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (
        abs(tmpvar_13.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_17;
  tmpvar_17 = ((uv_14 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_13);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((
    mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22)
   >= tmpvar_21.y))));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _CityOverlayDetailScale), tmpvar_20.xy, tmpvar_20.zw);
  citydarkoverlaydetail_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD5);
  vec2 uv_26;
  float tmpvar_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    float tmpvar_28;
    tmpvar_28 = (tmpvar_25.x / tmpvar_25.z);
    tmpvar_27 = (tmpvar_28 * inversesqrt((
      (tmpvar_28 * tmpvar_28)
     + 1.0)));
    tmpvar_27 = (sign(tmpvar_27) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_27)))
     * 
      (1.5708 + (abs(tmpvar_27) * (-0.214602 + (
        abs(tmpvar_27)
       * 
        (0.0865667 + (abs(tmpvar_27) * -0.0310296))
      ))))
    )));
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        tmpvar_27 += 3.14159;
      } else {
        tmpvar_27 = (tmpvar_27 - 3.14159);
      };
    };
  } else {
    tmpvar_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * tmpvar_27));
  uv_26.y = (0.31831 * (1.5708 - (
    sign(tmpvar_25.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_25.y)
    )) * (1.5708 + (
      abs(tmpvar_25.y)
     * 
      (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (
        abs(tmpvar_25.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_29;
  tmpvar_29 = ((uv_26 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_25.xz);
  vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_25.xz);
  vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_25);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.yxz, mix (tmpvar_33, tmpvar_33.zxy, vec3(tmpvar_34)), vec3(float((
    mix (tmpvar_33.x, tmpvar_33.z, tmpvar_34)
   >= tmpvar_33.y))));
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_35.zy) / abs(tmpvar_35.x)) * _CityOverlayDetailScale), tmpvar_32.xy, tmpvar_32.zw);
  citylightoverlaydetail_1.xyz = tmpvar_36.xyz;
  cityoverlay_3.w = (tmpvar_12.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_24.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_36.w * cityoverlay_3.w);
  color_4.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_36.xyz, citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 shadowVals_38;
  shadowVals_38.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  shadowVals_38.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  shadowVals_38.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  shadowVals_38.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_39;
  tmpvar_39 = lessThan (shadowVals_38, vec4(((
    sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_40;
  tmpvar_40 = _LightShadowData.xxxx;
  float tmpvar_41;
  if (tmpvar_39.x) {
    tmpvar_41 = tmpvar_40.x;
  } else {
    tmpvar_41 = 1.0;
  };
  float tmpvar_42;
  if (tmpvar_39.y) {
    tmpvar_42 = tmpvar_40.y;
  } else {
    tmpvar_42 = 1.0;
  };
  float tmpvar_43;
  if (tmpvar_39.z) {
    tmpvar_43 = tmpvar_40.z;
  } else {
    tmpvar_43 = 1.0;
  };
  float tmpvar_44;
  if (tmpvar_39.w) {
    tmpvar_44 = tmpvar_40.w;
  } else {
    tmpvar_44 = 1.0;
  };
  vec4 tmpvar_45;
  tmpvar_45.x = tmpvar_41;
  tmpvar_45.y = tmpvar_42;
  tmpvar_45.z = tmpvar_43;
  tmpvar_45.w = tmpvar_44;
  float atten_46;
  atten_46 = (tmpvar_37.w * dot (tmpvar_45, vec4(0.25, 0.25, 0.25, 0.25)));
  vec4 c_47;
  vec3 tmpvar_48;
  tmpvar_48 = normalize(_WorldSpaceLightPos0.xyz);
  vec3 tmpvar_49;
  tmpvar_49 = normalize(xlv_TEXCOORD4);
  float tmpvar_50;
  tmpvar_50 = dot (tmpvar_49, tmpvar_48);
  c_47.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_50) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_48 + normalize(xlv_TEXCOORD7)))
    , tmpvar_49), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_46 * 4.0));
  c_47.w = (tmpvar_50 * (atten_46 * 4.0));
  float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_47 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_51)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_51)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_52;
  tmpvar_52 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4.xyz = tmpvar_52.xyz;
  color_4.w = (tmpvar_52.w * _PlanetOpacity);
  gl_FragData[0] = color_4;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 42 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.x, c13, c13
rsq r0.x, r0.x
mov r0.w, c15.x
mul r0.xyz, r0.x, c13
mov r1.xy, v3
mov r1.z, v4.x
dp3 r1.w, -r1, r0
mov r0.xyz, v2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o7.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r2.xyz, -r0, c12
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c14
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 37 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedgkcnbnhclafdebmclaekemekpbnikdckabaaaaaacmaiaaaaadaaaaaa
cmaaaaaapeaaaaaapeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaakoaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapabaaaalhaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfceneb
emaafeeffiedepepfceeaafeebeoehefeofeaaklepfdeheopiaaaaaaajaaaaaa
aiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdaagaaaaeaaaabaa
imabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaadbcbabaaaaeaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadiccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaa
agaaaaaagfaaaaadhccabaaaahaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaabaaaaaaegbobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
elaaaaaficcabaaaacaaaaaaakaabaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhccabaaaahaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaacaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabaaaaaajbcaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
dgaaaaafdcaabaaaabaaaaaaegbabaaaadaaaaaadgaaaaafecaabaaaabaaaaaa
akbabaaaaeaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaaabaaaaaa
aaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaialpdcaaaaajiccabaaaadaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 276 math, 8 textures, 13 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD3 = (cse_8.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTexture0, vec2(tmpvar_57));
  highp float tmpvar_59;
  highp vec4 shadowVals_60;
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_62;
  vec_62 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, vec_62);
  packDist_63 = tmpvar_64;
  shadowVals_60.x = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_60.y = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_60.z = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_60.w = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_74;
  tmpvar_74 = lessThan (shadowVals_60, vec4(tmpvar_61));
  highp vec4 tmpvar_75;
  tmpvar_75 = _LightShadowData.xxxx;
  highp float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  mediump vec4 tmpvar_80;
  tmpvar_80.x = tmpvar_76;
  tmpvar_80.y = tmpvar_77;
  tmpvar_80.z = tmpvar_78;
  tmpvar_80.w = tmpvar_79;
  mediump float tmpvar_81;
  tmpvar_81 = dot (tmpvar_80, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_59 = tmpvar_81;
  mediump vec3 lightDir_82;
  lightDir_82 = tmpvar_56;
  mediump vec3 viewDir_83;
  viewDir_83 = xlv_TEXCOORD7;
  mediump vec3 normal_84;
  normal_84 = xlv_TEXCOORD4;
  mediump float atten_85;
  atten_85 = (tmpvar_58.w * tmpvar_59);
  mediump vec4 c_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = normalize(lightDir_82);
  lightDir_82 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = normalize(viewDir_83);
  viewDir_83 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = normalize(normal_84);
  normal_84 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = dot (tmpvar_89, tmpvar_87);
  highp float tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp (dot (normalize(
    (tmpvar_87 + tmpvar_88)
  ), tmpvar_89), 0.0, 1.0);
  tmpvar_91 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_90) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_91, _SpecularPower) * _SpecularColor.w)
  )) * (atten_85 * 4.0));
  c_86.xyz = tmpvar_93;
  c_86.w = (tmpvar_90 * (atten_85 * 4.0));
  highp vec3 tmpvar_94;
  tmpvar_94 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_95;
  lightDir_95 = tmpvar_94;
  mediump vec3 normal_96;
  normal_96 = xlv_TEXCOORD4;
  mediump float tmpvar_97;
  tmpvar_97 = dot (normal_96, lightDir_95);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_86 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_97)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_97)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_98;
  tmpvar_98 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_98.xyz;
  highp float tmpvar_99;
  tmpvar_99 = (tmpvar_98.w * _PlanetOpacity);
  color_5.w = tmpvar_99;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 276 math, 8 textures, 13 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD3 = (cse_8.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTexture0, vec2(tmpvar_57));
  highp float tmpvar_59;
  highp vec4 shadowVals_60;
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_62;
  vec_62 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, vec_62);
  packDist_63 = tmpvar_64;
  shadowVals_60.x = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_60.y = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_60.z = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_60.w = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_74;
  tmpvar_74 = lessThan (shadowVals_60, vec4(tmpvar_61));
  highp vec4 tmpvar_75;
  tmpvar_75 = _LightShadowData.xxxx;
  highp float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  mediump vec4 tmpvar_80;
  tmpvar_80.x = tmpvar_76;
  tmpvar_80.y = tmpvar_77;
  tmpvar_80.z = tmpvar_78;
  tmpvar_80.w = tmpvar_79;
  mediump float tmpvar_81;
  tmpvar_81 = dot (tmpvar_80, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_59 = tmpvar_81;
  mediump vec3 lightDir_82;
  lightDir_82 = tmpvar_56;
  mediump vec3 viewDir_83;
  viewDir_83 = xlv_TEXCOORD7;
  mediump vec3 normal_84;
  normal_84 = xlv_TEXCOORD4;
  mediump float atten_85;
  atten_85 = (tmpvar_58.w * tmpvar_59);
  mediump vec4 c_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = normalize(lightDir_82);
  lightDir_82 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = normalize(viewDir_83);
  viewDir_83 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = normalize(normal_84);
  normal_84 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = dot (tmpvar_89, tmpvar_87);
  highp float tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp (dot (normalize(
    (tmpvar_87 + tmpvar_88)
  ), tmpvar_89), 0.0, 1.0);
  tmpvar_91 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_90) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_91, _SpecularPower) * _SpecularColor.w)
  )) * (atten_85 * 4.0));
  c_86.xyz = tmpvar_93;
  c_86.w = (tmpvar_90 * (atten_85 * 4.0));
  highp vec3 tmpvar_94;
  tmpvar_94 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_95;
  lightDir_95 = tmpvar_94;
  mediump vec3 normal_96;
  normal_96 = xlv_TEXCOORD4;
  mediump float tmpvar_97;
  tmpvar_97 = dot (normal_96, lightDir_95);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_86 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_97)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_97)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_98;
  tmpvar_98 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_98.xyz;
  highp float tmpvar_99;
  tmpvar_99 = (tmpvar_98.w * _PlanetOpacity);
  color_5.w = tmpvar_99;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 276 math, 8 textures, 13 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD3 = (cse_8.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec4 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureGrad (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture (_LightTexture0, vec2(tmpvar_57));
  highp float tmpvar_59;
  highp vec4 shadowVals_60;
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_62;
  vec_62 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = texture (_ShadowMapTexture, vec_62);
  packDist_63 = tmpvar_64;
  shadowVals_60.x = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_60.y = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = texture (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_60.z = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_60.w = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_74;
  tmpvar_74 = lessThan (shadowVals_60, vec4(tmpvar_61));
  highp vec4 tmpvar_75;
  tmpvar_75 = _LightShadowData.xxxx;
  highp float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  mediump vec4 tmpvar_80;
  tmpvar_80.x = tmpvar_76;
  tmpvar_80.y = tmpvar_77;
  tmpvar_80.z = tmpvar_78;
  tmpvar_80.w = tmpvar_79;
  mediump float tmpvar_81;
  tmpvar_81 = dot (tmpvar_80, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_59 = tmpvar_81;
  mediump vec3 lightDir_82;
  lightDir_82 = tmpvar_56;
  mediump vec3 viewDir_83;
  viewDir_83 = xlv_TEXCOORD7;
  mediump vec3 normal_84;
  normal_84 = xlv_TEXCOORD4;
  mediump float atten_85;
  atten_85 = (tmpvar_58.w * tmpvar_59);
  mediump vec4 c_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = normalize(lightDir_82);
  lightDir_82 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = normalize(viewDir_83);
  viewDir_83 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = normalize(normal_84);
  normal_84 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = dot (tmpvar_89, tmpvar_87);
  highp float tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp (dot (normalize(
    (tmpvar_87 + tmpvar_88)
  ), tmpvar_89), 0.0, 1.0);
  tmpvar_91 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_90) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_91, _SpecularPower) * _SpecularColor.w)
  )) * (atten_85 * 4.0));
  c_86.xyz = tmpvar_93;
  c_86.w = (tmpvar_90 * (atten_85 * 4.0));
  highp vec3 tmpvar_94;
  tmpvar_94 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_95;
  lightDir_95 = tmpvar_94;
  mediump vec3 normal_96;
  normal_96 = xlv_TEXCOORD4;
  mediump float tmpvar_97;
  tmpvar_97 = dot (normal_96, lightDir_95);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_86 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_97)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_97)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_98;
  tmpvar_98 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_98.xyz;
  highp float tmpvar_99;
  tmpvar_99 = (tmpvar_98.w * _PlanetOpacity);
  color_5.w = tmpvar_99;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 23 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" ATTR0
Bind "color" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 240
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [_Object2World]
Matrix 176 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesColor [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = half4(_mtl_i._glesColor);
  float3 tmpvar_2;
  tmpvar_2 = normalize(_mtl_i._glesNormal);
  half NdotL_3;
  float4 tmpvar_4;
  float4 tmpvar_5;
  float tmpvar_6;
  float4 cse_7;
  cse_7 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_8;
  tmpvar_8 = (cse_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_5.w = sqrt(dot (tmpvar_8, tmpvar_8));
  float4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = tmpvar_2;
  float4 tmpvar_10;
  tmpvar_10.xy = _mtl_i._glesMultiTexCoord0.xy;
  tmpvar_10.z = _mtl_i._glesMultiTexCoord1.x;
  tmpvar_10.w = _mtl_i._glesMultiTexCoord1.y;
  float3 tmpvar_11;
  tmpvar_11 = -(tmpvar_10.xyz);
  tmpvar_4 = float4(tmpvar_1);
  tmpvar_5.xyz = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = dot (tmpvar_11, normalize(_mtl_u._WorldSpaceLightPos0.xyz));
  NdotL_3 = half(tmpvar_12);
  half tmpvar_13;
  tmpvar_13 = mix ((half)1.0, clamp (floor(
    ((half)1.01 + NdotL_3)
  ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
    -(NdotL_3)
  ), (half)0.0, (half)1.0));
  tmpvar_6 = float(tmpvar_13);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._LightMatrix0 * cse_7).xyz;
  _mtl_o.xlv_TEXCOORD3 = (cse_7.xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.xlv_TEXCOORD4 = normalize((_mtl_u._Object2World * tmpvar_9).xyz);
  _mtl_o.xlv_TEXCOORD5 = tmpvar_11;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD7 = normalize((cse_7.xyz - _mtl_u._WorldSpaceCameraPos));
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 277 math, 9 textures, 13 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _LightMatrix0;
varying vec4 xlv_TEXCOORD0;
varying vec4 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying float xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  vec3 tmpvar_3;
  tmpvar_3 = (cse_2.xyz - _WorldSpaceCameraPos);
  tmpvar_1.w = sqrt(dot (tmpvar_3, tmpvar_3));
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec4 tmpvar_5;
  tmpvar_5.xy = gl_MultiTexCoord0.xy;
  tmpvar_5.z = gl_MultiTexCoord1.x;
  tmpvar_5.w = gl_MultiTexCoord1.y;
  vec3 tmpvar_6;
  tmpvar_6 = -(tmpvar_5.xyz);
  tmpvar_1.xyz = gl_Normal;
  float tmpvar_7;
  tmpvar_7 = dot (tmpvar_6, normalize(_WorldSpaceLightPos0.xyz));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = gl_Color;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_2).xyz;
  xlv_TEXCOORD3 = (cse_2.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = mix (1.0, clamp (floor(
    (1.01 + tmpvar_7)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(tmpvar_7)
  ), 0.0, 1.0));
  xlv_TEXCOORD7 = normalize((cse_2.xyz - _WorldSpaceCameraPos));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec4 xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 cityoverlay_3;
  vec4 color_4;
  vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD5);
  vec2 uv_6;
  float tmpvar_7;
  if ((abs(cse_5.z) > (1e-08 * abs(cse_5.x)))) {
    float tmpvar_8;
    tmpvar_8 = (cse_5.x / cse_5.z);
    tmpvar_7 = (tmpvar_8 * inversesqrt((
      (tmpvar_8 * tmpvar_8)
     + 1.0)));
    tmpvar_7 = (sign(tmpvar_7) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_7)))
     * 
      (1.5708 + (abs(tmpvar_7) * (-0.214602 + (
        abs(tmpvar_7)
       * 
        (0.0865667 + (abs(tmpvar_7) * -0.0310296))
      ))))
    )));
    if ((cse_5.z < 0.0)) {
      if ((cse_5.x >= 0.0)) {
        tmpvar_7 += 3.14159;
      } else {
        tmpvar_7 = (tmpvar_7 - 3.14159);
      };
    };
  } else {
    tmpvar_7 = (sign(cse_5.x) * 1.5708);
  };
  uv_6.x = (0.5 + (0.159155 * tmpvar_7));
  uv_6.y = (0.31831 * (1.5708 - (
    sign(cse_5.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_5.y)
    )) * (1.5708 + (
      abs(cse_5.y)
     * 
      (-0.214602 + (abs(cse_5.y) * (0.0865667 + (
        abs(cse_5.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(cse_5.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(cse_5.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_6.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_6.y);
  vec4 tmpvar_12;
  tmpvar_12 = texture2DGradARB (_CityOverlayTex, uv_6, tmpvar_11.xy, tmpvar_11.zw);
  cityoverlay_3 = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD5);
  vec2 uv_14;
  float tmpvar_15;
  if ((abs(tmpvar_13.z) > (1e-08 * abs(tmpvar_13.x)))) {
    float tmpvar_16;
    tmpvar_16 = (tmpvar_13.x / tmpvar_13.z);
    tmpvar_15 = (tmpvar_16 * inversesqrt((
      (tmpvar_16 * tmpvar_16)
     + 1.0)));
    tmpvar_15 = (sign(tmpvar_15) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_15)))
     * 
      (1.5708 + (abs(tmpvar_15) * (-0.214602 + (
        abs(tmpvar_15)
       * 
        (0.0865667 + (abs(tmpvar_15) * -0.0310296))
      ))))
    )));
    if ((tmpvar_13.z < 0.0)) {
      if ((tmpvar_13.x >= 0.0)) {
        tmpvar_15 += 3.14159;
      } else {
        tmpvar_15 = (tmpvar_15 - 3.14159);
      };
    };
  } else {
    tmpvar_15 = (sign(tmpvar_13.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * tmpvar_15));
  uv_14.y = (0.31831 * (1.5708 - (
    sign(tmpvar_13.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_13.y)
    )) * (1.5708 + (
      abs(tmpvar_13.y)
     * 
      (-0.214602 + (abs(tmpvar_13.y) * (0.0865667 + (
        abs(tmpvar_13.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_17;
  tmpvar_17 = ((uv_14 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_18;
  tmpvar_18 = dFdx(tmpvar_13.xz);
  vec2 tmpvar_19;
  tmpvar_19 = dFdy(tmpvar_13.xz);
  vec4 tmpvar_20;
  tmpvar_20.x = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_20.y = dFdx(tmpvar_17.y);
  tmpvar_20.z = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_20.w = dFdy(tmpvar_17.y);
  vec3 tmpvar_21;
  tmpvar_21 = abs(tmpvar_13);
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((
    mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22)
   >= tmpvar_21.y))));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _CityOverlayDetailScale), tmpvar_20.xy, tmpvar_20.zw);
  citydarkoverlaydetail_2 = tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD5);
  vec2 uv_26;
  float tmpvar_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    float tmpvar_28;
    tmpvar_28 = (tmpvar_25.x / tmpvar_25.z);
    tmpvar_27 = (tmpvar_28 * inversesqrt((
      (tmpvar_28 * tmpvar_28)
     + 1.0)));
    tmpvar_27 = (sign(tmpvar_27) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_27)))
     * 
      (1.5708 + (abs(tmpvar_27) * (-0.214602 + (
        abs(tmpvar_27)
       * 
        (0.0865667 + (abs(tmpvar_27) * -0.0310296))
      ))))
    )));
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        tmpvar_27 += 3.14159;
      } else {
        tmpvar_27 = (tmpvar_27 - 3.14159);
      };
    };
  } else {
    tmpvar_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * tmpvar_27));
  uv_26.y = (0.31831 * (1.5708 - (
    sign(tmpvar_25.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_25.y)
    )) * (1.5708 + (
      abs(tmpvar_25.y)
     * 
      (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (
        abs(tmpvar_25.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_29;
  tmpvar_29 = ((uv_26 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_25.xz);
  vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_25.xz);
  vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_25);
  float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.yxz, mix (tmpvar_33, tmpvar_33.zxy, vec3(tmpvar_34)), vec3(float((
    mix (tmpvar_33.x, tmpvar_33.z, tmpvar_34)
   >= tmpvar_33.y))));
  vec4 tmpvar_36;
  tmpvar_36 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_35.zy) / abs(tmpvar_35.x)) * _CityOverlayDetailScale), tmpvar_32.xy, tmpvar_32.zw);
  citylightoverlaydetail_1.xyz = tmpvar_36.xyz;
  cityoverlay_3.w = (tmpvar_12.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  citydarkoverlaydetail_2.w = (tmpvar_24.w * cityoverlay_3.w);
  citylightoverlaydetail_1.w = (tmpvar_36.w * cityoverlay_3.w);
  color_4.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_36.xyz, citylightoverlaydetail_1.www);
  color_4.w = 0.0;
  vec4 tmpvar_37;
  tmpvar_37 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD2, xlv_TEXCOORD2)));
  vec4 tmpvar_38;
  tmpvar_38 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  vec4 shadowVals_39;
  shadowVals_39.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  shadowVals_39.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  shadowVals_39.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  shadowVals_39.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_40;
  tmpvar_40 = lessThan (shadowVals_39, vec4(((
    sqrt(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_41;
  tmpvar_41 = _LightShadowData.xxxx;
  float tmpvar_42;
  if (tmpvar_40.x) {
    tmpvar_42 = tmpvar_41.x;
  } else {
    tmpvar_42 = 1.0;
  };
  float tmpvar_43;
  if (tmpvar_40.y) {
    tmpvar_43 = tmpvar_41.y;
  } else {
    tmpvar_43 = 1.0;
  };
  float tmpvar_44;
  if (tmpvar_40.z) {
    tmpvar_44 = tmpvar_41.z;
  } else {
    tmpvar_44 = 1.0;
  };
  float tmpvar_45;
  if (tmpvar_40.w) {
    tmpvar_45 = tmpvar_41.w;
  } else {
    tmpvar_45 = 1.0;
  };
  vec4 tmpvar_46;
  tmpvar_46.x = tmpvar_42;
  tmpvar_46.y = tmpvar_43;
  tmpvar_46.z = tmpvar_44;
  tmpvar_46.w = tmpvar_45;
  float atten_47;
  atten_47 = ((tmpvar_37.w * tmpvar_38.w) * dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)));
  vec4 c_48;
  vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0.xyz);
  vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD4);
  float tmpvar_51;
  tmpvar_51 = dot (tmpvar_50, tmpvar_49);
  c_48.xyz = (((
    (color_4.xyz * _LightColor0.xyz)
   * tmpvar_51) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_49 + normalize(xlv_TEXCOORD7)))
    , tmpvar_50), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_47 * 4.0));
  c_48.w = (tmpvar_51 * (atten_47 * 4.0));
  float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_48 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_52)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_52)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_53;
  tmpvar_53 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_4.xyz = tmpvar_53.xyz;
  color_4.w = (tmpvar_53.w * _PlanetOpacity);
  gl_FragData[0] = color_4;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 42 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [_LightPositionRange]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c16, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dp3 r0.x, c13, c13
rsq r0.x, r0.x
mov r0.w, c15.x
mul r0.xyz, r0.x, c13
mov r1.xy, v3
mov r1.z, v4.x
dp3 r1.w, -r1, r0
mov r0.xyz, v2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
add r2.w, r1, c15.z
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o5.xyz, r0.x, r2
frc r0.y, r2.w
add_sat r0.y, r2.w, -r0
dp4 r0.z, v0, c6
mul_sat r0.x, -r1.w, c15.y
add r0.y, r0, c15.w
mad o7.x, r0, r0.y, c16
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r2.xyz, -r0, c12
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o1, v1
dp4 o3.z, r0, c10
dp4 o3.y, r0, c9
dp4 o3.x, r0, c8
mul o8.xyz, r1.w, -r2
mov o2.xyz, v2
rcp o2.w, r1.w
add o4.xyz, r0, -c14
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 37 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
ConstBuffer "$Globals" 320
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedgkcnbnhclafdebmclaekemekpbnikdckabaaaaaacmaiaaaaadaaaaaa
cmaaaaaapeaaaaaapeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakhaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakoaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaakoaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapabaaaalhaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfceneb
emaafeeffiedepepfceeaafeebeoehefeofeaaklepfdeheopiaaaaaaajaaaaaa
aiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaomaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaaomaaaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcdaagaaaaeaaaabaa
imabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaadbcbabaaaaeaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadiccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaa
agaaaaaagfaaaaadhccabaaaahaaaaaagiaaaaacacaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaabaaaaaaegbobaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaeaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaa
elaaaaaficcabaaaacaaaaaaakaabaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhccabaaaahaaaaaaagaabaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaacaaaaaaegbcbaaaacaaaaaadiaaaaaipcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhccabaaaadaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabaaaaaajbcaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
egiccaaaacaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
dgaaaaafdcaabaaaabaaaaaaegbabaaaadaaaaaadgaaaaafecaabaaaabaaaaaa
akbabaaaaeaaaaaabaaaaaaibcaabaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaa
egacbaaaaaaaaaaadgaaaaaghccabaaaagaaaaaaegacbaiaebaaaaaaabaaaaaa
aaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaialpdcaaaaajiccabaaaadaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 277 math, 9 textures, 13 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD3 = (cse_8.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp vec4 tmpvar_59;
  tmpvar_59 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_60;
  highp vec4 shadowVals_61;
  highp float tmpvar_62;
  tmpvar_62 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_63;
  vec_63 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureCube (_ShadowMapTexture, vec_63);
  packDist_64 = tmpvar_65;
  shadowVals_61.x = dot (packDist_64, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_66;
  vec_66 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_ShadowMapTexture, vec_66);
  packDist_67 = tmpvar_68;
  shadowVals_61.y = dot (packDist_67, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_69;
  vec_69 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, vec_69);
  packDist_70 = tmpvar_71;
  shadowVals_61.z = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_72;
  vec_72 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_73;
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_ShadowMapTexture, vec_72);
  packDist_73 = tmpvar_74;
  shadowVals_61.w = dot (packDist_73, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_75;
  tmpvar_75 = lessThan (shadowVals_61, vec4(tmpvar_62));
  highp vec4 tmpvar_76;
  tmpvar_76 = _LightShadowData.xxxx;
  highp float tmpvar_77;
  if (tmpvar_75.x) {
    tmpvar_77 = tmpvar_76.x;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_75.y) {
    tmpvar_78 = tmpvar_76.y;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_75.z) {
    tmpvar_79 = tmpvar_76.z;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_75.w) {
    tmpvar_80 = tmpvar_76.w;
  } else {
    tmpvar_80 = 1.0;
  };
  mediump vec4 tmpvar_81;
  tmpvar_81.x = tmpvar_77;
  tmpvar_81.y = tmpvar_78;
  tmpvar_81.z = tmpvar_79;
  tmpvar_81.w = tmpvar_80;
  mediump float tmpvar_82;
  tmpvar_82 = dot (tmpvar_81, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_60 = tmpvar_82;
  mediump vec3 lightDir_83;
  lightDir_83 = tmpvar_56;
  mediump vec3 viewDir_84;
  viewDir_84 = xlv_TEXCOORD7;
  mediump vec3 normal_85;
  normal_85 = xlv_TEXCOORD4;
  mediump float atten_86;
  atten_86 = ((tmpvar_58.w * tmpvar_59.w) * tmpvar_60);
  mediump vec4 c_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = normalize(lightDir_83);
  lightDir_83 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = normalize(viewDir_84);
  viewDir_84 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90 = normalize(normal_85);
  normal_85 = tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = dot (tmpvar_90, tmpvar_88);
  highp float tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (normalize(
    (tmpvar_88 + tmpvar_89)
  ), tmpvar_90), 0.0, 1.0);
  tmpvar_92 = tmpvar_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_91) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_92, _SpecularPower) * _SpecularColor.w)
  )) * (atten_86 * 4.0));
  c_87.xyz = tmpvar_94;
  c_87.w = (tmpvar_91 * (atten_86 * 4.0));
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_96;
  lightDir_96 = tmpvar_95;
  mediump vec3 normal_97;
  normal_97 = xlv_TEXCOORD4;
  mediump float tmpvar_98;
  tmpvar_98 = dot (normal_97, lightDir_96);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_87 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_98)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_98)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_99;
  tmpvar_99 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_99.xyz;
  highp float tmpvar_100;
  tmpvar_100 = (tmpvar_99.w * _PlanetOpacity);
  color_5.w = tmpvar_100;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 277 math, 9 textures, 13 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD3 = (cse_8.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp vec4 tmpvar_59;
  tmpvar_59 = textureCube (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_60;
  highp vec4 shadowVals_61;
  highp float tmpvar_62;
  tmpvar_62 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_63;
  vec_63 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureCube (_ShadowMapTexture, vec_63);
  packDist_64 = tmpvar_65;
  shadowVals_61.x = dot (packDist_64, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_66;
  vec_66 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_ShadowMapTexture, vec_66);
  packDist_67 = tmpvar_68;
  shadowVals_61.y = dot (packDist_67, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_69;
  vec_69 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, vec_69);
  packDist_70 = tmpvar_71;
  shadowVals_61.z = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_72;
  vec_72 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_73;
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_ShadowMapTexture, vec_72);
  packDist_73 = tmpvar_74;
  shadowVals_61.w = dot (packDist_73, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_75;
  tmpvar_75 = lessThan (shadowVals_61, vec4(tmpvar_62));
  highp vec4 tmpvar_76;
  tmpvar_76 = _LightShadowData.xxxx;
  highp float tmpvar_77;
  if (tmpvar_75.x) {
    tmpvar_77 = tmpvar_76.x;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_75.y) {
    tmpvar_78 = tmpvar_76.y;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_75.z) {
    tmpvar_79 = tmpvar_76.z;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_75.w) {
    tmpvar_80 = tmpvar_76.w;
  } else {
    tmpvar_80 = 1.0;
  };
  mediump vec4 tmpvar_81;
  tmpvar_81.x = tmpvar_77;
  tmpvar_81.y = tmpvar_78;
  tmpvar_81.z = tmpvar_79;
  tmpvar_81.w = tmpvar_80;
  mediump float tmpvar_82;
  tmpvar_82 = dot (tmpvar_81, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_60 = tmpvar_82;
  mediump vec3 lightDir_83;
  lightDir_83 = tmpvar_56;
  mediump vec3 viewDir_84;
  viewDir_84 = xlv_TEXCOORD7;
  mediump vec3 normal_85;
  normal_85 = xlv_TEXCOORD4;
  mediump float atten_86;
  atten_86 = ((tmpvar_58.w * tmpvar_59.w) * tmpvar_60);
  mediump vec4 c_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = normalize(lightDir_83);
  lightDir_83 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = normalize(viewDir_84);
  viewDir_84 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90 = normalize(normal_85);
  normal_85 = tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = dot (tmpvar_90, tmpvar_88);
  highp float tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (normalize(
    (tmpvar_88 + tmpvar_89)
  ), tmpvar_90), 0.0, 1.0);
  tmpvar_92 = tmpvar_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_91) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_92, _SpecularPower) * _SpecularColor.w)
  )) * (atten_86 * 4.0));
  c_87.xyz = tmpvar_94;
  c_87.w = (tmpvar_91 * (atten_86 * 4.0));
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_96;
  lightDir_96 = tmpvar_95;
  mediump vec3 normal_97;
  normal_97 = xlv_TEXCOORD4;
  mediump float tmpvar_98;
  tmpvar_98 = dot (normal_97, lightDir_96);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_87 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_98)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_98)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_99;
  tmpvar_99 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_99.xyz;
  highp float tmpvar_100;
  tmpvar_100 = (tmpvar_99.w * _PlanetOpacity);
  color_5.w = tmpvar_100;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 277 math, 9 textures, 13 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  highp vec4 cse_8;
  cse_8 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec4 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord0.xy;
  tmpvar_11.z = tmpvar_3.x;
  tmpvar_11.w = tmpvar_3.y;
  highp vec3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = tmpvar_1;
  tmpvar_6.xyz = tmpvar_2;
  highp float tmpvar_13;
  tmpvar_13 = dot (tmpvar_12, normalize(_WorldSpaceLightPos0.xyz));
  NdotL_4 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_7 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_6;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_8).xyz;
  xlv_TEXCOORD3 = (cse_8.xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_10).xyz);
  xlv_TEXCOORD5 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = normalize((cse_8.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec4 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureGrad (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD2, xlv_TEXCOORD2);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture (_LightTextureB0, vec2(tmpvar_57));
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture (_LightTexture0, xlv_TEXCOORD2);
  highp float tmpvar_60;
  highp vec4 shadowVals_61;
  highp float tmpvar_62;
  tmpvar_62 = ((sqrt(
    dot (xlv_TEXCOORD3, xlv_TEXCOORD3)
  ) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_63;
  vec_63 = (xlv_TEXCOORD3 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture (_ShadowMapTexture, vec_63);
  packDist_64 = tmpvar_65;
  shadowVals_61.x = dot (packDist_64, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_66;
  vec_66 = (xlv_TEXCOORD3 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture (_ShadowMapTexture, vec_66);
  packDist_67 = tmpvar_68;
  shadowVals_61.y = dot (packDist_67, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_69;
  vec_69 = (xlv_TEXCOORD3 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture (_ShadowMapTexture, vec_69);
  packDist_70 = tmpvar_71;
  shadowVals_61.z = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_72;
  vec_72 = (xlv_TEXCOORD3 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_73;
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture (_ShadowMapTexture, vec_72);
  packDist_73 = tmpvar_74;
  shadowVals_61.w = dot (packDist_73, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_75;
  tmpvar_75 = lessThan (shadowVals_61, vec4(tmpvar_62));
  highp vec4 tmpvar_76;
  tmpvar_76 = _LightShadowData.xxxx;
  highp float tmpvar_77;
  if (tmpvar_75.x) {
    tmpvar_77 = tmpvar_76.x;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_75.y) {
    tmpvar_78 = tmpvar_76.y;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_75.z) {
    tmpvar_79 = tmpvar_76.z;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_75.w) {
    tmpvar_80 = tmpvar_76.w;
  } else {
    tmpvar_80 = 1.0;
  };
  mediump vec4 tmpvar_81;
  tmpvar_81.x = tmpvar_77;
  tmpvar_81.y = tmpvar_78;
  tmpvar_81.z = tmpvar_79;
  tmpvar_81.w = tmpvar_80;
  mediump float tmpvar_82;
  tmpvar_82 = dot (tmpvar_81, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_60 = tmpvar_82;
  mediump vec3 lightDir_83;
  lightDir_83 = tmpvar_56;
  mediump vec3 viewDir_84;
  viewDir_84 = xlv_TEXCOORD7;
  mediump vec3 normal_85;
  normal_85 = xlv_TEXCOORD4;
  mediump float atten_86;
  atten_86 = ((tmpvar_58.w * tmpvar_59.w) * tmpvar_60);
  mediump vec4 c_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = normalize(lightDir_83);
  lightDir_83 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = normalize(viewDir_84);
  viewDir_84 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90 = normalize(normal_85);
  normal_85 = tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = dot (tmpvar_90, tmpvar_88);
  highp float tmpvar_92;
  mediump float tmpvar_93;
  tmpvar_93 = clamp (dot (normalize(
    (tmpvar_88 + tmpvar_89)
  ), tmpvar_90), 0.0, 1.0);
  tmpvar_92 = tmpvar_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_91) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_92, _SpecularPower) * _SpecularColor.w)
  )) * (atten_86 * 4.0));
  c_87.xyz = tmpvar_94;
  c_87.w = (tmpvar_91 * (atten_86 * 4.0));
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_96;
  lightDir_96 = tmpvar_95;
  mediump vec3 normal_97;
  normal_97 = xlv_TEXCOORD4;
  mediump float tmpvar_98;
  tmpvar_98 = dot (normal_97, lightDir_96);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_87 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_98)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_98)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_99;
  tmpvar_99 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_99.xyz;
  highp float tmpvar_100;
  tmpvar_100 = (tmpvar_99.w * _PlanetOpacity);
  color_5.w = tmpvar_100;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 23 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" ATTR0
Bind "color" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 240
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [_Object2World]
Matrix 176 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesColor [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = half4(_mtl_i._glesColor);
  float3 tmpvar_2;
  tmpvar_2 = normalize(_mtl_i._glesNormal);
  half NdotL_3;
  float4 tmpvar_4;
  float4 tmpvar_5;
  float tmpvar_6;
  float4 cse_7;
  cse_7 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_8;
  tmpvar_8 = (cse_7.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_5.w = sqrt(dot (tmpvar_8, tmpvar_8));
  float4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = tmpvar_2;
  float4 tmpvar_10;
  tmpvar_10.xy = _mtl_i._glesMultiTexCoord0.xy;
  tmpvar_10.z = _mtl_i._glesMultiTexCoord1.x;
  tmpvar_10.w = _mtl_i._glesMultiTexCoord1.y;
  float3 tmpvar_11;
  tmpvar_11 = -(tmpvar_10.xyz);
  tmpvar_4 = float4(tmpvar_1);
  tmpvar_5.xyz = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = dot (tmpvar_11, normalize(_mtl_u._WorldSpaceLightPos0.xyz));
  NdotL_3 = half(tmpvar_12);
  half tmpvar_13;
  tmpvar_13 = mix ((half)1.0, clamp (floor(
    ((half)1.01 + NdotL_3)
  ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
    -(NdotL_3)
  ), (half)0.0, (half)1.0));
  tmpvar_6 = float(tmpvar_13);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = tmpvar_4;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._LightMatrix0 * cse_7).xyz;
  _mtl_o.xlv_TEXCOORD3 = (cse_7.xyz - _mtl_u._LightPositionRange.xyz);
  _mtl_o.xlv_TEXCOORD4 = normalize((_mtl_u._Object2World * tmpvar_9).xyz);
  _mtl_o.xlv_TEXCOORD5 = tmpvar_11;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD7 = normalize((cse_7.xyz - _mtl_u._WorldSpaceCameraPos));
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 259 math, 4 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec3 lightDirection_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  highp vec4 cse_9;
  cse_9 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_10;
  tmpvar_10 = (cse_9.xyz - _WorldSpaceCameraPos);
  tmpvar_7.w = sqrt(dot (tmpvar_10, tmpvar_10));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec4 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord0.xy;
  tmpvar_12.z = tmpvar_3.x;
  tmpvar_12.w = tmpvar_3.y;
  highp vec3 tmpvar_13;
  tmpvar_13 = -(tmpvar_12.xyz);
  tmpvar_6 = tmpvar_1;
  tmpvar_7.xyz = tmpvar_2;
  lowp vec3 tmpvar_14;
  tmpvar_14 = normalize(_WorldSpaceLightPos0.xyz);
  lightDirection_5 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_13, lightDirection_5);
  NdotL_4 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_8 = tmpvar_16;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * cse_9);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_11).xyz);
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = normalize((cse_9.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp float shadow_57;
  lowp float tmpvar_58;
  tmpvar_58 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  highp float tmpvar_59;
  tmpvar_59 = (_LightShadowData.x + (tmpvar_58 * (1.0 - _LightShadowData.x)));
  shadow_57 = tmpvar_59;
  mediump vec3 lightDir_60;
  lightDir_60 = tmpvar_56;
  mediump vec3 viewDir_61;
  viewDir_61 = xlv_TEXCOORD7;
  mediump vec3 normal_62;
  normal_62 = xlv_TEXCOORD4;
  mediump float atten_63;
  atten_63 = shadow_57;
  mediump vec4 c_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = normalize(lightDir_60);
  lightDir_60 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(viewDir_61);
  viewDir_61 = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(normal_62);
  normal_62 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_65);
  highp float tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp (dot (normalize(
    (tmpvar_65 + tmpvar_66)
  ), tmpvar_67), 0.0, 1.0);
  tmpvar_69 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_68) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_69, _SpecularPower) * _SpecularColor.w)
  )) * (atten_63 * 4.0));
  c_64.xyz = tmpvar_71;
  c_64.w = (tmpvar_68 * (atten_63 * 4.0));
  lowp vec3 tmpvar_72;
  tmpvar_72 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_73;
  lightDir_73 = tmpvar_72;
  mediump vec3 normal_74;
  normal_74 = xlv_TEXCOORD4;
  mediump float tmpvar_75;
  tmpvar_75 = dot (normal_74, lightDir_73);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_64 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_75)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_75)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_76;
  tmpvar_76 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_76.xyz;
  highp float tmpvar_77;
  tmpvar_77 = (tmpvar_76.w * _PlanetOpacity);
  color_5.w = tmpvar_77;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 259 math, 4 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec3 lightDirection_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  highp vec4 cse_9;
  cse_9 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_10;
  tmpvar_10 = (cse_9.xyz - _WorldSpaceCameraPos);
  tmpvar_7.w = sqrt(dot (tmpvar_10, tmpvar_10));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec4 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord0.xy;
  tmpvar_12.z = tmpvar_3.x;
  tmpvar_12.w = tmpvar_3.y;
  highp vec3 tmpvar_13;
  tmpvar_13 = -(tmpvar_12.xyz);
  tmpvar_6 = tmpvar_1;
  tmpvar_7.xyz = tmpvar_2;
  lowp vec3 tmpvar_14;
  tmpvar_14 = normalize(_WorldSpaceLightPos0.xyz);
  lightDirection_5 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_13, lightDirection_5);
  NdotL_4 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_8 = tmpvar_16;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = (unity_World2Shadow[0] * cse_9);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_11).xyz);
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = normalize((cse_9.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec4 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureGrad (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp float shadow_57;
  mediump float tmpvar_58;
  tmpvar_58 = texture (_ShadowMapTexture, xlv_TEXCOORD2.xyz);
  lowp float tmpvar_59;
  tmpvar_59 = tmpvar_58;
  highp float tmpvar_60;
  tmpvar_60 = (_LightShadowData.x + (tmpvar_59 * (1.0 - _LightShadowData.x)));
  shadow_57 = tmpvar_60;
  mediump vec3 lightDir_61;
  lightDir_61 = tmpvar_56;
  mediump vec3 viewDir_62;
  viewDir_62 = xlv_TEXCOORD7;
  mediump vec3 normal_63;
  normal_63 = xlv_TEXCOORD4;
  mediump float atten_64;
  atten_64 = shadow_57;
  mediump vec4 c_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(lightDir_61);
  lightDir_61 = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(viewDir_62);
  viewDir_62 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = normalize(normal_63);
  normal_63 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_66);
  highp float tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = clamp (dot (normalize(
    (tmpvar_66 + tmpvar_67)
  ), tmpvar_68), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_69) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_70, _SpecularPower) * _SpecularColor.w)
  )) * (atten_64 * 4.0));
  c_65.xyz = tmpvar_72;
  c_65.w = (tmpvar_69 * (atten_64 * 4.0));
  lowp vec3 tmpvar_73;
  tmpvar_73 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_74;
  lightDir_74 = tmpvar_73;
  mediump vec3 normal_75;
  normal_75 = xlv_TEXCOORD4;
  mediump float tmpvar_76;
  tmpvar_76 = dot (normal_75, lightDir_74);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_65 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_76)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_76)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_77.xyz;
  highp float tmpvar_78;
  tmpvar_78 = (tmpvar_77.w * _PlanetOpacity);
  color_5.w = tmpvar_78;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 22 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
Bind "vertex" ATTR0
Bind "color" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 416
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [_Object2World]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesColor [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD1;
  float4 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = half4(_mtl_i._glesColor);
  float3 tmpvar_2;
  tmpvar_2 = normalize(_mtl_i._glesNormal);
  half NdotL_3;
  float3 lightDirection_4;
  float4 tmpvar_5;
  float4 tmpvar_6;
  float tmpvar_7;
  float4 cse_8;
  cse_8 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  float4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  float4 tmpvar_11;
  tmpvar_11.xy = _mtl_i._glesMultiTexCoord0.xy;
  tmpvar_11.z = _mtl_i._glesMultiTexCoord1.x;
  tmpvar_11.w = _mtl_i._glesMultiTexCoord1.y;
  float3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = float4(tmpvar_1);
  tmpvar_6.xyz = tmpvar_2;
  half3 tmpvar_13;
  tmpvar_13 = normalize(_mtl_u._WorldSpaceLightPos0.xyz);
  lightDirection_4 = float3(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = dot (tmpvar_12, lightDirection_4);
  NdotL_3 = half(tmpvar_14);
  half tmpvar_15;
  tmpvar_15 = mix ((half)1.0, clamp (floor(
    ((half)1.01 + NdotL_3)
  ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
    -(NdotL_3)
  ), (half)0.0, (half)1.0));
  tmpvar_7 = float(tmpvar_15);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u.unity_World2Shadow[0] * cse_8);
  _mtl_o.xlv_TEXCOORD4 = normalize((_mtl_u._Object2World * tmpvar_10).xyz);
  _mtl_o.xlv_TEXCOORD5 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD7 = normalize((cse_8.xyz - _mtl_u._WorldSpaceCameraPos));
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 260 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp float xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec3 lightDirection_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  highp vec4 cse_9;
  cse_9 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_10;
  tmpvar_10 = (cse_9.xyz - _WorldSpaceCameraPos);
  tmpvar_7.w = sqrt(dot (tmpvar_10, tmpvar_10));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec4 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord0.xy;
  tmpvar_12.z = tmpvar_3.x;
  tmpvar_12.w = tmpvar_3.y;
  highp vec3 tmpvar_13;
  tmpvar_13 = -(tmpvar_12.xyz);
  tmpvar_6 = tmpvar_1;
  tmpvar_7.xyz = tmpvar_2;
  lowp vec3 tmpvar_14;
  tmpvar_14 = normalize(_WorldSpaceLightPos0.xyz);
  lightDirection_5 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_13, lightDirection_5);
  NdotL_4 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_8 = tmpvar_16;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_9).xy;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_9);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_11).xyz);
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = normalize((cse_9.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2D (_LightTexture0, xlv_TEXCOORD2);
  lowp float shadow_58;
  lowp float tmpvar_59;
  tmpvar_59 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  highp float tmpvar_60;
  tmpvar_60 = (_LightShadowData.x + (tmpvar_59 * (1.0 - _LightShadowData.x)));
  shadow_58 = tmpvar_60;
  mediump vec3 lightDir_61;
  lightDir_61 = tmpvar_56;
  mediump vec3 viewDir_62;
  viewDir_62 = xlv_TEXCOORD7;
  mediump vec3 normal_63;
  normal_63 = xlv_TEXCOORD4;
  mediump float atten_64;
  atten_64 = (tmpvar_57.w * shadow_58);
  mediump vec4 c_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = normalize(lightDir_61);
  lightDir_61 = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(viewDir_62);
  viewDir_62 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = normalize(normal_63);
  normal_63 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_66);
  highp float tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = clamp (dot (normalize(
    (tmpvar_66 + tmpvar_67)
  ), tmpvar_68), 0.0, 1.0);
  tmpvar_70 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_69) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_70, _SpecularPower) * _SpecularColor.w)
  )) * (atten_64 * 4.0));
  c_65.xyz = tmpvar_72;
  c_65.w = (tmpvar_69 * (atten_64 * 4.0));
  lowp vec3 tmpvar_73;
  tmpvar_73 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_74;
  lightDir_74 = tmpvar_73;
  mediump vec3 normal_75;
  normal_75 = xlv_TEXCOORD4;
  mediump float tmpvar_76;
  tmpvar_76 = dot (normal_75, lightDir_74);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_65 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_76)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_76)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_77.xyz;
  highp float tmpvar_78;
  tmpvar_78 = (tmpvar_77.w * _PlanetOpacity);
  color_5.w = tmpvar_78;
  tmpvar_1 = color_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 260 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _LightMatrix0;
out highp vec4 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord1;
  mediump float NdotL_4;
  highp vec3 lightDirection_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  highp vec4 cse_9;
  cse_9 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_10;
  tmpvar_10 = (cse_9.xyz - _WorldSpaceCameraPos);
  tmpvar_7.w = sqrt(dot (tmpvar_10, tmpvar_10));
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec4 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord0.xy;
  tmpvar_12.z = tmpvar_3.x;
  tmpvar_12.w = tmpvar_3.y;
  highp vec3 tmpvar_13;
  tmpvar_13 = -(tmpvar_12.xyz);
  tmpvar_6 = tmpvar_1;
  tmpvar_7.xyz = tmpvar_2;
  lowp vec3 tmpvar_14;
  tmpvar_14 = normalize(_WorldSpaceLightPos0.xyz);
  lightDirection_5 = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_13, lightDirection_5);
  NdotL_4 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = mix (1.0, clamp (floor(
    (1.01 + NdotL_4)
  ), 0.0, 1.0), clamp ((10.0 * 
    -(NdotL_4)
  ), 0.0, 1.0));
  tmpvar_8 = tmpvar_16;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_6;
  xlv_TEXCOORD1 = tmpvar_7;
  xlv_TEXCOORD2 = (_LightMatrix0 * cse_9).xy;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * cse_9);
  xlv_TEXCOORD4 = normalize((_Object2World * tmpvar_11).xyz);
  xlv_TEXCOORD5 = tmpvar_13;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = normalize((cse_9.xyz - _WorldSpaceCameraPos));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform highp float _PlanetOpacity;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec4 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec4 cityoverlay_4;
  mediump vec4 color_5;
  highp vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(cse_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(cse_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_CityOverlayTex, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  mediump vec4 tmpvar_15;
  mediump vec3 detailCoords_16;
  mediump float nylerp_17;
  mediump float zxlerp_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_20;
  highp float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    highp float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * inversesqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(tmpvar_19.xz);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(tmpvar_19.xz);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23.y);
  highp vec3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  highp float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, vec3(zxlerp_18));
  detailCoords_16 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, detailCoords_16, vec3(nylerp_17));
  detailCoords_16 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  highp vec2 coord_33;
  coord_33 = (((0.5 * detailCoords_16.zy) / tmpvar_32) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_34;
  tmpvar_34 = textureGrad (_CityDarkOverlayDetailTex, coord_33, tmpvar_26.xy, tmpvar_26.zw);
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  mediump vec4 tmpvar_35;
  mediump vec3 detailCoords_36;
  mediump float nylerp_37;
  mediump float zxlerp_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(xlv_TEXCOORD5);
  highp vec2 uv_40;
  highp float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    highp float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * inversesqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_44;
  tmpvar_44 = dFdx(tmpvar_39.xz);
  highp vec2 tmpvar_45;
  tmpvar_45 = dFdy(tmpvar_39.xz);
  highp vec4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dFdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dFdy(tmpvar_43.y);
  highp vec3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  highp float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, vec3(zxlerp_38));
  detailCoords_36 = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, detailCoords_36, vec3(nylerp_37));
  detailCoords_36 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  highp vec2 coord_53;
  coord_53 = (((0.5 * detailCoords_36.zy) / tmpvar_52) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureGrad (_CityLightOverlayDetailTex, coord_53, tmpvar_46.xy, tmpvar_46.zw);
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  highp float tmpvar_55;
  tmpvar_55 = (tmpvar_14.w * (1.0 - float(
    (0.0 >= xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = tmpvar_55;
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec3 tmpvar_56;
  tmpvar_56 = _WorldSpaceLightPos0.xyz;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture (_LightTexture0, xlv_TEXCOORD2);
  lowp float shadow_58;
  mediump float tmpvar_59;
  tmpvar_59 = texture (_ShadowMapTexture, xlv_TEXCOORD3.xyz);
  lowp float tmpvar_60;
  tmpvar_60 = tmpvar_59;
  highp float tmpvar_61;
  tmpvar_61 = (_LightShadowData.x + (tmpvar_60 * (1.0 - _LightShadowData.x)));
  shadow_58 = tmpvar_61;
  mediump vec3 lightDir_62;
  lightDir_62 = tmpvar_56;
  mediump vec3 viewDir_63;
  viewDir_63 = xlv_TEXCOORD7;
  mediump vec3 normal_64;
  normal_64 = xlv_TEXCOORD4;
  mediump float atten_65;
  atten_65 = (tmpvar_57.w * shadow_58);
  mediump vec4 c_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(lightDir_62);
  lightDir_62 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = normalize(viewDir_63);
  viewDir_63 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = normalize(normal_64);
  normal_64 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_67);
  highp float tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = clamp (dot (normalize(
    (tmpvar_67 + tmpvar_68)
  ), tmpvar_69), 0.0, 1.0);
  tmpvar_71 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_70) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_71, _SpecularPower) * _SpecularColor.w)
  )) * (atten_65 * 4.0));
  c_66.xyz = tmpvar_73;
  c_66.w = (tmpvar_70 * (atten_65 * 4.0));
  lowp vec3 tmpvar_74;
  tmpvar_74 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_75;
  lightDir_75 = tmpvar_74;
  mediump vec3 normal_76;
  normal_76 = xlv_TEXCOORD4;
  mediump float tmpvar_77;
  tmpvar_77 = dot (normal_76, lightDir_75);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_66 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_77)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_77)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_78.xyz;
  highp float tmpvar_79;
  tmpvar_79 = (tmpvar_78.w * _PlanetOpacity);
  color_5.w = tmpvar_79;
  tmpvar_1 = color_5;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 23 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
Bind "vertex" ATTR0
Bind "color" ATTR1
Bind "normal" ATTR2
Bind "texcoord" ATTR3
Bind "texcoord1" ATTR4
ConstBuffer "$Globals" 480
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [_Object2World]
Matrix 416 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float4 _glesColor [[attribute(1)]];
  float3 _glesNormal [[attribute(2)]];
  float4 _glesMultiTexCoord0 [[attribute(3)]];
  float4 _glesMultiTexCoord1 [[attribute(4)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD1;
  float2 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  tmpvar_1 = half4(_mtl_i._glesColor);
  float3 tmpvar_2;
  tmpvar_2 = normalize(_mtl_i._glesNormal);
  half NdotL_3;
  float3 lightDirection_4;
  float4 tmpvar_5;
  float4 tmpvar_6;
  float tmpvar_7;
  float4 cse_8;
  cse_8 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  float3 tmpvar_9;
  tmpvar_9 = (cse_8.xyz - _mtl_u._WorldSpaceCameraPos);
  tmpvar_6.w = sqrt(dot (tmpvar_9, tmpvar_9));
  float4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  float4 tmpvar_11;
  tmpvar_11.xy = _mtl_i._glesMultiTexCoord0.xy;
  tmpvar_11.z = _mtl_i._glesMultiTexCoord1.x;
  tmpvar_11.w = _mtl_i._glesMultiTexCoord1.y;
  float3 tmpvar_12;
  tmpvar_12 = -(tmpvar_11.xyz);
  tmpvar_5 = float4(tmpvar_1);
  tmpvar_6.xyz = tmpvar_2;
  half3 tmpvar_13;
  tmpvar_13 = normalize(_mtl_u._WorldSpaceLightPos0.xyz);
  lightDirection_4 = float3(tmpvar_13);
  float tmpvar_14;
  tmpvar_14 = dot (tmpvar_12, lightDirection_4);
  NdotL_3 = half(tmpvar_14);
  half tmpvar_15;
  tmpvar_15 = mix ((half)1.0, clamp (floor(
    ((half)1.01 + NdotL_3)
  ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
    -(NdotL_3)
  ), (half)0.0, (half)1.0));
  tmpvar_7 = float(tmpvar_15);
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = tmpvar_5;
  _mtl_o.xlv_TEXCOORD1 = tmpvar_6;
  _mtl_o.xlv_TEXCOORD2 = (_mtl_u._LightMatrix0 * cse_8).xy;
  _mtl_o.xlv_TEXCOORD3 = (_mtl_u.unity_World2Shadow[0] * cse_8);
  _mtl_o.xlv_TEXCOORD4 = normalize((_mtl_u._Object2World * tmpvar_10).xyz);
  _mtl_o.xlv_TEXCOORD5 = tmpvar_12;
  _mtl_o.xlv_TEXCOORD6 = tmpvar_7;
  _mtl_o.xlv_TEXCOORD7 = normalize((cse_8.xyz - _mtl_u._WorldSpaceCameraPos));
  return _mtl_o;
}

"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 108 math, 10 textures
Keywords { "POINT" "SHADOWS_OFF" }
Vector 0 [_WorldSpaceLightPos0]
Float 1 [_PlanetOpacity]
Float 2 [_CityOverlayDetailScale]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
SetTexture 3 [_LightTexture0] 2D 3
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c4, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c5, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c6, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c7, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c8, 1.00976563, -1.00000000, 4.00000000, 0
dcl_texcoord0 v0.xyzw
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r3.xyz, r0.x, v4
abs r0.xyz, r3
add r0.w, r0.z, -r0.x
add r1.xyz, r0.zxyw, -r0
cmp r0.w, r0, c3.x, c3.y
mad r1.xyz, r0.w, r1, r0
add r0.w, r1.x, -r0.y
cmp r2.x, r0.w, c3, c3.y
abs r0.w, r3.z
add r1.xyz, r1, -r0.yxzw
mad r1.xyz, r2.x, r1, r0.yxzw
max r1.w, r0.x, r0
min r0.z, r0.x, r0.w
rcp r0.y, r1.w
mul r0.y, r0.z, r0
abs_pp r1.x, r1
rcp_pp r1.w, r1.x
mul r0.z, r0.y, r0.y
mul_pp r1.zw, r1.xyzy, r1.w
mul_pp r1.zw, r1, c3.z
mul r2.xy, r1.zwzw, c2.x
abs r1.z, r3.y
mad r1.x, r0.z, c6, c6.y
mad r1.x, r1, r0.z, c6.z
mad r1.x, r1, r0.z, c6.w
mad r1.x, r1, r0.z, c7
mad r0.z, r1.x, r0, c7.y
mul r0.z, r0, r0.y
add r1.x, -r1.z, c3
mad r1.y, r1.z, c4.x, c4
mad r1.y, r1, r1.z, c4.z
mad r1.y, r1, r1.z, c4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.y, r1, r1.x
cmp r1.z, r3.y, c3.y, c3.x
mul r1.x, r1.z, r1.y
mad r1.x, -r1, c5, r1.y
mad r1.w, r1.z, c5.y, r1.x
add r0.x, r0, -r0.w
add r0.y, -r0.z, c7.z
cmp r0.y, -r0.x, r0.z, r0
mul r0.z, r1.w, c2.x
mul r0.z, r0, c5
mul r3.w, r1, c5
add r0.x, -r0.y, c5.y
cmp r3.y, r3.z, r0, r0.x
dsx r0.xy, r3.xzzw
mul r0.xy, r0, r0
add r0.y, r0.x, r0
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.y, c3.w
dsx r2.w, r0.z
dsy r1.y, r0.z
dsy r0.zw, r3.xyxz
cmp r3.x, r3, r3.y, -r3.y
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c3.w
dp4 r3.y, c0, c0
rsq r3.y, r3.y
mul r4.xyz, r3.y, c0
dp3_pp r4.w, v3, r4
add_pp r4.x, r4.w, c8
mov r2.z, r1
mov r1.x, r3.z
texldd r0, r2, s1, r2.zwzw, r1
mov r3.y, r3.w
dsx r1.w, r3
mad r3.x, r3, c3.w, c3.z
dsy r3.w, r3
texldd r1.w, r3, s0, r1.zwzw, r3.zwzw
frc_pp r4.y, r4.x
add_pp_sat r1.z, r4.x, -r4.y
dp3_pp r3.y, v3, v3
rsq_pp r3.w, r3.y
dp3_pp r3.x, c0, c0
rsq_pp r3.x, r3.x
mul_pp r3.xyz, r3.x, c0
mul_pp r4.xyz, r3.w, v3
dp3_pp r3.z, r4, r3
dp3 r3.x, v2, v2
texld r3.x, r3.x, s3
mul_pp_sat r3.y, -r4.w, c7.w
add_pp r1.z, r1, c8.y
mad_pp r1.z, r3.y, r1, c3.x
mul_pp r3.x, r3, r3.z
mul_pp r1.z, r3.x, r1
cmp r3.x, -v0.w, c3.y, c3
mul_pp r3.y, r1.w, r3.x
mul_pp_sat r1.z, r1, c8
add_pp r1.z, -r1, c3.x
mul_pp r0.w, r0, r3.y
mul_pp r3.x, r0.w, r1.z
texldd r1, r2, s2, r2.zwzw, r1
mul_pp r1.w, r3.y, r1
mov_pp r0.w, r3.x
add_pp r0, r0, -r1
mad_pp r0, r3.x, r0, r1
mul_pp oC0.w, r0, c1.x
mov_pp oC0.xyz, r0
"
}
SubProgram "d3d11 " {
// Stats: 89 math, 1 textures
Keywords { "POINT" "SHADOWS_OFF" }
SetTexture 0 [_CityOverlayTex] 2D 1
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 2
SetTexture 2 [_CityLightOverlayDetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 0
ConstBuffer "$Globals" 320
Float 304 [_PlanetOpacity]
Float 308 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
"ps_4_0
eefiecedikcogpjhefjdolihnfngjeoidfpgipjmabaaaaaaomanaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiaaaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcjmamaaaaeaaaaaaachadaaaafjaaaaaeegiocaaa
aaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaabaaaaaajbcaabaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaaegiccaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaafgafbaaaaaaaaaaaeghobaaa
adaaaaaaaagabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiaeadiaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabbaaaaajccaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaai
ocaabaaaaaaaaaaafgafbaaaaaaaaaaaagijcaaaabaaaaaaaaaaaaaabaaaaaah
ccaabaaaaaaaaaaaegbcbaaaaeaaaaaajgahbaaaaaaaaaaaaaaaaaahecaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaaaaaaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaialp
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaiadpdicaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
aaaaaaaibcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
baaaaaahccaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaa
aaaaaaaafgbibaaaafaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaa
abaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaapganbaia
ebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaah
icaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaa
abaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaa
acaaaaaabkaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadcaaaaajccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdodiaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaabkiacaaa
aaaaaaaabdaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafgcaabaaaacaaaaaafgagbaaaabaaaaaaamaaaaafgcaabaaa
adaaaaaafgagbaaaabaaaaaaalaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaa
abaaaaaaabeaaaaaidpjccdoamaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaeaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
bnaaaaahbcaabaaaabaaaaaaabeaaaaaaaaaaaaadkbabaaaabaaaaaadhaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaabnaaaaaj
ccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaj
pcaabaaaaeaaaaaakganbaiambaaaaaaaaaaaaaapgagbaiaibaaaaaaaaaaaaaa
dcaaaaakhcaabaaaafaaaaaafgafbaaaabaaaaaaegacbaaaaeaaaaaakgajbaia
ibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaaabaaaaaadkaabaaa
aeaaaaaadgaaaaaficaabaaaafaaaaaaabeaaaaaaaaaaaaadgaaaaagdcaabaaa
aeaaaaaajgafbaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaaaeaaaaaaegacbaaa
aeaaaaaajgahbaaaafaaaaaabnaaaaaiccaabaaaabaaaaaaakaabaaaafaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakocaabaaaaaaaaaaafgafbaaaabaaaaaaagajbaaa
aeaaaaaafgaobaiaibaaaaaaaaaaaaaadiaaaaakmcaabaaaaaaaaaaapgalbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaahgcaabaaa
aaaaaaaakgalbaaaaaaaaaaafgafbaaaaaaaaaaadiaaaaaigcaabaaaaaaaaaaa
fgagbaaaaaaaaaaafgifcaaaaaaaaaaabdaaaaaaejaaaaanpcaabaaaaeaaaaaa
jgafbaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaigaabaaaacaaaaaa
igaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaajgafbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaadaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaadiaaaaah
ccaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaeaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaa
aeaaaaaaegaobaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaiiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakiacaaaaaaaaaaabdaaaaaadgaaaaafhccabaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 257 math, 4 textures, 9 branches
Keywords { "POINT" "SHADOWS_OFF" }
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_CityOverlayTex] 2D 1
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 2
SetTexture 3 [_CityLightOverlayDetailTex] 2D 3
ConstBuffer "$Globals" 48
Vector 0 [_WorldSpaceLightPos0]
VectorHalf 16 [_LightColor0] 4
Float 24 [_SpecularPower]
VectorHalf 32 [_SpecularColor] 4
Float 40 [_PlanetOpacity]
Float 44 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _PlanetOpacity;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(0)]], sampler _mtlsmp__LightTexture0 [[sampler(0)]]
  ,   texture2d<half> _CityOverlayTex [[texture(1)]], sampler _mtlsmp__CityOverlayTex [[sampler(1)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(2)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(2)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half4 color_5;
  float3 cse_6;
  cse_6 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(cse_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(cse_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  half4 tmpvar_35;
  half3 detailCoords_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * rsqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_44;
  tmpvar_44 = dfdx(tmpvar_39.xz);
  float2 tmpvar_45;
  tmpvar_45 = dfdy(tmpvar_39.xz);
  float4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dfdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dfdy(tmpvar_43.y);
  float3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, (float)zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = half(tmpvar_49);
  float3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, (float3)half3(zxlerp_38));
  detailCoords_36 = half3(tmpvar_50);
  float3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, (float3)detailCoords_36, (float3)half3(nylerp_37));
  detailCoords_36 = half3(tmpvar_51);
  half tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  float2 coord_53;
  coord_53 = ((float2)(((half)0.5 * detailCoords_36.zy) / tmpvar_52) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_54;
  tmpvar_54 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_53), gradient2d((float2)(tmpvar_46.xy), (float2)(tmpvar_46.zw)));
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  float tmpvar_55;
  tmpvar_55 = ((float)tmpvar_14.w * (1.0 - float(
    (0.0 >= _mtl_i.xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = half(tmpvar_55);
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  float3 tmpvar_56;
  tmpvar_56 = _mtl_u._WorldSpaceLightPos0.xyz;
  float tmpvar_57;
  tmpvar_57 = dot (_mtl_i.xlv_TEXCOORD2, _mtl_i.xlv_TEXCOORD2);
  half4 tmpvar_58;
  tmpvar_58 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_57)));
  half3 lightDir_59;
  lightDir_59 = half3(tmpvar_56);
  half3 viewDir_60;
  viewDir_60 = half3(_mtl_i.xlv_TEXCOORD7);
  half3 normal_61;
  normal_61 = half3(_mtl_i.xlv_TEXCOORD4);
  half atten_62;
  atten_62 = tmpvar_58.w;
  half4 c_63;
  half3 tmpvar_64;
  tmpvar_64 = normalize(lightDir_59);
  lightDir_59 = tmpvar_64;
  half3 tmpvar_65;
  tmpvar_65 = normalize(viewDir_60);
  viewDir_60 = tmpvar_65;
  half3 tmpvar_66;
  tmpvar_66 = normalize(normal_61);
  normal_61 = tmpvar_66;
  half tmpvar_67;
  tmpvar_67 = dot (tmpvar_66, tmpvar_64);
  float tmpvar_68;
  half tmpvar_69;
  tmpvar_69 = clamp (dot (normalize(
    (tmpvar_64 + tmpvar_65)
  ), tmpvar_66), (half)0.0, (half)1.0);
  tmpvar_68 = float(tmpvar_69);
  float3 tmpvar_70;
  tmpvar_70 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_67) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_68, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_62 * (half)4.0));
  c_63.xyz = half3(tmpvar_70);
  c_63.w = (tmpvar_67 * (atten_62 * (half)4.0));
  float3 tmpvar_71;
  tmpvar_71 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_72;
  lightDir_72 = half3(tmpvar_71);
  half3 normal_73;
  normal_73 = half3(_mtl_i.xlv_TEXCOORD4);
  half tmpvar_74;
  tmpvar_74 = dot (normal_73, lightDir_72);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_63 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_74)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_74)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_75;
  tmpvar_75 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_75.xyz;
  float tmpvar_76;
  tmpvar_76 = ((float)tmpvar_75.w * _mtl_u._PlanetOpacity);
  color_5.w = half(tmpvar_76);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 106 math, 9 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [_WorldSpaceLightPos0]
Float 1 [_PlanetOpacity]
Float 2 [_CityOverlayDetailScale]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c3, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c4, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c5, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c6, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c7, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c8, 1.00976563, -1.00000000, 4.00000000, 0
dcl_texcoord0 v0.xyzw
dcl_texcoord4 v2.xyz
dcl_texcoord5 v3.xyz
dp3 r0.x, v3, v3
rsq r0.x, r0.x
mul r1.xyz, r0.x, v3
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c3.x, c3.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
cmp r1.w, r0, c3.x, c3.y
add r2.xyz, r2, -r0.yxzw
mad r2.xyz, r1.w, r2, r0.yxzw
abs r0.w, r1.z
max r0.y, r0.x, r0.w
rcp r1.w, r0.y
min r0.y, r0.x, r0.w
mul r0.y, r0, r1.w
abs_pp r0.z, r2.x
rcp_pp r1.w, r0.z
mul_pp r2.xy, r2.zyzw, r1.w
mul r0.z, r0.y, r0.y
mul_pp r2.xy, r2, c3.z
mad r1.w, r0.z, c6.x, c6.y
mad r1.w, r1, r0.z, c6.z
mul r4.xy, r2, c2.x
mad r2.x, r1.w, r0.z, c6.w
abs r1.w, r1.y
mad r2.z, r2.x, r0, c7.x
add r2.y, -r1.w, c3.x
mad r2.x, r1.w, c4, c4.y
mad r2.x, r2, r1.w, c4.z
rsq r2.y, r2.y
add r0.x, r0, -r0.w
cmp r1.y, r1, c3, c3.x
rcp r2.y, r2.y
mad r1.w, r2.x, r1, c4
mul r1.w, r1, r2.y
mul r2.x, r1.y, r1.w
mad r2.y, r2.z, r0.z, c7
mad r0.z, -r2.x, c5.x, r1.w
mul r2.x, r2.y, r0.y
mad r1.w, r1.y, c5.y, r0.z
add r0.z, -r2.x, c7
cmp r1.y, -r0.x, r2.x, r0.z
mul r0.y, r1.w, c2.x
mul r1.w, r1, c5
mul r0.x, r0.y, c5.z
add r2.y, -r1, c5
cmp r1.y, r1.z, r1, r2
dsx r0.zw, r1.xyxz
mul r0.zw, r0, r0
dsx r3.w, r0.x
dsy r3.y, r0.x
dsy r0.xy, r1.xzzw
mul r0.xy, r0, r0
cmp r1.x, r1, r1.y, -r1.y
add r0.y, r0.x, r0
add r0.z, r0, r0.w
rsq r0.x, r0.z
rcp r0.x, r0.x
mul r2.z, r0.x, c3.w
dp4_pp r1.z, c0, c0
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.x, r0.y, c3.w
mov r3.z, r2
mov r3.x, r2
dsx r2.w, r1
dsy r2.y, r1.w
texldd r0, r4, s1, r3.zwzw, r3
mad r4.z, r1.x, c3.w, c3
rsq_pp r1.y, r1.z
mul_pp r1.xyz, r1.y, c0
dp3_pp r1.x, v2, r1
add_pp r1.y, r1.x, c8.x
frc_pp r1.z, r1.y
add_pp_sat r1.y, r1, -r1.z
mov r4.w, r1
texldd r1.w, r4.zwzw, s0, r2.zwzw, r2
add_pp r1.y, r1, c8
mul_pp_sat r1.x, -r1, c7.w
mad_pp r2.w, r1.x, r1.y, c3.x
dp3_pp r1.y, c0, c0
rsq_pp r1.y, r1.y
dp3_pp r1.x, v2, v2
mul_pp r2.xyz, r1.y, c0
rsq_pp r1.x, r1.x
mul_pp r1.xyz, r1.x, v2
dp3_pp r1.x, r1, r2
mul_pp r1.y, r1.x, r2.w
cmp r1.x, -v0.w, c3.y, c3
mul_pp r2.y, r1.w, r1.x
mul_pp_sat r1.y, r1, c8.z
add_pp r1.x, -r1.y, c3
mul_pp r0.w, r0, r2.y
mul_pp r2.x, r0.w, r1
texldd r1, r4, s2, r3.zwzw, r3
mul_pp r1.w, r2.y, r1
mov_pp r0.w, r2.x
add_pp r0, r0, -r1
mad_pp r0, r2.x, r0, r1
mul_pp oC0.w, r0, c1.x
mov_pp oC0.xyz, r0
"
}
SubProgram "d3d11 " {
// Stats: 87 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
ConstBuffer "$Globals" 256
Float 240 [_PlanetOpacity]
Float 244 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
"ps_4_0
eefiecedohjfljagmikeoikkojpejobmilmggaecabaaaaaafaanaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaalmaaaaaaaeaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiaaaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaahaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcbiamaaaaeaaaaaaaagadaaaa
fjaaaaaeegiocaaaaaaaaaaabaaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaabbaaaaajbcaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaa
aaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaialpdcaaaaajbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaaiadpbaaaaaajccaabaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaaegiccaaaabaaaaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaa
aaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaaaaaaaaaaagijcaaaabaaaaaa
aaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaa
agaabaaaabaaaaaaegbcbaaaadaaaaaabaaaaaahccaabaaaaaaaaaaaegacbaaa
abaaaaaajgahbaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaiaeadicaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpbaaaaaahccaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaa
fgafbaaaaaaaaaaafgbibaaaaeaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaaj
ccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
ccaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ecaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajecaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaackaabaaaabaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaa
pganbaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
bcaabaaaacaaaaaabkaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadcaaaaajccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaackaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaidpjkcdodiaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaa
bkiacaaaaaaaaaaaapaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafgcaabaaaacaaaaaafgagbaaaabaaaaaaamaaaaaf
gcaabaaaadaaaaaafgagbaaaabaaaaaaalaaaaafdcaabaaaaeaaaaaaogakbaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaa
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaafdcaabaaaaeaaaaaaogakbaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaa
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
dkaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaeaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaabnaaaaahbcaabaaaabaaaaaaabeaaaaaaaaaaaaadkbabaaaabaaaaaa
dhaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaabeaaaaa
aaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaa
bnaaaaajccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajpcaabaaaaeaaaaaakganbaiambaaaaaaaaaaaaaapgagbaiaibaaaaaa
aaaaaaaadcaaaaakhcaabaaaafaaaaaafgafbaaaabaaaaaaegacbaaaaeaaaaaa
kgajbaiaibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaaabaaaaaa
dkaabaaaaeaaaaaadgaaaaaficaabaaaafaaaaaaabeaaaaaaaaaaaaadgaaaaag
dcaabaaaaeaaaaaajgafbaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaaaeaaaaaa
egacbaaaaeaaaaaajgahbaaaafaaaaaabnaaaaaiccaabaaaabaaaaaaakaabaaa
afaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakocaabaaaaaaaaaaafgafbaaaabaaaaaa
agajbaaaaeaaaaaafgaobaiaibaaaaaaaaaaaaaadiaaaaakmcaabaaaaaaaaaaa
pgalbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaah
gcaabaaaaaaaaaaakgalbaaaaaaaaaaafgafbaaaaaaaaaaadiaaaaaigcaabaaa
aaaaaaaafgagbaaaaaaaaaaafgifcaaaaaaaaaaaapaaaaaaejaaaaanpcaabaaa
aeaaaaaajgafbaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaigaabaaa
acaaaaaaigaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaajgafbaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaa
diaaaaahccaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaadiaaaaah
icaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
aeaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaa
egaobaiaebaaaaaaacaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaaaaaaaaa
pgapbaaaaeaaaaaaegaobaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaiiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakiacaaaaaaaaaaaapaaaaaadgaaaaafhccabaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 254 math, 3 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
ConstBuffer "$Globals" 40
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [_LightColor0] 4
Float 16 [_SpecularPower]
VectorHalf 24 [_SpecularColor] 4
Float 32 [_PlanetOpacity]
Float 36 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _PlanetOpacity;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _CityOverlayTex [[texture(0)]], sampler _mtlsmp__CityOverlayTex [[sampler(0)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(1)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(1)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(2)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(2)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half4 color_5;
  float3 cse_6;
  cse_6 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(cse_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(cse_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  half4 tmpvar_35;
  half3 detailCoords_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * rsqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_44;
  tmpvar_44 = dfdx(tmpvar_39.xz);
  float2 tmpvar_45;
  tmpvar_45 = dfdy(tmpvar_39.xz);
  float4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dfdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dfdy(tmpvar_43.y);
  float3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, (float)zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = half(tmpvar_49);
  float3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, (float3)half3(zxlerp_38));
  detailCoords_36 = half3(tmpvar_50);
  float3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, (float3)detailCoords_36, (float3)half3(nylerp_37));
  detailCoords_36 = half3(tmpvar_51);
  half tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  float2 coord_53;
  coord_53 = ((float2)(((half)0.5 * detailCoords_36.zy) / tmpvar_52) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_54;
  tmpvar_54 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_53), gradient2d((float2)(tmpvar_46.xy), (float2)(tmpvar_46.zw)));
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  float tmpvar_55;
  tmpvar_55 = ((float)tmpvar_14.w * (1.0 - float(
    (0.0 >= _mtl_i.xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = half(tmpvar_55);
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  half3 tmpvar_56;
  tmpvar_56 = _mtl_u._WorldSpaceLightPos0.xyz;
  half3 lightDir_57;
  lightDir_57 = tmpvar_56;
  half3 viewDir_58;
  viewDir_58 = half3(_mtl_i.xlv_TEXCOORD7);
  half3 normal_59;
  normal_59 = half3(_mtl_i.xlv_TEXCOORD4);
  half4 c_60;
  half3 tmpvar_61;
  tmpvar_61 = normalize(lightDir_57);
  lightDir_57 = tmpvar_61;
  half3 tmpvar_62;
  tmpvar_62 = normalize(viewDir_58);
  viewDir_58 = tmpvar_62;
  half3 tmpvar_63;
  tmpvar_63 = normalize(normal_59);
  normal_59 = tmpvar_63;
  half tmpvar_64;
  tmpvar_64 = dot (tmpvar_63, tmpvar_61);
  float tmpvar_65;
  half tmpvar_66;
  tmpvar_66 = clamp (dot (normalize(
    (tmpvar_61 + tmpvar_62)
  ), tmpvar_63), (half)0.0, (half)1.0);
  tmpvar_65 = float(tmpvar_66);
  float3 tmpvar_67;
  tmpvar_67 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_64) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_65, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * 4.0);
  c_60.xyz = half3(tmpvar_67);
  c_60.w = (tmpvar_64 * (half)4.0);
  half3 tmpvar_68;
  tmpvar_68 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_69;
  lightDir_69 = tmpvar_68;
  half3 normal_70;
  normal_70 = half3(_mtl_i.xlv_TEXCOORD4);
  half tmpvar_71;
  tmpvar_71 = dot (normal_70, lightDir_69);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_60 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_71)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_71)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_72;
  tmpvar_72 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_72.xyz;
  float tmpvar_73;
  tmpvar_73 = ((float)tmpvar_72.w * _mtl_u._PlanetOpacity);
  color_5.w = half(tmpvar_73);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 113 math, 11 textures
Keywords { "SPOT" "SHADOWS_OFF" }
Vector 0 [_WorldSpaceLightPos0]
Float 1 [_PlanetOpacity]
Float 2 [_CityOverlayDetailScale]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
SetTexture 3 [_LightTexture0] 2D 3
SetTexture 4 [_LightTextureB0] 2D 4
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c3, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c4, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c5, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c6, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c7, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c8, 1.00976563, -1.00000000, 4.00000000, 0
dcl_texcoord0 v0.xyzw
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r3.xyz, r0.x, v4
abs r0.xyz, r3
add r0.w, r0.z, -r0.x
add r1.xyz, r0.zxyw, -r0
cmp r0.w, r0, c3.x, c3.y
mad r1.xyz, r0.w, r1, r0
add r0.w, r1.x, -r0.y
cmp r2.x, r0.w, c3, c3.y
abs r0.w, r3.z
add r1.xyz, r1, -r0.yxzw
mad r1.xyz, r2.x, r1, r0.yxzw
max r1.w, r0.x, r0
min r0.z, r0.x, r0.w
rcp r0.y, r1.w
mul r0.y, r0.z, r0
abs_pp r1.x, r1
rcp_pp r1.w, r1.x
mul r0.z, r0.y, r0.y
mul_pp r1.zw, r1.xyzy, r1.w
mul_pp r1.zw, r1, c3.z
mul r2.xy, r1.zwzw, c2.x
abs r1.z, r3.y
mad r1.x, r0.z, c6, c6.y
mad r1.x, r1, r0.z, c6.z
mad r1.x, r1, r0.z, c6.w
mad r1.x, r1, r0.z, c7
mad r0.z, r1.x, r0, c7.y
mul r0.z, r0, r0.y
add r1.x, -r1.z, c3
mad r1.y, r1.z, c4.x, c4
mad r1.y, r1, r1.z, c4.z
mad r1.y, r1, r1.z, c4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.y, r1, r1.x
cmp r1.z, r3.y, c3.y, c3.x
mul r1.x, r1.z, r1.y
mad r1.x, -r1, c5, r1.y
mad r1.w, r1.z, c5.y, r1.x
add r0.x, r0, -r0.w
add r0.y, -r0.z, c7.z
cmp r0.y, -r0.x, r0.z, r0
mul r0.z, r1.w, c2.x
mul r0.z, r0, c5
mul r3.w, r1, c5
add r0.x, -r0.y, c5.y
cmp r3.y, r3.z, r0, r0.x
dsx r0.xy, r3.xzzw
mul r0.xy, r0, r0
add r0.y, r0.x, r0
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.y, c3.w
dsx r2.w, r0.z
dsy r1.y, r0.z
dsy r0.zw, r3.xyxz
cmp r3.x, r3, r3.y, -r3.y
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c3.w
dp4 r3.y, c0, c0
rsq r3.y, r3.y
mul r4.xyz, r3.y, c0
dp3_pp r4.w, v3, r4
add_pp r4.x, r4.w, c8
mov r2.z, r1
mov r1.x, r3.z
texldd r0, r2, s1, r2.zwzw, r1
mov r3.y, r3.w
dsx r1.w, r3
frc_pp r4.y, r4.x
mad r3.x, r3, c3.w, c3.z
dsy r3.w, r3
texldd r1.w, r3, s0, r1.zwzw, r3.zwzw
dp3_pp r1.z, c0, c0
add_pp_sat r3.w, r4.x, -r4.y
dp3_pp r3.x, v3, v3
rsq_pp r4.x, r3.x
rsq_pp r1.z, r1.z
mul_pp r3.xyz, r1.z, c0
mul_pp r4.xyz, r4.x, v3
dp3_pp r1.z, r4, r3
rcp r3.z, v2.w
mad r4.xy, v2, r3.z, c3.z
add_pp r3.x, r3.w, c8.y
mul_pp_sat r3.y, -r4.w, c7.w
mad_pp r3.y, r3, r3.x, c3.x
dp3 r3.x, v2, v2
texld r3.w, r4, s3
cmp r3.z, -v2, c3.y, c3.x
texld r3.x, r3.x, s4
mul_pp r3.z, r3, r3.w
mul_pp r3.x, r3.z, r3
mul_pp r1.z, r3.x, r1
mul_pp r1.z, r1, r3.y
cmp r3.x, -v0.w, c3.y, c3
mul_pp r3.y, r1.w, r3.x
mul_pp_sat r1.z, r1, c8
add_pp r1.z, -r1, c3.x
mul_pp r0.w, r0, r3.y
mul_pp r3.x, r0.w, r1.z
texldd r1, r2, s2, r2.zwzw, r1
mul_pp r1.w, r3.y, r1
mov_pp r0.w, r3.x
add_pp r0, r0, -r1
mad_pp r0, r3.x, r0, r1
mul_pp oC0.w, r0, c1.x
mov_pp oC0.xyz, r0
"
}
SubProgram "d3d11 " {
// Stats: 95 math, 2 textures
Keywords { "SPOT" "SHADOWS_OFF" }
SetTexture 0 [_CityOverlayTex] 2D 2
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 2 [_CityLightOverlayDetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 0
SetTexture 4 [_LightTextureB0] 2D 1
ConstBuffer "$Globals" 320
Float 304 [_PlanetOpacity]
Float 308 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
"ps_4_0
eefiecedinlodigbedffmapkaacfmjfinigfjaagabaaaaaaoaaoaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaaiaaaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcjaanaaaaeaaaaaaageadaaaafjaaaaaeegiocaaa
aaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadpcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaaaoaaaaahdcaabaaaaaaaaaaaegbabaaaadaaaaaapgbpbaaa
adaaaaaaaaaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaaaaaaaadp
aaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaadaaaaaaaagabaaaaaaaaaaadbaaaaahbcaabaaaaaaaaaaaabeaaaaa
aaaaaaaackbabaaaadaaaaaaabaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
aaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
efaaaaajpcaabaaaabaaaaaafgafbaaaaaaaaaaaeghobaaaaeaaaaaaaagabaaa
abaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaiaeabaaaaaaj
ccaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
eeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaa
fgafbaaaaaaaaaaaagijcaaaabaaaaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaabaaaaaajgahbaaaaaaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaabbaaaaajccaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagijcaaaabaaaaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaa
aeaaaaaajgahbaaaaaaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaakoehibdpdicaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaacambebcaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaaaaaaaaahecaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaialpdcaaaaajccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpbaaaaaahccaabaaaaaaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaa
aaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaaaaaaaaaafgbibaaaafaaaaaa
deaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaaabaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaabaaaaaabkaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaadbaaaaai
gcaabaaaabaaaaaapganbaaaaaaaaaaapganbaiaebaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaadkaabaaaabaaaaaa
bkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaa
iedefjlodcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaacaaaaaabkaabaiambaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
diaaaaahccaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadcaaaaaj
ccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahecaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaa
diaaaaahccaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdodiaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaabkiacaaaaaaaaaaabdaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafgcaabaaa
acaaaaaafgagbaaaabaaaaaaamaaaaafgcaabaaaadaaaaaafgagbaaaabaaaaaa
alaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaa
egaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdo
amaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaa
egaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaeaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaabnaaaaahbcaabaaaabaaaaaa
abeaaaaaaaaaaaaadkbabaaaabaaaaaadhaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaadkaabaaaaeaaaaaabnaaaaajccaabaaaabaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaaaeaaaaaakganbaia
mbaaaaaaaaaaaaaapgagbaiaibaaaaaaaaaaaaaadcaaaaakhcaabaaaafaaaaaa
fgafbaaaabaaaaaaegacbaaaaeaaaaaakgajbaiaibaaaaaaaaaaaaaadiaaaaah
ecaabaaaaeaaaaaabkaabaaaabaaaaaadkaabaaaaeaaaaaadgaaaaaficaabaaa
afaaaaaaabeaaaaaaaaaaaaadgaaaaagdcaabaaaaeaaaaaajgafbaiambaaaaaa
aaaaaaaaaaaaaaahhcaabaaaaeaaaaaaegacbaaaaeaaaaaajgahbaaaafaaaaaa
bnaaaaaiccaabaaaabaaaaaaakaabaaaafaaaaaabkaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
ocaabaaaaaaaaaaafgafbaaaabaaaaaaagajbaaaaeaaaaaafgaobaiaibaaaaaa
aaaaaaaadiaaaaakmcaabaaaaaaaaaaapgalbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaadpaoaaaaahgcaabaaaaaaaaaaakgalbaaaaaaaaaaa
fgafbaaaaaaaaaaadiaaaaaigcaabaaaaaaaaaaafgagbaaaaaaaaaaafgifcaaa
aaaaaaaabdaaaaaaejaaaaanpcaabaaaaeaaaaaajgafbaaaaaaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaejaaaaan
pcaabaaaacaaaaaajgafbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaa
igaabaaaacaaaaaaigaabaaaadaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaaaaeaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaaabaaaaaa
dkaabaaaacaaaaaadiaaaaahicaabaaaaeaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaa
aeaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaaaeaaaaaaegaobaaaaaaaaaaa
egaobaaaacaaaaaadiaaaaaiiccabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaa
aaaaaaaabdaaaaaadgaaaaafhccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 263 math, 5 textures, 9 branches
Keywords { "SPOT" "SHADOWS_OFF" }
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_LightTextureB0] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 48
Vector 0 [_WorldSpaceLightPos0]
VectorHalf 16 [_LightColor0] 4
Float 24 [_SpecularPower]
VectorHalf 32 [_SpecularColor] 4
Float 40 [_PlanetOpacity]
Float 44 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _PlanetOpacity;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(0)]], sampler _mtlsmp__LightTexture0 [[sampler(0)]]
  ,   texture2d<half> _LightTextureB0 [[texture(1)]], sampler _mtlsmp__LightTextureB0 [[sampler(1)]]
  ,   texture2d<half> _CityOverlayTex [[texture(2)]], sampler _mtlsmp__CityOverlayTex [[sampler(2)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(3)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half4 color_5;
  float3 cse_6;
  cse_6 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(cse_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(cse_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  half4 tmpvar_35;
  half3 detailCoords_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * rsqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_44;
  tmpvar_44 = dfdx(tmpvar_39.xz);
  float2 tmpvar_45;
  tmpvar_45 = dfdy(tmpvar_39.xz);
  float4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dfdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dfdy(tmpvar_43.y);
  float3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, (float)zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = half(tmpvar_49);
  float3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, (float3)half3(zxlerp_38));
  detailCoords_36 = half3(tmpvar_50);
  float3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, (float3)detailCoords_36, (float3)half3(nylerp_37));
  detailCoords_36 = half3(tmpvar_51);
  half tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  float2 coord_53;
  coord_53 = ((float2)(((half)0.5 * detailCoords_36.zy) / tmpvar_52) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_54;
  tmpvar_54 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_53), gradient2d((float2)(tmpvar_46.xy), (float2)(tmpvar_46.zw)));
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  float tmpvar_55;
  tmpvar_55 = ((float)tmpvar_14.w * (1.0 - float(
    (0.0 >= _mtl_i.xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = half(tmpvar_55);
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  float3 tmpvar_56;
  tmpvar_56 = _mtl_u._WorldSpaceLightPos0.xyz;
  half4 tmpvar_57;
  float2 P_58;
  P_58 = ((_mtl_i.xlv_TEXCOORD2.xy / _mtl_i.xlv_TEXCOORD2.w) + 0.5);
  tmpvar_57 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_58));
  float tmpvar_59;
  tmpvar_59 = dot (_mtl_i.xlv_TEXCOORD2.xyz, _mtl_i.xlv_TEXCOORD2.xyz);
  half4 tmpvar_60;
  tmpvar_60 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_59)));
  half3 lightDir_61;
  lightDir_61 = half3(tmpvar_56);
  half3 viewDir_62;
  viewDir_62 = half3(_mtl_i.xlv_TEXCOORD7);
  half3 normal_63;
  normal_63 = half3(_mtl_i.xlv_TEXCOORD4);
  half atten_64;
  atten_64 = half(((float(
    (_mtl_i.xlv_TEXCOORD2.z > 0.0)
  ) * (float)tmpvar_57.w) * (float)tmpvar_60.w));
  half4 c_65;
  half3 tmpvar_66;
  tmpvar_66 = normalize(lightDir_61);
  lightDir_61 = tmpvar_66;
  half3 tmpvar_67;
  tmpvar_67 = normalize(viewDir_62);
  viewDir_62 = tmpvar_67;
  half3 tmpvar_68;
  tmpvar_68 = normalize(normal_63);
  normal_63 = tmpvar_68;
  half tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_66);
  float tmpvar_70;
  half tmpvar_71;
  tmpvar_71 = clamp (dot (normalize(
    (tmpvar_66 + tmpvar_67)
  ), tmpvar_68), (half)0.0, (half)1.0);
  tmpvar_70 = float(tmpvar_71);
  float3 tmpvar_72;
  tmpvar_72 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_69) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_70, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_64 * (half)4.0));
  c_65.xyz = half3(tmpvar_72);
  c_65.w = (tmpvar_69 * (atten_64 * (half)4.0));
  float3 tmpvar_73;
  tmpvar_73 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_74;
  lightDir_74 = half3(tmpvar_73);
  half3 normal_75;
  normal_75 = half3(_mtl_i.xlv_TEXCOORD4);
  half tmpvar_76;
  tmpvar_76 = dot (normal_75, lightDir_74);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_65 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_76)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_76)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_77.xyz;
  float tmpvar_78;
  tmpvar_78 = ((float)tmpvar_77.w * _mtl_u._PlanetOpacity);
  color_5.w = half(tmpvar_78);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 109 math, 11 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [_WorldSpaceLightPos0]
Float 1 [_PlanetOpacity]
Float 2 [_CityOverlayDetailScale]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
SetTexture 3 [_LightTextureB0] 2D 3
SetTexture 4 [_LightTexture0] CUBE 4
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
def c3, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c4, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c5, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c6, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c7, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c8, 1.00976563, -1.00000000, 4.00000000, 0
dcl_texcoord0 v0.xyzw
dcl_texcoord2 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r3.xyz, r0.x, v4
abs r0.xyz, r3
add r0.w, r0.z, -r0.x
add r1.xyz, r0.zxyw, -r0
cmp r0.w, r0, c3.x, c3.y
mad r1.xyz, r0.w, r1, r0
add r0.w, r1.x, -r0.y
cmp r2.x, r0.w, c3, c3.y
abs r0.w, r3.z
add r1.xyz, r1, -r0.yxzw
mad r1.xyz, r2.x, r1, r0.yxzw
max r1.w, r0.x, r0
min r0.z, r0.x, r0.w
rcp r0.y, r1.w
mul r0.y, r0.z, r0
abs_pp r1.x, r1
rcp_pp r1.w, r1.x
mul r0.z, r0.y, r0.y
mul_pp r1.zw, r1.xyzy, r1.w
mul_pp r1.zw, r1, c3.z
mul r2.xy, r1.zwzw, c2.x
abs r1.z, r3.y
mad r1.x, r0.z, c6, c6.y
mad r1.x, r1, r0.z, c6.z
mad r1.x, r1, r0.z, c6.w
mad r1.x, r1, r0.z, c7
mad r0.z, r1.x, r0, c7.y
mul r0.z, r0, r0.y
add r1.x, -r1.z, c3
mad r1.y, r1.z, c4.x, c4
mad r1.y, r1, r1.z, c4.z
mad r1.y, r1, r1.z, c4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.y, r1, r1.x
cmp r1.z, r3.y, c3.y, c3.x
mul r1.x, r1.z, r1.y
mad r1.x, -r1, c5, r1.y
mad r1.w, r1.z, c5.y, r1.x
add r0.x, r0, -r0.w
add r0.y, -r0.z, c7.z
cmp r0.y, -r0.x, r0.z, r0
mul r0.z, r1.w, c2.x
mul r0.z, r0, c5
mul r3.w, r1, c5
add r0.x, -r0.y, c5.y
cmp r3.y, r3.z, r0, r0.x
dsx r0.xy, r3.xzzw
mul r0.xy, r0, r0
add r0.y, r0.x, r0
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.y, c3.w
dsx r2.w, r0.z
dsy r1.y, r0.z
dsy r0.zw, r3.xyxz
cmp r3.x, r3, r3.y, -r3.y
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c3.w
dp4 r3.y, c0, c0
rsq r3.y, r3.y
mul r4.xyz, r3.y, c0
dp3_pp r4.w, v3, r4
add_pp r4.x, r4.w, c8
mov r2.z, r1
mov r1.x, r3.z
texldd r0, r2, s1, r2.zwzw, r1
mov r3.y, r3.w
dsx r1.w, r3
mad r3.x, r3, c3.w, c3.z
dsy r3.w, r3
texldd r1.w, r3, s0, r1.zwzw, r3.zwzw
frc_pp r4.y, r4.x
add_pp_sat r1.z, r4.x, -r4.y
dp3_pp r3.y, v3, v3
rsq_pp r3.w, r3.y
mul_pp r4.xyz, r3.w, v3
dp3_pp r3.x, c0, c0
rsq_pp r3.x, r3.x
mul_pp r3.xyz, r3.x, c0
dp3_pp r3.y, r4, r3
mul_pp_sat r3.x, -r4.w, c7.w
add_pp r1.z, r1, c8.y
mad_pp r1.z, r3.x, r1, c3.x
dp3 r3.x, v2, v2
texld r3.w, v2, s4
texld r3.x, r3.x, s3
mul r3.x, r3, r3.w
mul_pp r3.x, r3, r3.y
mul_pp r1.z, r3.x, r1
cmp r3.x, -v0.w, c3.y, c3
mul_pp r3.y, r1.w, r3.x
mul_pp_sat r1.z, r1, c8
add_pp r1.z, -r1, c3.x
mul_pp r0.w, r0, r3.y
mul_pp r3.x, r0.w, r1.z
texldd r1, r2, s2, r2.zwzw, r1
mul_pp r1.w, r3.y, r1
mov_pp r0.w, r3.x
add_pp r0, r0, -r1
mad_pp r0, r3.x, r0, r1
mul_pp oC0.w, r0, c1.x
mov_pp oC0.xyz, r0
"
}
SubProgram "d3d11 " {
// Stats: 90 math, 2 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
SetTexture 0 [_CityOverlayTex] 2D 2
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 2 [_CityLightOverlayDetailTex] 2D 4
SetTexture 3 [_LightTextureB0] 2D 1
SetTexture 4 [_LightTexture0] CUBE 0
ConstBuffer "$Globals" 320
Float 304 [_PlanetOpacity]
Float 308 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
"ps_4_0
eefiecedaijpkbhlpjeaebjpchlnhlciamnjekofabaaaaaaeiaoaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiaaaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcpiamaaaaeaaaaaaadoadaaaafjaaaaaeegiocaaa
aaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafidaaaaeaahabaaaaeaaaaaa
ffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaajbcaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegbcbaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaefaaaaajpcaabaaaabaaaaaafgafbaaaaaaaaaaaeghobaaaadaaaaaa
aagabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbcbaaaadaaaaaaeghobaaa
aeaaaaaaaagabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaaaacaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiaeadiaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
bbaaaaajccaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaaiocaabaaa
aaaaaaaafgafbaaaaaaaaaaaagijcaaaabaaaaaaaaaaaaaabaaaaaahccaabaaa
aaaaaaaaegbcbaaaaeaaaaaajgahbaaaaaaaaaaaaaaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaacambebcaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
aaaaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaialpdcaaaaaj
ccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaiadp
dicaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaai
bcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpbaaaaaah
ccaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaaaaaaaaaa
fgbibaaaafaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaa
abaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaapganbaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaacaaaaaa
bkaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaadcaaaaajccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
ckaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdodiaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaabkiacaaaaaaaaaaa
bdaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdp
alaaaaafgcaabaaaacaaaaaafgagbaaaabaaaaaaamaaaaafgcaabaaaadaaaaaa
fgagbaaaabaaaaaaalaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaaapaaaaah
icaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
abeaaaaaidpjccdoamaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaaapaaaaah
icaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaeaaaaaaegaabaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaabnaaaaah
bcaabaaaabaaaaaaabeaaaaaaaaaaaaadkbabaaaabaaaaaadhaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaabnaaaaajccaabaaa
abaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaa
aeaaaaaakganbaiambaaaaaaaaaaaaaapgagbaiaibaaaaaaaaaaaaaadcaaaaak
hcaabaaaafaaaaaafgafbaaaabaaaaaaegacbaaaaeaaaaaakgajbaiaibaaaaaa
aaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaaabaaaaaadkaabaaaaeaaaaaa
dgaaaaaficaabaaaafaaaaaaabeaaaaaaaaaaaaadgaaaaagdcaabaaaaeaaaaaa
jgafbaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaaaeaaaaaaegacbaaaaeaaaaaa
jgahbaaaafaaaaaabnaaaaaiccaabaaaabaaaaaaakaabaaaafaaaaaabkaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakocaabaaaaaaaaaaafgafbaaaabaaaaaaagajbaaaaeaaaaaa
fgaobaiaibaaaaaaaaaaaaaadiaaaaakmcaabaaaaaaaaaaapgalbaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaahgcaabaaaaaaaaaaa
kgalbaaaaaaaaaaafgafbaaaaaaaaaaadiaaaaaigcaabaaaaaaaaaaafgagbaaa
aaaaaaaafgifcaaaaaaaaaaabdaaaaaaejaaaaanpcaabaaaaeaaaaaajgafbaaa
aaaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaigaabaaaacaaaaaaigaabaaa
adaaaaaaejaaaaanpcaabaaaacaaaaaajgafbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaadiaaaaahicaabaaaacaaaaaa
akaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaeaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaiaebaaaaaa
acaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaaaeaaaaaa
egaobaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaiiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakiacaaaaaaaaaaabdaaaaaadgaaaaafhccabaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 258 math, 5 textures, 9 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
SetTexture 0 [_LightTexture0] CUBE 0
SetTexture 1 [_LightTextureB0] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 48
Vector 0 [_WorldSpaceLightPos0]
VectorHalf 16 [_LightColor0] 4
Float 24 [_SpecularPower]
VectorHalf 32 [_SpecularColor] 4
Float 40 [_PlanetOpacity]
Float 44 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _PlanetOpacity;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> _LightTexture0 [[texture(0)]], sampler _mtlsmp__LightTexture0 [[sampler(0)]]
  ,   texture2d<half> _LightTextureB0 [[texture(1)]], sampler _mtlsmp__LightTextureB0 [[sampler(1)]]
  ,   texture2d<half> _CityOverlayTex [[texture(2)]], sampler _mtlsmp__CityOverlayTex [[sampler(2)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(3)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half4 color_5;
  float3 cse_6;
  cse_6 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(cse_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(cse_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  half4 tmpvar_35;
  half3 detailCoords_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * rsqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_44;
  tmpvar_44 = dfdx(tmpvar_39.xz);
  float2 tmpvar_45;
  tmpvar_45 = dfdy(tmpvar_39.xz);
  float4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dfdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dfdy(tmpvar_43.y);
  float3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, (float)zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = half(tmpvar_49);
  float3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, (float3)half3(zxlerp_38));
  detailCoords_36 = half3(tmpvar_50);
  float3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, (float3)detailCoords_36, (float3)half3(nylerp_37));
  detailCoords_36 = half3(tmpvar_51);
  half tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  float2 coord_53;
  coord_53 = ((float2)(((half)0.5 * detailCoords_36.zy) / tmpvar_52) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_54;
  tmpvar_54 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_53), gradient2d((float2)(tmpvar_46.xy), (float2)(tmpvar_46.zw)));
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  float tmpvar_55;
  tmpvar_55 = ((float)tmpvar_14.w * (1.0 - float(
    (0.0 >= _mtl_i.xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = half(tmpvar_55);
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  float3 tmpvar_56;
  tmpvar_56 = _mtl_u._WorldSpaceLightPos0.xyz;
  float tmpvar_57;
  tmpvar_57 = dot (_mtl_i.xlv_TEXCOORD2, _mtl_i.xlv_TEXCOORD2);
  half4 tmpvar_58;
  tmpvar_58 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_57)));
  half4 tmpvar_59;
  tmpvar_59 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD2));
  half3 lightDir_60;
  lightDir_60 = half3(tmpvar_56);
  half3 viewDir_61;
  viewDir_61 = half3(_mtl_i.xlv_TEXCOORD7);
  half3 normal_62;
  normal_62 = half3(_mtl_i.xlv_TEXCOORD4);
  half atten_63;
  atten_63 = (tmpvar_58.w * tmpvar_59.w);
  half4 c_64;
  half3 tmpvar_65;
  tmpvar_65 = normalize(lightDir_60);
  lightDir_60 = tmpvar_65;
  half3 tmpvar_66;
  tmpvar_66 = normalize(viewDir_61);
  viewDir_61 = tmpvar_66;
  half3 tmpvar_67;
  tmpvar_67 = normalize(normal_62);
  normal_62 = tmpvar_67;
  half tmpvar_68;
  tmpvar_68 = dot (tmpvar_67, tmpvar_65);
  float tmpvar_69;
  half tmpvar_70;
  tmpvar_70 = clamp (dot (normalize(
    (tmpvar_65 + tmpvar_66)
  ), tmpvar_67), (half)0.0, (half)1.0);
  tmpvar_69 = float(tmpvar_70);
  float3 tmpvar_71;
  tmpvar_71 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_68) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_69, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_63 * (half)4.0));
  c_64.xyz = half3(tmpvar_71);
  c_64.w = (tmpvar_68 * (atten_63 * (half)4.0));
  float3 tmpvar_72;
  tmpvar_72 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_73;
  lightDir_73 = half3(tmpvar_72);
  half3 normal_74;
  normal_74 = half3(_mtl_i.xlv_TEXCOORD4);
  half tmpvar_75;
  tmpvar_75 = dot (normal_74, lightDir_73);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_64 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_75)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_75)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_76;
  tmpvar_76 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_76.xyz;
  float tmpvar_77;
  tmpvar_77 = ((float)tmpvar_76.w * _mtl_u._PlanetOpacity);
  color_5.w = half(tmpvar_77);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 107 math, 10 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [_WorldSpaceLightPos0]
Float 1 [_PlanetOpacity]
Float 2 [_CityOverlayDetailScale]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
SetTexture 3 [_LightTexture0] 2D 3
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c4, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c5, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c6, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c7, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c8, 1.00976563, -1.00000000, 4.00000000, 0
dcl_texcoord0 v0.xyzw
dcl_texcoord2 v2.xy
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r3.xyz, r0.x, v4
abs r0.xyz, r3
add r0.w, r0.z, -r0.x
add r1.xyz, r0.zxyw, -r0
cmp r0.w, r0, c3.x, c3.y
mad r1.xyz, r0.w, r1, r0
add r0.w, r1.x, -r0.y
cmp r2.x, r0.w, c3, c3.y
abs r0.w, r3.z
add r1.xyz, r1, -r0.yxzw
mad r1.xyz, r2.x, r1, r0.yxzw
max r1.w, r0.x, r0
min r0.z, r0.x, r0.w
rcp r0.y, r1.w
mul r0.y, r0.z, r0
abs_pp r1.x, r1
rcp_pp r1.w, r1.x
mul r0.z, r0.y, r0.y
mul_pp r1.zw, r1.xyzy, r1.w
mul_pp r1.zw, r1, c3.z
mul r2.xy, r1.zwzw, c2.x
abs r1.z, r3.y
mad r1.x, r0.z, c6, c6.y
mad r1.x, r1, r0.z, c6.z
mad r1.x, r1, r0.z, c6.w
mad r1.x, r1, r0.z, c7
mad r0.z, r1.x, r0, c7.y
mul r0.z, r0, r0.y
add r1.x, -r1.z, c3
mad r1.y, r1.z, c4.x, c4
mad r1.y, r1, r1.z, c4.z
mad r1.y, r1, r1.z, c4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.y, r1, r1.x
cmp r1.z, r3.y, c3.y, c3.x
mul r1.x, r1.z, r1.y
mad r1.x, -r1, c5, r1.y
mad r1.w, r1.z, c5.y, r1.x
add r0.x, r0, -r0.w
add r0.y, -r0.z, c7.z
cmp r0.y, -r0.x, r0.z, r0
mul r0.z, r1.w, c2.x
mul r0.z, r0, c5
mul r3.w, r1, c5
add r0.x, -r0.y, c5.y
cmp r3.y, r3.z, r0, r0.x
dsx r0.xy, r3.xzzw
mul r0.xy, r0, r0
add r0.y, r0.x, r0
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.y, c3.w
dsx r2.w, r0.z
dsy r1.y, r0.z
dsy r0.zw, r3.xyxz
cmp r3.x, r3, r3.y, -r3.y
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c3.w
dp4_pp r3.y, c0, c0
rsq_pp r3.y, r3.y
mul_pp r4.xyz, r3.y, c0
dp3_pp r4.w, v3, r4
add_pp r4.x, r4.w, c8
mov r2.z, r1
mov r1.x, r3.z
texldd r0, r2, s1, r2.zwzw, r1
mov r3.y, r3.w
dsx r1.w, r3
mad r3.x, r3, c3.w, c3.z
dsy r3.w, r3
texldd r1.w, r3, s0, r1.zwzw, r3.zwzw
frc_pp r4.y, r4.x
add_pp_sat r1.z, r4.x, -r4.y
dp3_pp r3.y, v3, v3
rsq_pp r3.w, r3.y
mul_pp r4.xyz, r3.w, v3
dp3_pp r3.x, c0, c0
rsq_pp r3.x, r3.x
mul_pp r3.xyz, r3.x, c0
dp3_pp r3.y, r4, r3
mul_pp_sat r3.x, -r4.w, c7.w
add_pp r1.z, r1, c8.y
mad_pp r1.z, r3.x, r1, c3.x
texld r3.w, v2, s3
mul_pp r3.x, r3.w, r3.y
mul_pp r1.z, r3.x, r1
cmp r3.x, -v0.w, c3.y, c3
mul_pp r3.y, r1.w, r3.x
mul_pp_sat r1.z, r1, c8
add_pp r1.z, -r1, c3.x
mul_pp r0.w, r0, r3.y
mul_pp r3.x, r0.w, r1.z
texldd r1, r2, s2, r2.zwzw, r1
mul_pp r1.w, r3.y, r1
mov_pp r0.w, r3.x
add_pp r0, r0, -r1
mad_pp r0, r3.x, r0, r1
mul_pp oC0.w, r0, c1.x
mov_pp oC0.xyz, r0
"
}
SubProgram "d3d11 " {
// Stats: 88 math, 1 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
SetTexture 0 [_CityOverlayTex] 2D 1
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 2
SetTexture 2 [_CityLightOverlayDetailTex] 2D 3
SetTexture 3 [_LightTexture0] 2D 0
ConstBuffer "$Globals" 320
Float 304 [_PlanetOpacity]
Float 308 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
"ps_4_0
eefiecedlnfoapolganaegepomihokpihjmlleidabaaaaaanaanaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaadaaaaaaaeaaaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefciaamaaaaeaaaaaaacaadaaaafjaaaaaeegiocaaa
aaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaaddcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaabaaaaaajbcaabaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaaegiccaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaaegbabaaaadaaaaaa
eghobaaaadaaaaaaaagabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiaeadiaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabbaaaaajccaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaafgafbaaaaaaaaaaaagijcaaaabaaaaaaaaaaaaaa
baaaaaahccaabaaaaaaaaaaaegbcbaaaaeaaaaaajgahbaaaaaaaaaaaaaaaaaah
ecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahccaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaaaaaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaialpdcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaaaaiadpdicaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpbaaaaaahccaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaa
fgafbaaaaaaaaaaafgbibaaaafaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaaj
ccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
ccaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ecaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajecaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaackaabaaaabaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaa
pganbaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
bcaabaaaacaaaaaabkaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadcaaaaajccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaackaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaidpjkcdodiaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaa
bkiacaaaaaaaaaaabdaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafgcaabaaaacaaaaaafgagbaaaabaaaaaaamaaaaaf
gcaabaaaadaaaaaafgagbaaaabaaaaaaalaaaaafdcaabaaaaeaaaaaaogakbaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaa
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaafdcaabaaaaeaaaaaaogakbaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaa
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
dkaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaeaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaabnaaaaahbcaabaaaabaaaaaaabeaaaaaaaaaaaaadkbabaaaabaaaaaa
dhaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaabeaaaaa
aaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaa
bnaaaaajccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajpcaabaaaaeaaaaaakganbaiambaaaaaaaaaaaaaapgagbaiaibaaaaaa
aaaaaaaadcaaaaakhcaabaaaafaaaaaafgafbaaaabaaaaaaegacbaaaaeaaaaaa
kgajbaiaibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaaabaaaaaa
dkaabaaaaeaaaaaadgaaaaaficaabaaaafaaaaaaabeaaaaaaaaaaaaadgaaaaag
dcaabaaaaeaaaaaajgafbaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaaaeaaaaaa
egacbaaaaeaaaaaajgahbaaaafaaaaaabnaaaaaiccaabaaaabaaaaaaakaabaaa
afaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakocaabaaaaaaaaaaafgafbaaaabaaaaaa
agajbaaaaeaaaaaafgaobaiaibaaaaaaaaaaaaaadiaaaaakmcaabaaaaaaaaaaa
pgalbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaah
gcaabaaaaaaaaaaakgalbaaaaaaaaaaafgafbaaaaaaaaaaadiaaaaaigcaabaaa
aaaaaaaafgagbaaaaaaaaaaafgifcaaaaaaaaaaabdaaaaaaejaaaaanpcaabaaa
aeaaaaaajgafbaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaigaabaaa
acaaaaaaigaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaajgafbaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaa
diaaaaahccaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaadiaaaaah
icaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
aeaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaa
egaobaiaebaaaaaaacaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaaaaaaaaa
pgapbaaaaeaaaaaaegaobaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaiiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakiacaaaaaaaaaaabdaaaaaadgaaaaafhccabaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 256 math, 4 textures, 9 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_CityOverlayTex] 2D 1
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 2
SetTexture 3 [_CityLightOverlayDetailTex] 2D 3
ConstBuffer "$Globals" 40
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [_LightColor0] 4
Float 16 [_SpecularPower]
VectorHalf 24 [_SpecularColor] 4
Float 32 [_PlanetOpacity]
Float 36 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float2 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _PlanetOpacity;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(0)]], sampler _mtlsmp__LightTexture0 [[sampler(0)]]
  ,   texture2d<half> _CityOverlayTex [[texture(1)]], sampler _mtlsmp__CityOverlayTex [[sampler(1)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(2)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(2)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half4 color_5;
  float3 cse_6;
  cse_6 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(cse_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(cse_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  half4 tmpvar_35;
  half3 detailCoords_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * rsqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_44;
  tmpvar_44 = dfdx(tmpvar_39.xz);
  float2 tmpvar_45;
  tmpvar_45 = dfdy(tmpvar_39.xz);
  float4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dfdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dfdy(tmpvar_43.y);
  float3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, (float)zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = half(tmpvar_49);
  float3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, (float3)half3(zxlerp_38));
  detailCoords_36 = half3(tmpvar_50);
  float3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, (float3)detailCoords_36, (float3)half3(nylerp_37));
  detailCoords_36 = half3(tmpvar_51);
  half tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  float2 coord_53;
  coord_53 = ((float2)(((half)0.5 * detailCoords_36.zy) / tmpvar_52) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_54;
  tmpvar_54 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_53), gradient2d((float2)(tmpvar_46.xy), (float2)(tmpvar_46.zw)));
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  float tmpvar_55;
  tmpvar_55 = ((float)tmpvar_14.w * (1.0 - float(
    (0.0 >= _mtl_i.xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = half(tmpvar_55);
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  half3 tmpvar_56;
  tmpvar_56 = _mtl_u._WorldSpaceLightPos0.xyz;
  half4 tmpvar_57;
  tmpvar_57 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(_mtl_i.xlv_TEXCOORD2));
  half3 lightDir_58;
  lightDir_58 = tmpvar_56;
  half3 viewDir_59;
  viewDir_59 = half3(_mtl_i.xlv_TEXCOORD7);
  half3 normal_60;
  normal_60 = half3(_mtl_i.xlv_TEXCOORD4);
  half atten_61;
  atten_61 = tmpvar_57.w;
  half4 c_62;
  half3 tmpvar_63;
  tmpvar_63 = normalize(lightDir_58);
  lightDir_58 = tmpvar_63;
  half3 tmpvar_64;
  tmpvar_64 = normalize(viewDir_59);
  viewDir_59 = tmpvar_64;
  half3 tmpvar_65;
  tmpvar_65 = normalize(normal_60);
  normal_60 = tmpvar_65;
  half tmpvar_66;
  tmpvar_66 = dot (tmpvar_65, tmpvar_63);
  float tmpvar_67;
  half tmpvar_68;
  tmpvar_68 = clamp (dot (normalize(
    (tmpvar_63 + tmpvar_64)
  ), tmpvar_65), (half)0.0, (half)1.0);
  tmpvar_67 = float(tmpvar_68);
  float3 tmpvar_69;
  tmpvar_69 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_66) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_67, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_61 * (half)4.0));
  c_62.xyz = half3(tmpvar_69);
  c_62.w = (tmpvar_66 * (atten_61 * (half)4.0));
  half3 tmpvar_70;
  tmpvar_70 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_71;
  lightDir_71 = tmpvar_70;
  half3 normal_72;
  normal_72 = half3(_mtl_i.xlv_TEXCOORD4);
  half tmpvar_73;
  tmpvar_73 = dot (normal_72, lightDir_71);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_62 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_73)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_73)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_74;
  tmpvar_74 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_74.xyz;
  float tmpvar_75;
  tmpvar_75 = ((float)tmpvar_74.w * _mtl_u._PlanetOpacity);
  color_5.w = half(tmpvar_75);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 118 math, 12 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightShadowData]
Float 2 [_PlanetOpacity]
Float 3 [_CityOverlayDetailScale]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
SetTexture 3 [_LightTexture0] 2D 3
SetTexture 4 [_LightTextureB0] 2D 4
SetTexture 5 [_ShadowMapTexture] 2D 5
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c4, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c5, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c6, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c7, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c8, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c9, 1.00976563, -1.00000000, 4.00000000, 0
dcl_texcoord0 v0.xyzw
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r3.xyz, r0.x, v5
abs r0.xyz, r3
add r0.w, r0.z, -r0.x
add r1.xyz, r0.zxyw, -r0
cmp r0.w, r0, c4.x, c4.y
mad r1.xyz, r0.w, r1, r0
add r0.w, r1.x, -r0.y
cmp r2.x, r0.w, c4, c4.y
abs r0.w, r3.z
add r1.xyz, r1, -r0.yxzw
mad r1.xyz, r2.x, r1, r0.yxzw
max r1.w, r0.x, r0
min r0.z, r0.x, r0.w
rcp r0.y, r1.w
mul r0.y, r0.z, r0
abs_pp r1.x, r1
rcp_pp r1.w, r1.x
mul r0.z, r0.y, r0.y
mul_pp r1.zw, r1.xyzy, r1.w
mul_pp r1.zw, r1, c4.z
mul r2.xy, r1.zwzw, c3.x
abs r1.z, r3.y
mad r1.x, r0.z, c7, c7.y
mad r1.x, r1, r0.z, c7.z
mad r1.x, r1, r0.z, c7.w
mad r1.x, r1, r0.z, c8
mad r0.z, r1.x, r0, c8.y
mul r0.z, r0, r0.y
add r1.x, -r1.z, c4
mad r1.y, r1.z, c5.x, c5
mad r1.y, r1, r1.z, c5.z
mad r1.y, r1, r1.z, c5.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.y, r1, r1.x
cmp r1.z, r3.y, c4.y, c4.x
mul r1.x, r1.z, r1.y
mad r1.x, -r1, c6, r1.y
mad r1.w, r1.z, c6.y, r1.x
add r0.x, r0, -r0.w
add r0.y, -r0.z, c8.z
cmp r0.y, -r0.x, r0.z, r0
mul r0.z, r1.w, c3.x
mul r0.z, r0, c6
mul r3.w, r1, c6
add r0.x, -r0.y, c6.y
cmp r3.y, r3.z, r0, r0.x
dsx r0.xy, r3.xzzw
mul r0.xy, r0, r0
add r0.y, r0.x, r0
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.y, c4.w
dsx r2.w, r0.z
dsy r1.y, r0.z
dsy r0.zw, r3.xyxz
cmp r3.x, r3, r3.y, -r3.y
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c4.w
dp4 r3.y, c0, c0
rsq r3.y, r3.y
mul r4.xyz, r3.y, c0
dp3_pp r4.w, v4, r4
add_pp r4.x, r4.w, c9
mov r2.z, r1
mov r1.x, r3.z
texldd r0, r2, s1, r2.zwzw, r1
mov r3.y, r3.w
dsx r1.w, r3
frc_pp r4.y, r4.x
mad r3.x, r3, c4.w, c4.z
dsy r3.w, r3
texldd r1.w, r3, s0, r1.zwzw, r3.zwzw
dp3_pp r1.z, c0, c0
add_pp_sat r3.w, r4.x, -r4.y
dp3_pp r3.x, v4, v4
rsq_pp r4.x, r3.x
rsq_pp r1.z, r1.z
mul_pp r3.xyz, r1.z, c0
mul_pp r4.xyz, r4.x, v4
dp3_pp r1.z, r4, r3
add_pp r3.x, r3.w, c9.y
rcp r3.w, v2.w
mad r4.xy, v2, r3.w, c4.z
texld r3.w, r4, s3
mul_pp_sat r3.y, -r4.w, c8.w
mad_pp r3.y, r3, r3.x, c4.x
cmp r4.x, -v2.z, c4.y, c4
texldp r3.x, v3, s5
rcp r3.z, v3.w
mad r3.z, -v3, r3, r3.x
mov r3.x, c1
cmp r3.z, r3, c4.x, r3.x
dp3 r3.x, v2, v2
texld r3.x, r3.x, s4
mul_pp r3.w, r4.x, r3
mul_pp r3.x, r3.w, r3
mul_pp r3.x, r3, r3.z
mul_pp r1.z, r3.x, r1
mul_pp r1.z, r1, r3.y
cmp r3.x, -v0.w, c4.y, c4
mul_pp r3.y, r1.w, r3.x
mul_pp_sat r1.z, r1, c9
add_pp r1.z, -r1, c4.x
mul_pp r0.w, r0, r3.y
mul_pp r3.x, r0.w, r1.z
texldd r1, r2, s2, r2.zwzw, r1
mul_pp r1.w, r3.y, r1
mov_pp r0.w, r3.x
add_pp r0, r0, -r1
mad_pp r0, r3.x, r0, r1
mul_pp oC0.w, r0, c2.x
mov_pp oC0.xyz, r0
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 117 math, 12 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightShadowData]
Float 2 [_PlanetOpacity]
Float 3 [_CityOverlayDetailScale]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
SetTexture 3 [_LightTexture0] 2D 3
SetTexture 4 [_LightTextureB0] 2D 4
SetTexture 5 [_ShadowMapTexture] 2D 5
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c4, 0.50000000, 0.15915494, 0.00000000, 1.00000000
def c5, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c6, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c7, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c8, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c9, 1.00976563, -1.00000000, 4.00000000, 0
dcl_texcoord0 v0.xyzw
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r3.xyz, r0.x, v5
abs r0.xyz, r3
add r0.w, r0.z, -r0.x
add r1.xyz, r0.zxyw, -r0
cmp r0.w, r0, c4, c4.z
mad r1.xyz, r0.w, r1, r0
add r0.w, r1.x, -r0.y
cmp r2.x, r0.w, c4.w, c4.z
abs r0.w, r3.z
add r1.xyz, r1, -r0.yxzw
mad r1.xyz, r2.x, r1, r0.yxzw
max r1.w, r0.x, r0
min r0.z, r0.x, r0.w
rcp r0.y, r1.w
mul r0.y, r0.z, r0
abs_pp r1.x, r1
rcp_pp r1.w, r1.x
mul r0.z, r0.y, r0.y
mul_pp r1.zw, r1.xyzy, r1.w
mul_pp r1.zw, r1, c4.x
mul r2.xy, r1.zwzw, c3.x
abs r1.z, r3.y
mad r1.x, r0.z, c7, c7.y
mad r1.x, r1, r0.z, c7.z
mad r1.x, r1, r0.z, c7.w
mad r1.x, r1, r0.z, c8
mad r0.z, r1.x, r0, c8.y
mul r0.z, r0, r0.y
add r1.x, -r1.z, c4.w
mad r1.y, r1.z, c5.x, c5
mad r1.y, r1, r1.z, c5.z
mad r1.y, r1, r1.z, c5.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.y, r1, r1.x
cmp r1.z, r3.y, c4, c4.w
mul r1.x, r1.z, r1.y
mad r1.x, -r1, c6, r1.y
mad r1.w, r1.z, c6.y, r1.x
add r0.x, r0, -r0.w
add r0.y, -r0.z, c8.z
cmp r0.y, -r0.x, r0.z, r0
mul r0.z, r1.w, c3.x
mul r0.z, r0, c6
mul r3.w, r1, c6
add r0.x, -r0.y, c6.y
cmp r3.y, r3.z, r0, r0.x
dsx r0.xy, r3.xzzw
mul r0.xy, r0, r0
add r0.y, r0.x, r0
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.y, c4.y
dsx r2.w, r0.z
dsy r1.y, r0.z
dsy r0.zw, r3.xyxz
cmp r3.x, r3, r3.y, -r3.y
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c4.y
dp4 r3.y, c0, c0
rsq r3.y, r3.y
mul r4.xyz, r3.y, c0
dp3_pp r4.w, v4, r4
add_pp r4.x, r4.w, c9
mov r2.z, r1
mov r1.x, r3.z
texldd r0, r2, s1, r2.zwzw, r1
mov r3.y, r3.w
dsx r1.w, r3
frc_pp r4.y, r4.x
mad r3.x, r3, c4.y, c4
dsy r3.w, r3
texldd r1.w, r3, s0, r1.zwzw, r3.zwzw
dp3_pp r1.z, c0, c0
add_pp_sat r3.w, r4.x, -r4.y
dp3_pp r3.x, v4, v4
rsq_pp r4.x, r3.x
rsq_pp r1.z, r1.z
mul_pp r3.xyz, r1.z, c0
mul_pp r4.xyz, r4.x, v4
dp3_pp r1.z, r4, r3
add_pp r3.x, r3.w, c9.y
rcp r3.w, v2.w
mad r4.xy, v2, r3.w, c4.x
texld r3.w, r4, s3
mul_pp_sat r3.y, -r4.w, c8.w
mad_pp r3.y, r3, r3.x, c4.w
mov r3.x, c1
add r3.z, c4.w, -r3.x
texldp r3.x, v3, s5
mad r3.z, r3.x, r3, c1.x
dp3 r3.x, v2, v2
cmp r4.x, -v2.z, c4.z, c4.w
texld r3.x, r3.x, s4
mul_pp r3.w, r4.x, r3
mul_pp r3.x, r3.w, r3
mul_pp r3.x, r3, r3.z
mul_pp r1.z, r3.x, r1
mul_pp r1.z, r1, r3.y
cmp r3.x, -v0.w, c4.z, c4.w
mul_pp r3.y, r1.w, r3.x
mul_pp_sat r1.z, r1, c9
add_pp r1.z, -r1, c4.w
mul_pp r0.w, r0, r3.y
mul_pp r3.x, r0.w, r1.z
texldd r1, r2, s2, r2.zwzw, r1
mul_pp r1.w, r3.y, r1
mov_pp r0.w, r3.x
add_pp r0, r0, -r1
mad_pp r0, r3.x, r0, r1
mul_pp oC0.w, r0, c2.x
mov_pp oC0.xyz, r0
"
}
SubProgram "d3d11 " {
// Stats: 99 math, 2 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
SetTexture 0 [_CityOverlayTex] 2D 3
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 2 [_CityLightOverlayDetailTex] 2D 5
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 320
Float 304 [_PlanetOpacity]
Float 308 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityShadows" 416
Vector 384 [_LightShadowData]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
BindCB  "UnityShadows" 2
"ps_4_0
eefiecedfijgdnaldcpanjklhoejnnkibhblgkfmabaaaaaaoaapaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
aiaaaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaomaaaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefchiaoaaaaeaaaaaaajoadaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fkaiaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadpcbabaaaadaaaaaa
gcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaaaoaaaaahdcaabaaa
aaaaaaaaegbabaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaaj
pcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaa
dbaaaaahbcaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaafgafbaaa
aaaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahocaabaaaaaaaaaaaagbjbaaa
aeaaaaaapgbpbaaaaeaaaaaaehaaaaalccaabaaaaaaaaaaajgafbaaaaaaaaaaa
aghabaaaafaaaaaaaagabaaaaaaaaaaadkaabaaaaaaaaaaaaaaaaaajecaabaaa
aaaaaaaaakiacaiaebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdcaaaaak
ccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaakiacaaaacaaaaaa
biaaaaaadiaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaiaeabaaaaaaj
ccaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
eeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaa
fgafbaaaaaaaaaaaagijcaaaabaaaaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegbcbaaaafaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaabaaaaaajgahbaaaaaaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaabbaaaaajccaabaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaa
aaaaaaaaagijcaaaabaaaaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaa
afaaaaaajgahbaaaaaaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaakoehibdpdicaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaacambebcaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaaaaaaaaahecaabaaa
aaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaialpdcaaaaajccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaa
aaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpbaaaaaahccaabaaaaaaaaaaa
egbcbaaaagaaaaaaegbcbaaaagaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaa
aaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaaaaaaaaaafgbibaaaagaaaaaa
deaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaaabaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaabaaaaaabkaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaadbaaaaai
gcaabaaaabaaaaaapganbaaaaaaaaaaapganbaiaebaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaaabaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
dkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaadkaabaaaabaaaaaa
bkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaa
iedefjlodcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaacaaaaaabkaabaiambaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
diaaaaahccaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadcaaaaaj
ccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahecaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaa
diaaaaahccaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdodiaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaabkiacaaaaaaaaaaabdaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafgcaabaaa
acaaaaaafgagbaaaabaaaaaaamaaaaafgcaabaaaadaaaaaafgagbaaaabaaaaaa
alaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaa
egaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdo
amaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaa
egaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaeaaaaaaegaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaa
adaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaabnaaaaahbcaabaaaabaaaaaa
abeaaaaaaaaaaaaadkbabaaaabaaaaaadhaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaadkaabaaaaeaaaaaabnaaaaajccaabaaaabaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaaaeaaaaaakganbaia
mbaaaaaaaaaaaaaapgagbaiaibaaaaaaaaaaaaaadcaaaaakhcaabaaaafaaaaaa
fgafbaaaabaaaaaaegacbaaaaeaaaaaakgajbaiaibaaaaaaaaaaaaaadiaaaaah
ecaabaaaaeaaaaaabkaabaaaabaaaaaadkaabaaaaeaaaaaadgaaaaaficaabaaa
afaaaaaaabeaaaaaaaaaaaaadgaaaaagdcaabaaaaeaaaaaajgafbaiambaaaaaa
aaaaaaaaaaaaaaahhcaabaaaaeaaaaaaegacbaaaaeaaaaaajgahbaaaafaaaaaa
bnaaaaaiccaabaaaabaaaaaaakaabaaaafaaaaaabkaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
ocaabaaaaaaaaaaafgafbaaaabaaaaaaagajbaaaaeaaaaaafgaobaiaibaaaaaa
aaaaaaaadiaaaaakmcaabaaaaaaaaaaapgalbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaadpaoaaaaahgcaabaaaaaaaaaaakgalbaaaaaaaaaaa
fgafbaaaaaaaaaaadiaaaaaigcaabaaaaaaaaaaafgagbaaaaaaaaaaafgifcaaa
aaaaaaaabdaaaaaaejaaaaanpcaabaaaaeaaaaaajgafbaaaaaaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaaejaaaaan
pcaabaaaacaaaaaajgafbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaafaaaaaa
igaabaaaacaaaaaaigaabaaaadaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaaaaeaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaaabaaaaaa
dkaabaaaacaaaaaadiaaaaahicaabaaaaeaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaa
aeaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaaaeaaaaaaegaobaaaaaaaaaaa
egaobaaaacaaaaaadiaaaaaiiccabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaa
aaaaaaaabdaaaaaadgaaaaafhccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 267 math, 6 textures, 9 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [_LightTexture0] 2D 1
SetTexture 2 [_LightTextureB0] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 64
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightShadowData]
VectorHalf 32 [_LightColor0] 4
Float 40 [_SpecularPower]
VectorHalf 48 [_SpecularColor] 4
Float 56 [_PlanetOpacity]
Float 60 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::less);
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 _LightShadowData;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _PlanetOpacity;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   depth2d<float> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _LightTextureB0 [[texture(2)]], sampler _mtlsmp__LightTextureB0 [[sampler(2)]]
  ,   texture2d<half> _CityOverlayTex [[texture(3)]], sampler _mtlsmp__CityOverlayTex [[sampler(3)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(4)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half4 color_5;
  float3 cse_6;
  cse_6 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(cse_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(cse_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  half4 tmpvar_35;
  half3 detailCoords_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * rsqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_44;
  tmpvar_44 = dfdx(tmpvar_39.xz);
  float2 tmpvar_45;
  tmpvar_45 = dfdy(tmpvar_39.xz);
  float4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dfdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dfdy(tmpvar_43.y);
  float3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, (float)zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = half(tmpvar_49);
  float3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, (float3)half3(zxlerp_38));
  detailCoords_36 = half3(tmpvar_50);
  float3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, (float3)detailCoords_36, (float3)half3(nylerp_37));
  detailCoords_36 = half3(tmpvar_51);
  half tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  float2 coord_53;
  coord_53 = ((float2)(((half)0.5 * detailCoords_36.zy) / tmpvar_52) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_54;
  tmpvar_54 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_53), gradient2d((float2)(tmpvar_46.xy), (float2)(tmpvar_46.zw)));
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  float tmpvar_55;
  tmpvar_55 = ((float)tmpvar_14.w * (1.0 - float(
    (0.0 >= _mtl_i.xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = half(tmpvar_55);
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  float3 tmpvar_56;
  tmpvar_56 = _mtl_u._WorldSpaceLightPos0.xyz;
  half4 tmpvar_57;
  float2 P_58;
  P_58 = ((_mtl_i.xlv_TEXCOORD2.xy / _mtl_i.xlv_TEXCOORD2.w) + 0.5);
  tmpvar_57 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_58));
  float tmpvar_59;
  tmpvar_59 = dot (_mtl_i.xlv_TEXCOORD2.xyz, _mtl_i.xlv_TEXCOORD2.xyz);
  half4 tmpvar_60;
  tmpvar_60 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_59)));
  half tmpvar_61;
  half shadow_62;
  half tmpvar_63;
  tmpvar_63 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(_mtl_i.xlv_TEXCOORD3).xy / (float)(_mtl_i.xlv_TEXCOORD3).w, (float)(_mtl_i.xlv_TEXCOORD3).z / (float)(_mtl_i.xlv_TEXCOORD3).w);
  float tmpvar_64;
  tmpvar_64 = (_mtl_u._LightShadowData.x + ((float)tmpvar_63 * (1.0 - _mtl_u._LightShadowData.x)));
  shadow_62 = half(tmpvar_64);
  tmpvar_61 = shadow_62;
  half3 lightDir_65;
  lightDir_65 = half3(tmpvar_56);
  half3 viewDir_66;
  viewDir_66 = half3(_mtl_i.xlv_TEXCOORD7);
  half3 normal_67;
  normal_67 = half3(_mtl_i.xlv_TEXCOORD4);
  half atten_68;
  atten_68 = half((((
    float((_mtl_i.xlv_TEXCOORD2.z > 0.0))
   * (float)tmpvar_57.w) * (float)tmpvar_60.w) * (float)tmpvar_61));
  half4 c_69;
  half3 tmpvar_70;
  tmpvar_70 = normalize(lightDir_65);
  lightDir_65 = tmpvar_70;
  half3 tmpvar_71;
  tmpvar_71 = normalize(viewDir_66);
  viewDir_66 = tmpvar_71;
  half3 tmpvar_72;
  tmpvar_72 = normalize(normal_67);
  normal_67 = tmpvar_72;
  half tmpvar_73;
  tmpvar_73 = dot (tmpvar_72, tmpvar_70);
  float tmpvar_74;
  half tmpvar_75;
  tmpvar_75 = clamp (dot (normalize(
    (tmpvar_70 + tmpvar_71)
  ), tmpvar_72), (half)0.0, (half)1.0);
  tmpvar_74 = float(tmpvar_75);
  float3 tmpvar_76;
  tmpvar_76 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_73) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_74, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_68 * (half)4.0));
  c_69.xyz = half3(tmpvar_76);
  c_69.w = (tmpvar_73 * (atten_68 * (half)4.0));
  float3 tmpvar_77;
  tmpvar_77 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_78;
  lightDir_78 = half3(tmpvar_77);
  half3 normal_79;
  normal_79 = half3(_mtl_i.xlv_TEXCOORD4);
  half tmpvar_80;
  tmpvar_80 = dot (normal_79, lightDir_78);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_69 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_80)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_80)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_81;
  tmpvar_81 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_81.xyz;
  float tmpvar_82;
  tmpvar_82 = ((float)tmpvar_81.w * _mtl_u._PlanetOpacity);
  color_5.w = half(tmpvar_82);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 107 math, 10 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [_WorldSpaceLightPos0]
Float 1 [_PlanetOpacity]
Float 2 [_CityOverlayDetailScale]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
SetTexture 3 [_ShadowMapTexture] 2D 3
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c4, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c5, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c6, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c7, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c8, 1.00976563, -1.00000000, 4.00000000, 0
dcl_texcoord0 v0.xyzw
dcl_texcoord2 v2
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v4, v4
rsq r0.x, r0.x
mul r3.xyz, r0.x, v4
abs r0.xyz, r3
add r0.w, r0.z, -r0.x
add r1.xyz, r0.zxyw, -r0
cmp r0.w, r0, c3.x, c3.y
mad r1.xyz, r0.w, r1, r0
add r0.w, r1.x, -r0.y
cmp r2.x, r0.w, c3, c3.y
abs r0.w, r3.z
add r1.xyz, r1, -r0.yxzw
mad r1.xyz, r2.x, r1, r0.yxzw
max r1.w, r0.x, r0
min r0.z, r0.x, r0.w
rcp r0.y, r1.w
mul r0.y, r0.z, r0
abs_pp r1.x, r1
rcp_pp r1.w, r1.x
mul r0.z, r0.y, r0.y
mul_pp r1.zw, r1.xyzy, r1.w
mul_pp r1.zw, r1, c3.z
mul r2.xy, r1.zwzw, c2.x
abs r1.z, r3.y
mad r1.x, r0.z, c6, c6.y
mad r1.x, r1, r0.z, c6.z
mad r1.x, r1, r0.z, c6.w
mad r1.x, r1, r0.z, c7
mad r0.z, r1.x, r0, c7.y
mul r0.z, r0, r0.y
add r1.x, -r1.z, c3
mad r1.y, r1.z, c4.x, c4
mad r1.y, r1, r1.z, c4.z
mad r1.y, r1, r1.z, c4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.y, r1, r1.x
cmp r1.z, r3.y, c3.y, c3.x
mul r1.x, r1.z, r1.y
mad r1.x, -r1, c5, r1.y
mad r1.w, r1.z, c5.y, r1.x
add r0.x, r0, -r0.w
add r0.y, -r0.z, c7.z
cmp r0.y, -r0.x, r0.z, r0
mul r0.z, r1.w, c2.x
mul r0.z, r0, c5
mul r3.w, r1, c5
add r0.x, -r0.y, c5.y
cmp r3.y, r3.z, r0, r0.x
dsx r0.xy, r3.xzzw
mul r0.xy, r0, r0
add r0.y, r0.x, r0
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.y, c3.w
dsx r2.w, r0.z
dsy r1.y, r0.z
dsy r0.zw, r3.xyxz
cmp r3.x, r3, r3.y, -r3.y
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c3.w
dp4_pp r3.y, c0, c0
rsq_pp r3.y, r3.y
mul_pp r4.xyz, r3.y, c0
dp3_pp r4.w, v3, r4
add_pp r4.x, r4.w, c8
mov r2.z, r1
mov r1.x, r3.z
texldd r0, r2, s1, r2.zwzw, r1
mov r3.y, r3.w
dsx r1.w, r3
mad r3.x, r3, c3.w, c3.z
dsy r3.w, r3
texldd r1.w, r3, s0, r1.zwzw, r3.zwzw
frc_pp r4.y, r4.x
add_pp_sat r1.z, r4.x, -r4.y
dp3_pp r3.y, v3, v3
rsq_pp r3.w, r3.y
dp3_pp r3.x, c0, c0
rsq_pp r3.x, r3.x
mul_pp r3.xyz, r3.x, c0
mul_pp r4.xyz, r3.w, v3
dp3_pp r3.y, r4, r3
mul_pp_sat r3.x, -r4.w, c7.w
add_pp r1.z, r1, c8.y
mad_pp r1.z, r3.x, r1, c3.x
texldp r3.x, v2, s3
mul_pp r3.x, r3, r3.y
mul_pp r1.z, r3.x, r1
cmp r3.x, -v0.w, c3.y, c3
mul_pp r3.y, r1.w, r3.x
mul_pp_sat r1.z, r1, c8
add_pp r1.z, -r1, c3.x
mul_pp r0.w, r0, r3.y
mul_pp r3.x, r0.w, r1.z
texldd r1, r2, s2, r2.zwzw, r1
mul_pp r1.w, r3.y, r1
mov_pp r0.w, r3.x
add_pp r0, r0, -r1
mad_pp r0, r3.x, r0, r1
mul_pp oC0.w, r0, c1.x
mov_pp oC0.xyz, r0
"
}
SubProgram "d3d11 " {
// Stats: 89 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
SetTexture 0 [_CityOverlayTex] 2D 1
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 2
SetTexture 2 [_CityLightOverlayDetailTex] 2D 3
SetTexture 3 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 320
Float 304 [_PlanetOpacity]
Float 308 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
"ps_4_0
eefiecedlfhjgpocdagkbkooiohgfdmhelngjhbmabaaaaaaomanaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapalaaaaneaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaneaaaaaaagaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaaiaaaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcjmamaaaaeaaaaaaachadaaaafjaaaaaeegiocaaa
aaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadlcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaabaaaaaajbcaabaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaaegiccaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaaaoaaaaahgcaabaaaaaaaaaaaagbbbaaaadaaaaaa
pgbpbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaajgafbaaaaaaaaaaaeghobaaa
adaaaaaaaagabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaiaeadiaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabbaaaaajccaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaai
ocaabaaaaaaaaaaafgafbaaaaaaaaaaaagijcaaaabaaaaaaaaaaaaaabaaaaaah
ccaabaaaaaaaaaaaegbcbaaaaeaaaaaajgahbaaaaaaaaaaaaaaaaaahecaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaaaaaaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaialp
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaiadpdicaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
aaaaaaaibcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
baaaaaahccaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaa
aaaaaaaafgbibaaaafaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaa
abaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaapganbaia
ebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaah
icaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaa
abaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaa
acaaaaaabkaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadcaaaaajccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdodiaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaabkiacaaa
aaaaaaaabdaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafgcaabaaaacaaaaaafgagbaaaabaaaaaaamaaaaafgcaabaaa
adaaaaaafgagbaaaabaaaaaaalaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaa
abaaaaaaabeaaaaaidpjccdoamaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaeaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
bnaaaaahbcaabaaaabaaaaaaabeaaaaaaaaaaaaadkbabaaaabaaaaaadhaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaabnaaaaaj
ccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaj
pcaabaaaaeaaaaaakganbaiambaaaaaaaaaaaaaapgagbaiaibaaaaaaaaaaaaaa
dcaaaaakhcaabaaaafaaaaaafgafbaaaabaaaaaaegacbaaaaeaaaaaakgajbaia
ibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaaabaaaaaadkaabaaa
aeaaaaaadgaaaaaficaabaaaafaaaaaaabeaaaaaaaaaaaaadgaaaaagdcaabaaa
aeaaaaaajgafbaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaaaeaaaaaaegacbaaa
aeaaaaaajgahbaaaafaaaaaabnaaaaaiccaabaaaabaaaaaaakaabaaaafaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakocaabaaaaaaaaaaafgafbaaaabaaaaaaagajbaaa
aeaaaaaafgaobaiaibaaaaaaaaaaaaaadiaaaaakmcaabaaaaaaaaaaapgalbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaahgcaabaaa
aaaaaaaakgalbaaaaaaaaaaafgafbaaaaaaaaaaadiaaaaaigcaabaaaaaaaaaaa
fgagbaaaaaaaaaaafgifcaaaaaaaaaaabdaaaaaaejaaaaanpcaabaaaaeaaaaaa
jgafbaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaacaaaaaaigaabaaaacaaaaaa
igaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaajgafbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaadaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaadiaaaaah
ccaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaeaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaa
aeaaaaaaegaobaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaiiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakiacaaaaaaaaaaabdaaaaaadgaaaaafhccabaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 108 math, 11 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [_WorldSpaceLightPos0]
Float 1 [_PlanetOpacity]
Float 2 [_CityOverlayDetailScale]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
SetTexture 3 [_ShadowMapTexture] 2D 3
SetTexture 4 [_LightTexture0] 2D 4
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c3, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c4, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c5, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c6, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c7, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c8, 1.00976563, -1.00000000, 4.00000000, 0
dcl_texcoord0 v0.xyzw
dcl_texcoord2 v2.xy
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r3.xyz, r0.x, v5
abs r0.xyz, r3
add r0.w, r0.z, -r0.x
add r1.xyz, r0.zxyw, -r0
cmp r0.w, r0, c3.x, c3.y
mad r1.xyz, r0.w, r1, r0
add r0.w, r1.x, -r0.y
cmp r2.x, r0.w, c3, c3.y
abs r0.w, r3.z
add r1.xyz, r1, -r0.yxzw
mad r1.xyz, r2.x, r1, r0.yxzw
max r1.w, r0.x, r0
min r0.z, r0.x, r0.w
rcp r0.y, r1.w
mul r0.y, r0.z, r0
abs_pp r1.x, r1
rcp_pp r1.w, r1.x
mul r0.z, r0.y, r0.y
mul_pp r1.zw, r1.xyzy, r1.w
mul_pp r1.zw, r1, c3.z
mul r2.xy, r1.zwzw, c2.x
abs r1.z, r3.y
mad r1.x, r0.z, c6, c6.y
mad r1.x, r1, r0.z, c6.z
mad r1.x, r1, r0.z, c6.w
mad r1.x, r1, r0.z, c7
mad r0.z, r1.x, r0, c7.y
mul r0.z, r0, r0.y
add r1.x, -r1.z, c3
mad r1.y, r1.z, c4.x, c4
mad r1.y, r1, r1.z, c4.z
mad r1.y, r1, r1.z, c4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.y, r1, r1.x
cmp r1.z, r3.y, c3.y, c3.x
mul r1.x, r1.z, r1.y
mad r1.x, -r1, c5, r1.y
mad r1.w, r1.z, c5.y, r1.x
add r0.x, r0, -r0.w
add r0.y, -r0.z, c7.z
cmp r0.y, -r0.x, r0.z, r0
mul r0.z, r1.w, c2.x
mul r0.z, r0, c5
mul r3.w, r1, c5
add r0.x, -r0.y, c5.y
cmp r3.y, r3.z, r0, r0.x
dsx r0.xy, r3.xzzw
mul r0.xy, r0, r0
add r0.y, r0.x, r0
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.y, c3.w
dsx r2.w, r0.z
dsy r1.y, r0.z
dsy r0.zw, r3.xyxz
cmp r3.x, r3, r3.y, -r3.y
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c3.w
dp4_pp r3.y, c0, c0
rsq_pp r3.y, r3.y
mul_pp r4.xyz, r3.y, c0
dp3_pp r4.w, v4, r4
add_pp r4.x, r4.w, c8
mov r2.z, r1
mov r1.x, r3.z
texldd r0, r2, s1, r2.zwzw, r1
mov r3.y, r3.w
dsx r1.w, r3
mad r3.x, r3, c3.w, c3.z
dsy r3.w, r3
texldd r1.w, r3, s0, r1.zwzw, r3.zwzw
frc_pp r4.y, r4.x
add_pp_sat r1.z, r4.x, -r4.y
dp3_pp r3.y, v4, v4
rsq_pp r3.w, r3.y
mul_pp r4.xyz, r3.w, v4
dp3_pp r3.x, c0, c0
rsq_pp r3.x, r3.x
mul_pp r3.xyz, r3.x, c0
dp3_pp r3.y, r4, r3
mul_pp_sat r3.x, -r4.w, c7.w
add_pp r1.z, r1, c8.y
mad_pp r1.z, r3.x, r1, c3.x
texldp r3.x, v3, s3
texld r3.w, v2, s4
mul r3.x, r3.w, r3
mul_pp r3.x, r3, r3.y
mul_pp r1.z, r3.x, r1
cmp r3.x, -v0.w, c3.y, c3
mul_pp r3.y, r1.w, r3.x
mul_pp_sat r1.z, r1, c8
add_pp r1.z, -r1, c3.x
mul_pp r0.w, r0, r3.y
mul_pp r3.x, r0.w, r1.z
texldd r1, r2, s2, r2.zwzw, r1
mul_pp r1.w, r3.y, r1
mov_pp r0.w, r3.x
add_pp r0, r0, -r1
mad_pp r0, r3.x, r0, r1
mul_pp oC0.w, r0, c1.x
mov_pp oC0.xyz, r0
"
}
SubProgram "d3d11 " {
// Stats: 90 math, 2 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
SetTexture 0 [_CityOverlayTex] 2D 2
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 2 [_CityLightOverlayDetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 384
Float 368 [_PlanetOpacity]
Float 372 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
"ps_4_0
eefiecedmeadicioackobnngkcbbhoejajccpbogabaaaaaagmaoaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaadaaaaaaaeaaaaaaomaaaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaapalaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaomaaaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcaeanaaaaeaaaaaaaebadaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaa
fkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaae
aahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaagcbaaaad
icbabaaaabaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadlcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacagaaaaaabaaaaaajbcaabaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaaegiccaaaabaaaaaaaaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaaaoaaaaahgcaabaaaaaaaaaaaagbbbaaaaeaaaaaa
pgbpbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaajgafbaaaaaaaaaaaeghobaaa
aeaaaaaaaagabaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaadaaaaaa
eghobaaaadaaaaaaaagabaaaabaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaaaaaiaeadiaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabbaaaaajccaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaai
ocaabaaaaaaaaaaafgafbaaaaaaaaaaaagijcaaaabaaaaaaaaaaaaaabaaaaaah
ccaabaaaaaaaaaaaegbcbaaaafaaaaaajgahbaaaaaaaaaaaaaaaaaahecaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaaaaaaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaialp
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaiadpdicaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
aaaaaaaibcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
baaaaaahccaabaaaaaaaaaaaegbcbaaaagaaaaaaegbcbaaaagaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaa
aaaaaaaafgbibaaaagaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaa
abaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaapganbaia
ebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaah
icaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaa
abaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaa
acaaaaaabkaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadcaaaaajccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdodiaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaabkiacaaa
aaaaaaaabhaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafgcaabaaaacaaaaaafgagbaaaabaaaaaaamaaaaafgcaabaaa
adaaaaaafgagbaaaabaaaaaaalaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaa
abaaaaaaabeaaaaaidpjccdoamaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaeaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
bnaaaaahbcaabaaaabaaaaaaabeaaaaaaaaaaaaadkbabaaaabaaaaaadhaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaabnaaaaaj
ccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaj
pcaabaaaaeaaaaaakganbaiambaaaaaaaaaaaaaapgagbaiaibaaaaaaaaaaaaaa
dcaaaaakhcaabaaaafaaaaaafgafbaaaabaaaaaaegacbaaaaeaaaaaakgajbaia
ibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaaabaaaaaadkaabaaa
aeaaaaaadgaaaaaficaabaaaafaaaaaaabeaaaaaaaaaaaaadgaaaaagdcaabaaa
aeaaaaaajgafbaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaaaeaaaaaaegacbaaa
aeaaaaaajgahbaaaafaaaaaabnaaaaaiccaabaaaabaaaaaaakaabaaaafaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakocaabaaaaaaaaaaafgafbaaaabaaaaaaagajbaaa
aeaaaaaafgaobaiaibaaaaaaaaaaaaaadiaaaaakmcaabaaaaaaaaaaapgalbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaahgcaabaaa
aaaaaaaakgalbaaaaaaaaaaafgafbaaaaaaaaaaadiaaaaaigcaabaaaaaaaaaaa
fgagbaaaaaaaaaaafgifcaaaaaaaaaaabhaaaaaaejaaaaanpcaabaaaaeaaaaaa
jgafbaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaigaabaaaacaaaaaa
igaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaajgafbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaadiaaaaah
ccaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaeaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaa
aeaaaaaaegaobaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaiiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakiacaaaaaaaaaaabhaaaaaadgaaaaafhccabaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 117 math, 11 textures
Keywords { "POINT" "SHADOWS_CUBE" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Float 3 [_PlanetOpacity]
Float 4 [_CityOverlayDetailScale]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
SetTexture 3 [_ShadowMapTexture] CUBE 3
SetTexture 4 [_LightTexture0] 2D 4
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c5, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c6, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c7, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c8, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c9, -0.33299461, 0.99999559, 1.57079601, 0.97000003
def c10, 1.00000000, 0.00392157, 0.00001538, 0.00000006
def c11, 10.00000000, 1.00976563, -1.00000000, 4.00000000
dcl_texcoord0 v0.xyzw
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r3.xyz, r0.x, v5
abs r0.xyz, r3
add r0.w, r0.z, -r0.x
add r1.xyz, r0.zxyw, -r0
cmp r0.w, r0, c5.x, c5.y
mad r1.xyz, r0.w, r1, r0
add r0.w, r1.x, -r0.y
cmp r2.x, r0.w, c5, c5.y
abs r0.w, r3.z
add r1.xyz, r1, -r0.yxzw
mad r1.xyz, r2.x, r1, r0.yxzw
max r1.w, r0.x, r0
min r0.z, r0.x, r0.w
rcp r0.y, r1.w
mul r0.y, r0.z, r0
abs_pp r1.x, r1
rcp_pp r1.w, r1.x
mul r0.z, r0.y, r0.y
mul_pp r1.zw, r1.xyzy, r1.w
mul_pp r1.zw, r1, c5.z
mul r2.xy, r1.zwzw, c4.x
abs r1.z, r3.y
mad r1.x, r0.z, c8, c8.y
mad r1.x, r1, r0.z, c8.z
mad r1.x, r1, r0.z, c8.w
mad r1.x, r1, r0.z, c9
mad r0.z, r1.x, r0, c9.y
mul r0.z, r0, r0.y
add r1.x, -r1.z, c5
mad r1.y, r1.z, c6.x, c6
mad r1.y, r1, r1.z, c6.z
mad r1.y, r1, r1.z, c6.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.y, r1, r1.x
cmp r1.z, r3.y, c5.y, c5.x
mul r1.x, r1.z, r1.y
mad r1.x, -r1, c7, r1.y
mad r1.w, r1.z, c7.y, r1.x
add r0.x, r0, -r0.w
add r0.y, -r0.z, c9.z
cmp r0.y, -r0.x, r0.z, r0
mul r0.z, r1.w, c4.x
mul r0.z, r0, c7
mul r3.w, r1, c7
add r0.x, -r0.y, c7.y
cmp r3.y, r3.z, r0, r0.x
dsx r0.xy, r3.xzzw
mul r0.xy, r0, r0
add r0.y, r0.x, r0
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.y, c5.w
dsx r2.w, r0.z
dsy r1.y, r0.z
dsy r0.zw, r3.xyxz
cmp r3.x, r3, r3.y, -r3.y
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c5.w
dp4 r3.y, c0, c0
rsq r3.y, r3.y
mul r4.xyz, r3.y, c0
dp3_pp r4.w, v4, r4
add_pp r4.x, r4.w, c11.y
mov r2.z, r1
mov r1.x, r3.z
texldd r0, r2, s1, r2.zwzw, r1
mov r3.y, r3.w
dsx r1.w, r3
frc_pp r4.y, r4.x
mad r3.x, r3, c5.w, c5.z
dsy r3.w, r3
texldd r1.w, r3, s0, r1.zwzw, r3.zwzw
dp3_pp r1.z, c0, c0
add_pp_sat r3.w, r4.x, -r4.y
dp3_pp r3.x, v4, v4
rsq_pp r4.x, r3.x
rsq_pp r1.z, r1.z
mul_pp r3.xyz, r1.z, c0
mul_pp r4.xyz, r4.x, v4
dp3_pp r1.z, r4, r3
dp3 r3.z, v3, v3
rsq r4.y, r3.z
add_pp r3.x, r3.w, c11.z
mul_pp_sat r3.y, -r4.w, c11.x
mad_pp r4.x, r3.y, r3, c5
texld r3, v3, s3
dp4 r3.x, r3, c10
rcp r4.y, r4.y
mul r3.y, r4, c1.w
mad r3.z, -r3.y, c9.w, r3.x
mov r3.y, c2.x
dp3 r3.x, v2, v2
cmp r3.y, r3.z, c5.x, r3
texld r3.x, r3.x, s4
mul r3.x, r3, r3.y
mul_pp r1.z, r3.x, r1
cmp r3.x, -v0.w, c5.y, c5
mul_pp r3.y, r1.w, r3.x
mul_pp r1.z, r1, r4.x
mul_pp_sat r1.z, r1, c11.w
add_pp r1.z, -r1, c5.x
mul_pp r0.w, r0, r3.y
mul_pp r3.x, r0.w, r1.z
texldd r1, r2, s2, r2.zwzw, r1
mul_pp r1.w, r3.y, r1
mov_pp r0.w, r3.x
add_pp r0, r0, -r1
mad_pp r0, r3.x, r0, r1
mul_pp oC0.w, r0, c3.x
mov_pp oC0.xyz, r0
"
}
SubProgram "d3d11 " {
// Stats: 96 math, 2 textures
Keywords { "POINT" "SHADOWS_CUBE" }
SetTexture 0 [_CityOverlayTex] 2D 2
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 2 [_CityLightOverlayDetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_ShadowMapTexture] CUBE 0
ConstBuffer "$Globals" 320
Float 304 [_PlanetOpacity]
Float 308 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityShadows" 416
Vector 384 [_LightShadowData]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
BindCB  "UnityShadows" 2
"ps_4_0
eefiecedckijjemnklmdoaeohdnnjkgobmpbpchlabaaaaaafeapaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiaaaaaaomaaaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaomaaaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcomanaaaaeaaaaaaahladaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafidaaaae
aahabaaaaeaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaa
dkiacaaaabaaaaaaabaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaomfbhidpefaaaaajpcaabaaaabaaaaaaegbcbaaaaeaaaaaaeghobaaa
aeaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaaaaaaaaaaegaobaaaabaaaaaa
aceaaaaaaaaaiadpibiaiadlicabibdhafidibdddbaaaaahbcaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadhaaaaakbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaakiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpbaaaaaahccaabaaa
aaaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaa
fgafbaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaiaeabaaaaaajccaabaaaaaaaaaaaegiccaaa
abaaaaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaaaaaaaaaaagijcaaa
abaaaaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaa
afaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaa
abaaaaaaagaabaaaabaaaaaaegbcbaaaafaaaaaabaaaaaahccaabaaaaaaaaaaa
egacbaaaabaaaaaajgahbaaaaaaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaabbaaaaajccaabaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaa
aaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaaaaaaaaaaagijcaaaabaaaaaa
aaaaaaaabaaaaaahccaabaaaaaaaaaaaegbcbaaaafaaaaaajgahbaaaaaaaaaaa
aaaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaah
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaaaaaaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaaaaialpdcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaiadpdicaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaa
abeaaaaaaaaaiadpbaaaaaahccaabaaaaaaaaaaaegbcbaaaagaaaaaaegbcbaaa
agaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaa
aaaaaaaafgafbaaaaaaaaaaafgbibaaaagaaaaaadeaaaaajbcaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaa
ddaaaaajccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahccaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajecaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajecaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaa
aaaaaaaapganbaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaadeaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaa
abaaaaahccaabaaaabaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaak
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpdcaaaaakicaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdp
aaaaaaaibcaabaaaacaaaaaabkaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahccaabaaaacaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaadcaaaaajccaabaaaacaaaaaabkaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdodiaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaabkiacaaaaaaaaaaabdaaaaaadiaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaidpjkcdpalaaaaafgcaabaaaacaaaaaafgagbaaaabaaaaaa
amaaaaafgcaabaaaadaaaaaafgagbaaaabaaaaaaalaaaaafdcaabaaaaeaaaaaa
ogakbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaa
aeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaafdcaabaaaaeaaaaaa
ogakbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaa
aeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaeaaaaaa
egaabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaadaaaaaabnaaaaahbcaabaaaabaaaaaaabeaaaaaaaaaaaaadkbabaaa
abaaaaaadhaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaa
abeaaaaaaaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaa
aeaaaaaabnaaaaajccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaajpcaabaaaaeaaaaaakganbaiambaaaaaaaaaaaaaapgagbaia
ibaaaaaaaaaaaaaadcaaaaakhcaabaaaafaaaaaafgafbaaaabaaaaaaegacbaaa
aeaaaaaakgajbaiaibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaa
abaaaaaadkaabaaaaeaaaaaadgaaaaaficaabaaaafaaaaaaabeaaaaaaaaaaaaa
dgaaaaagdcaabaaaaeaaaaaajgafbaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaa
aeaaaaaaegacbaaaaeaaaaaajgahbaaaafaaaaaabnaaaaaiccaabaaaabaaaaaa
akaabaaaafaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakocaabaaaaaaaaaaafgafbaaa
abaaaaaaagajbaaaaeaaaaaafgaobaiaibaaaaaaaaaaaaaadiaaaaakmcaabaaa
aaaaaaaapgalbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
aoaaaaahgcaabaaaaaaaaaaakgalbaaaaaaaaaaafgafbaaaaaaaaaaadiaaaaai
gcaabaaaaaaaaaaafgagbaaaaaaaaaaafgifcaaaaaaaaaaabdaaaaaaejaaaaan
pcaabaaaaeaaaaaajgafbaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
igaabaaaacaaaaaaigaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaajgafbaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaaigaabaaaacaaaaaaigaabaaa
adaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaa
diaaaaahicaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaah
icaabaaaaeaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaaaaaaaipcaabaaa
aaaaaaaaegaobaiaebaaaaaaacaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaa
aaaaaaaapgapbaaaaeaaaaaaegaobaaaaaaaaaaaegaobaaaacaaaaaadiaaaaai
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaaaaaaaaaabdaaaaaadgaaaaaf
hccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 265 math, 5 textures, 10 branches
Keywords { "POINT" "SHADOWS_CUBE" }
SetTexture 0 [_ShadowMapTexture] CUBE 0
SetTexture 1 [_LightTexture0] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 80
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
Vector 32 [_LightShadowData]
VectorHalf 48 [_LightColor0] 4
Float 56 [_SpecularPower]
VectorHalf 64 [_SpecularColor] 4
Float 72 [_PlanetOpacity]
Float 76 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4 _LightShadowData;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _PlanetOpacity;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _CityOverlayTex [[texture(2)]], sampler _mtlsmp__CityOverlayTex [[sampler(2)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(3)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half4 color_5;
  float3 cse_6;
  cse_6 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(cse_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(cse_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  half4 tmpvar_35;
  half3 detailCoords_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * rsqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_44;
  tmpvar_44 = dfdx(tmpvar_39.xz);
  float2 tmpvar_45;
  tmpvar_45 = dfdy(tmpvar_39.xz);
  float4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dfdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dfdy(tmpvar_43.y);
  float3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, (float)zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = half(tmpvar_49);
  float3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, (float3)half3(zxlerp_38));
  detailCoords_36 = half3(tmpvar_50);
  float3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, (float3)detailCoords_36, (float3)half3(nylerp_37));
  detailCoords_36 = half3(tmpvar_51);
  half tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  float2 coord_53;
  coord_53 = ((float2)(((half)0.5 * detailCoords_36.zy) / tmpvar_52) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_54;
  tmpvar_54 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_53), gradient2d((float2)(tmpvar_46.xy), (float2)(tmpvar_46.zw)));
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  float tmpvar_55;
  tmpvar_55 = ((float)tmpvar_14.w * (1.0 - float(
    (0.0 >= _mtl_i.xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = half(tmpvar_55);
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  float3 tmpvar_56;
  tmpvar_56 = _mtl_u._WorldSpaceLightPos0.xyz;
  float tmpvar_57;
  tmpvar_57 = dot (_mtl_i.xlv_TEXCOORD2, _mtl_i.xlv_TEXCOORD2);
  half4 tmpvar_58;
  tmpvar_58 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_57)));
  float tmpvar_59;
  tmpvar_59 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD3, _mtl_i.xlv_TEXCOORD3)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float4 packDist_60;
  half4 tmpvar_61;
  tmpvar_61 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(_mtl_i.xlv_TEXCOORD3));
  packDist_60 = float4(tmpvar_61);
  float tmpvar_62;
  tmpvar_62 = dot (packDist_60, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float tmpvar_63;
  if ((tmpvar_62 < tmpvar_59)) {
    tmpvar_63 = _mtl_u._LightShadowData.x;
  } else {
    tmpvar_63 = 1.0;
  };
  half3 lightDir_64;
  lightDir_64 = half3(tmpvar_56);
  half3 viewDir_65;
  viewDir_65 = half3(_mtl_i.xlv_TEXCOORD7);
  half3 normal_66;
  normal_66 = half3(_mtl_i.xlv_TEXCOORD4);
  half atten_67;
  atten_67 = half(((float)tmpvar_58.w * tmpvar_63));
  half4 c_68;
  half3 tmpvar_69;
  tmpvar_69 = normalize(lightDir_64);
  lightDir_64 = tmpvar_69;
  half3 tmpvar_70;
  tmpvar_70 = normalize(viewDir_65);
  viewDir_65 = tmpvar_70;
  half3 tmpvar_71;
  tmpvar_71 = normalize(normal_66);
  normal_66 = tmpvar_71;
  half tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_69);
  float tmpvar_73;
  half tmpvar_74;
  tmpvar_74 = clamp (dot (normalize(
    (tmpvar_69 + tmpvar_70)
  ), tmpvar_71), (half)0.0, (half)1.0);
  tmpvar_73 = float(tmpvar_74);
  float3 tmpvar_75;
  tmpvar_75 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_72) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_73, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_67 * (half)4.0));
  c_68.xyz = half3(tmpvar_75);
  c_68.w = (tmpvar_72 * (atten_67 * (half)4.0));
  float3 tmpvar_76;
  tmpvar_76 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_77;
  lightDir_77 = half3(tmpvar_76);
  half3 normal_78;
  normal_78 = half3(_mtl_i.xlv_TEXCOORD4);
  half tmpvar_79;
  tmpvar_79 = dot (normal_78, lightDir_77);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_68 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_79)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_79)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_80.xyz;
  float tmpvar_81;
  tmpvar_81 = ((float)tmpvar_80.w * _mtl_u._PlanetOpacity);
  color_5.w = half(tmpvar_81);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 118 math, 12 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Float 3 [_PlanetOpacity]
Float 4 [_CityOverlayDetailScale]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
SetTexture 3 [_ShadowMapTexture] CUBE 3
SetTexture 4 [_LightTextureB0] 2D 4
SetTexture 5 [_LightTexture0] CUBE 5
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c5, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c6, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c7, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c8, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c9, -0.33299461, 0.99999559, 1.57079601, 0.97000003
def c10, 1.00000000, 0.00392157, 0.00001538, 0.00000006
def c11, 10.00000000, 1.00976563, -1.00000000, 4.00000000
dcl_texcoord0 v0.xyzw
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r3.xyz, r0.x, v5
abs r0.xyz, r3
add r0.w, r0.z, -r0.x
add r1.xyz, r0.zxyw, -r0
cmp r0.w, r0, c5.x, c5.y
mad r1.xyz, r0.w, r1, r0
add r0.w, r1.x, -r0.y
cmp r2.x, r0.w, c5, c5.y
abs r0.w, r3.z
add r1.xyz, r1, -r0.yxzw
mad r1.xyz, r2.x, r1, r0.yxzw
max r1.w, r0.x, r0
min r0.z, r0.x, r0.w
rcp r0.y, r1.w
mul r0.y, r0.z, r0
abs_pp r1.x, r1
rcp_pp r1.w, r1.x
mul r0.z, r0.y, r0.y
mul_pp r1.zw, r1.xyzy, r1.w
mul_pp r1.zw, r1, c5.z
mul r2.xy, r1.zwzw, c4.x
abs r1.z, r3.y
mad r1.x, r0.z, c8, c8.y
mad r1.x, r1, r0.z, c8.z
mad r1.x, r1, r0.z, c8.w
mad r1.x, r1, r0.z, c9
mad r0.z, r1.x, r0, c9.y
mul r0.z, r0, r0.y
add r1.x, -r1.z, c5
mad r1.y, r1.z, c6.x, c6
mad r1.y, r1, r1.z, c6.z
mad r1.y, r1, r1.z, c6.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.y, r1, r1.x
cmp r1.z, r3.y, c5.y, c5.x
mul r1.x, r1.z, r1.y
mad r1.x, -r1, c7, r1.y
mad r1.w, r1.z, c7.y, r1.x
add r0.x, r0, -r0.w
add r0.y, -r0.z, c9.z
cmp r0.y, -r0.x, r0.z, r0
mul r0.z, r1.w, c4.x
mul r0.z, r0, c7
mul r3.w, r1, c7
add r0.x, -r0.y, c7.y
cmp r3.y, r3.z, r0, r0.x
dsx r0.xy, r3.xzzw
mul r0.xy, r0, r0
add r0.y, r0.x, r0
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.y, c5.w
dsx r2.w, r0.z
dsy r1.y, r0.z
dsy r0.zw, r3.xyxz
cmp r3.x, r3, r3.y, -r3.y
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c5.w
dp4 r3.y, c0, c0
rsq r3.y, r3.y
mul r4.xyz, r3.y, c0
dp3_pp r4.w, v4, r4
add_pp r4.x, r4.w, c11.y
mov r2.z, r1
mov r1.x, r3.z
texldd r0, r2, s1, r2.zwzw, r1
mov r3.y, r3.w
dsx r1.w, r3
frc_pp r4.y, r4.x
mad r3.x, r3, c5.w, c5.z
dsy r3.w, r3
texldd r1.w, r3, s0, r1.zwzw, r3.zwzw
dp3_pp r1.z, c0, c0
add_pp_sat r3.w, r4.x, -r4.y
dp3_pp r3.x, v4, v4
rsq_pp r4.x, r3.x
rsq_pp r1.z, r1.z
mul_pp r3.xyz, r1.z, c0
mul_pp r4.xyz, r4.x, v4
dp3_pp r1.z, r4, r3
dp3 r4.y, v3, v3
add_pp r3.x, r3.w, c11.z
mul_pp_sat r3.y, -r4.w, c11.x
mad_pp r4.x, r3.y, r3, c5
texld r3, v3, s3
dp4 r3.y, r3, c10
rsq r4.y, r4.y
rcp r3.z, r4.y
mul r3.z, r3, c1.w
mov r3.x, c2
mad r3.y, -r3.z, c9.w, r3
cmp r3.y, r3, c5.x, r3.x
dp3 r3.x, v2, v2
texld r3.w, v2, s5
texld r3.x, r3.x, s4
mul r3.x, r3, r3.w
mul r3.x, r3, r3.y
mul_pp r1.z, r3.x, r1
cmp r3.x, -v0.w, c5.y, c5
mul_pp r3.y, r1.w, r3.x
mul_pp r1.z, r1, r4.x
mul_pp_sat r1.z, r1, c11.w
add_pp r1.z, -r1, c5.x
mul_pp r0.w, r0, r3.y
mul_pp r3.x, r0.w, r1.z
texldd r1, r2, s2, r2.zwzw, r1
mul_pp r1.w, r3.y, r1
mov_pp r0.w, r3.x
add_pp r0, r0, -r1
mad_pp r0, r3.x, r0, r1
mul_pp oC0.w, r0, c3.x
mov_pp oC0.xyz, r0
"
}
SubProgram "d3d11 " {
// Stats: 97 math, 3 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
SetTexture 0 [_CityOverlayTex] 2D 3
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 2 [_CityLightOverlayDetailTex] 2D 5
SetTexture 3 [_LightTextureB0] 2D 2
SetTexture 4 [_LightTexture0] CUBE 1
SetTexture 5 [_ShadowMapTexture] CUBE 0
ConstBuffer "$Globals" 320
Float 304 [_PlanetOpacity]
Float 308 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityShadows" 416
Vector 384 [_LightShadowData]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
BindCB  "UnityShadows" 2
"ps_4_0
eefiecedajbggglccdmapnikalahlonfdnhimmioabaaaaaalaapaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiaaaaaaomaaaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaomaaaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefceiaoaaaaeaaaaaaajcadaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafidaaaaeaahabaaaaeaaaaaaffffaaaafidaaaaeaahabaaa
afaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaadkiacaaa
abaaaaaaabaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
omfbhidpefaaaaajpcaabaaaabaaaaaaegbcbaaaaeaaaaaaeghobaaaafaaaaaa
aagabaaaaaaaaaaabbaaaaakccaabaaaaaaaaaaaegaobaaaabaaaaaaaceaaaaa
aaaaiadpibiaiadlicabibdhafidibdddbaaaaahbcaabaaaaaaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadhaaaaakbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
akiacaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpbaaaaaahccaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaafgafbaaa
aaaaaaaaeghobaaaadaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaa
egbcbaaaadaaaaaaeghobaaaaeaaaaaaaagabaaaabaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaaiaeabaaaaaajccaabaaaaaaaaaaaegiccaaaabaaaaaa
aaaaaaaaegiccaaaabaaaaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaa
aaaaaaaadiaaaaaiocaabaaaaaaaaaaafgafbaaaaaaaaaaaagijcaaaabaaaaaa
aaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
eeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaa
agaabaaaabaaaaaaegbcbaaaafaaaaaabaaaaaahccaabaaaaaaaaaaaegacbaaa
abaaaaaajgahbaaaaaaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaabbaaaaajccaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
egiocaaaabaaaaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaafgafbaaaaaaaaaaaagijcaaaabaaaaaaaaaaaaaa
baaaaaahccaabaaaaaaaaaaaegbcbaaaafaaaaaajgahbaaaaaaaaaaaaaaaaaah
ecaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahccaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaaaaaaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaialpdcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaa
abeaaaaaaaaaiadpdicaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpbaaaaaahccaabaaaaaaaaaaaegbcbaaaagaaaaaaegbcbaaaagaaaaaa
eeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaa
fgafbaaaaaaaaaaafgbibaaaagaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaia
ibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaaj
ccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
ccaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ecaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajecaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaackaabaaaabaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaa
pganbaiaebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaaddaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dbaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
deaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaah
ccaabaaaabaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
bcaabaaaacaaaaaabkaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadcaaaaajccaabaaaacaaaaaabkaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaackaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaidpjkcdodiaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaa
bkiacaaaaaaaaaaabdaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafgcaabaaaacaaaaaafgagbaaaabaaaaaaamaaaaaf
gcaabaaaadaaaaaafgagbaaaabaaaaaaalaaaaafdcaabaaaaeaaaaaaogakbaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaa
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaafdcaabaaaaeaaaaaaogakbaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaa
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
dkaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaeaaaaaaegaabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaa
adaaaaaabnaaaaahbcaabaaaabaaaaaaabeaaaaaaaaaaaaadkbabaaaabaaaaaa
dhaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaabeaaaaa
aaaaiadpdiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaa
bnaaaaajccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajpcaabaaaaeaaaaaakganbaiambaaaaaaaaaaaaaapgagbaiaibaaaaaa
aaaaaaaadcaaaaakhcaabaaaafaaaaaafgafbaaaabaaaaaaegacbaaaaeaaaaaa
kgajbaiaibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaaabaaaaaa
dkaabaaaaeaaaaaadgaaaaaficaabaaaafaaaaaaabeaaaaaaaaaaaaadgaaaaag
dcaabaaaaeaaaaaajgafbaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaaaeaaaaaa
egacbaaaaeaaaaaajgahbaaaafaaaaaabnaaaaaiccaabaaaabaaaaaaakaabaaa
afaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakocaabaaaaaaaaaaafgafbaaaabaaaaaa
agajbaaaaeaaaaaafgaobaiaibaaaaaaaaaaaaaadiaaaaakmcaabaaaaaaaaaaa
pgalbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaah
gcaabaaaaaaaaaaakgalbaaaaaaaaaaafgafbaaaaaaaaaaadiaaaaaigcaabaaa
aaaaaaaafgagbaaaaaaaaaaafgifcaaaaaaaaaaabdaaaaaaejaaaaanpcaabaaa
aeaaaaaajgafbaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaigaabaaa
acaaaaaaigaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaajgafbaaaaaaaaaaa
eghobaaaacaaaaaaaagabaaaafaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaa
diaaaaahccaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaadiaaaaah
icaabaaaacaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaa
aeaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaa
egaobaiaebaaaaaaacaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaaaaaaaaa
pgapbaaaaeaaaaaaegaobaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaiiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakiacaaaaaaaaaaabdaaaaaadgaaaaafhccabaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 266 math, 6 textures, 10 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
SetTexture 0 [_ShadowMapTexture] CUBE 0
SetTexture 1 [_LightTexture0] CUBE 1
SetTexture 2 [_LightTextureB0] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 80
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
Vector 32 [_LightShadowData]
VectorHalf 48 [_LightColor0] 4
Float 56 [_SpecularPower]
VectorHalf 64 [_SpecularColor] 4
Float 72 [_PlanetOpacity]
Float 76 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4 _LightShadowData;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _PlanetOpacity;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texturecube<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _LightTextureB0 [[texture(2)]], sampler _mtlsmp__LightTextureB0 [[sampler(2)]]
  ,   texture2d<half> _CityOverlayTex [[texture(3)]], sampler _mtlsmp__CityOverlayTex [[sampler(3)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(4)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half4 color_5;
  float3 cse_6;
  cse_6 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(cse_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(cse_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  half4 tmpvar_35;
  half3 detailCoords_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * rsqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_44;
  tmpvar_44 = dfdx(tmpvar_39.xz);
  float2 tmpvar_45;
  tmpvar_45 = dfdy(tmpvar_39.xz);
  float4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dfdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dfdy(tmpvar_43.y);
  float3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, (float)zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = half(tmpvar_49);
  float3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, (float3)half3(zxlerp_38));
  detailCoords_36 = half3(tmpvar_50);
  float3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, (float3)detailCoords_36, (float3)half3(nylerp_37));
  detailCoords_36 = half3(tmpvar_51);
  half tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  float2 coord_53;
  coord_53 = ((float2)(((half)0.5 * detailCoords_36.zy) / tmpvar_52) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_54;
  tmpvar_54 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_53), gradient2d((float2)(tmpvar_46.xy), (float2)(tmpvar_46.zw)));
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  float tmpvar_55;
  tmpvar_55 = ((float)tmpvar_14.w * (1.0 - float(
    (0.0 >= _mtl_i.xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = half(tmpvar_55);
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  float3 tmpvar_56;
  tmpvar_56 = _mtl_u._WorldSpaceLightPos0.xyz;
  float tmpvar_57;
  tmpvar_57 = dot (_mtl_i.xlv_TEXCOORD2, _mtl_i.xlv_TEXCOORD2);
  half4 tmpvar_58;
  tmpvar_58 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_57)));
  half4 tmpvar_59;
  tmpvar_59 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD2));
  float tmpvar_60;
  tmpvar_60 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD3, _mtl_i.xlv_TEXCOORD3)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float4 packDist_61;
  half4 tmpvar_62;
  tmpvar_62 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(_mtl_i.xlv_TEXCOORD3));
  packDist_61 = float4(tmpvar_62);
  float tmpvar_63;
  tmpvar_63 = dot (packDist_61, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float tmpvar_64;
  if ((tmpvar_63 < tmpvar_60)) {
    tmpvar_64 = _mtl_u._LightShadowData.x;
  } else {
    tmpvar_64 = 1.0;
  };
  half3 lightDir_65;
  lightDir_65 = half3(tmpvar_56);
  half3 viewDir_66;
  viewDir_66 = half3(_mtl_i.xlv_TEXCOORD7);
  half3 normal_67;
  normal_67 = half3(_mtl_i.xlv_TEXCOORD4);
  half atten_68;
  atten_68 = half(((float)(tmpvar_58.w * tmpvar_59.w) * tmpvar_64));
  half4 c_69;
  half3 tmpvar_70;
  tmpvar_70 = normalize(lightDir_65);
  lightDir_65 = tmpvar_70;
  half3 tmpvar_71;
  tmpvar_71 = normalize(viewDir_66);
  viewDir_66 = tmpvar_71;
  half3 tmpvar_72;
  tmpvar_72 = normalize(normal_67);
  normal_67 = tmpvar_72;
  half tmpvar_73;
  tmpvar_73 = dot (tmpvar_72, tmpvar_70);
  float tmpvar_74;
  half tmpvar_75;
  tmpvar_75 = clamp (dot (normalize(
    (tmpvar_70 + tmpvar_71)
  ), tmpvar_72), (half)0.0, (half)1.0);
  tmpvar_74 = float(tmpvar_75);
  float3 tmpvar_76;
  tmpvar_76 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_73) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_74, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_68 * (half)4.0));
  c_69.xyz = half3(tmpvar_76);
  c_69.w = (tmpvar_73 * (atten_68 * (half)4.0));
  float3 tmpvar_77;
  tmpvar_77 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_78;
  lightDir_78 = half3(tmpvar_77);
  half3 normal_79;
  normal_79 = half3(_mtl_i.xlv_TEXCOORD4);
  half tmpvar_80;
  tmpvar_80 = dot (normal_79, lightDir_78);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_69 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_80)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_80)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_81;
  tmpvar_81 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_81.xyz;
  float tmpvar_82;
  tmpvar_82 = ((float)tmpvar_81.w * _mtl_u._PlanetOpacity);
  color_5.w = half(tmpvar_82);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 127 math, 15 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Float 6 [_PlanetOpacity]
Float 7 [_CityOverlayDetailScale]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
SetTexture 3 [_LightTexture0] 2D 3
SetTexture 4 [_LightTextureB0] 2D 4
SetTexture 5 [_ShadowMapTexture] 2D 5
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c8, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c9, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c10, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c11, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c12, -0.33299461, 0.99999559, 1.57079601, 0.25000000
def c13, 10.00000000, 1.00976563, -1.00000000, 4.00000000
dcl_texcoord0 v0.xyzw
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r1.xyz, r0.x, v5
abs r0.xyz, r1
abs r1.w, r1.z
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c8.x, c8.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c8.x, c8.y
mad r2.xyz, r0.w, r2, r0.yxzw
max r2.w, r0.x, r1
min r0.y, r0.x, r1.w
rcp r0.z, r2.w
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
abs_pp r0.w, r2.x
rcp_pp r0.w, r0.w
mul_pp r2.xy, r2.zyzw, r0.w
mul_pp r2.xy, r2, c8.z
mad r2.w, r0.z, c11.x, c11.y
mad r0.w, r2, r0.z, c11.z
mad r0.w, r0, r0.z, c11
mul r4.xy, r2, c7.x
mad r2.x, r0.w, r0.z, c12
abs r0.w, r1.y
mad r2.y, r2.x, r0.z, c12
add r2.x, -r0.w, c8
mad r0.z, r0.w, c9.x, c9.y
mad r0.z, r0, r0.w, c9
rsq r2.x, r2.x
mad r0.z, r0, r0.w, c9.w
rcp r2.x, r2.x
mul r0.w, r0.z, r2.x
cmp r0.z, r1.y, c8.y, c8.x
mul r2.x, r2.y, r0.y
mul r1.y, r0.z, r0.w
mad r0.y, -r1, c10.x, r0.w
mad r0.w, r0.z, c10.y, r0.y
add r0.x, r0, -r1.w
add r1.y, -r2.x, c12.z
cmp r0.y, -r0.x, r2.x, r1
add r0.z, -r0.y, c10.y
mul r0.x, r0.w, c7
mul r0.x, r0, c10.z
cmp r1.y, r1.z, r0, r0.z
dsx r3.w, r0.x
dsy r3.y, r0.x
dsx r0.xy, r1.xzzw
dsy r1.zw, r1.xyxz
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r1.zw, r1, r1
add r0.y, r1.z, r1.w
cmp r1.x, r1, r1.y, -r1.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.z, r0.x, c8.w
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.x, r0.y, c8.w
mul r0.y, r0.w, c10.w
dp3_pp r1.z, v4, v4
mov r3.z, r0
mov r3.x, r0
texldd r2, r4, s1, r3.zwzw, r3
mov r1.y, r0
dsx r0.w, r0.y
mad r1.x, r1, c8.w, c8.z
dsy r0.y, r0
texldd r0.w, r1, s0, r0.zwzw, r0
dp3_pp r0.x, c0, c0
rsq_pp r1.w, r0.x
rcp r0.z, v3.w
mad r0.xy, v3, r0.z, c5
rsq_pp r1.z, r1.z
mul_pp r1.xyz, r1.z, v4
mul_pp r5.xyz, r1.w, c0
dp3_pp r4.z, r1, r5
mad r1.xy, v3, r0.z, c3
texld r1.x, r1, s5
texld r0.x, r0, s5
mov r1.w, r0.x
mad r0.xy, v3, r0.z, c4
texld r0.x, r0, s5
mov r1.z, r0.x
mad r0.xy, v3, r0.z, c2
mov r1.y, r1.x
texld r1.x, r0, s5
dp4 r4.w, c0, c0
rsq r0.x, r4.w
mad r1, -v3.z, r0.z, r1
mul r0.xyz, r0.x, c0
dp3_pp r0.y, v4, r0
add_pp r0.x, r0.y, c13.y
mov r4.w, c1.x
cmp r1, r1, c8.x, r4.w
dp4_pp r0.z, r1, c12.w
frc_pp r1.y, r0.x
add_pp_sat r1.z, r0.x, -r1.y
rcp r1.x, v2.w
mad r1.xy, v2, r1.x, c8.z
texld r1.w, r1, s3
dp3 r0.x, v2, v2
cmp r1.x, -v2.z, c8.y, c8
mul_pp r1.x, r1, r1.w
texld r0.x, r0.x, s4
mul_pp r0.x, r1, r0
mul_pp r0.x, r0, r0.z
add_pp r0.z, r1, c13
mul_pp_sat r0.y, -r0, c13.x
mad_pp r0.y, r0, r0.z, c8.x
mul_pp r0.x, r0, r4.z
mul_pp r0.y, r0.x, r0
cmp r0.x, -v0.w, c8.y, c8
mul_pp r1.x, r0.w, r0
mul_pp_sat r0.y, r0, c13.w
mul_pp r0.x, r2.w, r1
add_pp r0.y, -r0, c8.x
mul_pp r2.w, r0.x, r0.y
texldd r0, r4, s2, r3.zwzw, r3
mul_pp r0.w, r1.x, r0
mov_pp r1.w, r2
mov_pp r1.xyz, r2
add_pp r1, r1, -r0
mad_pp r0, r2.w, r1, r0
mul_pp oC0.w, r0, c6.x
mov_pp oC0.xyz, r0
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 127 math, 15 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Float 6 [_PlanetOpacity]
Float 7 [_CityOverlayDetailScale]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
SetTexture 3 [_LightTexture0] 2D 3
SetTexture 4 [_LightTextureB0] 2D 4
SetTexture 5 [_ShadowMapTexture] 2D 5
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c8, 0.50000000, 0.15915494, 0.00000000, 1.00000000
def c9, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c10, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c11, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c12, -0.33299461, 0.99999559, 1.57079601, 0.25000000
def c13, 10.00000000, 1.00976563, -1.00000000, 4.00000000
dcl_texcoord0 v0.xyzw
dcl_texcoord2 v2
dcl_texcoord3 v3
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r1.xyz, r0.x, v5
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c8, c8.z
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
cmp r1.w, r0, c8, c8.z
abs r0.w, r1.z
add r2.xyz, r2, -r0.yxzw
mad r2.xyz, r1.w, r2, r0.yxzw
max r2.w, r0.x, r0
min r0.y, r0.x, r0.w
rcp r0.z, r2.w
mul r0.y, r0, r0.z
mul r1.w, r0.y, r0.y
abs_pp r0.z, r2.x
rcp_pp r0.z, r0.z
mul_pp r2.xy, r2.zyzw, r0.z
mul_pp r2.xy, r2, c8.x
mad r2.w, r1, c11.x, c11.y
mad r0.z, r2.w, r1.w, c11
rcp r3.w, v3.w
mad r0.z, r0, r1.w, c11.w
mul r5.xy, r2, c7.x
mad r2.x, r0.z, r1.w, c12
abs r0.z, r1.y
mad r2.y, r2.x, r1.w, c12
add r2.x, -r0.z, c8.w
mad r1.w, r0.z, c9.x, c9.y
mad r1.w, r1, r0.z, c9.z
rsq r2.x, r2.x
add r0.x, r0, -r0.w
dsy r2.zw, r1.xyxz
mad r0.z, r1.w, r0, c9.w
rcp r2.x, r2.x
mul r1.w, r0.z, r2.x
cmp r0.z, r1.y, c8, c8.w
mul r2.x, r2.y, r0.y
mul r1.y, r0.z, r1.w
mad r0.y, -r1, c10.x, r1.w
mad r0.y, r0.z, c10, r0
add r1.y, -r2.x, c12.z
cmp r0.z, -r0.x, r2.x, r1.y
mul r0.x, r0.y, c7
mul r0.x, r0, c10.z
add r0.w, -r0.z, c10.y
cmp r0.w, r1.z, r0.z, r0
dsx r2.xy, r1.xzzw
cmp r1.x, r1, r0.w, -r0.w
mul r1.zw, r2.xyxy, r2.xyxy
mul r0.w, r0.y, c10
mul r2.xy, r2.zwzw, r2.zwzw
add r0.z, r2.x, r2.y
rsq r0.z, r0.z
dsx r4.w, r0.x
dsy r4.y, r0.x
add r0.x, r1.z, r1.w
rsq r0.x, r0.x
rcp r1.y, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c8.y
mul r0.x, r1.y, c8.y
mov r4.z, r0
mov r4.x, r0
texldd r2, r5, s1, r4.zwzw, r4
mov r1.y, r0.w
dsy r0.y, r0.w
mad r1.x, r1, c8.y, c8
dsx r0.w, r0
texldd r0.w, r1, s0, r0.zwzw, r0
mad r0.xyz, v3, r3.w, c5
texld r0.x, r0, s5
mov_pp r1.w, r0.x
mad r0.xyz, v3, r3.w, c4
dp4 r1.x, c0, c0
rsq r1.x, r1.x
mul r3.xyz, r1.x, c0
mad r1.xyz, v3, r3.w, c3
texld r1.x, r1, s5
texld r0.x, r0, s5
mov_pp r1.z, r0.x
mov_pp r1.y, r1.x
mad r0.xyz, v3, r3.w, c2
mov r1.x, c1
add r3.w, c8, -r1.x
texld r1.x, r0, s5
mad r1, r1, r3.w, c1.x
dp3_pp r3.x, v4, r3
add_pp r0.y, r3.x, c13
frc_pp r0.z, r0.y
add_pp_sat r3.y, r0, -r0.z
dp3_pp r0.y, c0, c0
dp4_pp r1.z, r1, c12.w
rcp r0.x, v2.w
mad r1.xy, v2, r0.x, c8.x
texld r1.w, r1, s3
dp3 r0.x, v2, v2
cmp r1.x, -v2.z, c8.z, c8.w
mul_pp r1.x, r1, r1.w
texld r0.x, r0.x, s4
mul_pp r0.x, r1, r0
mul_pp r1.w, r0.x, r1.z
rsq_pp r0.y, r0.y
dp3_pp r0.x, v4, v4
mul_pp r1.xyz, r0.y, c0
rsq_pp r0.x, r0.x
mul_pp r0.xyz, r0.x, v4
dp3_pp r0.x, r0, r1
mul_pp r0.x, r1.w, r0
add_pp r0.z, r3.y, c13
mul_pp_sat r0.y, -r3.x, c13.x
mad_pp r0.y, r0, r0.z, c8.w
mul_pp r0.y, r0.x, r0
cmp r0.x, -v0.w, c8.z, c8.w
mul_pp r1.x, r0.w, r0
mul_pp_sat r0.y, r0, c13.w
mul_pp r0.x, r2.w, r1
add_pp r0.y, -r0, c8.w
mul_pp r2.w, r0.x, r0.y
texldd r0, r5, s2, r4.zwzw, r4
mul_pp r0.w, r1.x, r0
mov_pp r1.w, r2
mov_pp r1.xyz, r2
add_pp r1, r1, -r0
mad_pp r0, r2.w, r1, r0
mul_pp oC0.w, r0, c6.x
mov_pp oC0.xyz, r0
"
}
SubProgram "d3d11 " {
// Stats: 104 math, 2 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
SetTexture 0 [_CityOverlayTex] 2D 3
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 2 [_CityLightOverlayDetailTex] 2D 5
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 384
Vector 16 [_ShadowOffsets0]
Vector 32 [_ShadowOffsets1]
Vector 48 [_ShadowOffsets2]
Vector 64 [_ShadowOffsets3]
Float 368 [_PlanetOpacity]
Float 372 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityShadows" 416
Vector 384 [_LightShadowData]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
BindCB  "UnityShadows" 2
"ps_4_0
eefiecedjpbkdbcogphaofiiefhgfpppddamppljabaaaaaaambbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapapaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
aiaaaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaomaaaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefckeapaaaaeaaaaaaaojadaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaa
fjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fkaiaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadpcbabaaaadaaaaaa
gcbaaaadpcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaaaaaaaaajbcaabaaa
aaaaaaaaakiacaiaebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpaoaaaaah
ocaabaaaaaaaaaaaagbjbaaaaeaaaaaapgbpbaaaaeaaaaaaaaaaaaaihcaabaaa
abaaaaaajgahbaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaaehaaaaalbcaabaaa
abaaaaaaegaabaaaabaaaaaaaghabaaaafaaaaaaaagabaaaaaaaaaaackaabaaa
abaaaaaaaaaaaaaihcaabaaaacaaaaaajgahbaaaaaaaaaaaegiccaaaaaaaaaaa
acaaaaaaehaaaaalccaabaaaabaaaaaaegaabaaaacaaaaaaaghabaaaafaaaaaa
aagabaaaaaaaaaaackaabaaaacaaaaaaaaaaaaaihcaabaaaacaaaaaajgahbaaa
aaaaaaaaegiccaaaaaaaaaaaadaaaaaaaaaaaaaiocaabaaaaaaaaaaafgaobaaa
aaaaaaaaagijcaaaaaaaaaaaaeaaaaaaehaaaaalicaabaaaabaaaaaajgafbaaa
aaaaaaaaaghabaaaafaaaaaaaagabaaaaaaaaaaadkaabaaaaaaaaaaaehaaaaal
ecaabaaaabaaaaaaegaabaaaacaaaaaaaghabaaaafaaaaaaaagabaaaaaaaaaaa
ckaabaaaacaaaaaadcaaaaakpcaabaaaaaaaaaaaegaobaaaabaaaaaaagaabaaa
aaaaaaaaagiacaaaacaaaaaabiaaaaaabbaaaaakbcaabaaaaaaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadoaoaaaaahgcaabaaa
aaaaaaaaagbbbaaaadaaaaaapgbpbaaaadaaaaaaaaaaaaakgcaabaaaaaaaaaaa
fgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaefaaaaaj
pcaabaaaabaaaaaajgafbaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaa
dbaaaaahccaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaadaaaaaaabaaaaah
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahccaabaaa
aaaaaaaadkaabaaaabaaaaaabkaabaaaaaaaaaaabaaaaaahecaabaaaaaaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaakgakbaaa
aaaaaaaaeghobaaaaeaaaaaaaagabaaaacaaaaaadiaaaaahccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaiaeabaaaaaajccaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaafgafbaaaaaaaaaaaagijcaaaabaaaaaaaaaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaa
abaaaaaaegbcbaaaafaaaaaabaaaaaahccaabaaaaaaaaaaaegacbaaaabaaaaaa
jgahbaaaaaaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaabbaaaaajccaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaai
ocaabaaaaaaaaaaafgafbaaaaaaaaaaaagijcaaaabaaaaaaaaaaaaaabaaaaaah
ccaabaaaaaaaaaaaegbcbaaaafaaaaaajgahbaaaaaaaaaaaaaaaaaahecaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaaaaaaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaialp
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaiadpdicaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
aaaaaaaibcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
baaaaaahccaabaaaaaaaaaaaegbcbaaaagaaaaaaegbcbaaaagaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaa
aaaaaaaafgbibaaaagaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaa
abaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaapganbaia
ebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaah
icaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaa
abaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaa
acaaaaaabkaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadcaaaaajccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdodiaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaabkiacaaa
aaaaaaaabhaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafgcaabaaaacaaaaaafgagbaaaabaaaaaaamaaaaafgcaabaaa
adaaaaaafgagbaaaabaaaaaaalaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaa
abaaaaaaabeaaaaaidpjccdoamaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaeaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
bnaaaaahbcaabaaaabaaaaaaabeaaaaaaaaaaaaadkbabaaaabaaaaaadhaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaabnaaaaaj
ccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaj
pcaabaaaaeaaaaaakganbaiambaaaaaaaaaaaaaapgagbaiaibaaaaaaaaaaaaaa
dcaaaaakhcaabaaaafaaaaaafgafbaaaabaaaaaaegacbaaaaeaaaaaakgajbaia
ibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaaabaaaaaadkaabaaa
aeaaaaaadgaaaaaficaabaaaafaaaaaaabeaaaaaaaaaaaaadgaaaaagdcaabaaa
aeaaaaaajgafbaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaaaeaaaaaaegacbaaa
aeaaaaaajgahbaaaafaaaaaabnaaaaaiccaabaaaabaaaaaaakaabaaaafaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakocaabaaaaaaaaaaafgafbaaaabaaaaaaagajbaaa
aeaaaaaafgaobaiaibaaaaaaaaaaaaaadiaaaaakmcaabaaaaaaaaaaapgalbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaahgcaabaaa
aaaaaaaakgalbaaaaaaaaaaafgafbaaaaaaaaaaadiaaaaaigcaabaaaaaaaaaaa
fgagbaaaaaaaaaaafgifcaaaaaaaaaaabhaaaaaaejaaaaanpcaabaaaaeaaaaaa
jgafbaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaigaabaaaacaaaaaa
igaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaajgafbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaafaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaadiaaaaah
ccaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaeaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaa
aeaaaaaaegaobaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaiiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakiacaaaaaaaaaaabhaaaaaadgaaaaafhccabaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 273 math, 9 textures, 9 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [_LightTexture0] 2D 1
SetTexture 2 [_LightTextureB0] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 128
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightShadowData]
Vector 32 [_ShadowOffsets0]
Vector 48 [_ShadowOffsets1]
Vector 64 [_ShadowOffsets2]
Vector 80 [_ShadowOffsets3]
VectorHalf 96 [_LightColor0] 4
Float 104 [_SpecularPower]
VectorHalf 112 [_SpecularColor] 4
Float 120 [_PlanetOpacity]
Float 124 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::less);
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 _LightShadowData;
  float4 _ShadowOffsets[4];
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _PlanetOpacity;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   depth2d<float> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _LightTextureB0 [[texture(2)]], sampler _mtlsmp__LightTextureB0 [[sampler(2)]]
  ,   texture2d<half> _CityOverlayTex [[texture(3)]], sampler _mtlsmp__CityOverlayTex [[sampler(3)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(4)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half4 color_5;
  float3 cse_6;
  cse_6 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(cse_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(cse_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  half4 tmpvar_35;
  half3 detailCoords_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * rsqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_44;
  tmpvar_44 = dfdx(tmpvar_39.xz);
  float2 tmpvar_45;
  tmpvar_45 = dfdy(tmpvar_39.xz);
  float4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dfdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dfdy(tmpvar_43.y);
  float3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, (float)zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = half(tmpvar_49);
  float3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, (float3)half3(zxlerp_38));
  detailCoords_36 = half3(tmpvar_50);
  float3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, (float3)detailCoords_36, (float3)half3(nylerp_37));
  detailCoords_36 = half3(tmpvar_51);
  half tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  float2 coord_53;
  coord_53 = ((float2)(((half)0.5 * detailCoords_36.zy) / tmpvar_52) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_54;
  tmpvar_54 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_53), gradient2d((float2)(tmpvar_46.xy), (float2)(tmpvar_46.zw)));
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  float tmpvar_55;
  tmpvar_55 = ((float)tmpvar_14.w * (1.0 - float(
    (0.0 >= _mtl_i.xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = half(tmpvar_55);
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  float3 tmpvar_56;
  tmpvar_56 = _mtl_u._WorldSpaceLightPos0.xyz;
  half4 tmpvar_57;
  float2 P_58;
  P_58 = ((_mtl_i.xlv_TEXCOORD2.xy / _mtl_i.xlv_TEXCOORD2.w) + 0.5);
  tmpvar_57 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_58));
  float tmpvar_59;
  tmpvar_59 = dot (_mtl_i.xlv_TEXCOORD2.xyz, _mtl_i.xlv_TEXCOORD2.xyz);
  half4 tmpvar_60;
  tmpvar_60 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_59)));
  half tmpvar_61;
  half4 shadows_62;
  float3 tmpvar_63;
  tmpvar_63 = (_mtl_i.xlv_TEXCOORD3.xyz / _mtl_i.xlv_TEXCOORD3.w);
  float3 coord_64;
  coord_64 = (tmpvar_63 + _mtl_u._ShadowOffsets[0].xyz);
  half tmpvar_65;
  tmpvar_65 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_64).xy, (float)(coord_64).z);
  shadows_62.x = tmpvar_65;
  float3 coord_66;
  coord_66 = (tmpvar_63 + _mtl_u._ShadowOffsets[1].xyz);
  half tmpvar_67;
  tmpvar_67 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_66).xy, (float)(coord_66).z);
  shadows_62.y = tmpvar_67;
  float3 coord_68;
  coord_68 = (tmpvar_63 + _mtl_u._ShadowOffsets[2].xyz);
  half tmpvar_69;
  tmpvar_69 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_68).xy, (float)(coord_68).z);
  shadows_62.z = tmpvar_69;
  float3 coord_70;
  coord_70 = (tmpvar_63 + _mtl_u._ShadowOffsets[3].xyz);
  half tmpvar_71;
  tmpvar_71 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_70).xy, (float)(coord_70).z);
  shadows_62.w = tmpvar_71;
  float4 tmpvar_72;
  tmpvar_72 = (_mtl_u._LightShadowData.xxxx + ((float4)shadows_62 * (1.0 - _mtl_u._LightShadowData.xxxx)));
  shadows_62 = half4(tmpvar_72);
  half tmpvar_73;
  tmpvar_73 = dot (shadows_62, (half4)float4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_73;
  half3 lightDir_74;
  lightDir_74 = half3(tmpvar_56);
  half3 viewDir_75;
  viewDir_75 = half3(_mtl_i.xlv_TEXCOORD7);
  half3 normal_76;
  normal_76 = half3(_mtl_i.xlv_TEXCOORD4);
  half atten_77;
  atten_77 = half((((
    float((_mtl_i.xlv_TEXCOORD2.z > 0.0))
   * (float)tmpvar_57.w) * (float)tmpvar_60.w) * (float)tmpvar_61));
  half4 c_78;
  half3 tmpvar_79;
  tmpvar_79 = normalize(lightDir_74);
  lightDir_74 = tmpvar_79;
  half3 tmpvar_80;
  tmpvar_80 = normalize(viewDir_75);
  viewDir_75 = tmpvar_80;
  half3 tmpvar_81;
  tmpvar_81 = normalize(normal_76);
  normal_76 = tmpvar_81;
  half tmpvar_82;
  tmpvar_82 = dot (tmpvar_81, tmpvar_79);
  float tmpvar_83;
  half tmpvar_84;
  tmpvar_84 = clamp (dot (normalize(
    (tmpvar_79 + tmpvar_80)
  ), tmpvar_81), (half)0.0, (half)1.0);
  tmpvar_83 = float(tmpvar_84);
  float3 tmpvar_85;
  tmpvar_85 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_82) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_83, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_77 * (half)4.0));
  c_78.xyz = half3(tmpvar_85);
  c_78.w = (tmpvar_82 * (atten_77 * (half)4.0));
  float3 tmpvar_86;
  tmpvar_86 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_87;
  lightDir_87 = half3(tmpvar_86);
  half3 normal_88;
  normal_88 = half3(_mtl_i.xlv_TEXCOORD4);
  half tmpvar_89;
  tmpvar_89 = dot (normal_88, lightDir_87);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_78 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_89)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_89)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_90;
  tmpvar_90 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_90.xyz;
  float tmpvar_91;
  tmpvar_91 = ((float)tmpvar_90.w * _mtl_u._PlanetOpacity);
  color_5.w = half(tmpvar_91);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 125 math, 14 textures
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Float 3 [_PlanetOpacity]
Float 4 [_CityOverlayDetailScale]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
SetTexture 3 [_ShadowMapTexture] CUBE 3
SetTexture 4 [_LightTexture0] 2D 4
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c5, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c6, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c7, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c8, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c9, -0.33299461, 0.99999559, 1.57079601, 0.00781250
def c10, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c11, 1.00000000, 0.00392157, 0.00001538, 0.00000006
def c12, 10.00000000, 1.00976563, -1.00000000, 4.00000000
dcl_texcoord0 v0.xyzw
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r2.xyz, r0.x, v5
abs r0.xyz, r2
abs r1.w, r2.z
add r0.w, r0.z, -r0.x
add r1.xyz, r0.zxyw, -r0
cmp r0.w, r0, c5.x, c5.y
mad r1.xyz, r0.w, r1, r0
add r0.w, r1.x, -r0.y
add r1.xyz, r1, -r0.yxzw
cmp r0.w, r0, c5.x, c5.y
mad r1.xyz, r0.w, r1, r0.yxzw
max r2.w, r0.x, r1
min r0.y, r0.x, r1.w
rcp r0.z, r2.w
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
mul_pp r1.xy, r1.zyzw, r0.w
mul_pp r1.xy, r1, c5.z
mad r2.w, r0.z, c8.x, c8.y
mad r0.w, r2, r0.z, c8.z
mad r0.w, r0, r0.z, c8
mul r5.zw, r1.xyxy, c4.x
mad r1.x, r0.w, r0.z, c9
mad r1.y, r1.x, r0.z, c9
abs r0.w, r2.y
add r1.x, -r0.w, c5
mad r0.z, r0.w, c6.x, c6.y
mad r0.z, r0, r0.w, c6
rsq r1.x, r1.x
mul r1.y, r1, r0
mad r0.z, r0, r0.w, c6.w
rcp r1.x, r1.x
mul r0.w, r0.z, r1.x
cmp r0.z, r2.y, c5.y, c5.x
mul r1.x, r0.z, r0.w
mad r0.y, -r1.x, c7.x, r0.w
mad r0.w, r0.z, c7.y, r0.y
add r0.x, r0, -r1.w
add r1.x, -r1.y, c9.z
cmp r0.y, -r0.x, r1, r1.x
add r0.z, -r0.y, c7.y
dsy r1.xy, r2.xzzw
mul r0.x, r0.w, c4
mul r0.x, r0, c7.z
cmp r2.y, r2.z, r0, r0.z
dsx r5.y, r0.x
dsy r0.z, r0.x
dsx r0.xy, r2.xzzw
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r1.xy, r1, r1
add r0.y, r1.x, r1
cmp r2.x, r2, r2.y, -r2.y
mad r4.x, r2, c5.w, c5.z
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c5.w
mul r0.x, r0.w, c7.w
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.x, r0.y, c5.w
add r2.xyz, v3, c10.xyyw
texld r2, r2, s3
dp4 r4.w, r2, c11
add r2.xyz, v3, c10.yxyw
texld r2, r2, s3
dp4 r4.z, r2, c11
add r2.xyz, v3, c9.w
texld r2, r2, s3
mov r5.x, r3.z
mov r0.y, r3.x
texldd r1, r5.zwzw, s1, r5, r0.yzzw
mov r4.y, r0.x
dsx r3.w, r0.x
dsy r3.y, r0.x
texldd r0.w, r4, s0, r3.zwzw, r3
add r3.xyz, v3, c10.yyxw
texld r3, r3, s3
dp3 r0.x, v3, v3
dp4 r4.y, r3, c11
rsq r0.x, r0.x
dp4 r4.x, r2, c11
rcp r2.x, r0.x
dp4 r0.x, c0, c0
rsq r3.x, r0.x
mul r3.xyz, r3.x, c0
mul r2.x, r2, c1.w
dp3_pp r3.w, v4, r3
mov r0.x, c2
mad r2, -r2.x, c10.z, r4
cmp r2, r2, c5.x, r0.x
dp4_pp r2.x, r2, c10.w
add_pp r2.y, r3.w, c12
frc_pp r2.z, r2.y
add_pp_sat r2.w, r2.y, -r2.z
dp3 r0.x, v2, v2
texld r0.x, r0.x, s4
mul r0.x, r0, r2
dp3_pp r2.y, c0, c0
rsq_pp r2.y, r2.y
dp3_pp r2.x, v4, v4
mul_pp r3.xyz, r2.y, c0
rsq_pp r2.x, r2.x
mul_pp r2.xyz, r2.x, v4
dp3_pp r2.x, r2, r3
mul_pp r0.x, r0, r2
add_pp r2.z, r2.w, c12
mul_pp_sat r2.y, -r3.w, c12.x
mad_pp r2.y, r2, r2.z, c5.x
mul_pp r2.x, r0, r2.y
cmp r0.x, -v0.w, c5.y, c5
mul_pp r2.y, r0.w, r0.x
mul_pp_sat r2.x, r2, c12.w
add_pp r0.w, -r2.x, c5.x
mul_pp r0.x, r1.w, r2.y
mul_pp r2.x, r0, r0.w
texldd r0, r5.zwzw, s2, r5, r0.yzzw
mul_pp r0.w, r2.y, r0
mov_pp r1.w, r2.x
add_pp r1, r1, -r0
mad_pp r0, r2.x, r1, r0
mul_pp oC0.w, r0, c3.x
mov_pp oC0.xyz, r0
"
}
SubProgram "d3d11 " {
// Stats: 104 math, 5 textures
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
SetTexture 0 [_CityOverlayTex] 2D 2
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 2 [_CityLightOverlayDetailTex] 2D 4
SetTexture 3 [_LightTexture0] 2D 1
SetTexture 4 [_ShadowMapTexture] CUBE 0
ConstBuffer "$Globals" 320
Float 304 [_PlanetOpacity]
Float 308 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityShadows" 416
Vector 384 [_LightShadowData]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
BindCB  "UnityShadows" 2
"ps_4_0
eefiecedbhhmhnoibpjdlegkebblmeonkfdakgckabaaaaaaambbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiaaaaaaomaaaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaomaaaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefckeapaaaaeaaaaaaaojadaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafidaaaae
aahabaaaaeaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaa
dkiacaaaabaaaaaaabaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaomfbhidpaaaaaaakocaabaaaaaaaaaaaagbjbaaaaeaaaaaaaceaaaaa
aaaaaaaaaaaaaadmaaaaaadmaaaaaadmefaaaaajpcaabaaaabaaaaaajgahbaaa
aaaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaaabaaaaaa
egaobaaaabaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhafidibddaaaaaaak
ocaabaaaaaaaaaaaagbjbaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaalmaaaaaalm
aaaaaadmefaaaaajpcaabaaaacaaaaaajgahbaaaaaaaaaaaeghobaaaaeaaaaaa
aagabaaaaaaaaaaabbaaaaakccaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaiadpibiaiadlicabibdhafidibddaaaaaaakocaabaaaaaaaaaaaagbjbaaa
aeaaaaaaaceaaaaaaaaaaaaaaaaaaalmaaaaaadmaaaaaalmefaaaaajpcaabaaa
acaaaaaajgahbaaaaaaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaabbaaaaak
ecaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdh
afidibddaaaaaaakocaabaaaaaaaaaaaagbjbaaaaeaaaaaaaceaaaaaaaaaaaaa
aaaaaadmaaaaaalmaaaaaalmefaaaaajpcaabaaaacaaaaaajgahbaaaaaaaaaaa
eghobaaaaeaaaaaaaagabaaaaaaaaaaabbaaaaakicaabaaaabaaaaaaegaobaaa
acaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhafidibdddbaaaaahpcaabaaa
aaaaaaaaegaobaaaabaaaaaaagaabaaaaaaaaaaadhaaaaanpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpbbaaaaakbcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaa
aaaaiadoaaaaiadoaaaaiadoaaaaiadobaaaaaahccaabaaaaaaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaafgafbaaaaaaaaaaa
eghobaaaadaaaaaaaagabaaaabaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaiaeabaaaaaajccaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaa
egiccaaaabaaaaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaa
diaaaaaiocaabaaaaaaaaaaafgafbaaaaaaaaaaaagijcaaaabaaaaaaaaaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaa
abaaaaaaegbcbaaaafaaaaaabaaaaaahccaabaaaaaaaaaaaegacbaaaabaaaaaa
jgahbaaaaaaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaabbaaaaajccaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaai
ocaabaaaaaaaaaaafgafbaaaaaaaaaaaagijcaaaabaaaaaaaaaaaaaabaaaaaah
ccaabaaaaaaaaaaaegbcbaaaafaaaaaajgahbaaaaaaaaaaaaaaaaaahecaabaaa
aaaaaaaabkaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaaaaaacambebcaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaaaaaaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaialp
dcaaaaajccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaa
aaaaiadpdicaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
aaaaaaaibcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
baaaaaahccaabaaaaaaaaaaaegbcbaaaagaaaaaaegbcbaaaagaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaa
aaaaaaaafgbibaaaagaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaa
abaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ecaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaapganbaia
ebaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaah
icaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaa
abaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaa
acaaaaaabkaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadcaaaaajccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdodiaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaabkiacaaa
aaaaaaaabdaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafgcaabaaaacaaaaaafgagbaaaabaaaaaaamaaaaafgcaabaaa
adaaaaaafgagbaaaabaaaaaaalaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaa
abaaaaaaabeaaaaaidpjccdoamaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaeaaaaaaegaabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaa
bnaaaaahbcaabaaaabaaaaaaabeaaaaaaaaaaaaadkbabaaaabaaaaaadhaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaabnaaaaaj
ccaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaj
pcaabaaaaeaaaaaakganbaiambaaaaaaaaaaaaaapgagbaiaibaaaaaaaaaaaaaa
dcaaaaakhcaabaaaafaaaaaafgafbaaaabaaaaaaegacbaaaaeaaaaaakgajbaia
ibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaaabaaaaaadkaabaaa
aeaaaaaadgaaaaaficaabaaaafaaaaaaabeaaaaaaaaaaaaadgaaaaagdcaabaaa
aeaaaaaajgafbaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaaaeaaaaaaegacbaaa
aeaaaaaajgahbaaaafaaaaaabnaaaaaiccaabaaaabaaaaaaakaabaaaafaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakocaabaaaaaaaaaaafgafbaaaabaaaaaaagajbaaa
aeaaaaaafgaobaiaibaaaaaaaaaaaaaadiaaaaakmcaabaaaaaaaaaaapgalbaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaahgcaabaaa
aaaaaaaakgalbaaaaaaaaaaafgafbaaaaaaaaaaadiaaaaaigcaabaaaaaaaaaaa
fgagbaaaaaaaaaaafgifcaaaaaaaaaaabdaaaaaaejaaaaanpcaabaaaaeaaaaaa
jgafbaaaaaaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaigaabaaaacaaaaaa
igaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaajgafbaaaaaaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaadiaaaaah
ccaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaadiaaaaahicaabaaa
acaaaaaaakaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaeaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaia
ebaaaaaaacaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaa
aeaaaaaaegaobaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaiiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakiacaaaaaaaaaaabdaaaaaadgaaaaafhccabaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 276 math, 8 textures, 13 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
SetTexture 0 [_ShadowMapTexture] CUBE 0
SetTexture 1 [_LightTexture0] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 80
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
Vector 32 [_LightShadowData]
VectorHalf 48 [_LightColor0] 4
Float 56 [_SpecularPower]
VectorHalf 64 [_SpecularColor] 4
Float 72 [_PlanetOpacity]
Float 76 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4 _LightShadowData;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _PlanetOpacity;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _CityOverlayTex [[texture(2)]], sampler _mtlsmp__CityOverlayTex [[sampler(2)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(3)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half4 color_5;
  float3 cse_6;
  cse_6 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(cse_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(cse_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  half4 tmpvar_35;
  half3 detailCoords_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * rsqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_44;
  tmpvar_44 = dfdx(tmpvar_39.xz);
  float2 tmpvar_45;
  tmpvar_45 = dfdy(tmpvar_39.xz);
  float4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dfdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dfdy(tmpvar_43.y);
  float3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, (float)zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = half(tmpvar_49);
  float3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, (float3)half3(zxlerp_38));
  detailCoords_36 = half3(tmpvar_50);
  float3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, (float3)detailCoords_36, (float3)half3(nylerp_37));
  detailCoords_36 = half3(tmpvar_51);
  half tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  float2 coord_53;
  coord_53 = ((float2)(((half)0.5 * detailCoords_36.zy) / tmpvar_52) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_54;
  tmpvar_54 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_53), gradient2d((float2)(tmpvar_46.xy), (float2)(tmpvar_46.zw)));
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  float tmpvar_55;
  tmpvar_55 = ((float)tmpvar_14.w * (1.0 - float(
    (0.0 >= _mtl_i.xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = half(tmpvar_55);
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  float3 tmpvar_56;
  tmpvar_56 = _mtl_u._WorldSpaceLightPos0.xyz;
  float tmpvar_57;
  tmpvar_57 = dot (_mtl_i.xlv_TEXCOORD2, _mtl_i.xlv_TEXCOORD2);
  half4 tmpvar_58;
  tmpvar_58 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_57)));
  float tmpvar_59;
  float4 shadowVals_60;
  float tmpvar_61;
  tmpvar_61 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD3, _mtl_i.xlv_TEXCOORD3)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float3 vec_62;
  vec_62 = (_mtl_i.xlv_TEXCOORD3 + float3(0.0078125, 0.0078125, 0.0078125));
  float4 packDist_63;
  half4 tmpvar_64;
  tmpvar_64 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_62));
  packDist_63 = float4(tmpvar_64);
  shadowVals_60.x = dot (packDist_63, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float3 vec_65;
  vec_65 = (_mtl_i.xlv_TEXCOORD3 + float3(-0.0078125, -0.0078125, 0.0078125));
  float4 packDist_66;
  half4 tmpvar_67;
  tmpvar_67 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_65));
  packDist_66 = float4(tmpvar_67);
  shadowVals_60.y = dot (packDist_66, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float3 vec_68;
  vec_68 = (_mtl_i.xlv_TEXCOORD3 + float3(-0.0078125, 0.0078125, -0.0078125));
  float4 packDist_69;
  half4 tmpvar_70;
  tmpvar_70 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_68));
  packDist_69 = float4(tmpvar_70);
  shadowVals_60.z = dot (packDist_69, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float3 vec_71;
  vec_71 = (_mtl_i.xlv_TEXCOORD3 + float3(0.0078125, -0.0078125, -0.0078125));
  float4 packDist_72;
  half4 tmpvar_73;
  tmpvar_73 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_71));
  packDist_72 = float4(tmpvar_73);
  shadowVals_60.w = dot (packDist_72, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bool4 tmpvar_74;
  tmpvar_74 = bool4((shadowVals_60 < float4(tmpvar_61)));
  float4 tmpvar_75;
  tmpvar_75 = _mtl_u._LightShadowData.xxxx;
  float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  half4 tmpvar_80;
  tmpvar_80.x = half(tmpvar_76);
  tmpvar_80.y = half(tmpvar_77);
  tmpvar_80.z = half(tmpvar_78);
  tmpvar_80.w = half(tmpvar_79);
  half tmpvar_81;
  tmpvar_81 = dot (tmpvar_80, (half4)float4(0.25, 0.25, 0.25, 0.25));
  tmpvar_59 = float(tmpvar_81);
  half3 lightDir_82;
  lightDir_82 = half3(tmpvar_56);
  half3 viewDir_83;
  viewDir_83 = half3(_mtl_i.xlv_TEXCOORD7);
  half3 normal_84;
  normal_84 = half3(_mtl_i.xlv_TEXCOORD4);
  half atten_85;
  atten_85 = half(((float)tmpvar_58.w * tmpvar_59));
  half4 c_86;
  half3 tmpvar_87;
  tmpvar_87 = normalize(lightDir_82);
  lightDir_82 = tmpvar_87;
  half3 tmpvar_88;
  tmpvar_88 = normalize(viewDir_83);
  viewDir_83 = tmpvar_88;
  half3 tmpvar_89;
  tmpvar_89 = normalize(normal_84);
  normal_84 = tmpvar_89;
  half tmpvar_90;
  tmpvar_90 = dot (tmpvar_89, tmpvar_87);
  float tmpvar_91;
  half tmpvar_92;
  tmpvar_92 = clamp (dot (normalize(
    (tmpvar_87 + tmpvar_88)
  ), tmpvar_89), (half)0.0, (half)1.0);
  tmpvar_91 = float(tmpvar_92);
  float3 tmpvar_93;
  tmpvar_93 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_90) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_91, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_85 * (half)4.0));
  c_86.xyz = half3(tmpvar_93);
  c_86.w = (tmpvar_90 * (atten_85 * (half)4.0));
  float3 tmpvar_94;
  tmpvar_94 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_95;
  lightDir_95 = half3(tmpvar_94);
  half3 normal_96;
  normal_96 = half3(_mtl_i.xlv_TEXCOORD4);
  half tmpvar_97;
  tmpvar_97 = dot (normal_96, lightDir_95);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_86 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_97)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_97)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_98;
  tmpvar_98 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_98.xyz;
  float tmpvar_99;
  tmpvar_99 = ((float)tmpvar_98.w * _mtl_u._PlanetOpacity);
  color_5.w = half(tmpvar_99);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 127 math, 15 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Float 3 [_PlanetOpacity]
Float 4 [_CityOverlayDetailScale]
SetTexture 0 [_CityOverlayTex] 2D 0
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 1
SetTexture 2 [_CityLightOverlayDetailTex] 2D 2
SetTexture 3 [_ShadowMapTexture] CUBE 3
SetTexture 4 [_LightTextureB0] 2D 4
SetTexture 5 [_LightTexture0] CUBE 5
"ps_3_0
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c5, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c6, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c7, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c8, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c9, -0.33299461, 0.99999559, 1.57079601, 0.00781250
def c10, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c11, 1.00000000, 0.00392157, 0.00001538, 0.00000006
def c12, 10.00000000, 1.00976563, -1.00000000, 4.00000000
dcl_texcoord0 v0.xyzw
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v5, v5
rsq r0.x, r0.x
mul r0.xyz, r0.x, v5
abs r1.xyz, r0
add r0.w, r1.z, -r1.x
add r2.xyz, r1.zxyw, -r1
cmp r0.w, r0, c5.x, c5.y
mad r2.xyz, r0.w, r2, r1
add r0.w, r2.x, -r1.y
cmp r1.w, r0, c5.x, c5.y
add r2.xyz, r2, -r1.yxzw
mad r2.xyz, r1.w, r2, r1.yxzw
abs r0.w, r0.z
max r2.w, r1.x, r0
min r1.y, r1.x, r0.w
rcp r1.z, r2.w
mul r1.y, r1, r1.z
mul r1.z, r1.y, r1.y
abs_pp r1.w, r2.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
mul_pp r2.xy, r2, c5.z
mad r2.w, r1.z, c8.x, c8.y
mad r1.w, r2, r1.z, c8.z
mad r1.w, r1, r1.z, c8
mul r5.xy, r2, c4.x
mad r2.x, r1.w, r1.z, c9
abs r1.w, r0.y
mad r2.y, r2.x, r1.z, c9
add r2.x, -r1.w, c5
mad r1.z, r1.w, c6.x, c6.y
mad r1.z, r1, r1.w, c6
rsq r2.x, r2.x
mad r1.z, r1, r1.w, c6.w
rcp r2.x, r2.x
mul r1.z, r1, r2.x
cmp r0.y, r0, c5, c5.x
mul r2.x, r2.y, r1.y
mul r1.w, r0.y, r1.z
mad r1.y, -r1.w, c7.x, r1.z
mad r0.y, r0, c7, r1
add r1.z, -r2.x, c9
add r0.w, r1.x, -r0
cmp r1.x, -r0.w, r2, r1.z
mul r0.w, r0.y, c4.x
mul r0.w, r0, c7.z
add r1.y, -r1.x, c7
cmp r1.w, r0.z, r1.x, r1.y
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
dsx r4.w, r0
dsy r4.y, r0.w
dsy r0.zw, r0.xyxz
mul r0.zw, r0, r0
add r0.w, r0.z, r0
rsq r0.z, r1.x
rcp r0.z, r0.z
mul r1.z, r0, c5.w
cmp r0.z, r0.x, r1.w, -r1.w
mul r0.x, r0.y, c7.w
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r1.x, r0.w, c5.w
mov r4.z, r1
mov r4.x, r1
texldd r2, r5, s1, r4.zwzw, r4
mad r3.x, r0.z, c5.w, c5.z
mov r3.y, r0.x
dsx r1.w, r0.x
dsy r1.y, r0.x
texldd r0.w, r3, s0, r1.zwzw, r1
add r0.xyz, v3, c10.xyyw
texld r1, r0, s3
add r0.xyz, v3, c10.yxyw
dp4 r3.w, r1, c11
texld r1, r0, s3
add r0.xyz, v3, c10.yyxw
dp4 r3.z, r1, c11
texld r1, r0, s3
add r0.xyz, v3, c9.w
dp4 r3.y, r1, c11
texld r1, r0, s3
dp3 r0.x, v3, v3
rsq r0.x, r0.x
rcp r0.y, r0.x
dp4 r0.z, c0, c0
dp4 r3.x, r1, c11
mul r0.y, r0, c1.w
mad r1, -r0.y, c10.z, r3
mov r3.y, c2.x
rsq r0.x, r0.z
mul r0.xyz, r0.x, c0
dp3_pp r3.x, v4, r0
cmp r1, r1, c5.x, r3.y
dp4_pp r0.z, r1, c10.w
add_pp r0.y, r3.x, c12
frc_pp r1.x, r0.y
add_pp_sat r3.y, r0, -r1.x
dp3 r0.x, v2, v2
dp3_pp r0.y, c0, c0
rsq_pp r0.y, r0.y
mul_pp r1.xyz, r0.y, c0
texld r1.w, v2, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r1.w
mul r1.w, r0.x, r0.z
dp3_pp r0.x, v4, v4
rsq_pp r0.x, r0.x
mul_pp r0.xyz, r0.x, v4
dp3_pp r0.x, r0, r1
mul_pp r0.x, r1.w, r0
add_pp r0.z, r3.y, c12
mul_pp_sat r0.y, -r3.x, c12.x
mad_pp r0.y, r0, r0.z, c5.x
mul_pp r0.y, r0.x, r0
cmp r0.x, -v0.w, c5.y, c5
mul_pp r1.x, r0.w, r0
mul_pp_sat r0.y, r0, c12.w
mul_pp r0.x, r2.w, r1
add_pp r0.y, -r0, c5.x
mul_pp r2.w, r0.x, r0.y
texldd r0, r5, s2, r4.zwzw, r4
mul_pp r0.w, r1.x, r0
mov_pp r1.w, r2
mov_pp r1.xyz, r2
add_pp r1, r1, -r0
mad_pp r0, r2.w, r1, r0
mul_pp oC0.w, r0, c3.x
mov_pp oC0.xyz, r0
"
}
SubProgram "d3d11 " {
// Stats: 105 math, 6 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
SetTexture 0 [_CityOverlayTex] 2D 3
SetTexture 1 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 2 [_CityLightOverlayDetailTex] 2D 5
SetTexture 3 [_LightTextureB0] 2D 2
SetTexture 4 [_LightTexture0] CUBE 1
SetTexture 5 [_ShadowMapTexture] CUBE 0
ConstBuffer "$Globals" 320
Float 304 [_PlanetOpacity]
Float 308 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityShadows" 416
Vector 384 [_LightShadowData]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
BindCB  "UnityShadows" 2
"ps_4_0
eefiecedapkbljjmajbibnkpakmlalomnfggkiiaabaaaaaagibbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaadaaaaaaaiaaaaaaomaaaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaomaaaaaa
ahaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcaabaaaaaeaaaaaaaaaaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaaacaaaaaabjaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafidaaaaeaahabaaaaeaaaaaaffffaaaafidaaaaeaahabaaa
afaaaaaaffffaaaagcbaaaadicbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacagaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaadkiacaaa
abaaaaaaabaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
omfbhidpaaaaaaakocaabaaaaaaaaaaaagbjbaaaaeaaaaaaaceaaaaaaaaaaaaa
aaaaaadmaaaaaadmaaaaaadmefaaaaajpcaabaaaabaaaaaajgahbaaaaaaaaaaa
eghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaaabaaaaaaegaobaaa
abaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhafidibddaaaaaaakocaabaaa
aaaaaaaaagbjbaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaalmaaaaaalmaaaaaadm
efaaaaajpcaabaaaacaaaaaajgahbaaaaaaaaaaaeghobaaaafaaaaaaaagabaaa
aaaaaaaabbaaaaakccaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadp
ibiaiadlicabibdhafidibddaaaaaaakocaabaaaaaaaaaaaagbjbaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaalmaaaaaadmaaaaaalmefaaaaajpcaabaaaacaaaaaa
jgahbaaaaaaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaakecaabaaa
abaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhafidibdd
aaaaaaakocaabaaaaaaaaaaaagbjbaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaadm
aaaaaalmaaaaaalmefaaaaajpcaabaaaacaaaaaajgahbaaaaaaaaaaaeghobaaa
afaaaaaaaagabaaaaaaaaaaabbaaaaakicaabaaaabaaaaaaegaobaaaacaaaaaa
aceaaaaaaaaaiadpibiaiadlicabibdhafidibdddbaaaaahpcaabaaaaaaaaaaa
egaobaaaabaaaaaaagaabaaaaaaaaaaadhaaaaanpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpbbaaaaakbcaabaaaaaaaaaaaegaobaaaaaaaaaaaaceaaaaaaaaaiado
aaaaiadoaaaaiadoaaaaiadobaaaaaahccaabaaaaaaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaefaaaaajpcaabaaaabaaaaaafgafbaaaaaaaaaaaeghobaaa
adaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegbcbaaaadaaaaaa
eghobaaaaeaaaaaaaagabaaaabaaaaaadiaaaaahccaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
aaaaiaeabaaaaaajccaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaaegiccaaa
abaaaaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaai
ocaabaaaaaaaaaaafgafbaaaaaaaaaaaagijcaaaabaaaaaaaaaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egbcbaaaafaaaaaabaaaaaahccaabaaaaaaaaaaaegacbaaaabaaaaaajgahbaaa
aaaaaaaadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
bbaaaaajccaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaaiocaabaaa
aaaaaaaafgafbaaaaaaaaaaaagijcaaaabaaaaaaaaaaaaaabaaaaaahccaabaaa
aaaaaaaaegbcbaaaafaaaaaajgahbaaaaaaaaaaaaaaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaacambebcaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
aaaaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaialpdcaaaaaj
ccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaiadp
dicaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaaaaaaaaai
bcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpbaaaaaah
ccaabaaaaaaaaaaaegbcbaaaagaaaaaaegbcbaaaagaaaaaaeeaaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaadiaaaaahocaabaaaaaaaaaaafgafbaaaaaaaaaaa
fgbibaaaagaaaaaadeaaaaajbcaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaddaaaaajccaabaaaabaaaaaa
dkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaabaaaaaa
bkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajecaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaackaabaaa
abaaaaaadbaaaaaigcaabaaaabaaaaaapganbaaaaaaaaaaapganbaiaebaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaddaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadbaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaadeaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahccaabaaaabaaaaaa
dkaabaaaabaaaaaabkaabaaaabaaaaaadhaaaaakbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaacaaaaaa
bkaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaadcaaaaajccaabaaaacaaaaaabkaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
ckaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdodiaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaabkiacaaaaaaaaaaa
bdaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdp
alaaaaafgcaabaaaacaaaaaafgagbaaaabaaaaaaamaaaaafgcaabaaaadaaaaaa
fgagbaaaabaaaaaaalaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaaapaaaaah
icaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
abeaaaaaidpjccdoamaaaaafdcaabaaaaeaaaaaaogakbaaaaaaaaaaaapaaaaah
icaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaeaaaaaaegaabaaaabaaaaaaeghobaaa
aaaaaaaaaagabaaaadaaaaaaegaabaaaacaaaaaaegaabaaaadaaaaaabnaaaaah
bcaabaaaabaaaaaaabeaaaaaaaaaaaaadkbabaaaabaaaaaadhaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaabnaaaaajccaabaaa
abaaaaaadkaabaiaibaaaaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaa
aeaaaaaakganbaiambaaaaaaaaaaaaaapgagbaiaibaaaaaaaaaaaaaadcaaaaak
hcaabaaaafaaaaaafgafbaaaabaaaaaaegacbaaaaeaaaaaakgajbaiaibaaaaaa
aaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaaabaaaaaadkaabaaaaeaaaaaa
dgaaaaaficaabaaaafaaaaaaabeaaaaaaaaaaaaadgaaaaagdcaabaaaaeaaaaaa
jgafbaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaaaeaaaaaaegacbaaaaeaaaaaa
jgahbaaaafaaaaaabnaaaaaiccaabaaaabaaaaaaakaabaaaafaaaaaabkaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakocaabaaaaaaaaaaafgafbaaaabaaaaaaagajbaaaaeaaaaaa
fgaobaiaibaaaaaaaaaaaaaadiaaaaakmcaabaaaaaaaaaaapgalbaaaaaaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaahgcaabaaaaaaaaaaa
kgalbaaaaaaaaaaafgafbaaaaaaaaaaadiaaaaaigcaabaaaaaaaaaaafgagbaaa
aaaaaaaafgifcaaaaaaaaaaabdaaaaaaejaaaaanpcaabaaaaeaaaaaajgafbaaa
aaaaaaaaeghobaaaabaaaaaaaagabaaaaeaaaaaaigaabaaaacaaaaaaigaabaaa
adaaaaaaejaaaaanpcaabaaaacaaaaaajgafbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaafaaaaaaigaabaaaacaaaaaaigaabaaaadaaaaaadiaaaaahccaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaaaaeaaaaaadiaaaaahicaabaaaacaaaaaa
akaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaaeaaaaaaakaabaaa
aaaaaaaabkaabaaaaaaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaiaebaaaaaa
acaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaaaaaaaaapgapbaaaaeaaaaaa
egaobaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaiiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakiacaaaaaaaaaaabdaaaaaadgaaaaafhccabaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 277 math, 9 textures, 13 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
SetTexture 0 [_ShadowMapTexture] CUBE 0
SetTexture 1 [_LightTexture0] CUBE 1
SetTexture 2 [_LightTextureB0] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 80
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
Vector 32 [_LightShadowData]
VectorHalf 48 [_LightColor0] 4
Float 56 [_SpecularPower]
VectorHalf 64 [_SpecularColor] 4
Float 72 [_PlanetOpacity]
Float 76 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4 _LightShadowData;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _PlanetOpacity;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texturecube<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _LightTextureB0 [[texture(2)]], sampler _mtlsmp__LightTextureB0 [[sampler(2)]]
  ,   texture2d<half> _CityOverlayTex [[texture(3)]], sampler _mtlsmp__CityOverlayTex [[sampler(3)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(4)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half4 color_5;
  float3 cse_6;
  cse_6 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(cse_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(cse_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  half4 tmpvar_35;
  half3 detailCoords_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * rsqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_44;
  tmpvar_44 = dfdx(tmpvar_39.xz);
  float2 tmpvar_45;
  tmpvar_45 = dfdy(tmpvar_39.xz);
  float4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dfdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dfdy(tmpvar_43.y);
  float3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, (float)zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = half(tmpvar_49);
  float3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, (float3)half3(zxlerp_38));
  detailCoords_36 = half3(tmpvar_50);
  float3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, (float3)detailCoords_36, (float3)half3(nylerp_37));
  detailCoords_36 = half3(tmpvar_51);
  half tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  float2 coord_53;
  coord_53 = ((float2)(((half)0.5 * detailCoords_36.zy) / tmpvar_52) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_54;
  tmpvar_54 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_53), gradient2d((float2)(tmpvar_46.xy), (float2)(tmpvar_46.zw)));
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  float tmpvar_55;
  tmpvar_55 = ((float)tmpvar_14.w * (1.0 - float(
    (0.0 >= _mtl_i.xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = half(tmpvar_55);
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  float3 tmpvar_56;
  tmpvar_56 = _mtl_u._WorldSpaceLightPos0.xyz;
  float tmpvar_57;
  tmpvar_57 = dot (_mtl_i.xlv_TEXCOORD2, _mtl_i.xlv_TEXCOORD2);
  half4 tmpvar_58;
  tmpvar_58 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_57)));
  half4 tmpvar_59;
  tmpvar_59 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD2));
  float tmpvar_60;
  float4 shadowVals_61;
  float tmpvar_62;
  tmpvar_62 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD3, _mtl_i.xlv_TEXCOORD3)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float3 vec_63;
  vec_63 = (_mtl_i.xlv_TEXCOORD3 + float3(0.0078125, 0.0078125, 0.0078125));
  float4 packDist_64;
  half4 tmpvar_65;
  tmpvar_65 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_63));
  packDist_64 = float4(tmpvar_65);
  shadowVals_61.x = dot (packDist_64, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float3 vec_66;
  vec_66 = (_mtl_i.xlv_TEXCOORD3 + float3(-0.0078125, -0.0078125, 0.0078125));
  float4 packDist_67;
  half4 tmpvar_68;
  tmpvar_68 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_66));
  packDist_67 = float4(tmpvar_68);
  shadowVals_61.y = dot (packDist_67, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float3 vec_69;
  vec_69 = (_mtl_i.xlv_TEXCOORD3 + float3(-0.0078125, 0.0078125, -0.0078125));
  float4 packDist_70;
  half4 tmpvar_71;
  tmpvar_71 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_69));
  packDist_70 = float4(tmpvar_71);
  shadowVals_61.z = dot (packDist_70, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float3 vec_72;
  vec_72 = (_mtl_i.xlv_TEXCOORD3 + float3(0.0078125, -0.0078125, -0.0078125));
  float4 packDist_73;
  half4 tmpvar_74;
  tmpvar_74 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_72));
  packDist_73 = float4(tmpvar_74);
  shadowVals_61.w = dot (packDist_73, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bool4 tmpvar_75;
  tmpvar_75 = bool4((shadowVals_61 < float4(tmpvar_62)));
  float4 tmpvar_76;
  tmpvar_76 = _mtl_u._LightShadowData.xxxx;
  float tmpvar_77;
  if (tmpvar_75.x) {
    tmpvar_77 = tmpvar_76.x;
  } else {
    tmpvar_77 = 1.0;
  };
  float tmpvar_78;
  if (tmpvar_75.y) {
    tmpvar_78 = tmpvar_76.y;
  } else {
    tmpvar_78 = 1.0;
  };
  float tmpvar_79;
  if (tmpvar_75.z) {
    tmpvar_79 = tmpvar_76.z;
  } else {
    tmpvar_79 = 1.0;
  };
  float tmpvar_80;
  if (tmpvar_75.w) {
    tmpvar_80 = tmpvar_76.w;
  } else {
    tmpvar_80 = 1.0;
  };
  half4 tmpvar_81;
  tmpvar_81.x = half(tmpvar_77);
  tmpvar_81.y = half(tmpvar_78);
  tmpvar_81.z = half(tmpvar_79);
  tmpvar_81.w = half(tmpvar_80);
  half tmpvar_82;
  tmpvar_82 = dot (tmpvar_81, (half4)float4(0.25, 0.25, 0.25, 0.25));
  tmpvar_60 = float(tmpvar_82);
  half3 lightDir_83;
  lightDir_83 = half3(tmpvar_56);
  half3 viewDir_84;
  viewDir_84 = half3(_mtl_i.xlv_TEXCOORD7);
  half3 normal_85;
  normal_85 = half3(_mtl_i.xlv_TEXCOORD4);
  half atten_86;
  atten_86 = half(((float)(tmpvar_58.w * tmpvar_59.w) * tmpvar_60));
  half4 c_87;
  half3 tmpvar_88;
  tmpvar_88 = normalize(lightDir_83);
  lightDir_83 = tmpvar_88;
  half3 tmpvar_89;
  tmpvar_89 = normalize(viewDir_84);
  viewDir_84 = tmpvar_89;
  half3 tmpvar_90;
  tmpvar_90 = normalize(normal_85);
  normal_85 = tmpvar_90;
  half tmpvar_91;
  tmpvar_91 = dot (tmpvar_90, tmpvar_88);
  float tmpvar_92;
  half tmpvar_93;
  tmpvar_93 = clamp (dot (normalize(
    (tmpvar_88 + tmpvar_89)
  ), tmpvar_90), (half)0.0, (half)1.0);
  tmpvar_92 = float(tmpvar_93);
  float3 tmpvar_94;
  tmpvar_94 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_91) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_92, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_86 * (half)4.0));
  c_87.xyz = half3(tmpvar_94);
  c_87.w = (tmpvar_91 * (atten_86 * (half)4.0));
  float3 tmpvar_95;
  tmpvar_95 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_96;
  lightDir_96 = half3(tmpvar_95);
  half3 normal_97;
  normal_97 = half3(_mtl_i.xlv_TEXCOORD4);
  half tmpvar_98;
  tmpvar_98 = dot (normal_97, lightDir_96);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_87 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_98)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_98)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_99;
  tmpvar_99 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_99.xyz;
  float tmpvar_100;
  tmpvar_100 = ((float)tmpvar_99.w * _mtl_u._PlanetOpacity);
  color_5.w = half(tmpvar_100);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 259 math, 4 textures, 9 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [_CityOverlayTex] 2D 1
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 2
SetTexture 3 [_CityLightOverlayDetailTex] 2D 3
ConstBuffer "$Globals" 64
VectorHalf 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightShadowData]
VectorHalf 32 [_LightColor0] 4
Float 40 [_SpecularPower]
VectorHalf 48 [_SpecularColor] 4
Float 56 [_PlanetOpacity]
Float 60 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::less);
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float4 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  float4 _LightShadowData;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _PlanetOpacity;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   depth2d<float> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> _CityOverlayTex [[texture(1)]], sampler _mtlsmp__CityOverlayTex [[sampler(1)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(2)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(2)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half4 color_5;
  float3 cse_6;
  cse_6 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(cse_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(cse_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  half4 tmpvar_35;
  half3 detailCoords_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * rsqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_44;
  tmpvar_44 = dfdx(tmpvar_39.xz);
  float2 tmpvar_45;
  tmpvar_45 = dfdy(tmpvar_39.xz);
  float4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dfdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dfdy(tmpvar_43.y);
  float3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, (float)zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = half(tmpvar_49);
  float3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, (float3)half3(zxlerp_38));
  detailCoords_36 = half3(tmpvar_50);
  float3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, (float3)detailCoords_36, (float3)half3(nylerp_37));
  detailCoords_36 = half3(tmpvar_51);
  half tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  float2 coord_53;
  coord_53 = ((float2)(((half)0.5 * detailCoords_36.zy) / tmpvar_52) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_54;
  tmpvar_54 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_53), gradient2d((float2)(tmpvar_46.xy), (float2)(tmpvar_46.zw)));
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  float tmpvar_55;
  tmpvar_55 = ((float)tmpvar_14.w * (1.0 - float(
    (0.0 >= _mtl_i.xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = half(tmpvar_55);
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  half3 tmpvar_56;
  tmpvar_56 = _mtl_u._WorldSpaceLightPos0.xyz;
  half shadow_57;
  half tmpvar_58;
  tmpvar_58 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(_mtl_i.xlv_TEXCOORD2.xyz).xy, (float)(_mtl_i.xlv_TEXCOORD2.xyz).z);
  half tmpvar_59;
  tmpvar_59 = tmpvar_58;
  float tmpvar_60;
  tmpvar_60 = (_mtl_u._LightShadowData.x + ((float)tmpvar_59 * (1.0 - _mtl_u._LightShadowData.x)));
  shadow_57 = half(tmpvar_60);
  half3 lightDir_61;
  lightDir_61 = tmpvar_56;
  half3 viewDir_62;
  viewDir_62 = half3(_mtl_i.xlv_TEXCOORD7);
  half3 normal_63;
  normal_63 = half3(_mtl_i.xlv_TEXCOORD4);
  half atten_64;
  atten_64 = shadow_57;
  half4 c_65;
  half3 tmpvar_66;
  tmpvar_66 = normalize(lightDir_61);
  lightDir_61 = tmpvar_66;
  half3 tmpvar_67;
  tmpvar_67 = normalize(viewDir_62);
  viewDir_62 = tmpvar_67;
  half3 tmpvar_68;
  tmpvar_68 = normalize(normal_63);
  normal_63 = tmpvar_68;
  half tmpvar_69;
  tmpvar_69 = dot (tmpvar_68, tmpvar_66);
  float tmpvar_70;
  half tmpvar_71;
  tmpvar_71 = clamp (dot (normalize(
    (tmpvar_66 + tmpvar_67)
  ), tmpvar_68), (half)0.0, (half)1.0);
  tmpvar_70 = float(tmpvar_71);
  float3 tmpvar_72;
  tmpvar_72 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_69) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_70, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_64 * (half)4.0));
  c_65.xyz = half3(tmpvar_72);
  c_65.w = (tmpvar_69 * (atten_64 * (half)4.0));
  half3 tmpvar_73;
  tmpvar_73 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_74;
  lightDir_74 = tmpvar_73;
  half3 normal_75;
  normal_75 = half3(_mtl_i.xlv_TEXCOORD4);
  half tmpvar_76;
  tmpvar_76 = dot (normal_75, lightDir_74);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_65 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_76)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_76)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_77.xyz;
  float tmpvar_78;
  tmpvar_78 = ((float)tmpvar_77.w * _mtl_u._PlanetOpacity);
  color_5.w = half(tmpvar_78);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 260 math, 5 textures, 9 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [_LightTexture0] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 64
VectorHalf 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightShadowData]
VectorHalf 32 [_LightColor0] 4
Float 40 [_SpecularPower]
VectorHalf 48 [_SpecularColor] 4
Float 56 [_PlanetOpacity]
Float 60 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::less);
struct xlatMtlShaderInput {
  float4 xlv_TEXCOORD0;
  float2 xlv_TEXCOORD2;
  float4 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD4;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  float4 _LightShadowData;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _PlanetOpacity;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   depth2d<float> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _CityOverlayTex [[texture(2)]], sampler _mtlsmp__CityOverlayTex [[sampler(2)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(3)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half4 cityoverlay_4;
  half4 color_5;
  float3 cse_6;
  cse_6 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(cse_6.z) > (1e-08 * abs(cse_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (cse_6.x / cse_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((cse_6.z < 0.0)) {
      if ((cse_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(cse_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(cse_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(cse_6.y)
    )) * (1.5708 + (
      abs(cse_6.y)
     * 
      (-0.214602 + (abs(cse_6.y) * (0.0865667 + (
        abs(cse_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(cse_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(cse_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  cityoverlay_4 = tmpvar_14;
  half4 tmpvar_15;
  half3 detailCoords_16;
  half nylerp_17;
  half zxlerp_18;
  float3 tmpvar_19;
  tmpvar_19 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_20;
  float tmpvar_21;
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_19.x)))) {
    float tmpvar_22;
    tmpvar_22 = (tmpvar_19.x / tmpvar_19.z);
    tmpvar_21 = (tmpvar_22 * rsqrt((
      (tmpvar_22 * tmpvar_22)
     + 1.0)));
    tmpvar_21 = (sign(tmpvar_21) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_21)))
     * 
      (1.5708 + (abs(tmpvar_21) * (-0.214602 + (
        abs(tmpvar_21)
       * 
        (0.0865667 + (abs(tmpvar_21) * -0.0310296))
      ))))
    )));
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_19.x >= 0.0)) {
        tmpvar_21 += 3.14159;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.14159);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_19.x) * 1.5708);
  };
  uv_20.x = (0.5 + (0.159155 * tmpvar_21));
  uv_20.y = (0.31831 * (1.5708 - (
    sign(tmpvar_19.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_19.y)
    )) * (1.5708 + (
      abs(tmpvar_19.y)
     * 
      (-0.214602 + (abs(tmpvar_19.y) * (0.0865667 + (
        abs(tmpvar_19.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_23;
  tmpvar_23 = ((uv_20 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_24;
  tmpvar_24 = dfdx(tmpvar_19.xz);
  float2 tmpvar_25;
  tmpvar_25 = dfdy(tmpvar_19.xz);
  float4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dfdx(tmpvar_23.y);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dfdy(tmpvar_23.y);
  float3 tmpvar_27;
  tmpvar_27 = abs(tmpvar_19);
  float tmpvar_28;
  tmpvar_28 = float((tmpvar_27.z >= tmpvar_27.x));
  zxlerp_18 = half(tmpvar_28);
  float tmpvar_29;
  tmpvar_29 = float((mix (tmpvar_27.x, tmpvar_27.z, (float)zxlerp_18) >= tmpvar_27.y));
  nylerp_17 = half(tmpvar_29);
  float3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_27, tmpvar_27.zxy, (float3)half3(zxlerp_18));
  detailCoords_16 = half3(tmpvar_30);
  float3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_27.yxz, (float3)detailCoords_16, (float3)half3(nylerp_17));
  detailCoords_16 = half3(tmpvar_31);
  half tmpvar_32;
  tmpvar_32 = abs(detailCoords_16.x);
  float2 coord_33;
  coord_33 = ((float2)(((half)0.5 * detailCoords_16.zy) / tmpvar_32) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_34;
  tmpvar_34 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_33), gradient2d((float2)(tmpvar_26.xy), (float2)(tmpvar_26.zw)));
  tmpvar_15 = tmpvar_34;
  citydarkoverlaydetail_3 = tmpvar_15;
  half4 tmpvar_35;
  half3 detailCoords_36;
  half nylerp_37;
  half zxlerp_38;
  float3 tmpvar_39;
  tmpvar_39 = normalize(_mtl_i.xlv_TEXCOORD5);
  float2 uv_40;
  float tmpvar_41;
  if ((abs(tmpvar_39.z) > (1e-08 * abs(tmpvar_39.x)))) {
    float tmpvar_42;
    tmpvar_42 = (tmpvar_39.x / tmpvar_39.z);
    tmpvar_41 = (tmpvar_42 * rsqrt((
      (tmpvar_42 * tmpvar_42)
     + 1.0)));
    tmpvar_41 = (sign(tmpvar_41) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_41)))
     * 
      (1.5708 + (abs(tmpvar_41) * (-0.214602 + (
        abs(tmpvar_41)
       * 
        (0.0865667 + (abs(tmpvar_41) * -0.0310296))
      ))))
    )));
    if ((tmpvar_39.z < 0.0)) {
      if ((tmpvar_39.x >= 0.0)) {
        tmpvar_41 += 3.14159;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.14159);
      };
    };
  } else {
    tmpvar_41 = (sign(tmpvar_39.x) * 1.5708);
  };
  uv_40.x = (0.5 + (0.159155 * tmpvar_41));
  uv_40.y = (0.31831 * (1.5708 - (
    sign(tmpvar_39.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_39.y)
    )) * (1.5708 + (
      abs(tmpvar_39.y)
     * 
      (-0.214602 + (abs(tmpvar_39.y) * (0.0865667 + (
        abs(tmpvar_39.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_43;
  tmpvar_43 = ((uv_40 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_44;
  tmpvar_44 = dfdx(tmpvar_39.xz);
  float2 tmpvar_45;
  tmpvar_45 = dfdy(tmpvar_39.xz);
  float4 tmpvar_46;
  tmpvar_46.x = (0.159155 * sqrt(dot (tmpvar_44, tmpvar_44)));
  tmpvar_46.y = dfdx(tmpvar_43.y);
  tmpvar_46.z = (0.159155 * sqrt(dot (tmpvar_45, tmpvar_45)));
  tmpvar_46.w = dfdy(tmpvar_43.y);
  float3 tmpvar_47;
  tmpvar_47 = abs(tmpvar_39);
  float tmpvar_48;
  tmpvar_48 = float((tmpvar_47.z >= tmpvar_47.x));
  zxlerp_38 = half(tmpvar_48);
  float tmpvar_49;
  tmpvar_49 = float((mix (tmpvar_47.x, tmpvar_47.z, (float)zxlerp_38) >= tmpvar_47.y));
  nylerp_37 = half(tmpvar_49);
  float3 tmpvar_50;
  tmpvar_50 = mix (tmpvar_47, tmpvar_47.zxy, (float3)half3(zxlerp_38));
  detailCoords_36 = half3(tmpvar_50);
  float3 tmpvar_51;
  tmpvar_51 = mix (tmpvar_47.yxz, (float3)detailCoords_36, (float3)half3(nylerp_37));
  detailCoords_36 = half3(tmpvar_51);
  half tmpvar_52;
  tmpvar_52 = abs(detailCoords_36.x);
  float2 coord_53;
  coord_53 = ((float2)(((half)0.5 * detailCoords_36.zy) / tmpvar_52) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_54;
  tmpvar_54 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_53), gradient2d((float2)(tmpvar_46.xy), (float2)(tmpvar_46.zw)));
  tmpvar_35 = tmpvar_54;
  citylightoverlaydetail_2.xyz = tmpvar_35.xyz;
  float tmpvar_55;
  tmpvar_55 = ((float)tmpvar_14.w * (1.0 - float(
    (0.0 >= _mtl_i.xlv_TEXCOORD0.w)
  )));
  cityoverlay_4.w = half(tmpvar_55);
  citydarkoverlaydetail_3.w = (tmpvar_15.w * cityoverlay_4.w);
  citylightoverlaydetail_2.w = (tmpvar_35.w * cityoverlay_4.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_35.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  half3 tmpvar_56;
  tmpvar_56 = _mtl_u._WorldSpaceLightPos0.xyz;
  half4 tmpvar_57;
  tmpvar_57 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(_mtl_i.xlv_TEXCOORD2));
  half shadow_58;
  half tmpvar_59;
  tmpvar_59 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(_mtl_i.xlv_TEXCOORD3.xyz).xy, (float)(_mtl_i.xlv_TEXCOORD3.xyz).z);
  half tmpvar_60;
  tmpvar_60 = tmpvar_59;
  float tmpvar_61;
  tmpvar_61 = (_mtl_u._LightShadowData.x + ((float)tmpvar_60 * (1.0 - _mtl_u._LightShadowData.x)));
  shadow_58 = half(tmpvar_61);
  half3 lightDir_62;
  lightDir_62 = tmpvar_56;
  half3 viewDir_63;
  viewDir_63 = half3(_mtl_i.xlv_TEXCOORD7);
  half3 normal_64;
  normal_64 = half3(_mtl_i.xlv_TEXCOORD4);
  half atten_65;
  atten_65 = (tmpvar_57.w * shadow_58);
  half4 c_66;
  half3 tmpvar_67;
  tmpvar_67 = normalize(lightDir_62);
  lightDir_62 = tmpvar_67;
  half3 tmpvar_68;
  tmpvar_68 = normalize(viewDir_63);
  viewDir_63 = tmpvar_68;
  half3 tmpvar_69;
  tmpvar_69 = normalize(normal_64);
  normal_64 = tmpvar_69;
  half tmpvar_70;
  tmpvar_70 = dot (tmpvar_69, tmpvar_67);
  float tmpvar_71;
  half tmpvar_72;
  tmpvar_72 = clamp (dot (normalize(
    (tmpvar_67 + tmpvar_68)
  ), tmpvar_69), (half)0.0, (half)1.0);
  tmpvar_71 = float(tmpvar_72);
  float3 tmpvar_73;
  tmpvar_73 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_70) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_71, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_65 * (half)4.0));
  c_66.xyz = half3(tmpvar_73);
  c_66.w = (tmpvar_70 * (atten_65 * (half)4.0));
  half3 tmpvar_74;
  tmpvar_74 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_75;
  lightDir_75 = tmpvar_74;
  half3 normal_76;
  normal_76 = half3(_mtl_i.xlv_TEXCOORD4);
  half tmpvar_77;
  tmpvar_77 = dot (normal_76, lightDir_75);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_66 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_77)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_77)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5.xyz = tmpvar_78.xyz;
  float tmpvar_79;
  tmpvar_79 = ((float)tmpvar_78.w * _mtl_u._PlanetOpacity);
  color_5.w = half(tmpvar_79);
  tmpvar_1 = color_5;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
}
 }
}
}