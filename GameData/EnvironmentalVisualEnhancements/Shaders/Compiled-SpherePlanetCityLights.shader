// Compiled shader for all platforms, uncompressed size: 1233.9KB

Shader "EVE/PlanetCityLight" {
Properties {
 _Color ("Color Tint", Color) = (1,1,1,1)
 _MainTex ("Main (RGB)", 2D) = "white" {}
 _BumpMap ("Normalmap", 2D) = "bump" {}
 _SpecularColor ("Specular tint", Color) = (1,1,1,1)
 _SpecularPower ("Shininess", Float) = 0.078125
 _DetailDist ("Detail Distance", Range(0,1)) = 0.00875
 _CityOverlayTex ("Overlay (RGB)", 2D) = "white" {}
 _CityOverlayDetailScale ("Overlay Detail Scale", Range(0,1000)) = 80
 _CityDarkOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
 _CityLightOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
 _PlanetOpacity ("PlanetOpacity", Float) = 1
}
SubShader { 
 Tags { "QUEUE"="Transparent" "RenderMode"="Transparent" }


 // Stats for Vertex shader:
 //       d3d11 : 53 avg math (45..58)
 //        d3d9 : 58 avg math (52..62)
 //        gles : 323 avg math (313..336), 6 avg texture (4..10), 12 avg branch (12..16)
 //       gles3 : 322 avg math (313..336), 6 avg texture (4..10), 12 avg branch (12..16)
 //   glesdesktop : 323 avg math (313..336), 6 avg texture (4..10), 13 avg branch (12..16)
 //       metal : 27 avg math (25..29)
 //      opengl : 327 avg math (317..340), 6 avg texture (4..10), 13 avg branch (12..16)
 // Stats for Fragment shader:
 //       d3d11 : 97 avg math (90..108), 2 avg texture (0..6)
 //        d3d9 : 118 avg math (108..129), 14 avg texture (12..18)
 //       metal : 322 avg math (313..336), 6 avg texture (4..10), 12 avg branch (12..16)
 Pass {
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "QUEUE"="Transparent" "RenderMode"="Transparent" }
  Lighting On
  ZWrite Off
  Blend SrcAlpha OneMinusSrcAlpha
Program "vp" {
SubProgram "opengl " {
// Stats: 320 math, 5 textures, 12 branches
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 unity_Scale;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  tmpvar_1 = (cse_2.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_6 * (
    ((_World2Object * tmpvar_7).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_2).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 color_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  vec2 uv_5;
  float tmpvar_6;
  if ((abs(tmpvar_4.z) > (1e-08 * abs(tmpvar_4.x)))) {
    float tmpvar_7;
    tmpvar_7 = (tmpvar_4.x / tmpvar_4.z);
    tmpvar_6 = (tmpvar_7 * inversesqrt((
      (tmpvar_7 * tmpvar_7)
     + 1.0)));
    tmpvar_6 = (sign(tmpvar_6) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_6)))
     * 
      (1.5708 + (abs(tmpvar_6) * (-0.214602 + (
        abs(tmpvar_6)
       * 
        (0.0865667 + (abs(tmpvar_6) * -0.0310296))
      ))))
    )));
    if ((tmpvar_4.z < 0.0)) {
      if ((tmpvar_4.x >= 0.0)) {
        tmpvar_6 += 3.14159;
      } else {
        tmpvar_6 = (tmpvar_6 - 3.14159);
      };
    };
  } else {
    tmpvar_6 = (sign(tmpvar_4.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * tmpvar_6));
  uv_5.y = (0.31831 * (1.5708 - (
    sign(tmpvar_4.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_4.y)
    )) * (1.5708 + (
      abs(tmpvar_4.y)
     * 
      (-0.214602 + (abs(tmpvar_4.y) * (0.0865667 + (
        abs(tmpvar_4.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_4.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_4.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_5.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_5.y);
  vec3 normal_11;
  normal_11.xy = ((texture2DGradARB (_BumpMap, uv_5, tmpvar_10.xy, tmpvar_10.zw).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (
    dot (normal_11.xy, normal_11.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float tmpvar_15;
    tmpvar_15 = (tmpvar_12.x / tmpvar_12.z);
    tmpvar_14 = (tmpvar_15 * inversesqrt((
      (tmpvar_15 * tmpvar_15)
     + 1.0)));
    tmpvar_14 = (sign(tmpvar_14) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_14)))
     * 
      (1.5708 + (abs(tmpvar_14) * (-0.214602 + (
        abs(tmpvar_14)
       * 
        (0.0865667 + (abs(tmpvar_14) * -0.0310296))
      ))))
    )));
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.14159;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.14159);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * tmpvar_14));
  uv_13.y = (0.31831 * (1.5708 - (
    sign(tmpvar_12.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.5708 + (
      abs(tmpvar_12.y)
     * 
      (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (
        abs(tmpvar_12.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_13.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_13.y);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_CityOverlayTex, uv_13, tmpvar_18.xy, tmpvar_18.zw);
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2);
  vec2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_28.yxz, mix (tmpvar_28, tmpvar_28.zxy, vec3(tmpvar_29)), vec3(float((
    mix (tmpvar_28.x, tmpvar_28.z, tmpvar_29)
   >= tmpvar_28.y))));
  vec4 tmpvar_31;
  tmpvar_31 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_30.zy) / abs(tmpvar_30.x)) * _CityOverlayDetailScale), tmpvar_27.xy, tmpvar_27.zw);
  citydarkoverlaydetail_2 = tmpvar_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec2 uv_33;
  float tmpvar_34;
  if ((abs(tmpvar_32.z) > (1e-08 * abs(tmpvar_32.x)))) {
    float tmpvar_35;
    tmpvar_35 = (tmpvar_32.x / tmpvar_32.z);
    tmpvar_34 = (tmpvar_35 * inversesqrt((
      (tmpvar_35 * tmpvar_35)
     + 1.0)));
    tmpvar_34 = (sign(tmpvar_34) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_34)))
     * 
      (1.5708 + (abs(tmpvar_34) * (-0.214602 + (
        abs(tmpvar_34)
       * 
        (0.0865667 + (abs(tmpvar_34) * -0.0310296))
      ))))
    )));
    if ((tmpvar_32.z < 0.0)) {
      if ((tmpvar_32.x >= 0.0)) {
        tmpvar_34 += 3.14159;
      } else {
        tmpvar_34 = (tmpvar_34 - 3.14159);
      };
    };
  } else {
    tmpvar_34 = (sign(tmpvar_32.x) * 1.5708);
  };
  uv_33.x = (0.5 + (0.159155 * tmpvar_34));
  uv_33.y = (0.31831 * (1.5708 - (
    sign(tmpvar_32.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_32.y)
    )) * (1.5708 + (
      abs(tmpvar_32.y)
     * 
      (-0.214602 + (abs(tmpvar_32.y) * (0.0865667 + (
        abs(tmpvar_32.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_36;
  tmpvar_36 = ((uv_33 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_37;
  tmpvar_37 = dFdx(tmpvar_32.xz);
  vec2 tmpvar_38;
  tmpvar_38 = dFdy(tmpvar_32.xz);
  vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36.y);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36.y);
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_32);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.yxz, mix (tmpvar_40, tmpvar_40.zxy, vec3(tmpvar_41)), vec3(float((
    mix (tmpvar_40.x, tmpvar_40.z, tmpvar_41)
   >= tmpvar_40.y))));
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_42.zy) / abs(tmpvar_42.x)) * _CityOverlayDetailScale), tmpvar_39.xy, tmpvar_39.zw);
  citylightoverlaydetail_1.xyz = tmpvar_43.xyz;
  citydarkoverlaydetail_2.w = (tmpvar_31.w * tmpvar_19.w);
  citylightoverlaydetail_1.w = (tmpvar_43.w * tmpvar_19.w);
  color_3.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_43.xyz, citylightoverlaydetail_1.www);
  color_3.w = 0.0;
  float atten_44;
  atten_44 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w;
  vec4 c_45;
  vec3 tmpvar_46;
  tmpvar_46 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_47;
  tmpvar_47 = normalize(normal_11);
  float tmpvar_48;
  tmpvar_48 = dot (tmpvar_47, tmpvar_46);
  c_45.xyz = (((
    (color_3.xyz * _LightColor0.xyz)
   * tmpvar_48) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_46 + normalize(xlv_TEXCOORD1)))
    , tmpvar_47), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_44 * 4.0));
  c_45.w = (tmpvar_48 * (atten_44 * 4.0));
  float tmpvar_49;
  tmpvar_49 = dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_45 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_49)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_49)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_50;
  tmpvar_50 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_3 = tmpvar_50;
  gl_FragData[0] = tmpvar_50;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 57 math
Keywords { "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [unity_Scale]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c19, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r0.xyz, v1.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v2.w
mov r0.w, c19.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
mad r0.xyz, r1, c18.w, -v0
dp3 r2.y, r0, r3
dp3 r2.x, r0, v2
dp3 r2.z, v1, r0
dp3 r1.x, r2, r2
rsq r2.w, r1.x
mov r1, c8
mov r0, c10
dp4 r4.z, c17, r0
mov r0, c9
dp4 r4.y, c17, r0
dp4 r4.x, c17, r1
mad r0.xyz, r4, c18.w, -v0
dp3 r1.y, r3, r0
dp3 r1.x, v2, r0
dp3 r1.z, v1, r0
mov r0.xyz, v1
mov r0.w, c19.y
mul o2.xyz, r2.w, r2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r1.w, r1, r1
rsq r0.y, r1.w
mul o5.xyz, r0.y, r1
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 o6.z, r0, c14
dp4 o6.y, r0, c13
dp4 o6.x, r0, c12
add r0.xyz, -r0, c16
dp3 r0.x, r0, r0
dp4 r0.w, v0, v0
rsq r0.y, r0.w
rsq r0.x, r0.x
mul r1.xyz, r0.y, v0
rcp o1.x, r0.x
mov o3.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 54 math
Keywords { "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 304
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
Vector 320 [unity_Scale]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedbmcponbgljbjfgiicmgmdhaikkdjkccjabaaaaaafeajaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcoaahaaaaeaaaabaapiabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaad
occabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
adaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaacgbjbaaaabaaaaaajgbebaaaacaaaaaa
dcaaaaakhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaaegacbaia
ebaaaaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaa
acaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaa
dcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaacaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaajgahbaaaacaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaapgapbaaa
aaaaaaaafgaobaaaacaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaa
egbobaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaa
abaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaa
aaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaa
pgipcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 316 math, 5 textures, 12 branches
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2D (_LightTexture0, vec2(tmpvar_66));
  mediump vec3 lightDir_68;
  lightDir_68 = xlv_TEXCOORD5;
  mediump vec3 viewDir_69;
  viewDir_69 = xlv_TEXCOORD1;
  mediump float atten_70;
  atten_70 = tmpvar_67.w;
  mediump vec4 c_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = normalize(lightDir_68);
  lightDir_68 = tmpvar_72;
  mediump vec3 tmpvar_73;
  tmpvar_73 = normalize(viewDir_69);
  viewDir_69 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = normalize(normT_4);
  mediump float tmpvar_75;
  tmpvar_75 = dot (tmpvar_74, tmpvar_72);
  highp float tmpvar_76;
  mediump float tmpvar_77;
  tmpvar_77 = clamp (dot (normalize(
    (tmpvar_72 + tmpvar_73)
  ), tmpvar_74), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_75) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_76, _SpecularPower) * _SpecularColor.w)
  )) * (atten_70 * 4.0));
  c_71.xyz = tmpvar_78;
  c_71.w = (tmpvar_75 * (atten_70 * 4.0));
  highp vec3 tmpvar_79;
  tmpvar_79 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_80;
  lightDir_80 = tmpvar_79;
  mediump vec3 normal_81;
  normal_81 = xlv_TEXCOORD3;
  mediump float tmpvar_82;
  tmpvar_82 = dot (normal_81, lightDir_80);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_71 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_82)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_82)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_83;
  tmpvar_83 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_83;
  tmpvar_1 = tmpvar_83;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 316 math, 5 textures, 12 branches
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2D (_LightTexture0, vec2(tmpvar_66));
  mediump vec3 lightDir_68;
  lightDir_68 = xlv_TEXCOORD5;
  mediump vec3 viewDir_69;
  viewDir_69 = xlv_TEXCOORD1;
  mediump float atten_70;
  atten_70 = tmpvar_67.w;
  mediump vec4 c_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = normalize(lightDir_68);
  lightDir_68 = tmpvar_72;
  mediump vec3 tmpvar_73;
  tmpvar_73 = normalize(viewDir_69);
  viewDir_69 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = normalize(normT_4);
  mediump float tmpvar_75;
  tmpvar_75 = dot (tmpvar_74, tmpvar_72);
  highp float tmpvar_76;
  mediump float tmpvar_77;
  tmpvar_77 = clamp (dot (normalize(
    (tmpvar_72 + tmpvar_73)
  ), tmpvar_74), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_75) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_76, _SpecularPower) * _SpecularColor.w)
  )) * (atten_70 * 4.0));
  c_71.xyz = tmpvar_78;
  c_71.w = (tmpvar_75 * (atten_70 * 4.0));
  highp vec3 tmpvar_79;
  tmpvar_79 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_80;
  lightDir_80 = tmpvar_79;
  mediump vec3 normal_81;
  normal_81 = xlv_TEXCOORD3;
  mediump float tmpvar_82;
  tmpvar_82 = dot (normal_81, lightDir_80);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_71 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_82)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_82)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_83;
  tmpvar_83 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_83;
  tmpvar_1 = tmpvar_83;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 316 math, 5 textures, 12 branches
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = textureGrad (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = textureGrad (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureGrad (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture (_LightTexture0, vec2(tmpvar_66));
  mediump vec3 lightDir_68;
  lightDir_68 = xlv_TEXCOORD5;
  mediump vec3 viewDir_69;
  viewDir_69 = xlv_TEXCOORD1;
  mediump float atten_70;
  atten_70 = tmpvar_67.w;
  mediump vec4 c_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = normalize(lightDir_68);
  lightDir_68 = tmpvar_72;
  mediump vec3 tmpvar_73;
  tmpvar_73 = normalize(viewDir_69);
  viewDir_69 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = normalize(normT_4);
  mediump float tmpvar_75;
  tmpvar_75 = dot (tmpvar_74, tmpvar_72);
  highp float tmpvar_76;
  mediump float tmpvar_77;
  tmpvar_77 = clamp (dot (normalize(
    (tmpvar_72 + tmpvar_73)
  ), tmpvar_74), 0.0, 1.0);
  tmpvar_76 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_75) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_76, _SpecularPower) * _SpecularColor.w)
  )) * (atten_70 * 4.0));
  c_71.xyz = tmpvar_78;
  c_71.w = (tmpvar_75 * (atten_70 * 4.0));
  highp vec3 tmpvar_79;
  tmpvar_79 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_80;
  lightDir_80 = tmpvar_79;
  mediump vec3 normal_81;
  normal_81 = xlv_TEXCOORD3;
  mediump float tmpvar_82;
  tmpvar_82 = dot (normal_81, lightDir_80);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_71 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_82)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_82)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_83;
  tmpvar_83 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_83;
  tmpvar_1 = tmpvar_83;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "POINT" "SHADOWS_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "tangent" ATTR2
ConstBuffer "$Globals" 304
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Matrix 240 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 224 [unity_Scale]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesTANGENT [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float4 unity_Scale;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = normalize(_mtl_i._glesNormal);
  float4 tmpvar_2;
  tmpvar_2.xyz = normalize(_mtl_i._glesTANGENT.xyz);
  tmpvar_2.w = _mtl_i._glesTANGENT.w;
  float3 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  tmpvar_3 = (cse_4.xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * tmpvar_9).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_5).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * _mtl_u._WorldSpaceLightPos0).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_4).xyz;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 317 math, 4 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 unity_Scale;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  vec3 tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_3 = TANGENT.xyz;
  tmpvar_4 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_5;
  tmpvar_5[0].x = tmpvar_3.x;
  tmpvar_5[0].y = tmpvar_4.x;
  tmpvar_5[0].z = gl_Normal.x;
  tmpvar_5[1].x = tmpvar_3.y;
  tmpvar_5[1].y = tmpvar_4.y;
  tmpvar_5[1].z = gl_Normal.y;
  tmpvar_5[2].x = tmpvar_3.z;
  tmpvar_5[2].y = tmpvar_4.z;
  tmpvar_5[2].z = gl_Normal.z;
  vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_5 * (
    ((_World2Object * tmpvar_6).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_2).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_5 * (_World2Object * _WorldSpaceLightPos0).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 color_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  vec2 uv_5;
  float tmpvar_6;
  if ((abs(tmpvar_4.z) > (1e-08 * abs(tmpvar_4.x)))) {
    float tmpvar_7;
    tmpvar_7 = (tmpvar_4.x / tmpvar_4.z);
    tmpvar_6 = (tmpvar_7 * inversesqrt((
      (tmpvar_7 * tmpvar_7)
     + 1.0)));
    tmpvar_6 = (sign(tmpvar_6) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_6)))
     * 
      (1.5708 + (abs(tmpvar_6) * (-0.214602 + (
        abs(tmpvar_6)
       * 
        (0.0865667 + (abs(tmpvar_6) * -0.0310296))
      ))))
    )));
    if ((tmpvar_4.z < 0.0)) {
      if ((tmpvar_4.x >= 0.0)) {
        tmpvar_6 += 3.14159;
      } else {
        tmpvar_6 = (tmpvar_6 - 3.14159);
      };
    };
  } else {
    tmpvar_6 = (sign(tmpvar_4.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * tmpvar_6));
  uv_5.y = (0.31831 * (1.5708 - (
    sign(tmpvar_4.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_4.y)
    )) * (1.5708 + (
      abs(tmpvar_4.y)
     * 
      (-0.214602 + (abs(tmpvar_4.y) * (0.0865667 + (
        abs(tmpvar_4.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_4.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_4.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_5.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_5.y);
  vec3 normal_11;
  normal_11.xy = ((texture2DGradARB (_BumpMap, uv_5, tmpvar_10.xy, tmpvar_10.zw).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (
    dot (normal_11.xy, normal_11.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float tmpvar_15;
    tmpvar_15 = (tmpvar_12.x / tmpvar_12.z);
    tmpvar_14 = (tmpvar_15 * inversesqrt((
      (tmpvar_15 * tmpvar_15)
     + 1.0)));
    tmpvar_14 = (sign(tmpvar_14) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_14)))
     * 
      (1.5708 + (abs(tmpvar_14) * (-0.214602 + (
        abs(tmpvar_14)
       * 
        (0.0865667 + (abs(tmpvar_14) * -0.0310296))
      ))))
    )));
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.14159;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.14159);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * tmpvar_14));
  uv_13.y = (0.31831 * (1.5708 - (
    sign(tmpvar_12.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.5708 + (
      abs(tmpvar_12.y)
     * 
      (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (
        abs(tmpvar_12.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_13.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_13.y);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_CityOverlayTex, uv_13, tmpvar_18.xy, tmpvar_18.zw);
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2);
  vec2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_28.yxz, mix (tmpvar_28, tmpvar_28.zxy, vec3(tmpvar_29)), vec3(float((
    mix (tmpvar_28.x, tmpvar_28.z, tmpvar_29)
   >= tmpvar_28.y))));
  vec4 tmpvar_31;
  tmpvar_31 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_30.zy) / abs(tmpvar_30.x)) * _CityOverlayDetailScale), tmpvar_27.xy, tmpvar_27.zw);
  citydarkoverlaydetail_2 = tmpvar_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec2 uv_33;
  float tmpvar_34;
  if ((abs(tmpvar_32.z) > (1e-08 * abs(tmpvar_32.x)))) {
    float tmpvar_35;
    tmpvar_35 = (tmpvar_32.x / tmpvar_32.z);
    tmpvar_34 = (tmpvar_35 * inversesqrt((
      (tmpvar_35 * tmpvar_35)
     + 1.0)));
    tmpvar_34 = (sign(tmpvar_34) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_34)))
     * 
      (1.5708 + (abs(tmpvar_34) * (-0.214602 + (
        abs(tmpvar_34)
       * 
        (0.0865667 + (abs(tmpvar_34) * -0.0310296))
      ))))
    )));
    if ((tmpvar_32.z < 0.0)) {
      if ((tmpvar_32.x >= 0.0)) {
        tmpvar_34 += 3.14159;
      } else {
        tmpvar_34 = (tmpvar_34 - 3.14159);
      };
    };
  } else {
    tmpvar_34 = (sign(tmpvar_32.x) * 1.5708);
  };
  uv_33.x = (0.5 + (0.159155 * tmpvar_34));
  uv_33.y = (0.31831 * (1.5708 - (
    sign(tmpvar_32.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_32.y)
    )) * (1.5708 + (
      abs(tmpvar_32.y)
     * 
      (-0.214602 + (abs(tmpvar_32.y) * (0.0865667 + (
        abs(tmpvar_32.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_36;
  tmpvar_36 = ((uv_33 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_37;
  tmpvar_37 = dFdx(tmpvar_32.xz);
  vec2 tmpvar_38;
  tmpvar_38 = dFdy(tmpvar_32.xz);
  vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36.y);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36.y);
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_32);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.yxz, mix (tmpvar_40, tmpvar_40.zxy, vec3(tmpvar_41)), vec3(float((
    mix (tmpvar_40.x, tmpvar_40.z, tmpvar_41)
   >= tmpvar_40.y))));
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_42.zy) / abs(tmpvar_42.x)) * _CityOverlayDetailScale), tmpvar_39.xy, tmpvar_39.zw);
  citylightoverlaydetail_1.xyz = tmpvar_43.xyz;
  citydarkoverlaydetail_2.w = (tmpvar_31.w * tmpvar_19.w);
  citylightoverlaydetail_1.w = (tmpvar_43.w * tmpvar_19.w);
  color_3.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_43.xyz, citylightoverlaydetail_1.www);
  color_3.w = 0.0;
  vec4 c_44;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_46;
  tmpvar_46 = normalize(normal_11);
  float tmpvar_47;
  tmpvar_47 = dot (tmpvar_46, tmpvar_45);
  c_44.xyz = (((
    (color_3.xyz * _LightColor0.xyz)
   * tmpvar_47) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_45 + normalize(xlv_TEXCOORD1)))
    , tmpvar_46), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * 4.0);
  c_44.w = (tmpvar_47 * 4.0);
  float tmpvar_48;
  tmpvar_48 = dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_44 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_48)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_48)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_49;
  tmpvar_49 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_3 = tmpvar_49;
  gl_FragData[0] = tmpvar_49;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 52 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Vector 14 [unity_Scale]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
def c15, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r0.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r0, v2.w
mov r0.w, c15.x
mov r0.xyz, c12
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
mad r0.xyz, r1, c14.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0, c10
dp4 r3.z, c13, r0
mov r0, c9
mul o2.xyz, r1.w, r1
mov r1, c8
dp4 r3.x, c13, r1
dp4 r3.y, c13, r0
dp3 r0.y, r2, r3
mov r1.xyz, v1
mov r1.w, c15.y
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o4.xyz, r0.w, r2
dp3 r0.x, v2, r3
dp3 r0.z, v1, r3
dp3 r2.w, r0, r0
rsq r1.x, r2.w
mul o5.xyz, r1.x, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c12
dp3 r0.x, r0, r0
dp4 r0.w, v0, v0
rsq r0.y, r0.w
rsq r0.x, r0.x
mul r1.xyz, r0.y, v0
rcp o1.x, r0.x
mov o3.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 45 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
Vector 320 [unity_Scale]
BindCB  "UnityPerCamera" 0
BindCB  "UnityLighting" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedpihbfaoibicnpamgcdhpnalmmgealihaabaaaaaameahaaaaadaaaaaa
cmaaaaaajmaaaaaafeabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
laaaaaaaagaaaaaaaiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaakeaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaakeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaakeaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgiagaaaaeaaaabaa
jkabaaaafjaaaaaeegiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaa
abaaaaaafjaaaaaeegiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaa
anaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaa
aaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaaj
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaa
baaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaaf
bccabaaaabaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaacgbjbaaa
abaaaaaajgbebaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaajgbebaaaabaaaaaa
cgbjbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaa
aaaaaaaaaeaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabaaaaaaaagiacaaaaaaaaaaaaeaaaaaaegacbaaaabaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaaaaaaaaa
aeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egiccaaaacaaaaaabdaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgipcaaaacaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaa
acaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaa
egbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaa
jgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
occabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaabbaaaaahicaabaaa
aaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaa
aaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaa
abaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaajhcaabaaa
abaaaaaafgifcaaaabaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaacaaaaaabcaaaaaa
kgikcaaaabaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaacaaaaaabdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
// Stats: 313 math, 4 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  tmpvar_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_2.xyz;
  tmpvar_6 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_1.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_1.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_1.z;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_7 * (
    ((_World2Object * tmpvar_8).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  mediump vec3 lightDir_66;
  lightDir_66 = xlv_TEXCOORD5;
  mediump vec3 viewDir_67;
  viewDir_67 = xlv_TEXCOORD1;
  mediump vec4 c_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = normalize(lightDir_66);
  lightDir_66 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(viewDir_67);
  viewDir_67 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(normT_4);
  mediump float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_69);
  highp float tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = clamp (dot (normalize(
    (tmpvar_69 + tmpvar_70)
  ), tmpvar_71), 0.0, 1.0);
  tmpvar_73 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_72) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_73, _SpecularPower) * _SpecularColor.w)
  )) * 4.0);
  c_68.xyz = tmpvar_75;
  c_68.w = (tmpvar_72 * 4.0);
  lowp vec3 tmpvar_76;
  tmpvar_76 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_77;
  lightDir_77 = tmpvar_76;
  mediump vec3 normal_78;
  normal_78 = xlv_TEXCOORD3;
  mediump float tmpvar_79;
  tmpvar_79 = dot (normal_78, lightDir_77);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_68 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_79)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_79)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_80;
  tmpvar_1 = tmpvar_80;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 313 math, 4 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  tmpvar_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_2.xyz;
  tmpvar_6 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_1.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_1.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_1.z;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_7 * (
    ((_World2Object * tmpvar_8).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  mediump vec3 lightDir_66;
  lightDir_66 = xlv_TEXCOORD5;
  mediump vec3 viewDir_67;
  viewDir_67 = xlv_TEXCOORD1;
  mediump vec4 c_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = normalize(lightDir_66);
  lightDir_66 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(viewDir_67);
  viewDir_67 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(normT_4);
  mediump float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_69);
  highp float tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = clamp (dot (normalize(
    (tmpvar_69 + tmpvar_70)
  ), tmpvar_71), 0.0, 1.0);
  tmpvar_73 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_72) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_73, _SpecularPower) * _SpecularColor.w)
  )) * 4.0);
  c_68.xyz = tmpvar_75;
  c_68.w = (tmpvar_72 * 4.0);
  lowp vec3 tmpvar_76;
  tmpvar_76 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_77;
  lightDir_77 = tmpvar_76;
  mediump vec3 normal_78;
  normal_78 = xlv_TEXCOORD3;
  mediump float tmpvar_79;
  tmpvar_79 = dot (normal_78, lightDir_77);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_68 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_79)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_79)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_80;
  tmpvar_1 = tmpvar_80;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 313 math, 4 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  tmpvar_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  highp vec3 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_2.xyz;
  tmpvar_6 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_1.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_1.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_1.z;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_7 * (
    ((_World2Object * tmpvar_8).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz));
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = textureGrad (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = textureGrad (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureGrad (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  mediump vec3 lightDir_66;
  lightDir_66 = xlv_TEXCOORD5;
  mediump vec3 viewDir_67;
  viewDir_67 = xlv_TEXCOORD1;
  mediump vec4 c_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = normalize(lightDir_66);
  lightDir_66 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = normalize(viewDir_67);
  viewDir_67 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(normT_4);
  mediump float tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_69);
  highp float tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = clamp (dot (normalize(
    (tmpvar_69 + tmpvar_70)
  ), tmpvar_71), 0.0, 1.0);
  tmpvar_73 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_72) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_73, _SpecularPower) * _SpecularColor.w)
  )) * 4.0);
  c_68.xyz = tmpvar_75;
  c_68.w = (tmpvar_72 * 4.0);
  lowp vec3 tmpvar_76;
  tmpvar_76 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_77;
  lightDir_77 = tmpvar_76;
  mediump vec3 normal_78;
  normal_78 = xlv_TEXCOORD3;
  mediump float tmpvar_79;
  tmpvar_79 = dot (normal_78, lightDir_77);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_68 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_79)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_79)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_80;
  tmpvar_1 = tmpvar_80;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 25 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "tangent" ATTR2
ConstBuffer "$Globals" 240
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 224 [unity_Scale]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesTANGENT [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float4 unity_Scale;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = normalize(_mtl_i._glesNormal);
  float4 tmpvar_2;
  tmpvar_2.xyz = normalize(_mtl_i._glesTANGENT.xyz);
  tmpvar_2.w = _mtl_i._glesTANGENT.w;
  float3 tmpvar_3;
  tmpvar_3 = ((_mtl_u._Object2World * _mtl_i._glesVertex).xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_1;
  float3 tmpvar_5;
  float3 tmpvar_6;
  tmpvar_5 = tmpvar_2.xyz;
  tmpvar_6 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = tmpvar_1.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = tmpvar_1.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = tmpvar_1.z;
  float4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_7 * (
    ((_mtl_u._World2Object * tmpvar_8).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_4).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_7 * (_mtl_u._World2Object * (float4)_mtl_u._WorldSpaceLightPos0).xyz));
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 326 math, 6 textures, 12 branches
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 unity_Scale;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  tmpvar_1 = (cse_2.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_6 * (
    ((_World2Object * tmpvar_7).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_2);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 color_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  vec2 uv_5;
  float tmpvar_6;
  if ((abs(tmpvar_4.z) > (1e-08 * abs(tmpvar_4.x)))) {
    float tmpvar_7;
    tmpvar_7 = (tmpvar_4.x / tmpvar_4.z);
    tmpvar_6 = (tmpvar_7 * inversesqrt((
      (tmpvar_7 * tmpvar_7)
     + 1.0)));
    tmpvar_6 = (sign(tmpvar_6) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_6)))
     * 
      (1.5708 + (abs(tmpvar_6) * (-0.214602 + (
        abs(tmpvar_6)
       * 
        (0.0865667 + (abs(tmpvar_6) * -0.0310296))
      ))))
    )));
    if ((tmpvar_4.z < 0.0)) {
      if ((tmpvar_4.x >= 0.0)) {
        tmpvar_6 += 3.14159;
      } else {
        tmpvar_6 = (tmpvar_6 - 3.14159);
      };
    };
  } else {
    tmpvar_6 = (sign(tmpvar_4.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * tmpvar_6));
  uv_5.y = (0.31831 * (1.5708 - (
    sign(tmpvar_4.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_4.y)
    )) * (1.5708 + (
      abs(tmpvar_4.y)
     * 
      (-0.214602 + (abs(tmpvar_4.y) * (0.0865667 + (
        abs(tmpvar_4.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_4.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_4.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_5.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_5.y);
  vec3 normal_11;
  normal_11.xy = ((texture2DGradARB (_BumpMap, uv_5, tmpvar_10.xy, tmpvar_10.zw).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (
    dot (normal_11.xy, normal_11.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float tmpvar_15;
    tmpvar_15 = (tmpvar_12.x / tmpvar_12.z);
    tmpvar_14 = (tmpvar_15 * inversesqrt((
      (tmpvar_15 * tmpvar_15)
     + 1.0)));
    tmpvar_14 = (sign(tmpvar_14) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_14)))
     * 
      (1.5708 + (abs(tmpvar_14) * (-0.214602 + (
        abs(tmpvar_14)
       * 
        (0.0865667 + (abs(tmpvar_14) * -0.0310296))
      ))))
    )));
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.14159;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.14159);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * tmpvar_14));
  uv_13.y = (0.31831 * (1.5708 - (
    sign(tmpvar_12.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.5708 + (
      abs(tmpvar_12.y)
     * 
      (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (
        abs(tmpvar_12.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_13.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_13.y);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_CityOverlayTex, uv_13, tmpvar_18.xy, tmpvar_18.zw);
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2);
  vec2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_28.yxz, mix (tmpvar_28, tmpvar_28.zxy, vec3(tmpvar_29)), vec3(float((
    mix (tmpvar_28.x, tmpvar_28.z, tmpvar_29)
   >= tmpvar_28.y))));
  vec4 tmpvar_31;
  tmpvar_31 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_30.zy) / abs(tmpvar_30.x)) * _CityOverlayDetailScale), tmpvar_27.xy, tmpvar_27.zw);
  citydarkoverlaydetail_2 = tmpvar_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec2 uv_33;
  float tmpvar_34;
  if ((abs(tmpvar_32.z) > (1e-08 * abs(tmpvar_32.x)))) {
    float tmpvar_35;
    tmpvar_35 = (tmpvar_32.x / tmpvar_32.z);
    tmpvar_34 = (tmpvar_35 * inversesqrt((
      (tmpvar_35 * tmpvar_35)
     + 1.0)));
    tmpvar_34 = (sign(tmpvar_34) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_34)))
     * 
      (1.5708 + (abs(tmpvar_34) * (-0.214602 + (
        abs(tmpvar_34)
       * 
        (0.0865667 + (abs(tmpvar_34) * -0.0310296))
      ))))
    )));
    if ((tmpvar_32.z < 0.0)) {
      if ((tmpvar_32.x >= 0.0)) {
        tmpvar_34 += 3.14159;
      } else {
        tmpvar_34 = (tmpvar_34 - 3.14159);
      };
    };
  } else {
    tmpvar_34 = (sign(tmpvar_32.x) * 1.5708);
  };
  uv_33.x = (0.5 + (0.159155 * tmpvar_34));
  uv_33.y = (0.31831 * (1.5708 - (
    sign(tmpvar_32.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_32.y)
    )) * (1.5708 + (
      abs(tmpvar_32.y)
     * 
      (-0.214602 + (abs(tmpvar_32.y) * (0.0865667 + (
        abs(tmpvar_32.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_36;
  tmpvar_36 = ((uv_33 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_37;
  tmpvar_37 = dFdx(tmpvar_32.xz);
  vec2 tmpvar_38;
  tmpvar_38 = dFdy(tmpvar_32.xz);
  vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36.y);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36.y);
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_32);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.yxz, mix (tmpvar_40, tmpvar_40.zxy, vec3(tmpvar_41)), vec3(float((
    mix (tmpvar_40.x, tmpvar_40.z, tmpvar_41)
   >= tmpvar_40.y))));
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_42.zy) / abs(tmpvar_42.x)) * _CityOverlayDetailScale), tmpvar_39.xy, tmpvar_39.zw);
  citylightoverlaydetail_1.xyz = tmpvar_43.xyz;
  citydarkoverlaydetail_2.w = (tmpvar_31.w * tmpvar_19.w);
  citylightoverlaydetail_1.w = (tmpvar_43.w * tmpvar_19.w);
  color_3.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_43.xyz, citylightoverlaydetail_1.www);
  color_3.w = 0.0;
  float atten_44;
  atten_44 = ((float(
    (xlv_TEXCOORD6.z > 0.0)
  ) * texture2D (_LightTexture0, (
    (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w)
   + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w);
  vec4 c_45;
  vec3 tmpvar_46;
  tmpvar_46 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_47;
  tmpvar_47 = normalize(normal_11);
  float tmpvar_48;
  tmpvar_48 = dot (tmpvar_47, tmpvar_46);
  c_45.xyz = (((
    (color_3.xyz * _LightColor0.xyz)
   * tmpvar_48) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_46 + normalize(xlv_TEXCOORD1)))
    , tmpvar_47), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_44 * 4.0));
  c_45.w = (tmpvar_48 * (atten_44 * 4.0));
  float tmpvar_49;
  tmpvar_49 = dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_45 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_49)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_49)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_50;
  tmpvar_50 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_3 = tmpvar_50;
  gl_FragData[0] = tmpvar_50;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [unity_Scale]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c19, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r0.xyz, v1.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v2.w
mov r0.w, c19.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
mad r0.xyz, r1, c18.w, -v0
dp3 r2.y, r0, r3
dp3 r2.x, r0, v2
dp3 r2.z, v1, r0
dp3 r1.x, r2, r2
rsq r2.w, r1.x
mov r1, c8
mov r0, c10
dp4 r4.z, c17, r0
mov r0, c9
dp4 r4.y, c17, r0
dp4 r4.x, c17, r1
mad r0.xyz, r4, c18.w, -v0
dp3 r1.y, r3, r0
dp3 r1.x, v2, r0
dp3 r1.z, v1, r0
mov r0.xyz, v1
mov r0.w, c19.y
mul o2.xyz, r2.w, r2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r1.w, r1, r1
rsq r0.y, r1.w
mul o5.xyz, r0.y, r1
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 o6.w, r0, c15
dp4 o6.z, r0, c14
dp4 o6.y, r0, c13
dp4 o6.x, r0, c12
add r0.xyz, -r0, c16
dp3 r0.x, r0, r0
dp4 r0.w, v0, v0
rsq r0.y, r0.w
rsq r0.x, r0.x
mul r1.xyz, r0.y, v0
rcp o1.x, r0.x
mov o3.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 54 math
Keywords { "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 304
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
Vector 320 [unity_Scale]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedeidamglglkcjcoeegfgfgangpjhegeadabaaaaaafeajaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcoaahaaaaeaaaabaapiabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaad
occabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
adaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaacgbjbaaaabaaaaaajgbebaaaacaaaaaa
dcaaaaakhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaaegacbaia
ebaaaaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaa
acaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaa
dcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaacaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaajgahbaaaacaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaapgapbaaa
aaaaaaaafgaobaaaacaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaa
egbobaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaa
abaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaa
aaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaa
pgipcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpccabaaaafaaaaaaegiocaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegaobaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 322 math, 6 textures, 12 branches
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  mediump vec3 lightDir_70;
  lightDir_70 = xlv_TEXCOORD5;
  mediump vec3 viewDir_71;
  viewDir_71 = xlv_TEXCOORD1;
  mediump float atten_72;
  atten_72 = ((float(
    (xlv_TEXCOORD6.z > 0.0)
  ) * tmpvar_66.w) * tmpvar_69.w);
  mediump vec4 c_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = normalize(lightDir_70);
  lightDir_70 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = normalize(viewDir_71);
  viewDir_71 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = normalize(normT_4);
  mediump float tmpvar_77;
  tmpvar_77 = dot (tmpvar_76, tmpvar_74);
  highp float tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp (dot (normalize(
    (tmpvar_74 + tmpvar_75)
  ), tmpvar_76), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_77) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_78, _SpecularPower) * _SpecularColor.w)
  )) * (atten_72 * 4.0));
  c_73.xyz = tmpvar_80;
  c_73.w = (tmpvar_77 * (atten_72 * 4.0));
  highp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_82;
  lightDir_82 = tmpvar_81;
  mediump vec3 normal_83;
  normal_83 = xlv_TEXCOORD3;
  mediump float tmpvar_84;
  tmpvar_84 = dot (normal_83, lightDir_82);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_73 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_84)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_84)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_85;
  tmpvar_85 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_85;
  tmpvar_1 = tmpvar_85;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 322 math, 6 textures, 12 branches
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  mediump vec3 lightDir_70;
  lightDir_70 = xlv_TEXCOORD5;
  mediump vec3 viewDir_71;
  viewDir_71 = xlv_TEXCOORD1;
  mediump float atten_72;
  atten_72 = ((float(
    (xlv_TEXCOORD6.z > 0.0)
  ) * tmpvar_66.w) * tmpvar_69.w);
  mediump vec4 c_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = normalize(lightDir_70);
  lightDir_70 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = normalize(viewDir_71);
  viewDir_71 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = normalize(normT_4);
  mediump float tmpvar_77;
  tmpvar_77 = dot (tmpvar_76, tmpvar_74);
  highp float tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp (dot (normalize(
    (tmpvar_74 + tmpvar_75)
  ), tmpvar_76), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_77) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_78, _SpecularPower) * _SpecularColor.w)
  )) * (atten_72 * 4.0));
  c_73.xyz = tmpvar_80;
  c_73.w = (tmpvar_77 * (atten_72 * 4.0));
  highp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_82;
  lightDir_82 = tmpvar_81;
  mediump vec3 normal_83;
  normal_83 = xlv_TEXCOORD3;
  mediump float tmpvar_84;
  tmpvar_84 = dot (normal_83, lightDir_82);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_73 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_84)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_84)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_85;
  tmpvar_85 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_85;
  tmpvar_1 = tmpvar_85;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 322 math, 6 textures, 12 branches
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = textureGrad (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = textureGrad (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureGrad (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_66 = texture (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture (_LightTextureB0, vec2(tmpvar_68));
  mediump vec3 lightDir_70;
  lightDir_70 = xlv_TEXCOORD5;
  mediump vec3 viewDir_71;
  viewDir_71 = xlv_TEXCOORD1;
  mediump float atten_72;
  atten_72 = ((float(
    (xlv_TEXCOORD6.z > 0.0)
  ) * tmpvar_66.w) * tmpvar_69.w);
  mediump vec4 c_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = normalize(lightDir_70);
  lightDir_70 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = normalize(viewDir_71);
  viewDir_71 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = normalize(normT_4);
  mediump float tmpvar_77;
  tmpvar_77 = dot (tmpvar_76, tmpvar_74);
  highp float tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp (dot (normalize(
    (tmpvar_74 + tmpvar_75)
  ), tmpvar_76), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_77) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_78, _SpecularPower) * _SpecularColor.w)
  )) * (atten_72 * 4.0));
  c_73.xyz = tmpvar_80;
  c_73.w = (tmpvar_77 * (atten_72 * 4.0));
  highp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_82;
  lightDir_82 = tmpvar_81;
  mediump vec3 normal_83;
  normal_83 = xlv_TEXCOORD3;
  mediump float tmpvar_84;
  tmpvar_84 = dot (normal_83, lightDir_82);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_73 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_84)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_84)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_85;
  tmpvar_85 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_85;
  tmpvar_1 = tmpvar_85;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "SPOT" "SHADOWS_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "tangent" ATTR2
ConstBuffer "$Globals" 304
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Matrix 240 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 224 [unity_Scale]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesTANGENT [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float4 unity_Scale;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = normalize(_mtl_i._glesNormal);
  float4 tmpvar_2;
  tmpvar_2.xyz = normalize(_mtl_i._glesTANGENT.xyz);
  tmpvar_2.w = _mtl_i._glesTANGENT.w;
  float3 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  tmpvar_3 = (cse_4.xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * tmpvar_9).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_5).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * _mtl_u._WorldSpaceLightPos0).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_4);
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 321 math, 6 textures, 12 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 unity_Scale;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  tmpvar_1 = (cse_2.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_6 * (
    ((_World2Object * tmpvar_7).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_2).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 color_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  vec2 uv_5;
  float tmpvar_6;
  if ((abs(tmpvar_4.z) > (1e-08 * abs(tmpvar_4.x)))) {
    float tmpvar_7;
    tmpvar_7 = (tmpvar_4.x / tmpvar_4.z);
    tmpvar_6 = (tmpvar_7 * inversesqrt((
      (tmpvar_7 * tmpvar_7)
     + 1.0)));
    tmpvar_6 = (sign(tmpvar_6) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_6)))
     * 
      (1.5708 + (abs(tmpvar_6) * (-0.214602 + (
        abs(tmpvar_6)
       * 
        (0.0865667 + (abs(tmpvar_6) * -0.0310296))
      ))))
    )));
    if ((tmpvar_4.z < 0.0)) {
      if ((tmpvar_4.x >= 0.0)) {
        tmpvar_6 += 3.14159;
      } else {
        tmpvar_6 = (tmpvar_6 - 3.14159);
      };
    };
  } else {
    tmpvar_6 = (sign(tmpvar_4.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * tmpvar_6));
  uv_5.y = (0.31831 * (1.5708 - (
    sign(tmpvar_4.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_4.y)
    )) * (1.5708 + (
      abs(tmpvar_4.y)
     * 
      (-0.214602 + (abs(tmpvar_4.y) * (0.0865667 + (
        abs(tmpvar_4.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_4.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_4.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_5.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_5.y);
  vec3 normal_11;
  normal_11.xy = ((texture2DGradARB (_BumpMap, uv_5, tmpvar_10.xy, tmpvar_10.zw).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (
    dot (normal_11.xy, normal_11.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float tmpvar_15;
    tmpvar_15 = (tmpvar_12.x / tmpvar_12.z);
    tmpvar_14 = (tmpvar_15 * inversesqrt((
      (tmpvar_15 * tmpvar_15)
     + 1.0)));
    tmpvar_14 = (sign(tmpvar_14) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_14)))
     * 
      (1.5708 + (abs(tmpvar_14) * (-0.214602 + (
        abs(tmpvar_14)
       * 
        (0.0865667 + (abs(tmpvar_14) * -0.0310296))
      ))))
    )));
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.14159;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.14159);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * tmpvar_14));
  uv_13.y = (0.31831 * (1.5708 - (
    sign(tmpvar_12.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.5708 + (
      abs(tmpvar_12.y)
     * 
      (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (
        abs(tmpvar_12.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_13.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_13.y);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_CityOverlayTex, uv_13, tmpvar_18.xy, tmpvar_18.zw);
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2);
  vec2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_28.yxz, mix (tmpvar_28, tmpvar_28.zxy, vec3(tmpvar_29)), vec3(float((
    mix (tmpvar_28.x, tmpvar_28.z, tmpvar_29)
   >= tmpvar_28.y))));
  vec4 tmpvar_31;
  tmpvar_31 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_30.zy) / abs(tmpvar_30.x)) * _CityOverlayDetailScale), tmpvar_27.xy, tmpvar_27.zw);
  citydarkoverlaydetail_2 = tmpvar_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec2 uv_33;
  float tmpvar_34;
  if ((abs(tmpvar_32.z) > (1e-08 * abs(tmpvar_32.x)))) {
    float tmpvar_35;
    tmpvar_35 = (tmpvar_32.x / tmpvar_32.z);
    tmpvar_34 = (tmpvar_35 * inversesqrt((
      (tmpvar_35 * tmpvar_35)
     + 1.0)));
    tmpvar_34 = (sign(tmpvar_34) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_34)))
     * 
      (1.5708 + (abs(tmpvar_34) * (-0.214602 + (
        abs(tmpvar_34)
       * 
        (0.0865667 + (abs(tmpvar_34) * -0.0310296))
      ))))
    )));
    if ((tmpvar_32.z < 0.0)) {
      if ((tmpvar_32.x >= 0.0)) {
        tmpvar_34 += 3.14159;
      } else {
        tmpvar_34 = (tmpvar_34 - 3.14159);
      };
    };
  } else {
    tmpvar_34 = (sign(tmpvar_32.x) * 1.5708);
  };
  uv_33.x = (0.5 + (0.159155 * tmpvar_34));
  uv_33.y = (0.31831 * (1.5708 - (
    sign(tmpvar_32.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_32.y)
    )) * (1.5708 + (
      abs(tmpvar_32.y)
     * 
      (-0.214602 + (abs(tmpvar_32.y) * (0.0865667 + (
        abs(tmpvar_32.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_36;
  tmpvar_36 = ((uv_33 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_37;
  tmpvar_37 = dFdx(tmpvar_32.xz);
  vec2 tmpvar_38;
  tmpvar_38 = dFdy(tmpvar_32.xz);
  vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36.y);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36.y);
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_32);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.yxz, mix (tmpvar_40, tmpvar_40.zxy, vec3(tmpvar_41)), vec3(float((
    mix (tmpvar_40.x, tmpvar_40.z, tmpvar_41)
   >= tmpvar_40.y))));
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_42.zy) / abs(tmpvar_42.x)) * _CityOverlayDetailScale), tmpvar_39.xy, tmpvar_39.zw);
  citylightoverlaydetail_1.xyz = tmpvar_43.xyz;
  citydarkoverlaydetail_2.w = (tmpvar_31.w * tmpvar_19.w);
  citylightoverlaydetail_1.w = (tmpvar_43.w * tmpvar_19.w);
  color_3.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_43.xyz, citylightoverlaydetail_1.www);
  color_3.w = 0.0;
  float atten_44;
  atten_44 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  vec4 c_45;
  vec3 tmpvar_46;
  tmpvar_46 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_47;
  tmpvar_47 = normalize(normal_11);
  float tmpvar_48;
  tmpvar_48 = dot (tmpvar_47, tmpvar_46);
  c_45.xyz = (((
    (color_3.xyz * _LightColor0.xyz)
   * tmpvar_48) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_46 + normalize(xlv_TEXCOORD1)))
    , tmpvar_47), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_44 * 4.0));
  c_45.w = (tmpvar_48 * (atten_44 * 4.0));
  float tmpvar_49;
  tmpvar_49 = dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_45 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_49)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_49)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_50;
  tmpvar_50 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_3 = tmpvar_50;
  gl_FragData[0] = tmpvar_50;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 57 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [unity_Scale]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c19, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r0.xyz, v1.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v2.w
mov r0.w, c19.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
mad r0.xyz, r1, c18.w, -v0
dp3 r2.y, r0, r3
dp3 r2.x, r0, v2
dp3 r2.z, v1, r0
dp3 r1.x, r2, r2
rsq r2.w, r1.x
mov r1, c8
mov r0, c10
dp4 r4.z, c17, r0
mov r0, c9
dp4 r4.y, c17, r0
dp4 r4.x, c17, r1
mad r0.xyz, r4, c18.w, -v0
dp3 r1.y, r3, r0
dp3 r1.x, v2, r0
dp3 r1.z, v1, r0
mov r0.xyz, v1
mov r0.w, c19.y
mul o2.xyz, r2.w, r2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r1.w, r1, r1
rsq r0.y, r1.w
mul o5.xyz, r0.y, r1
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 o6.z, r0, c14
dp4 o6.y, r0, c13
dp4 o6.x, r0, c12
add r0.xyz, -r0, c16
dp3 r0.x, r0, r0
dp4 r0.w, v0, v0
rsq r0.y, r0.w
rsq r0.x, r0.x
mul r1.xyz, r0.y, v0
rcp o1.x, r0.x
mov o3.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 54 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 304
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
Vector 320 [unity_Scale]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedbmcponbgljbjfgiicmgmdhaikkdjkccjabaaaaaafeajaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcoaahaaaaeaaaabaapiabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaad
occabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
adaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaacgbjbaaaabaaaaaajgbebaaaacaaaaaa
dcaaaaakhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaaegacbaia
ebaaaaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaa
acaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaa
dcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaacaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaajgahbaaaacaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaapgapbaaa
aaaaaaaafgaobaaaacaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaa
egbobaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaa
abaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaa
aaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaa
pgipcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaa
baaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhccabaaaafaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 317 math, 6 textures, 12 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2D (_LightTextureB0, vec2(tmpvar_66));
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  mediump vec3 lightDir_69;
  lightDir_69 = xlv_TEXCOORD5;
  mediump vec3 viewDir_70;
  viewDir_70 = xlv_TEXCOORD1;
  mediump float atten_71;
  atten_71 = (tmpvar_67.w * tmpvar_68.w);
  mediump vec4 c_72;
  mediump vec3 tmpvar_73;
  tmpvar_73 = normalize(lightDir_69);
  lightDir_69 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = normalize(viewDir_70);
  viewDir_70 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = normalize(normT_4);
  mediump float tmpvar_76;
  tmpvar_76 = dot (tmpvar_75, tmpvar_73);
  highp float tmpvar_77;
  mediump float tmpvar_78;
  tmpvar_78 = clamp (dot (normalize(
    (tmpvar_73 + tmpvar_74)
  ), tmpvar_75), 0.0, 1.0);
  tmpvar_77 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_76) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_77, _SpecularPower) * _SpecularColor.w)
  )) * (atten_71 * 4.0));
  c_72.xyz = tmpvar_79;
  c_72.w = (tmpvar_76 * (atten_71 * 4.0));
  highp vec3 tmpvar_80;
  tmpvar_80 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_81;
  lightDir_81 = tmpvar_80;
  mediump vec3 normal_82;
  normal_82 = xlv_TEXCOORD3;
  mediump float tmpvar_83;
  tmpvar_83 = dot (normal_82, lightDir_81);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_72 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_83)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_83)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_84;
  tmpvar_84 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_84;
  tmpvar_1 = tmpvar_84;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 317 math, 6 textures, 12 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2D (_LightTextureB0, vec2(tmpvar_66));
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  mediump vec3 lightDir_69;
  lightDir_69 = xlv_TEXCOORD5;
  mediump vec3 viewDir_70;
  viewDir_70 = xlv_TEXCOORD1;
  mediump float atten_71;
  atten_71 = (tmpvar_67.w * tmpvar_68.w);
  mediump vec4 c_72;
  mediump vec3 tmpvar_73;
  tmpvar_73 = normalize(lightDir_69);
  lightDir_69 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = normalize(viewDir_70);
  viewDir_70 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = normalize(normT_4);
  mediump float tmpvar_76;
  tmpvar_76 = dot (tmpvar_75, tmpvar_73);
  highp float tmpvar_77;
  mediump float tmpvar_78;
  tmpvar_78 = clamp (dot (normalize(
    (tmpvar_73 + tmpvar_74)
  ), tmpvar_75), 0.0, 1.0);
  tmpvar_77 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_76) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_77, _SpecularPower) * _SpecularColor.w)
  )) * (atten_71 * 4.0));
  c_72.xyz = tmpvar_79;
  c_72.w = (tmpvar_76 * (atten_71 * 4.0));
  highp vec3 tmpvar_80;
  tmpvar_80 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_81;
  lightDir_81 = tmpvar_80;
  mediump vec3 normal_82;
  normal_82 = xlv_TEXCOORD3;
  mediump float tmpvar_83;
  tmpvar_83 = dot (normal_82, lightDir_81);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_72 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_83)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_83)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_84;
  tmpvar_84 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_84;
  tmpvar_1 = tmpvar_84;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 317 math, 6 textures, 12 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = textureGrad (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = textureGrad (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureGrad (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture (_LightTextureB0, vec2(tmpvar_66));
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture (_LightTexture0, xlv_TEXCOORD6);
  mediump vec3 lightDir_69;
  lightDir_69 = xlv_TEXCOORD5;
  mediump vec3 viewDir_70;
  viewDir_70 = xlv_TEXCOORD1;
  mediump float atten_71;
  atten_71 = (tmpvar_67.w * tmpvar_68.w);
  mediump vec4 c_72;
  mediump vec3 tmpvar_73;
  tmpvar_73 = normalize(lightDir_69);
  lightDir_69 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = normalize(viewDir_70);
  viewDir_70 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = normalize(normT_4);
  mediump float tmpvar_76;
  tmpvar_76 = dot (tmpvar_75, tmpvar_73);
  highp float tmpvar_77;
  mediump float tmpvar_78;
  tmpvar_78 = clamp (dot (normalize(
    (tmpvar_73 + tmpvar_74)
  ), tmpvar_75), 0.0, 1.0);
  tmpvar_77 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_76) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_77, _SpecularPower) * _SpecularColor.w)
  )) * (atten_71 * 4.0));
  c_72.xyz = tmpvar_79;
  c_72.w = (tmpvar_76 * (atten_71 * 4.0));
  highp vec3 tmpvar_80;
  tmpvar_80 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_81;
  lightDir_81 = tmpvar_80;
  mediump vec3 normal_82;
  normal_82 = xlv_TEXCOORD3;
  mediump float tmpvar_83;
  tmpvar_83 = dot (normal_82, lightDir_81);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_72 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_83)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_83)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_84;
  tmpvar_84 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_84;
  tmpvar_1 = tmpvar_84;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 28 math
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "tangent" ATTR2
ConstBuffer "$Globals" 304
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Matrix 240 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 224 [unity_Scale]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesTANGENT [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float4 unity_Scale;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = normalize(_mtl_i._glesNormal);
  float4 tmpvar_2;
  tmpvar_2.xyz = normalize(_mtl_i._glesTANGENT.xyz);
  tmpvar_2.w = _mtl_i._glesTANGENT.w;
  float3 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  tmpvar_3 = (cse_4.xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * tmpvar_9).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_5).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * _mtl_u._WorldSpaceLightPos0).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_4).xyz;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 319 math, 5 textures, 12 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 unity_Scale;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD6;
void main ()
{
  vec3 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  tmpvar_1 = (cse_2.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_6 * (
    ((_World2Object * tmpvar_7).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_2).xy;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 color_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  vec2 uv_5;
  float tmpvar_6;
  if ((abs(tmpvar_4.z) > (1e-08 * abs(tmpvar_4.x)))) {
    float tmpvar_7;
    tmpvar_7 = (tmpvar_4.x / tmpvar_4.z);
    tmpvar_6 = (tmpvar_7 * inversesqrt((
      (tmpvar_7 * tmpvar_7)
     + 1.0)));
    tmpvar_6 = (sign(tmpvar_6) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_6)))
     * 
      (1.5708 + (abs(tmpvar_6) * (-0.214602 + (
        abs(tmpvar_6)
       * 
        (0.0865667 + (abs(tmpvar_6) * -0.0310296))
      ))))
    )));
    if ((tmpvar_4.z < 0.0)) {
      if ((tmpvar_4.x >= 0.0)) {
        tmpvar_6 += 3.14159;
      } else {
        tmpvar_6 = (tmpvar_6 - 3.14159);
      };
    };
  } else {
    tmpvar_6 = (sign(tmpvar_4.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * tmpvar_6));
  uv_5.y = (0.31831 * (1.5708 - (
    sign(tmpvar_4.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_4.y)
    )) * (1.5708 + (
      abs(tmpvar_4.y)
     * 
      (-0.214602 + (abs(tmpvar_4.y) * (0.0865667 + (
        abs(tmpvar_4.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_4.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_4.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_5.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_5.y);
  vec3 normal_11;
  normal_11.xy = ((texture2DGradARB (_BumpMap, uv_5, tmpvar_10.xy, tmpvar_10.zw).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (
    dot (normal_11.xy, normal_11.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float tmpvar_15;
    tmpvar_15 = (tmpvar_12.x / tmpvar_12.z);
    tmpvar_14 = (tmpvar_15 * inversesqrt((
      (tmpvar_15 * tmpvar_15)
     + 1.0)));
    tmpvar_14 = (sign(tmpvar_14) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_14)))
     * 
      (1.5708 + (abs(tmpvar_14) * (-0.214602 + (
        abs(tmpvar_14)
       * 
        (0.0865667 + (abs(tmpvar_14) * -0.0310296))
      ))))
    )));
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.14159;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.14159);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * tmpvar_14));
  uv_13.y = (0.31831 * (1.5708 - (
    sign(tmpvar_12.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.5708 + (
      abs(tmpvar_12.y)
     * 
      (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (
        abs(tmpvar_12.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_13.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_13.y);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_CityOverlayTex, uv_13, tmpvar_18.xy, tmpvar_18.zw);
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2);
  vec2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_28.yxz, mix (tmpvar_28, tmpvar_28.zxy, vec3(tmpvar_29)), vec3(float((
    mix (tmpvar_28.x, tmpvar_28.z, tmpvar_29)
   >= tmpvar_28.y))));
  vec4 tmpvar_31;
  tmpvar_31 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_30.zy) / abs(tmpvar_30.x)) * _CityOverlayDetailScale), tmpvar_27.xy, tmpvar_27.zw);
  citydarkoverlaydetail_2 = tmpvar_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec2 uv_33;
  float tmpvar_34;
  if ((abs(tmpvar_32.z) > (1e-08 * abs(tmpvar_32.x)))) {
    float tmpvar_35;
    tmpvar_35 = (tmpvar_32.x / tmpvar_32.z);
    tmpvar_34 = (tmpvar_35 * inversesqrt((
      (tmpvar_35 * tmpvar_35)
     + 1.0)));
    tmpvar_34 = (sign(tmpvar_34) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_34)))
     * 
      (1.5708 + (abs(tmpvar_34) * (-0.214602 + (
        abs(tmpvar_34)
       * 
        (0.0865667 + (abs(tmpvar_34) * -0.0310296))
      ))))
    )));
    if ((tmpvar_32.z < 0.0)) {
      if ((tmpvar_32.x >= 0.0)) {
        tmpvar_34 += 3.14159;
      } else {
        tmpvar_34 = (tmpvar_34 - 3.14159);
      };
    };
  } else {
    tmpvar_34 = (sign(tmpvar_32.x) * 1.5708);
  };
  uv_33.x = (0.5 + (0.159155 * tmpvar_34));
  uv_33.y = (0.31831 * (1.5708 - (
    sign(tmpvar_32.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_32.y)
    )) * (1.5708 + (
      abs(tmpvar_32.y)
     * 
      (-0.214602 + (abs(tmpvar_32.y) * (0.0865667 + (
        abs(tmpvar_32.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_36;
  tmpvar_36 = ((uv_33 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_37;
  tmpvar_37 = dFdx(tmpvar_32.xz);
  vec2 tmpvar_38;
  tmpvar_38 = dFdy(tmpvar_32.xz);
  vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36.y);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36.y);
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_32);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.yxz, mix (tmpvar_40, tmpvar_40.zxy, vec3(tmpvar_41)), vec3(float((
    mix (tmpvar_40.x, tmpvar_40.z, tmpvar_41)
   >= tmpvar_40.y))));
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_42.zy) / abs(tmpvar_42.x)) * _CityOverlayDetailScale), tmpvar_39.xy, tmpvar_39.zw);
  citylightoverlaydetail_1.xyz = tmpvar_43.xyz;
  citydarkoverlaydetail_2.w = (tmpvar_31.w * tmpvar_19.w);
  citylightoverlaydetail_1.w = (tmpvar_43.w * tmpvar_19.w);
  color_3.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_43.xyz, citylightoverlaydetail_1.www);
  color_3.w = 0.0;
  float atten_44;
  atten_44 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  vec4 c_45;
  vec3 tmpvar_46;
  tmpvar_46 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_47;
  tmpvar_47 = normalize(normal_11);
  float tmpvar_48;
  tmpvar_48 = dot (tmpvar_47, tmpvar_46);
  c_45.xyz = (((
    (color_3.xyz * _LightColor0.xyz)
   * tmpvar_48) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_46 + normalize(xlv_TEXCOORD1)))
    , tmpvar_47), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_44 * 4.0));
  c_45.w = (tmpvar_48 * (atten_44 * 4.0));
  float tmpvar_49;
  tmpvar_49 = dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_45 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_49)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_49)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_50;
  tmpvar_50 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_3 = tmpvar_50;
  gl_FragData[0] = tmpvar_50;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 55 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [unity_Scale]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c19, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r0.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r0, v2.w
mov r0.w, c19.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
mad r0.xyz, r1, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
rsq r1.w, r0.x
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
mul o2.xyz, r1.w, r1
mov r1, c8
dp4 r3.x, c17, r1
dp4 r3.y, c17, r0
dp3 r0.y, r2, r3
mov r1.xyz, v1
mov r1.w, c19.y
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r0.w, r2, r2
rsq r0.w, r0.w
mul o4.xyz, r0.w, r2
dp3 r0.x, v2, r3
dp3 r0.z, v1, r3
dp3 r2.w, r0, r0
rsq r1.x, r2.w
mul o5.xyz, r1.x, r0
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 o6.y, r0, c13
dp4 o6.x, r0, c12
add r0.xyz, -r0, c16
dp3 r0.x, r0, r0
dp4 r0.w, v0, v0
rsq r0.y, r0.w
rsq r0.x, r0.x
mul r1.xyz, r0.y, v0
rcp o1.x, r0.x
mov o3.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 53 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 304
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
Vector 320 [unity_Scale]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedlofmighkbihjjdlcdgglnhpmocnmninlabaaaaaaciajaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcleahaaaaeaaaabaaonabaaaafjaaaaae
egiocaaaaaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaae
egiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaad
pcbabaaaaaaaaaaafpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaad
occabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaaddccabaaaafaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
adaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaacgbjbaaaabaaaaaajgbebaaaacaaaaaa
dcaaaaakhcaabaaaaaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaaegacbaia
ebaaaaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaa
acaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaa
aaaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaa
dcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaa
egbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaacaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahccaabaaaacaaaaaaegbcbaaaacaaaaaaegacbaaa
abaaaaaabaaaaaahicaabaaaacaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaajgahbaaaacaaaaaajgahbaaaacaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaapgapbaaa
aaaaaaaafgaobaaaacaaaaaabbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaa
egbobaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaa
acaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaa
abaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaabaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaa
aaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabdaaaaaa
pgipcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahccaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaaaaaaaaaaegbcbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaidcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiacaaaaaaaaaaaacaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaa
abaaaaaaagaabaaaaaaaaaaaegaabaaaabaaaaaadcaaaaakdcaabaaaaaaaaaaa
egiacaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaak
dccabaaaafaaaaaaegiacaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaabaaa
aaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 315 math, 5 textures, 12 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xy;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_LightTexture0, xlv_TEXCOORD6);
  mediump vec3 lightDir_67;
  lightDir_67 = xlv_TEXCOORD5;
  mediump vec3 viewDir_68;
  viewDir_68 = xlv_TEXCOORD1;
  mediump float atten_69;
  atten_69 = tmpvar_66.w;
  mediump vec4 c_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(lightDir_67);
  lightDir_67 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = normalize(viewDir_68);
  viewDir_68 = tmpvar_72;
  mediump vec3 tmpvar_73;
  tmpvar_73 = normalize(normT_4);
  mediump float tmpvar_74;
  tmpvar_74 = dot (tmpvar_73, tmpvar_71);
  highp float tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (dot (normalize(
    (tmpvar_71 + tmpvar_72)
  ), tmpvar_73), 0.0, 1.0);
  tmpvar_75 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_74) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_75, _SpecularPower) * _SpecularColor.w)
  )) * (atten_69 * 4.0));
  c_70.xyz = tmpvar_77;
  c_70.w = (tmpvar_74 * (atten_69 * 4.0));
  lowp vec3 tmpvar_78;
  tmpvar_78 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_79;
  lightDir_79 = tmpvar_78;
  mediump vec3 normal_80;
  normal_80 = xlv_TEXCOORD3;
  mediump float tmpvar_81;
  tmpvar_81 = dot (normal_80, lightDir_79);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_70 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_81)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_81)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_82;
  tmpvar_82 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_82;
  tmpvar_1 = tmpvar_82;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 315 math, 5 textures, 12 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xy;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_LightTexture0, xlv_TEXCOORD6);
  mediump vec3 lightDir_67;
  lightDir_67 = xlv_TEXCOORD5;
  mediump vec3 viewDir_68;
  viewDir_68 = xlv_TEXCOORD1;
  mediump float atten_69;
  atten_69 = tmpvar_66.w;
  mediump vec4 c_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(lightDir_67);
  lightDir_67 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = normalize(viewDir_68);
  viewDir_68 = tmpvar_72;
  mediump vec3 tmpvar_73;
  tmpvar_73 = normalize(normT_4);
  mediump float tmpvar_74;
  tmpvar_74 = dot (tmpvar_73, tmpvar_71);
  highp float tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (dot (normalize(
    (tmpvar_71 + tmpvar_72)
  ), tmpvar_73), 0.0, 1.0);
  tmpvar_75 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_74) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_75, _SpecularPower) * _SpecularColor.w)
  )) * (atten_69 * 4.0));
  c_70.xyz = tmpvar_77;
  c_70.w = (tmpvar_74 * (atten_69 * 4.0));
  lowp vec3 tmpvar_78;
  tmpvar_78 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_79;
  lightDir_79 = tmpvar_78;
  mediump vec3 normal_80;
  normal_80 = xlv_TEXCOORD3;
  mediump float tmpvar_81;
  tmpvar_81 = dot (normal_80, lightDir_79);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_70 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_81)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_81)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_82;
  tmpvar_82 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_82;
  tmpvar_1 = tmpvar_82;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 315 math, 5 textures, 12 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xy;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = textureGrad (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = textureGrad (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureGrad (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture (_LightTexture0, xlv_TEXCOORD6);
  mediump vec3 lightDir_67;
  lightDir_67 = xlv_TEXCOORD5;
  mediump vec3 viewDir_68;
  viewDir_68 = xlv_TEXCOORD1;
  mediump float atten_69;
  atten_69 = tmpvar_66.w;
  mediump vec4 c_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = normalize(lightDir_67);
  lightDir_67 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = normalize(viewDir_68);
  viewDir_68 = tmpvar_72;
  mediump vec3 tmpvar_73;
  tmpvar_73 = normalize(normT_4);
  mediump float tmpvar_74;
  tmpvar_74 = dot (tmpvar_73, tmpvar_71);
  highp float tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp (dot (normalize(
    (tmpvar_71 + tmpvar_72)
  ), tmpvar_73), 0.0, 1.0);
  tmpvar_75 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_74) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_75, _SpecularPower) * _SpecularColor.w)
  )) * (atten_69 * 4.0));
  c_70.xyz = tmpvar_77;
  c_70.w = (tmpvar_74 * (atten_69 * 4.0));
  lowp vec3 tmpvar_78;
  tmpvar_78 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_79;
  lightDir_79 = tmpvar_78;
  mediump vec3 normal_80;
  normal_80 = xlv_TEXCOORD3;
  mediump float tmpvar_81;
  tmpvar_81 = dot (normal_80, lightDir_79);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_70 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_81)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_81)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_82;
  tmpvar_82 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_82;
  tmpvar_1 = tmpvar_82;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 26 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "tangent" ATTR2
ConstBuffer "$Globals" 304
Matrix 32 [glstate_matrix_mvp]
Matrix 96 [_Object2World]
Matrix 160 [_World2Object]
Matrix 240 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 224 [unity_Scale]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesTANGENT [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float2 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float4 unity_Scale;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = normalize(_mtl_i._glesNormal);
  float4 tmpvar_2;
  tmpvar_2.xyz = normalize(_mtl_i._glesTANGENT.xyz);
  tmpvar_2.w = _mtl_i._glesTANGENT.w;
  float3 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  tmpvar_3 = (cse_4.xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * tmpvar_9).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_5).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * (float4)_mtl_u._WorldSpaceLightPos0).xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_4).xy;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 330 math, 7 textures, 13 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 unity_Scale;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
void main ()
{
  vec3 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  tmpvar_1 = (cse_2.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_6 * (
    ((_World2Object * tmpvar_7).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_2);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_2);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 color_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  vec2 uv_5;
  float tmpvar_6;
  if ((abs(tmpvar_4.z) > (1e-08 * abs(tmpvar_4.x)))) {
    float tmpvar_7;
    tmpvar_7 = (tmpvar_4.x / tmpvar_4.z);
    tmpvar_6 = (tmpvar_7 * inversesqrt((
      (tmpvar_7 * tmpvar_7)
     + 1.0)));
    tmpvar_6 = (sign(tmpvar_6) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_6)))
     * 
      (1.5708 + (abs(tmpvar_6) * (-0.214602 + (
        abs(tmpvar_6)
       * 
        (0.0865667 + (abs(tmpvar_6) * -0.0310296))
      ))))
    )));
    if ((tmpvar_4.z < 0.0)) {
      if ((tmpvar_4.x >= 0.0)) {
        tmpvar_6 += 3.14159;
      } else {
        tmpvar_6 = (tmpvar_6 - 3.14159);
      };
    };
  } else {
    tmpvar_6 = (sign(tmpvar_4.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * tmpvar_6));
  uv_5.y = (0.31831 * (1.5708 - (
    sign(tmpvar_4.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_4.y)
    )) * (1.5708 + (
      abs(tmpvar_4.y)
     * 
      (-0.214602 + (abs(tmpvar_4.y) * (0.0865667 + (
        abs(tmpvar_4.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_4.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_4.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_5.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_5.y);
  vec3 normal_11;
  normal_11.xy = ((texture2DGradARB (_BumpMap, uv_5, tmpvar_10.xy, tmpvar_10.zw).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (
    dot (normal_11.xy, normal_11.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float tmpvar_15;
    tmpvar_15 = (tmpvar_12.x / tmpvar_12.z);
    tmpvar_14 = (tmpvar_15 * inversesqrt((
      (tmpvar_15 * tmpvar_15)
     + 1.0)));
    tmpvar_14 = (sign(tmpvar_14) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_14)))
     * 
      (1.5708 + (abs(tmpvar_14) * (-0.214602 + (
        abs(tmpvar_14)
       * 
        (0.0865667 + (abs(tmpvar_14) * -0.0310296))
      ))))
    )));
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.14159;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.14159);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * tmpvar_14));
  uv_13.y = (0.31831 * (1.5708 - (
    sign(tmpvar_12.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.5708 + (
      abs(tmpvar_12.y)
     * 
      (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (
        abs(tmpvar_12.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_13.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_13.y);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_CityOverlayTex, uv_13, tmpvar_18.xy, tmpvar_18.zw);
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2);
  vec2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_28.yxz, mix (tmpvar_28, tmpvar_28.zxy, vec3(tmpvar_29)), vec3(float((
    mix (tmpvar_28.x, tmpvar_28.z, tmpvar_29)
   >= tmpvar_28.y))));
  vec4 tmpvar_31;
  tmpvar_31 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_30.zy) / abs(tmpvar_30.x)) * _CityOverlayDetailScale), tmpvar_27.xy, tmpvar_27.zw);
  citydarkoverlaydetail_2 = tmpvar_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec2 uv_33;
  float tmpvar_34;
  if ((abs(tmpvar_32.z) > (1e-08 * abs(tmpvar_32.x)))) {
    float tmpvar_35;
    tmpvar_35 = (tmpvar_32.x / tmpvar_32.z);
    tmpvar_34 = (tmpvar_35 * inversesqrt((
      (tmpvar_35 * tmpvar_35)
     + 1.0)));
    tmpvar_34 = (sign(tmpvar_34) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_34)))
     * 
      (1.5708 + (abs(tmpvar_34) * (-0.214602 + (
        abs(tmpvar_34)
       * 
        (0.0865667 + (abs(tmpvar_34) * -0.0310296))
      ))))
    )));
    if ((tmpvar_32.z < 0.0)) {
      if ((tmpvar_32.x >= 0.0)) {
        tmpvar_34 += 3.14159;
      } else {
        tmpvar_34 = (tmpvar_34 - 3.14159);
      };
    };
  } else {
    tmpvar_34 = (sign(tmpvar_32.x) * 1.5708);
  };
  uv_33.x = (0.5 + (0.159155 * tmpvar_34));
  uv_33.y = (0.31831 * (1.5708 - (
    sign(tmpvar_32.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_32.y)
    )) * (1.5708 + (
      abs(tmpvar_32.y)
     * 
      (-0.214602 + (abs(tmpvar_32.y) * (0.0865667 + (
        abs(tmpvar_32.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_36;
  tmpvar_36 = ((uv_33 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_37;
  tmpvar_37 = dFdx(tmpvar_32.xz);
  vec2 tmpvar_38;
  tmpvar_38 = dFdy(tmpvar_32.xz);
  vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36.y);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36.y);
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_32);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.yxz, mix (tmpvar_40, tmpvar_40.zxy, vec3(tmpvar_41)), vec3(float((
    mix (tmpvar_40.x, tmpvar_40.z, tmpvar_41)
   >= tmpvar_40.y))));
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_42.zy) / abs(tmpvar_42.x)) * _CityOverlayDetailScale), tmpvar_39.xy, tmpvar_39.zw);
  citylightoverlaydetail_1.xyz = tmpvar_43.xyz;
  citydarkoverlaydetail_2.w = (tmpvar_31.w * tmpvar_19.w);
  citylightoverlaydetail_1.w = (tmpvar_43.w * tmpvar_19.w);
  color_3.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_43.xyz, citylightoverlaydetail_1.www);
  color_3.w = 0.0;
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 tmpvar_46;
  tmpvar_46 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  float tmpvar_47;
  if ((tmpvar_46.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_47 = _LightShadowData.x;
  } else {
    tmpvar_47 = 1.0;
  };
  float atten_48;
  atten_48 = (((
    float((xlv_TEXCOORD6.z > 0.0))
   * tmpvar_44.w) * tmpvar_45.w) * tmpvar_47);
  vec4 c_49;
  vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_51;
  tmpvar_51 = normalize(normal_11);
  float tmpvar_52;
  tmpvar_52 = dot (tmpvar_51, tmpvar_50);
  c_49.xyz = (((
    (color_3.xyz * _LightColor0.xyz)
   * tmpvar_52) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_50 + normalize(xlv_TEXCOORD1)))
    , tmpvar_51), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_48 * 4.0));
  c_49.w = (tmpvar_52 * (atten_48 * 4.0));
  float tmpvar_53;
  tmpvar_53 = dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_49 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_53)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_53)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_54;
  tmpvar_54 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_3 = tmpvar_54;
  gl_FragData[0] = tmpvar_54;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 62 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Matrix 16 [_LightMatrix0]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Vector 22 [unity_Scale]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c23, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r0.xyz, v1.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v2.w
mov r0.w, c23.x
mov r0.xyz, c20
dp4 r1.z, r0, c14
dp4 r1.x, r0, c12
dp4 r1.y, r0, c13
mad r0.xyz, r1, c22.w, -v0
dp3 r2.y, r0, r3
dp3 r2.x, r0, v2
dp3 r2.z, v1, r0
dp3 r1.x, r2, r2
rsq r2.w, r1.x
mov r1, c12
mov r0, c14
dp4 r4.z, c21, r0
mov r0, c13
dp4 r4.y, c21, r0
dp4 r4.x, c21, r1
mad r0.xyz, r4, c22.w, -v0
dp3 r1.y, r3, r0
dp3 r1.x, v2, r0
dp3 r1.z, v1, r0
mov r0.xyz, v1
mov r0.w, c23.y
mul o2.xyz, r2.w, r2
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
dp3 r1.w, r1, r1
rsq r0.y, r1.w
mul o5.xyz, r0.y, r1
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o6.w, r0, c19
dp4 o6.z, r0, c18
dp4 o6.y, r0, c17
dp4 o6.x, r0, c16
dp4 o7.w, r0, c7
dp4 o7.z, r0, c6
dp4 o7.y, r0, c5
dp4 o7.x, r0, c4
add r0.xyz, -r0, c20
dp3 r0.x, r0, r0
dp4 r0.w, v0, v0
rsq r0.y, r0.w
rsq r0.x, r0.x
mul r1.xyz, r0.y, v0
rcp o1.x, r0.x
mov o3.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "gles " {
// Stats: 326 math, 7 textures, 13 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  lowp float tmpvar_70;
  mediump float shadow_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_73;
  if ((tmpvar_72.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_73 = _LightShadowData.x;
  } else {
    tmpvar_73 = 1.0;
  };
  shadow_71 = tmpvar_73;
  tmpvar_70 = shadow_71;
  mediump vec3 lightDir_74;
  lightDir_74 = xlv_TEXCOORD5;
  mediump vec3 viewDir_75;
  viewDir_75 = xlv_TEXCOORD1;
  mediump float atten_76;
  atten_76 = (((
    float((xlv_TEXCOORD6.z > 0.0))
   * tmpvar_66.w) * tmpvar_69.w) * tmpvar_70);
  mediump vec4 c_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(lightDir_74);
  lightDir_74 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(viewDir_75);
  viewDir_75 = tmpvar_79;
  mediump vec3 tmpvar_80;
  tmpvar_80 = normalize(normT_4);
  mediump float tmpvar_81;
  tmpvar_81 = dot (tmpvar_80, tmpvar_78);
  highp float tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalize(
    (tmpvar_78 + tmpvar_79)
  ), tmpvar_80), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_81) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_82, _SpecularPower) * _SpecularColor.w)
  )) * (atten_76 * 4.0));
  c_77.xyz = tmpvar_84;
  c_77.w = (tmpvar_81 * (atten_76 * 4.0));
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_86;
  lightDir_86 = tmpvar_85;
  mediump vec3 normal_87;
  normal_87 = xlv_TEXCOORD3;
  mediump float tmpvar_88;
  tmpvar_88 = dot (normal_87, lightDir_86);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_77 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_88)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_88)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_89;
  tmpvar_89 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_89;
  tmpvar_1 = tmpvar_89;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 326 math, 7 textures, 13 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  lowp float tmpvar_70;
  mediump float shadow_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_73;
  if ((tmpvar_72.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_73 = _LightShadowData.x;
  } else {
    tmpvar_73 = 1.0;
  };
  shadow_71 = tmpvar_73;
  tmpvar_70 = shadow_71;
  mediump vec3 lightDir_74;
  lightDir_74 = xlv_TEXCOORD5;
  mediump vec3 viewDir_75;
  viewDir_75 = xlv_TEXCOORD1;
  mediump float atten_76;
  atten_76 = (((
    float((xlv_TEXCOORD6.z > 0.0))
   * tmpvar_66.w) * tmpvar_69.w) * tmpvar_70);
  mediump vec4 c_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(lightDir_74);
  lightDir_74 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(viewDir_75);
  viewDir_75 = tmpvar_79;
  mediump vec3 tmpvar_80;
  tmpvar_80 = normalize(normT_4);
  mediump float tmpvar_81;
  tmpvar_81 = dot (tmpvar_80, tmpvar_78);
  highp float tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalize(
    (tmpvar_78 + tmpvar_79)
  ), tmpvar_80), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_81) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_82, _SpecularPower) * _SpecularColor.w)
  )) * (atten_76 * 4.0));
  c_77.xyz = tmpvar_84;
  c_77.w = (tmpvar_81 * (atten_76 * 4.0));
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_86;
  lightDir_86 = tmpvar_85;
  mediump vec3 normal_87;
  normal_87 = xlv_TEXCOORD3;
  mediump float tmpvar_88;
  tmpvar_88 = dot (normal_87, lightDir_86);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_77 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_88)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_88)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_89;
  tmpvar_89 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_89;
  tmpvar_1 = tmpvar_89;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 330 math, 7 textures, 12 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 unity_Scale;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
void main ()
{
  vec3 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  tmpvar_1 = (cse_2.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_6 * (
    ((_World2Object * tmpvar_7).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_2);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_2);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightShadowData;
uniform sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 color_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  vec2 uv_5;
  float tmpvar_6;
  if ((abs(tmpvar_4.z) > (1e-08 * abs(tmpvar_4.x)))) {
    float tmpvar_7;
    tmpvar_7 = (tmpvar_4.x / tmpvar_4.z);
    tmpvar_6 = (tmpvar_7 * inversesqrt((
      (tmpvar_7 * tmpvar_7)
     + 1.0)));
    tmpvar_6 = (sign(tmpvar_6) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_6)))
     * 
      (1.5708 + (abs(tmpvar_6) * (-0.214602 + (
        abs(tmpvar_6)
       * 
        (0.0865667 + (abs(tmpvar_6) * -0.0310296))
      ))))
    )));
    if ((tmpvar_4.z < 0.0)) {
      if ((tmpvar_4.x >= 0.0)) {
        tmpvar_6 += 3.14159;
      } else {
        tmpvar_6 = (tmpvar_6 - 3.14159);
      };
    };
  } else {
    tmpvar_6 = (sign(tmpvar_4.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * tmpvar_6));
  uv_5.y = (0.31831 * (1.5708 - (
    sign(tmpvar_4.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_4.y)
    )) * (1.5708 + (
      abs(tmpvar_4.y)
     * 
      (-0.214602 + (abs(tmpvar_4.y) * (0.0865667 + (
        abs(tmpvar_4.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_4.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_4.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_5.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_5.y);
  vec3 normal_11;
  normal_11.xy = ((texture2DGradARB (_BumpMap, uv_5, tmpvar_10.xy, tmpvar_10.zw).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (
    dot (normal_11.xy, normal_11.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float tmpvar_15;
    tmpvar_15 = (tmpvar_12.x / tmpvar_12.z);
    tmpvar_14 = (tmpvar_15 * inversesqrt((
      (tmpvar_15 * tmpvar_15)
     + 1.0)));
    tmpvar_14 = (sign(tmpvar_14) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_14)))
     * 
      (1.5708 + (abs(tmpvar_14) * (-0.214602 + (
        abs(tmpvar_14)
       * 
        (0.0865667 + (abs(tmpvar_14) * -0.0310296))
      ))))
    )));
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.14159;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.14159);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * tmpvar_14));
  uv_13.y = (0.31831 * (1.5708 - (
    sign(tmpvar_12.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.5708 + (
      abs(tmpvar_12.y)
     * 
      (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (
        abs(tmpvar_12.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_13.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_13.y);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_CityOverlayTex, uv_13, tmpvar_18.xy, tmpvar_18.zw);
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2);
  vec2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_28.yxz, mix (tmpvar_28, tmpvar_28.zxy, vec3(tmpvar_29)), vec3(float((
    mix (tmpvar_28.x, tmpvar_28.z, tmpvar_29)
   >= tmpvar_28.y))));
  vec4 tmpvar_31;
  tmpvar_31 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_30.zy) / abs(tmpvar_30.x)) * _CityOverlayDetailScale), tmpvar_27.xy, tmpvar_27.zw);
  citydarkoverlaydetail_2 = tmpvar_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec2 uv_33;
  float tmpvar_34;
  if ((abs(tmpvar_32.z) > (1e-08 * abs(tmpvar_32.x)))) {
    float tmpvar_35;
    tmpvar_35 = (tmpvar_32.x / tmpvar_32.z);
    tmpvar_34 = (tmpvar_35 * inversesqrt((
      (tmpvar_35 * tmpvar_35)
     + 1.0)));
    tmpvar_34 = (sign(tmpvar_34) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_34)))
     * 
      (1.5708 + (abs(tmpvar_34) * (-0.214602 + (
        abs(tmpvar_34)
       * 
        (0.0865667 + (abs(tmpvar_34) * -0.0310296))
      ))))
    )));
    if ((tmpvar_32.z < 0.0)) {
      if ((tmpvar_32.x >= 0.0)) {
        tmpvar_34 += 3.14159;
      } else {
        tmpvar_34 = (tmpvar_34 - 3.14159);
      };
    };
  } else {
    tmpvar_34 = (sign(tmpvar_32.x) * 1.5708);
  };
  uv_33.x = (0.5 + (0.159155 * tmpvar_34));
  uv_33.y = (0.31831 * (1.5708 - (
    sign(tmpvar_32.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_32.y)
    )) * (1.5708 + (
      abs(tmpvar_32.y)
     * 
      (-0.214602 + (abs(tmpvar_32.y) * (0.0865667 + (
        abs(tmpvar_32.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_36;
  tmpvar_36 = ((uv_33 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_37;
  tmpvar_37 = dFdx(tmpvar_32.xz);
  vec2 tmpvar_38;
  tmpvar_38 = dFdy(tmpvar_32.xz);
  vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36.y);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36.y);
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_32);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.yxz, mix (tmpvar_40, tmpvar_40.zxy, vec3(tmpvar_41)), vec3(float((
    mix (tmpvar_40.x, tmpvar_40.z, tmpvar_41)
   >= tmpvar_40.y))));
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_42.zy) / abs(tmpvar_42.x)) * _CityOverlayDetailScale), tmpvar_39.xy, tmpvar_39.zw);
  citylightoverlaydetail_1.xyz = tmpvar_43.xyz;
  citydarkoverlaydetail_2.w = (tmpvar_31.w * tmpvar_19.w);
  citylightoverlaydetail_1.w = (tmpvar_43.w * tmpvar_19.w);
  color_3.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_43.xyz, citylightoverlaydetail_1.www);
  color_3.w = 0.0;
  float atten_44;
  atten_44 = (((
    float((xlv_TEXCOORD6.z > 0.0))
   * texture2D (_LightTexture0, 
    ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)
  ).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x * 
    (1.0 - _LightShadowData.x)
  )));
  vec4 c_45;
  vec3 tmpvar_46;
  tmpvar_46 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_47;
  tmpvar_47 = normalize(normal_11);
  float tmpvar_48;
  tmpvar_48 = dot (tmpvar_47, tmpvar_46);
  c_45.xyz = (((
    (color_3.xyz * _LightColor0.xyz)
   * tmpvar_48) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_46 + normalize(xlv_TEXCOORD1)))
    , tmpvar_47), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_44 * 4.0));
  c_45.w = (tmpvar_48 * (atten_44 * 4.0));
  float tmpvar_49;
  tmpvar_49 = dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_45 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_49)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_49)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_50;
  tmpvar_50 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_3 = tmpvar_50;
  gl_FragData[0] = tmpvar_50;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 62 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Matrix 16 [_LightMatrix0]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Vector 22 [unity_Scale]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c23, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r0.xyz, v1.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v2.w
mov r0.w, c23.x
mov r0.xyz, c20
dp4 r1.z, r0, c14
dp4 r1.x, r0, c12
dp4 r1.y, r0, c13
mad r0.xyz, r1, c22.w, -v0
dp3 r2.y, r0, r3
dp3 r2.x, r0, v2
dp3 r2.z, v1, r0
dp3 r1.x, r2, r2
rsq r2.w, r1.x
mov r1, c12
mov r0, c14
dp4 r4.z, c21, r0
mov r0, c13
dp4 r4.y, c21, r0
dp4 r4.x, c21, r1
mad r0.xyz, r4, c22.w, -v0
dp3 r1.y, r3, r0
dp3 r1.x, v2, r0
dp3 r1.z, v1, r0
mov r0.xyz, v1
mov r0.w, c23.y
mul o2.xyz, r2.w, r2
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
dp3 r1.w, r1, r1
rsq r0.y, r1.w
mul o5.xyz, r0.y, r1
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o6.w, r0, c19
dp4 o6.z, r0, c18
dp4 o6.y, r0, c17
dp4 o6.x, r0, c16
dp4 o7.w, r0, c7
dp4 o7.z, r0, c6
dp4 o7.y, r0, c5
dp4 o7.x, r0, c4
add r0.xyz, -r0, c20
dp3 r0.x, r0, r0
dp4 r0.w, v0, v0
rsq r0.y, r0.w
rsq r0.x, r0.x
mul r1.xyz, r0.y, v0
rcp o1.x, r0.x
mov o3.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 58 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 304
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityShadows" 416
Matrix 128 [unity_World2Shadow0]
Matrix 192 [unity_World2Shadow1]
Matrix 256 [unity_World2Shadow2]
Matrix 320 [unity_World2Shadow3]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
Vector 320 [unity_Scale]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityShadows" 3
BindCB  "UnityPerDraw" 4
"vs_4_0
eefiecedeiapiflnhmocmbijgabmijbihihhiaenabaaaaaacaakaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcjeaiaaaaeaaaabaacfacaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaaabaaaaaafpaaaaad
pcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaa
abaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaa
gfaaaaadpccabaaaagaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaeaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaeaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaaeaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaaeaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaacgbjbaaaabaaaaaajgbebaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
jgbebaaaabaaaaaacgbjbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaa
abaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaaeaaaaaabbaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaaeaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaaeaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaaeaaaaaabdaaaaaadcaaaaalhcaabaaaabaaaaaa
egacbaaaabaaaaaapgipcaaaaeaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaa
baaaaaahecaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
ccaabaaaacaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
acaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
jgahbaaaacaaaaaajgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahoccabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaa
bbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaaaeaaaaaa
anaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaa
abaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaeaaaaaa
aoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaaeaaaaaa
bbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaaeaaaaaabaaaaaaaagiacaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
aeaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaaeaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaa
aeaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaaaaaaaaaaegbcbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
abaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaadaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaafaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaa
ajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
akaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaagaaaaaa
egiocaaaadaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadoaaaaab
"
}
SubProgram "gles " {
// Stats: 326 math, 7 textures, 12 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  lowp float tmpvar_70;
  mediump float shadow_71;
  lowp float tmpvar_72;
  tmpvar_72 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD7);
  mediump float tmpvar_73;
  tmpvar_73 = tmpvar_72;
  highp float tmpvar_74;
  tmpvar_74 = (_LightShadowData.x + (tmpvar_73 * (1.0 - _LightShadowData.x)));
  shadow_71 = tmpvar_74;
  tmpvar_70 = shadow_71;
  mediump vec3 lightDir_75;
  lightDir_75 = xlv_TEXCOORD5;
  mediump vec3 viewDir_76;
  viewDir_76 = xlv_TEXCOORD1;
  mediump float atten_77;
  atten_77 = (((
    float((xlv_TEXCOORD6.z > 0.0))
   * tmpvar_66.w) * tmpvar_69.w) * tmpvar_70);
  mediump vec4 c_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(lightDir_75);
  lightDir_75 = tmpvar_79;
  mediump vec3 tmpvar_80;
  tmpvar_80 = normalize(viewDir_76);
  viewDir_76 = tmpvar_80;
  mediump vec3 tmpvar_81;
  tmpvar_81 = normalize(normT_4);
  mediump float tmpvar_82;
  tmpvar_82 = dot (tmpvar_81, tmpvar_79);
  highp float tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalize(
    (tmpvar_79 + tmpvar_80)
  ), tmpvar_81), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_82) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_83, _SpecularPower) * _SpecularColor.w)
  )) * (atten_77 * 4.0));
  c_78.xyz = tmpvar_85;
  c_78.w = (tmpvar_82 * (atten_77 * 4.0));
  highp vec3 tmpvar_86;
  tmpvar_86 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_87;
  lightDir_87 = tmpvar_86;
  mediump vec3 normal_88;
  normal_88 = xlv_TEXCOORD3;
  mediump float tmpvar_89;
  tmpvar_89 = dot (normal_88, lightDir_87);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_78 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_89)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_89)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_90;
  tmpvar_90 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_90;
  tmpvar_1 = tmpvar_90;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 326 math, 7 textures, 12 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = textureGrad (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = textureGrad (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureGrad (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_66 = texture (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture (_LightTextureB0, vec2(tmpvar_68));
  lowp float tmpvar_70;
  mediump float shadow_71;
  mediump float tmpvar_72;
  tmpvar_72 = textureProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_73;
  tmpvar_73 = (_LightShadowData.x + (tmpvar_72 * (1.0 - _LightShadowData.x)));
  shadow_71 = tmpvar_73;
  tmpvar_70 = shadow_71;
  mediump vec3 lightDir_74;
  lightDir_74 = xlv_TEXCOORD5;
  mediump vec3 viewDir_75;
  viewDir_75 = xlv_TEXCOORD1;
  mediump float atten_76;
  atten_76 = (((
    float((xlv_TEXCOORD6.z > 0.0))
   * tmpvar_66.w) * tmpvar_69.w) * tmpvar_70);
  mediump vec4 c_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(lightDir_74);
  lightDir_74 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(viewDir_75);
  viewDir_75 = tmpvar_79;
  mediump vec3 tmpvar_80;
  tmpvar_80 = normalize(normT_4);
  mediump float tmpvar_81;
  tmpvar_81 = dot (tmpvar_80, tmpvar_78);
  highp float tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalize(
    (tmpvar_78 + tmpvar_79)
  ), tmpvar_80), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_81) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_82, _SpecularPower) * _SpecularColor.w)
  )) * (atten_76 * 4.0));
  c_77.xyz = tmpvar_84;
  c_77.w = (tmpvar_81 * (atten_76 * 4.0));
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_86;
  lightDir_86 = tmpvar_85;
  mediump vec3 normal_87;
  normal_87 = xlv_TEXCOORD3;
  mediump float tmpvar_88;
  tmpvar_88 = dot (normal_87, lightDir_86);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_77 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_88)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_88)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_89;
  tmpvar_89 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_89;
  tmpvar_1 = tmpvar_89;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 29 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "tangent" ATTR2
ConstBuffer "$Globals" 560
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [_Object2World]
Matrix 416 [_World2Object]
Matrix 496 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 480 [unity_Scale]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesTANGENT [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float4 unity_Scale;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = normalize(_mtl_i._glesNormal);
  float4 tmpvar_2;
  tmpvar_2.xyz = normalize(_mtl_i._glesTANGENT.xyz);
  tmpvar_2.w = _mtl_i._glesTANGENT.w;
  float3 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  tmpvar_3 = (cse_4.xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * tmpvar_9).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_5).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * _mtl_u._WorldSpaceLightPos0).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_4);
  _mtl_o.xlv_TEXCOORD7 = (_mtl_u.unity_World2Shadow[0] * cse_4);
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 319 math, 5 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 unity_Scale;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_1 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_6 * (
    ((_World2Object * tmpvar_7).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_8;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D _ShadowMapTexture;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 color_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  vec2 uv_5;
  float tmpvar_6;
  if ((abs(tmpvar_4.z) > (1e-08 * abs(tmpvar_4.x)))) {
    float tmpvar_7;
    tmpvar_7 = (tmpvar_4.x / tmpvar_4.z);
    tmpvar_6 = (tmpvar_7 * inversesqrt((
      (tmpvar_7 * tmpvar_7)
     + 1.0)));
    tmpvar_6 = (sign(tmpvar_6) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_6)))
     * 
      (1.5708 + (abs(tmpvar_6) * (-0.214602 + (
        abs(tmpvar_6)
       * 
        (0.0865667 + (abs(tmpvar_6) * -0.0310296))
      ))))
    )));
    if ((tmpvar_4.z < 0.0)) {
      if ((tmpvar_4.x >= 0.0)) {
        tmpvar_6 += 3.14159;
      } else {
        tmpvar_6 = (tmpvar_6 - 3.14159);
      };
    };
  } else {
    tmpvar_6 = (sign(tmpvar_4.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * tmpvar_6));
  uv_5.y = (0.31831 * (1.5708 - (
    sign(tmpvar_4.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_4.y)
    )) * (1.5708 + (
      abs(tmpvar_4.y)
     * 
      (-0.214602 + (abs(tmpvar_4.y) * (0.0865667 + (
        abs(tmpvar_4.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_4.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_4.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_5.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_5.y);
  vec3 normal_11;
  normal_11.xy = ((texture2DGradARB (_BumpMap, uv_5, tmpvar_10.xy, tmpvar_10.zw).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (
    dot (normal_11.xy, normal_11.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float tmpvar_15;
    tmpvar_15 = (tmpvar_12.x / tmpvar_12.z);
    tmpvar_14 = (tmpvar_15 * inversesqrt((
      (tmpvar_15 * tmpvar_15)
     + 1.0)));
    tmpvar_14 = (sign(tmpvar_14) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_14)))
     * 
      (1.5708 + (abs(tmpvar_14) * (-0.214602 + (
        abs(tmpvar_14)
       * 
        (0.0865667 + (abs(tmpvar_14) * -0.0310296))
      ))))
    )));
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.14159;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.14159);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * tmpvar_14));
  uv_13.y = (0.31831 * (1.5708 - (
    sign(tmpvar_12.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.5708 + (
      abs(tmpvar_12.y)
     * 
      (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (
        abs(tmpvar_12.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_13.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_13.y);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_CityOverlayTex, uv_13, tmpvar_18.xy, tmpvar_18.zw);
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2);
  vec2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_28.yxz, mix (tmpvar_28, tmpvar_28.zxy, vec3(tmpvar_29)), vec3(float((
    mix (tmpvar_28.x, tmpvar_28.z, tmpvar_29)
   >= tmpvar_28.y))));
  vec4 tmpvar_31;
  tmpvar_31 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_30.zy) / abs(tmpvar_30.x)) * _CityOverlayDetailScale), tmpvar_27.xy, tmpvar_27.zw);
  citydarkoverlaydetail_2 = tmpvar_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec2 uv_33;
  float tmpvar_34;
  if ((abs(tmpvar_32.z) > (1e-08 * abs(tmpvar_32.x)))) {
    float tmpvar_35;
    tmpvar_35 = (tmpvar_32.x / tmpvar_32.z);
    tmpvar_34 = (tmpvar_35 * inversesqrt((
      (tmpvar_35 * tmpvar_35)
     + 1.0)));
    tmpvar_34 = (sign(tmpvar_34) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_34)))
     * 
      (1.5708 + (abs(tmpvar_34) * (-0.214602 + (
        abs(tmpvar_34)
       * 
        (0.0865667 + (abs(tmpvar_34) * -0.0310296))
      ))))
    )));
    if ((tmpvar_32.z < 0.0)) {
      if ((tmpvar_32.x >= 0.0)) {
        tmpvar_34 += 3.14159;
      } else {
        tmpvar_34 = (tmpvar_34 - 3.14159);
      };
    };
  } else {
    tmpvar_34 = (sign(tmpvar_32.x) * 1.5708);
  };
  uv_33.x = (0.5 + (0.159155 * tmpvar_34));
  uv_33.y = (0.31831 * (1.5708 - (
    sign(tmpvar_32.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_32.y)
    )) * (1.5708 + (
      abs(tmpvar_32.y)
     * 
      (-0.214602 + (abs(tmpvar_32.y) * (0.0865667 + (
        abs(tmpvar_32.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_36;
  tmpvar_36 = ((uv_33 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_37;
  tmpvar_37 = dFdx(tmpvar_32.xz);
  vec2 tmpvar_38;
  tmpvar_38 = dFdy(tmpvar_32.xz);
  vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36.y);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36.y);
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_32);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.yxz, mix (tmpvar_40, tmpvar_40.zxy, vec3(tmpvar_41)), vec3(float((
    mix (tmpvar_40.x, tmpvar_40.z, tmpvar_41)
   >= tmpvar_40.y))));
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_42.zy) / abs(tmpvar_42.x)) * _CityOverlayDetailScale), tmpvar_39.xy, tmpvar_39.zw);
  citylightoverlaydetail_1.xyz = tmpvar_43.xyz;
  citydarkoverlaydetail_2.w = (tmpvar_31.w * tmpvar_19.w);
  citylightoverlaydetail_1.w = (tmpvar_43.w * tmpvar_19.w);
  color_3.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_43.xyz, citylightoverlaydetail_1.www);
  color_3.w = 0.0;
  vec4 tmpvar_44;
  tmpvar_44 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec4 c_45;
  vec3 tmpvar_46;
  tmpvar_46 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_47;
  tmpvar_47 = normalize(normal_11);
  float tmpvar_48;
  tmpvar_48 = dot (tmpvar_47, tmpvar_46);
  c_45.xyz = (((
    (color_3.xyz * _LightColor0.xyz)
   * tmpvar_48) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_46 + normalize(xlv_TEXCOORD1)))
    , tmpvar_47), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (tmpvar_44.x * 4.0));
  c_45.w = (tmpvar_48 * (tmpvar_44.x * 4.0));
  float tmpvar_49;
  tmpvar_49 = dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_45 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_49)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_49)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_50;
  tmpvar_50 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_3 = tmpvar_50;
  gl_FragData[0] = tmpvar_50;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 57 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Vector 16 [unity_Scale]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c17, 1.00000000, 0.00000000, 0.50000000, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r0.xyz, v1.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v2.w
mov r0.w, c17.x
mov r0.xyz, c12
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
mad r0.xyz, r1, c16.w, -v0
dp3 r2.y, r0, r3
dp3 r2.x, r0, v2
dp3 r2.z, v1, r0
dp3 r1.x, r2, r2
rsq r2.w, r1.x
mov r1, c8
dp4 r4.x, c15, r1
mov r0, c10
dp4 r4.z, c15, r0
mov r0, c9
dp4 r4.y, c15, r0
mul o2.xyz, r2.w, r2
mov r1.xyz, v1
mov r1.w, c17.y
dp3 r0.y, r3, r4
dp3 r0.x, v2, r4
dp3 r0.z, v1, r4
dp3 r0.w, r0, r0
rsq r2.w, r0.w
mul o5.xyz, r2.w, r0
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r0.w, r2, r2
rsq r0.z, r0.w
mul o4.xyz, r0.z, r2
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c17.z
mov o0, r0
mov o6.zw, r0
mul r1.y, r1, c13.x
mad o6.xy, r1.z, c14.zwzw, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c12
dp3 r0.x, r0, r0
dp4 r0.w, v0, v0
rsq r0.y, r0.w
rsq r0.x, r0.x
mul r1.xyz, r0.y, v0
rcp o1.x, r0.x
mov o3.xyz, -r1
"
}
SubProgram "d3d11 " {
// Stats: 48 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
Vector 320 [unity_Scale]
BindCB  "UnityPerCamera" 0
BindCB  "UnityLighting" 1
BindCB  "UnityPerDraw" 2
"vs_4_0
eefiecedjoipjhdcemfehifdfpdbpimkoipnppjeabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaagmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
miaaaaaaahaaaaaaaiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaalmaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaalmaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaalmaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcaaahaaaaeaaaabaamaabaaaafjaaaaae
egiocaaaaaaaaaaaagaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaae
egiocaaaacaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaa
abaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaad
pccabaaaafaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
hcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaaaeaaaaaabaaaaaahbcaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaacgbjbaaaabaaaaaajgbebaaa
acaaaaaadcaaaaakhcaabaaaabaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaa
egacbaiaebaaaaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgbpbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaafgifcaaaaaaaaaaaaeaaaaaa
egiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
baaaaaaaagiacaaaaaaaaaaaaeaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaa
acaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaaaaaaaaaaeaaaaaaegacbaaa
acaaaaaaaaaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaacaaaaaa
bdaaaaaadcaaaaalhcaabaaaacaaaaaaegacbaaaacaaaaaapgipcaaaacaaaaaa
beaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaa
egacbaaaacaaaaaabaaaaaahicaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaa
pgapbaaaabaaaaaafgaobaaaadaaaaaabbaaaaahicaabaaaabaaaaaaegbobaaa
aaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaaegbcbaaaaaaaaaaadgaaaaag
hccabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaadiaaaaaihcaabaaaacaaaaaa
fgbfbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaa
egiccaaaacaaaaaaamaaaaaaagbabaaaabaaaaaaegacbaaaacaaaaaadcaaaaak
hcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaadaaaaaa
pgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaajhcaabaaaacaaaaaafgifcaaa
abaaaaaaaaaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaalhcaabaaaacaaaaaa
egiccaaaacaaaaaabaaaaaaaagiacaaaabaaaaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaabcaaaaaakgikcaaaabaaaaaa
aaaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaacaaaaaa
bdaaaaaapgipcaaaabaaaaaaaaaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaa
abaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaa
egbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaaaaaaaaaafaaaaaadiaaaaakncaabaaa
abaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadp
dgaaaaafmccabaaaafaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 319 math, 5 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp float tmpvar_66;
  mediump float lightShadowDataX_67;
  highp float dist_68;
  lowp float tmpvar_69;
  tmpvar_69 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = _LightShadowData.x;
  lightShadowDataX_67 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = max (float((dist_68 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), lightShadowDataX_67);
  tmpvar_66 = tmpvar_71;
  mediump vec3 lightDir_72;
  lightDir_72 = xlv_TEXCOORD5;
  mediump vec3 viewDir_73;
  viewDir_73 = xlv_TEXCOORD1;
  mediump float atten_74;
  atten_74 = tmpvar_66;
  mediump vec4 c_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = normalize(lightDir_72);
  lightDir_72 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = normalize(viewDir_73);
  viewDir_73 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(normT_4);
  mediump float tmpvar_79;
  tmpvar_79 = dot (tmpvar_78, tmpvar_76);
  highp float tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (dot (normalize(
    (tmpvar_76 + tmpvar_77)
  ), tmpvar_78), 0.0, 1.0);
  tmpvar_80 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_79) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_80, _SpecularPower) * _SpecularColor.w)
  )) * (atten_74 * 4.0));
  c_75.xyz = tmpvar_82;
  c_75.w = (tmpvar_79 * (atten_74 * 4.0));
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_84;
  lightDir_84 = tmpvar_83;
  mediump vec3 normal_85;
  normal_85 = xlv_TEXCOORD3;
  mediump float tmpvar_86;
  tmpvar_86 = dot (normal_85, lightDir_84);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_75 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_86)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_86)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_87;
  tmpvar_1 = tmpvar_87;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 319 math, 5 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp float tmpvar_66;
  mediump float lightShadowDataX_67;
  highp float dist_68;
  lowp float tmpvar_69;
  tmpvar_69 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_68 = tmpvar_69;
  highp float tmpvar_70;
  tmpvar_70 = _LightShadowData.x;
  lightShadowDataX_67 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = max (float((dist_68 > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), lightShadowDataX_67);
  tmpvar_66 = tmpvar_71;
  mediump vec3 lightDir_72;
  lightDir_72 = xlv_TEXCOORD5;
  mediump vec3 viewDir_73;
  viewDir_73 = xlv_TEXCOORD1;
  mediump float atten_74;
  atten_74 = tmpvar_66;
  mediump vec4 c_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = normalize(lightDir_72);
  lightDir_72 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = normalize(viewDir_73);
  viewDir_73 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(normT_4);
  mediump float tmpvar_79;
  tmpvar_79 = dot (tmpvar_78, tmpvar_76);
  highp float tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = clamp (dot (normalize(
    (tmpvar_76 + tmpvar_77)
  ), tmpvar_78), 0.0, 1.0);
  tmpvar_80 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_79) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_80, _SpecularPower) * _SpecularColor.w)
  )) * (atten_74 * 4.0));
  c_75.xyz = tmpvar_82;
  c_75.w = (tmpvar_79 * (atten_74 * 4.0));
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_84;
  lightDir_84 = tmpvar_83;
  mediump vec3 normal_85;
  normal_85 = xlv_TEXCOORD3;
  mediump float tmpvar_86;
  tmpvar_86 = dot (normal_85, lightDir_84);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_75 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_86)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_86)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_87;
  tmpvar_87 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_87;
  tmpvar_1 = tmpvar_87;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 320 math, 6 textures, 12 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _ProjectionParams;
uniform vec4 _WorldSpaceLightPos0;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 unity_Scale;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  vec4 cse_3;
  cse_3 = (_Object2World * gl_Vertex);
  tmpvar_2 = (cse_3.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = gl_Normal;
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_5 = TANGENT.xyz;
  tmpvar_6 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = gl_Normal.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = gl_Normal.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = gl_Normal.z;
  vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = _WorldSpaceCameraPos;
  vec4 o_9;
  vec4 tmpvar_10;
  tmpvar_10 = (tmpvar_1 * 0.5);
  vec2 tmpvar_11;
  tmpvar_11.x = tmpvar_10.x;
  tmpvar_11.y = (tmpvar_10.y * _ProjectionParams.x);
  o_9.xy = (tmpvar_11 + tmpvar_10.w);
  o_9.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_2, tmpvar_2));
  xlv_TEXCOORD1 = normalize((tmpvar_7 * (
    ((_World2Object * tmpvar_8).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_4).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_3).xy;
  xlv_TEXCOORD7 = o_9;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 color_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  vec2 uv_5;
  float tmpvar_6;
  if ((abs(tmpvar_4.z) > (1e-08 * abs(tmpvar_4.x)))) {
    float tmpvar_7;
    tmpvar_7 = (tmpvar_4.x / tmpvar_4.z);
    tmpvar_6 = (tmpvar_7 * inversesqrt((
      (tmpvar_7 * tmpvar_7)
     + 1.0)));
    tmpvar_6 = (sign(tmpvar_6) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_6)))
     * 
      (1.5708 + (abs(tmpvar_6) * (-0.214602 + (
        abs(tmpvar_6)
       * 
        (0.0865667 + (abs(tmpvar_6) * -0.0310296))
      ))))
    )));
    if ((tmpvar_4.z < 0.0)) {
      if ((tmpvar_4.x >= 0.0)) {
        tmpvar_6 += 3.14159;
      } else {
        tmpvar_6 = (tmpvar_6 - 3.14159);
      };
    };
  } else {
    tmpvar_6 = (sign(tmpvar_4.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * tmpvar_6));
  uv_5.y = (0.31831 * (1.5708 - (
    sign(tmpvar_4.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_4.y)
    )) * (1.5708 + (
      abs(tmpvar_4.y)
     * 
      (-0.214602 + (abs(tmpvar_4.y) * (0.0865667 + (
        abs(tmpvar_4.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_4.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_4.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_5.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_5.y);
  vec3 normal_11;
  normal_11.xy = ((texture2DGradARB (_BumpMap, uv_5, tmpvar_10.xy, tmpvar_10.zw).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (
    dot (normal_11.xy, normal_11.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float tmpvar_15;
    tmpvar_15 = (tmpvar_12.x / tmpvar_12.z);
    tmpvar_14 = (tmpvar_15 * inversesqrt((
      (tmpvar_15 * tmpvar_15)
     + 1.0)));
    tmpvar_14 = (sign(tmpvar_14) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_14)))
     * 
      (1.5708 + (abs(tmpvar_14) * (-0.214602 + (
        abs(tmpvar_14)
       * 
        (0.0865667 + (abs(tmpvar_14) * -0.0310296))
      ))))
    )));
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.14159;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.14159);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * tmpvar_14));
  uv_13.y = (0.31831 * (1.5708 - (
    sign(tmpvar_12.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.5708 + (
      abs(tmpvar_12.y)
     * 
      (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (
        abs(tmpvar_12.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_13.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_13.y);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_CityOverlayTex, uv_13, tmpvar_18.xy, tmpvar_18.zw);
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2);
  vec2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_28.yxz, mix (tmpvar_28, tmpvar_28.zxy, vec3(tmpvar_29)), vec3(float((
    mix (tmpvar_28.x, tmpvar_28.z, tmpvar_29)
   >= tmpvar_28.y))));
  vec4 tmpvar_31;
  tmpvar_31 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_30.zy) / abs(tmpvar_30.x)) * _CityOverlayDetailScale), tmpvar_27.xy, tmpvar_27.zw);
  citydarkoverlaydetail_2 = tmpvar_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec2 uv_33;
  float tmpvar_34;
  if ((abs(tmpvar_32.z) > (1e-08 * abs(tmpvar_32.x)))) {
    float tmpvar_35;
    tmpvar_35 = (tmpvar_32.x / tmpvar_32.z);
    tmpvar_34 = (tmpvar_35 * inversesqrt((
      (tmpvar_35 * tmpvar_35)
     + 1.0)));
    tmpvar_34 = (sign(tmpvar_34) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_34)))
     * 
      (1.5708 + (abs(tmpvar_34) * (-0.214602 + (
        abs(tmpvar_34)
       * 
        (0.0865667 + (abs(tmpvar_34) * -0.0310296))
      ))))
    )));
    if ((tmpvar_32.z < 0.0)) {
      if ((tmpvar_32.x >= 0.0)) {
        tmpvar_34 += 3.14159;
      } else {
        tmpvar_34 = (tmpvar_34 - 3.14159);
      };
    };
  } else {
    tmpvar_34 = (sign(tmpvar_32.x) * 1.5708);
  };
  uv_33.x = (0.5 + (0.159155 * tmpvar_34));
  uv_33.y = (0.31831 * (1.5708 - (
    sign(tmpvar_32.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_32.y)
    )) * (1.5708 + (
      abs(tmpvar_32.y)
     * 
      (-0.214602 + (abs(tmpvar_32.y) * (0.0865667 + (
        abs(tmpvar_32.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_36;
  tmpvar_36 = ((uv_33 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_37;
  tmpvar_37 = dFdx(tmpvar_32.xz);
  vec2 tmpvar_38;
  tmpvar_38 = dFdy(tmpvar_32.xz);
  vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36.y);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36.y);
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_32);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.yxz, mix (tmpvar_40, tmpvar_40.zxy, vec3(tmpvar_41)), vec3(float((
    mix (tmpvar_40.x, tmpvar_40.z, tmpvar_41)
   >= tmpvar_40.y))));
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_42.zy) / abs(tmpvar_42.x)) * _CityOverlayDetailScale), tmpvar_39.xy, tmpvar_39.zw);
  citylightoverlaydetail_1.xyz = tmpvar_43.xyz;
  citydarkoverlaydetail_2.w = (tmpvar_31.w * tmpvar_19.w);
  citylightoverlaydetail_1.w = (tmpvar_43.w * tmpvar_19.w);
  color_3.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_43.xyz, citylightoverlaydetail_1.www);
  color_3.w = 0.0;
  float atten_44;
  atten_44 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  vec4 c_45;
  vec3 tmpvar_46;
  tmpvar_46 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_47;
  tmpvar_47 = normalize(normal_11);
  float tmpvar_48;
  tmpvar_48 = dot (tmpvar_47, tmpvar_46);
  c_45.xyz = (((
    (color_3.xyz * _LightColor0.xyz)
   * tmpvar_48) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_46 + normalize(xlv_TEXCOORD1)))
    , tmpvar_47), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_44 * 4.0));
  c_45.w = (tmpvar_48 * (atten_44 * 4.0));
  float tmpvar_49;
  tmpvar_49 = dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_45 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_49)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_49)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_50;
  tmpvar_50 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_3 = tmpvar_50;
  gl_FragData[0] = tmpvar_50;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 60 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_ProjectionParams]
Vector 18 [_ScreenParams]
Vector 19 [_WorldSpaceLightPos0]
Vector 20 [unity_Scale]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c21, 1.00000000, 0.00000000, 0.50000000, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r0.xyz, v1.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v2.w
mov r0.w, c21.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
mad r0.xyz, r1, c20.w, -v0
dp3 r2.y, r0, r3
dp3 r2.x, r0, v2
dp3 r2.z, v1, r0
dp3 r1.x, r2, r2
rsq r2.w, r1.x
mov r1, c8
dp4 r4.x, c19, r1
mov r0, c10
dp4 r4.z, c19, r0
mov r0, c9
dp4 r4.y, c19, r0
mul o2.xyz, r2.w, r2
mov r1.w, c21.y
mov r1.xyz, v1
dp4 r2.z, r1, c6
dp4 r2.x, r1, c4
dp4 r2.y, r1, c5
dp3 r0.y, r3, r4
dp3 r0.x, v2, r4
dp3 r0.z, v1, r4
dp3 r0.w, r0, r0
rsq r2.w, r0.w
mul o5.xyz, r2.w, r0
dp3 r0.w, r2, r2
rsq r0.z, r0.w
mul o4.xyz, r0.z, r2
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c21.z
mul r1.y, r1, c17.x
mad o7.xy, r1.z, c18.zwzw, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov o0, r0
mov o7.zw, r0
add r0.xyz, -r1, c16
dp3 r0.x, r0, r0
dp4 r0.w, v0, v0
rsq r0.x, r0.x
dp4 o6.y, r1, c13
dp4 o6.x, r1, c12
rsq r0.y, r0.w
mul r1.xyz, r0.y, v0
rcp o1.x, r0.x
mov o3.xyz, -r1
"
}
SubProgram "d3d11 " {
// Stats: 56 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 368
Matrix 80 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
Vector 320 [unity_Scale]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefiecedppbbghleaflnfkjecopccpladhpokkhgabaaaaaaniajaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaadamaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcemaiaaaaeaaaabaabdacaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagfaaaaaddccabaaaafaaaaaagfaaaaadpccabaaaagaaaaaagiaaaaac
aeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
hcaabaaaabaaaaaacgbjbaaaabaaaaaajgbebaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaaegacbaiaebaaaaaaabaaaaaa
diaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaacaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaacaaaaaaaaaaaaaihcaabaaa
acaaaaaaegacbaaaacaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
acaaaaaaegacbaaaacaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaa
aaaaaaaabaaaaaahecaabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaacaaaaaa
baaaaaahccaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaacaaaaaabaaaaaah
icaabaaaadaaaaaaegbcbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaa
abaaaaaajgahbaaaadaaaaaajgahbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahoccabaaaabaaaaaapgapbaaaabaaaaaafgaobaaa
adaaaaaabbaaaaahicaabaaaabaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaabaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaia
ebaaaaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgbfbaaaabaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaabaaaaaaegacbaaa
acaaaaaadiaaaaajhcaabaaaacaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaacaaaaaaaaaaaaaaegacbaaaacaaaaaadcaaaaalhcaabaaaacaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaalhcaabaaaacaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaacaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegacbaaa
acaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaaabaaaaaaegacbaaaacaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaidcaabaaaacaaaaaafgafbaaaabaaaaaaegiacaaaaaaaaaaa
agaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaafaaaaaaagaabaaa
abaaaaaaegaabaaaacaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaa
ahaaaaaakgakbaaaabaaaaaaegaabaaaabaaaaaadcaaaaakdccabaaaafaaaaaa
egiacaaaaaaaaaaaaiaaaaaapgapbaaaabaaaaaaegaabaaaabaaaaaadiaaaaai
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaak
ncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadp
aaaaaadpdgaaaaafmccabaaaagaaaaaakgaobaaaaaaaaaaaaaaaaaahdccabaaa
agaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 320 math, 6 textures, 12 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_LightTexture0, xlv_TEXCOORD6);
  lowp float tmpvar_67;
  mediump float lightShadowDataX_68;
  highp float dist_69;
  lowp float tmpvar_70;
  tmpvar_70 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_69 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = _LightShadowData.x;
  lightShadowDataX_68 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = max (float((dist_69 > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), lightShadowDataX_68);
  tmpvar_67 = tmpvar_72;
  mediump vec3 lightDir_73;
  lightDir_73 = xlv_TEXCOORD5;
  mediump vec3 viewDir_74;
  viewDir_74 = xlv_TEXCOORD1;
  mediump float atten_75;
  atten_75 = (tmpvar_66.w * tmpvar_67);
  mediump vec4 c_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = normalize(lightDir_73);
  lightDir_73 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(viewDir_74);
  viewDir_74 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(normT_4);
  mediump float tmpvar_80;
  tmpvar_80 = dot (tmpvar_79, tmpvar_77);
  highp float tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (dot (normalize(
    (tmpvar_77 + tmpvar_78)
  ), tmpvar_79), 0.0, 1.0);
  tmpvar_81 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_80) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_81, _SpecularPower) * _SpecularColor.w)
  )) * (atten_75 * 4.0));
  c_76.xyz = tmpvar_83;
  c_76.w = (tmpvar_80 * (atten_75 * 4.0));
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_85;
  lightDir_85 = tmpvar_84;
  mediump vec3 normal_86;
  normal_86 = xlv_TEXCOORD3;
  mediump float tmpvar_87;
  tmpvar_87 = dot (normal_86, lightDir_85);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_76 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_87)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_87)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_88;
  tmpvar_88 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_88;
  tmpvar_1 = tmpvar_88;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 320 math, 6 textures, 12 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_LightTexture0, xlv_TEXCOORD6);
  lowp float tmpvar_67;
  mediump float lightShadowDataX_68;
  highp float dist_69;
  lowp float tmpvar_70;
  tmpvar_70 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_69 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = _LightShadowData.x;
  lightShadowDataX_68 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = max (float((dist_69 > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), lightShadowDataX_68);
  tmpvar_67 = tmpvar_72;
  mediump vec3 lightDir_73;
  lightDir_73 = xlv_TEXCOORD5;
  mediump vec3 viewDir_74;
  viewDir_74 = xlv_TEXCOORD1;
  mediump float atten_75;
  atten_75 = (tmpvar_66.w * tmpvar_67);
  mediump vec4 c_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = normalize(lightDir_73);
  lightDir_73 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(viewDir_74);
  viewDir_74 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(normT_4);
  mediump float tmpvar_80;
  tmpvar_80 = dot (tmpvar_79, tmpvar_77);
  highp float tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (dot (normalize(
    (tmpvar_77 + tmpvar_78)
  ), tmpvar_79), 0.0, 1.0);
  tmpvar_81 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_80) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_81, _SpecularPower) * _SpecularColor.w)
  )) * (atten_75 * 4.0));
  c_76.xyz = tmpvar_83;
  c_76.w = (tmpvar_80 * (atten_75 * 4.0));
  lowp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_85;
  lightDir_85 = tmpvar_84;
  mediump vec3 normal_86;
  normal_86 = xlv_TEXCOORD3;
  mediump float tmpvar_87;
  tmpvar_87 = dot (normal_86, lightDir_85);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_76 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_87)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_87)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_88;
  tmpvar_88 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_88;
  tmpvar_1 = tmpvar_88;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 328 math, 6 textures, 13 branches
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 unity_Scale;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec3 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  tmpvar_1 = (cse_2.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_6 * (
    ((_World2Object * tmpvar_7).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_2).xyz;
  xlv_TEXCOORD7 = (cse_2.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 color_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  vec2 uv_5;
  float tmpvar_6;
  if ((abs(tmpvar_4.z) > (1e-08 * abs(tmpvar_4.x)))) {
    float tmpvar_7;
    tmpvar_7 = (tmpvar_4.x / tmpvar_4.z);
    tmpvar_6 = (tmpvar_7 * inversesqrt((
      (tmpvar_7 * tmpvar_7)
     + 1.0)));
    tmpvar_6 = (sign(tmpvar_6) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_6)))
     * 
      (1.5708 + (abs(tmpvar_6) * (-0.214602 + (
        abs(tmpvar_6)
       * 
        (0.0865667 + (abs(tmpvar_6) * -0.0310296))
      ))))
    )));
    if ((tmpvar_4.z < 0.0)) {
      if ((tmpvar_4.x >= 0.0)) {
        tmpvar_6 += 3.14159;
      } else {
        tmpvar_6 = (tmpvar_6 - 3.14159);
      };
    };
  } else {
    tmpvar_6 = (sign(tmpvar_4.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * tmpvar_6));
  uv_5.y = (0.31831 * (1.5708 - (
    sign(tmpvar_4.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_4.y)
    )) * (1.5708 + (
      abs(tmpvar_4.y)
     * 
      (-0.214602 + (abs(tmpvar_4.y) * (0.0865667 + (
        abs(tmpvar_4.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_4.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_4.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_5.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_5.y);
  vec3 normal_11;
  normal_11.xy = ((texture2DGradARB (_BumpMap, uv_5, tmpvar_10.xy, tmpvar_10.zw).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (
    dot (normal_11.xy, normal_11.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float tmpvar_15;
    tmpvar_15 = (tmpvar_12.x / tmpvar_12.z);
    tmpvar_14 = (tmpvar_15 * inversesqrt((
      (tmpvar_15 * tmpvar_15)
     + 1.0)));
    tmpvar_14 = (sign(tmpvar_14) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_14)))
     * 
      (1.5708 + (abs(tmpvar_14) * (-0.214602 + (
        abs(tmpvar_14)
       * 
        (0.0865667 + (abs(tmpvar_14) * -0.0310296))
      ))))
    )));
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.14159;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.14159);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * tmpvar_14));
  uv_13.y = (0.31831 * (1.5708 - (
    sign(tmpvar_12.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.5708 + (
      abs(tmpvar_12.y)
     * 
      (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (
        abs(tmpvar_12.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_13.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_13.y);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_CityOverlayTex, uv_13, tmpvar_18.xy, tmpvar_18.zw);
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2);
  vec2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_28.yxz, mix (tmpvar_28, tmpvar_28.zxy, vec3(tmpvar_29)), vec3(float((
    mix (tmpvar_28.x, tmpvar_28.z, tmpvar_29)
   >= tmpvar_28.y))));
  vec4 tmpvar_31;
  tmpvar_31 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_30.zy) / abs(tmpvar_30.x)) * _CityOverlayDetailScale), tmpvar_27.xy, tmpvar_27.zw);
  citydarkoverlaydetail_2 = tmpvar_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec2 uv_33;
  float tmpvar_34;
  if ((abs(tmpvar_32.z) > (1e-08 * abs(tmpvar_32.x)))) {
    float tmpvar_35;
    tmpvar_35 = (tmpvar_32.x / tmpvar_32.z);
    tmpvar_34 = (tmpvar_35 * inversesqrt((
      (tmpvar_35 * tmpvar_35)
     + 1.0)));
    tmpvar_34 = (sign(tmpvar_34) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_34)))
     * 
      (1.5708 + (abs(tmpvar_34) * (-0.214602 + (
        abs(tmpvar_34)
       * 
        (0.0865667 + (abs(tmpvar_34) * -0.0310296))
      ))))
    )));
    if ((tmpvar_32.z < 0.0)) {
      if ((tmpvar_32.x >= 0.0)) {
        tmpvar_34 += 3.14159;
      } else {
        tmpvar_34 = (tmpvar_34 - 3.14159);
      };
    };
  } else {
    tmpvar_34 = (sign(tmpvar_32.x) * 1.5708);
  };
  uv_33.x = (0.5 + (0.159155 * tmpvar_34));
  uv_33.y = (0.31831 * (1.5708 - (
    sign(tmpvar_32.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_32.y)
    )) * (1.5708 + (
      abs(tmpvar_32.y)
     * 
      (-0.214602 + (abs(tmpvar_32.y) * (0.0865667 + (
        abs(tmpvar_32.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_36;
  tmpvar_36 = ((uv_33 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_37;
  tmpvar_37 = dFdx(tmpvar_32.xz);
  vec2 tmpvar_38;
  tmpvar_38 = dFdy(tmpvar_32.xz);
  vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36.y);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36.y);
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_32);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.yxz, mix (tmpvar_40, tmpvar_40.zxy, vec3(tmpvar_41)), vec3(float((
    mix (tmpvar_40.x, tmpvar_40.z, tmpvar_41)
   >= tmpvar_40.y))));
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_42.zy) / abs(tmpvar_42.x)) * _CityOverlayDetailScale), tmpvar_39.xy, tmpvar_39.zw);
  citylightoverlaydetail_1.xyz = tmpvar_43.xyz;
  citydarkoverlaydetail_2.w = (tmpvar_31.w * tmpvar_19.w);
  citylightoverlaydetail_1.w = (tmpvar_43.w * tmpvar_19.w);
  color_3.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_43.xyz, citylightoverlaydetail_1.www);
  color_3.w = 0.0;
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  float tmpvar_45;
  tmpvar_45 = ((sqrt(
    dot (xlv_TEXCOORD7, xlv_TEXCOORD7)
  ) * _LightPositionRange.w) * 0.97);
  float tmpvar_46;
  tmpvar_46 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float tmpvar_47;
  if ((tmpvar_46 < tmpvar_45)) {
    tmpvar_47 = _LightShadowData.x;
  } else {
    tmpvar_47 = 1.0;
  };
  float atten_48;
  atten_48 = (tmpvar_44.w * tmpvar_47);
  vec4 c_49;
  vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_51;
  tmpvar_51 = normalize(normal_11);
  float tmpvar_52;
  tmpvar_52 = dot (tmpvar_51, tmpvar_50);
  c_49.xyz = (((
    (color_3.xyz * _LightColor0.xyz)
   * tmpvar_52) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_50 + normalize(xlv_TEXCOORD1)))
    , tmpvar_51), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_48 * 4.0));
  c_49.w = (tmpvar_52 * (atten_48 * 4.0));
  float tmpvar_53;
  tmpvar_53 = dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_49 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_53)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_53)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_54;
  tmpvar_54 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_3 = tmpvar_54;
  gl_FragData[0] = tmpvar_54;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Vector 19 [unity_Scale]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c20, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r0.xyz, v1.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v2.w
mov r0.w, c20.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
mad r0.xyz, r1, c19.w, -v0
dp3 r2.y, r0, r3
dp3 r2.x, r0, v2
dp3 r2.z, v1, r0
dp3 r1.x, r2, r2
rsq r2.w, r1.x
mov r1, c8
mov r0, c10
dp4 r4.z, c17, r0
mov r0, c9
dp4 r4.y, c17, r0
dp4 r4.x, c17, r1
mad r0.xyz, r4, c19.w, -v0
dp3 r1.y, r3, r0
dp3 r1.x, v2, r0
dp3 r1.z, v1, r0
mov r0.xyz, v1
mov r0.w, c20.y
mul o2.xyz, r2.w, r2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r1.w, r1, r1
rsq r0.y, r1.w
mul o5.xyz, r0.y, r1
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c16
dp4 o6.z, r0, c14
dp4 o6.y, r0, c13
dp4 o6.x, r0, c12
dp3 r0.w, r1, r1
dp4 r1.w, v0, v0
rsq r1.x, r1.w
rsq r0.w, r0.w
mul r1.xyz, r1.x, v0
rcp o1.x, r0.w
mov o3.xyz, -r1
add o7.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 55 math
Keywords { "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 304
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
Vector 320 [unity_Scale]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefieceddockaodmikplkpajocmcbmbmhpcakegbabaaaaaajmajaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcbaaiaaaaeaaaabaaaeacaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
adaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaacgbjbaaaabaaaaaajgbebaaaacaaaaaadcaaaaakhcaabaaa
aaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
abaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaa
aaaaaaaabaaaaaahecaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaacaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaah
icaabaaaacaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaajgahbaaaacaaaaaajgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaa
acaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaagaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafbccabaaaabaaaaaadkaabaaaaaaaaaaabbaaaaahicaabaaaaaaaaaaa
egbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaa
dgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaabaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaabaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
adaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaa
fgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaia
ebaaaaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
baaaaaahecaabaaaaaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
adaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaafaaaaaaegiccaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 324 math, 6 textures, 13 branches
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
  xlv_TEXCOORD7 = (cse_4.xyz - _LightPositionRange.xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2D (_LightTexture0, vec2(tmpvar_66));
  highp float tmpvar_68;
  tmpvar_68 = ((sqrt(
    dot (xlv_TEXCOORD7, xlv_TEXCOORD7)
  ) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_69 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp float tmpvar_72;
  if ((tmpvar_71 < tmpvar_68)) {
    tmpvar_72 = _LightShadowData.x;
  } else {
    tmpvar_72 = 1.0;
  };
  mediump vec3 lightDir_73;
  lightDir_73 = xlv_TEXCOORD5;
  mediump vec3 viewDir_74;
  viewDir_74 = xlv_TEXCOORD1;
  mediump float atten_75;
  atten_75 = (tmpvar_67.w * tmpvar_72);
  mediump vec4 c_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = normalize(lightDir_73);
  lightDir_73 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(viewDir_74);
  viewDir_74 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(normT_4);
  mediump float tmpvar_80;
  tmpvar_80 = dot (tmpvar_79, tmpvar_77);
  highp float tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (dot (normalize(
    (tmpvar_77 + tmpvar_78)
  ), tmpvar_79), 0.0, 1.0);
  tmpvar_81 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_80) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_81, _SpecularPower) * _SpecularColor.w)
  )) * (atten_75 * 4.0));
  c_76.xyz = tmpvar_83;
  c_76.w = (tmpvar_80 * (atten_75 * 4.0));
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_85;
  lightDir_85 = tmpvar_84;
  mediump vec3 normal_86;
  normal_86 = xlv_TEXCOORD3;
  mediump float tmpvar_87;
  tmpvar_87 = dot (normal_86, lightDir_85);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_76 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_87)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_87)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_88;
  tmpvar_88 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_88;
  tmpvar_1 = tmpvar_88;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 324 math, 6 textures, 13 branches
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
  xlv_TEXCOORD7 = (cse_4.xyz - _LightPositionRange.xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2D (_LightTexture0, vec2(tmpvar_66));
  highp float tmpvar_68;
  tmpvar_68 = ((sqrt(
    dot (xlv_TEXCOORD7, xlv_TEXCOORD7)
  ) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_69 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp float tmpvar_72;
  if ((tmpvar_71 < tmpvar_68)) {
    tmpvar_72 = _LightShadowData.x;
  } else {
    tmpvar_72 = 1.0;
  };
  mediump vec3 lightDir_73;
  lightDir_73 = xlv_TEXCOORD5;
  mediump vec3 viewDir_74;
  viewDir_74 = xlv_TEXCOORD1;
  mediump float atten_75;
  atten_75 = (tmpvar_67.w * tmpvar_72);
  mediump vec4 c_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = normalize(lightDir_73);
  lightDir_73 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(viewDir_74);
  viewDir_74 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(normT_4);
  mediump float tmpvar_80;
  tmpvar_80 = dot (tmpvar_79, tmpvar_77);
  highp float tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (dot (normalize(
    (tmpvar_77 + tmpvar_78)
  ), tmpvar_79), 0.0, 1.0);
  tmpvar_81 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_80) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_81, _SpecularPower) * _SpecularColor.w)
  )) * (atten_75 * 4.0));
  c_76.xyz = tmpvar_83;
  c_76.w = (tmpvar_80 * (atten_75 * 4.0));
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_85;
  lightDir_85 = tmpvar_84;
  mediump vec3 normal_86;
  normal_86 = xlv_TEXCOORD3;
  mediump float tmpvar_87;
  tmpvar_87 = dot (normal_86, lightDir_85);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_76 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_87)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_87)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_88;
  tmpvar_88 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_88;
  tmpvar_1 = tmpvar_88;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 324 math, 6 textures, 13 branches
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
  xlv_TEXCOORD7 = (cse_4.xyz - _LightPositionRange.xyz);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = textureGrad (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = textureGrad (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureGrad (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture (_LightTexture0, vec2(tmpvar_66));
  highp float tmpvar_68;
  tmpvar_68 = ((sqrt(
    dot (xlv_TEXCOORD7, xlv_TEXCOORD7)
  ) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = texture (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_69 = tmpvar_70;
  highp float tmpvar_71;
  tmpvar_71 = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp float tmpvar_72;
  if ((tmpvar_71 < tmpvar_68)) {
    tmpvar_72 = _LightShadowData.x;
  } else {
    tmpvar_72 = 1.0;
  };
  mediump vec3 lightDir_73;
  lightDir_73 = xlv_TEXCOORD5;
  mediump vec3 viewDir_74;
  viewDir_74 = xlv_TEXCOORD1;
  mediump float atten_75;
  atten_75 = (tmpvar_67.w * tmpvar_72);
  mediump vec4 c_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = normalize(lightDir_73);
  lightDir_73 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(viewDir_74);
  viewDir_74 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(normT_4);
  mediump float tmpvar_80;
  tmpvar_80 = dot (tmpvar_79, tmpvar_77);
  highp float tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (dot (normalize(
    (tmpvar_77 + tmpvar_78)
  ), tmpvar_79), 0.0, 1.0);
  tmpvar_81 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_80) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_81, _SpecularPower) * _SpecularColor.w)
  )) * (atten_75 * 4.0));
  c_76.xyz = tmpvar_83;
  c_76.w = (tmpvar_80 * (atten_75 * 4.0));
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_85;
  lightDir_85 = tmpvar_84;
  mediump vec3 normal_86;
  normal_86 = xlv_TEXCOORD3;
  mediump float tmpvar_87;
  tmpvar_87 = dot (normal_86, lightDir_85);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_76 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_87)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_87)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_88;
  tmpvar_88 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_88;
  tmpvar_1 = tmpvar_88;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 29 math
Keywords { "POINT" "SHADOWS_CUBE" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "tangent" ATTR2
ConstBuffer "$Globals" 320
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [_Object2World]
Matrix 176 [_World2Object]
Matrix 256 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [unity_Scale]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesTANGENT [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float4 unity_Scale;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = normalize(_mtl_i._glesNormal);
  float4 tmpvar_2;
  tmpvar_2.xyz = normalize(_mtl_i._glesTANGENT.xyz);
  tmpvar_2.w = _mtl_i._glesTANGENT.w;
  float3 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  tmpvar_3 = (cse_4.xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * tmpvar_9).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_5).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * _mtl_u._WorldSpaceLightPos0).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_4).xyz;
  _mtl_o.xlv_TEXCOORD7 = (cse_4.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 329 math, 7 textures, 13 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 unity_Scale;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec3 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  tmpvar_1 = (cse_2.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_6 * (
    ((_World2Object * tmpvar_7).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_2).xyz;
  xlv_TEXCOORD7 = (cse_2.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 color_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  vec2 uv_5;
  float tmpvar_6;
  if ((abs(tmpvar_4.z) > (1e-08 * abs(tmpvar_4.x)))) {
    float tmpvar_7;
    tmpvar_7 = (tmpvar_4.x / tmpvar_4.z);
    tmpvar_6 = (tmpvar_7 * inversesqrt((
      (tmpvar_7 * tmpvar_7)
     + 1.0)));
    tmpvar_6 = (sign(tmpvar_6) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_6)))
     * 
      (1.5708 + (abs(tmpvar_6) * (-0.214602 + (
        abs(tmpvar_6)
       * 
        (0.0865667 + (abs(tmpvar_6) * -0.0310296))
      ))))
    )));
    if ((tmpvar_4.z < 0.0)) {
      if ((tmpvar_4.x >= 0.0)) {
        tmpvar_6 += 3.14159;
      } else {
        tmpvar_6 = (tmpvar_6 - 3.14159);
      };
    };
  } else {
    tmpvar_6 = (sign(tmpvar_4.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * tmpvar_6));
  uv_5.y = (0.31831 * (1.5708 - (
    sign(tmpvar_4.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_4.y)
    )) * (1.5708 + (
      abs(tmpvar_4.y)
     * 
      (-0.214602 + (abs(tmpvar_4.y) * (0.0865667 + (
        abs(tmpvar_4.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_4.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_4.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_5.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_5.y);
  vec3 normal_11;
  normal_11.xy = ((texture2DGradARB (_BumpMap, uv_5, tmpvar_10.xy, tmpvar_10.zw).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (
    dot (normal_11.xy, normal_11.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float tmpvar_15;
    tmpvar_15 = (tmpvar_12.x / tmpvar_12.z);
    tmpvar_14 = (tmpvar_15 * inversesqrt((
      (tmpvar_15 * tmpvar_15)
     + 1.0)));
    tmpvar_14 = (sign(tmpvar_14) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_14)))
     * 
      (1.5708 + (abs(tmpvar_14) * (-0.214602 + (
        abs(tmpvar_14)
       * 
        (0.0865667 + (abs(tmpvar_14) * -0.0310296))
      ))))
    )));
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.14159;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.14159);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * tmpvar_14));
  uv_13.y = (0.31831 * (1.5708 - (
    sign(tmpvar_12.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.5708 + (
      abs(tmpvar_12.y)
     * 
      (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (
        abs(tmpvar_12.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_13.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_13.y);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_CityOverlayTex, uv_13, tmpvar_18.xy, tmpvar_18.zw);
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2);
  vec2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_28.yxz, mix (tmpvar_28, tmpvar_28.zxy, vec3(tmpvar_29)), vec3(float((
    mix (tmpvar_28.x, tmpvar_28.z, tmpvar_29)
   >= tmpvar_28.y))));
  vec4 tmpvar_31;
  tmpvar_31 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_30.zy) / abs(tmpvar_30.x)) * _CityOverlayDetailScale), tmpvar_27.xy, tmpvar_27.zw);
  citydarkoverlaydetail_2 = tmpvar_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec2 uv_33;
  float tmpvar_34;
  if ((abs(tmpvar_32.z) > (1e-08 * abs(tmpvar_32.x)))) {
    float tmpvar_35;
    tmpvar_35 = (tmpvar_32.x / tmpvar_32.z);
    tmpvar_34 = (tmpvar_35 * inversesqrt((
      (tmpvar_35 * tmpvar_35)
     + 1.0)));
    tmpvar_34 = (sign(tmpvar_34) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_34)))
     * 
      (1.5708 + (abs(tmpvar_34) * (-0.214602 + (
        abs(tmpvar_34)
       * 
        (0.0865667 + (abs(tmpvar_34) * -0.0310296))
      ))))
    )));
    if ((tmpvar_32.z < 0.0)) {
      if ((tmpvar_32.x >= 0.0)) {
        tmpvar_34 += 3.14159;
      } else {
        tmpvar_34 = (tmpvar_34 - 3.14159);
      };
    };
  } else {
    tmpvar_34 = (sign(tmpvar_32.x) * 1.5708);
  };
  uv_33.x = (0.5 + (0.159155 * tmpvar_34));
  uv_33.y = (0.31831 * (1.5708 - (
    sign(tmpvar_32.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_32.y)
    )) * (1.5708 + (
      abs(tmpvar_32.y)
     * 
      (-0.214602 + (abs(tmpvar_32.y) * (0.0865667 + (
        abs(tmpvar_32.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_36;
  tmpvar_36 = ((uv_33 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_37;
  tmpvar_37 = dFdx(tmpvar_32.xz);
  vec2 tmpvar_38;
  tmpvar_38 = dFdy(tmpvar_32.xz);
  vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36.y);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36.y);
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_32);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.yxz, mix (tmpvar_40, tmpvar_40.zxy, vec3(tmpvar_41)), vec3(float((
    mix (tmpvar_40.x, tmpvar_40.z, tmpvar_41)
   >= tmpvar_40.y))));
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_42.zy) / abs(tmpvar_42.x)) * _CityOverlayDetailScale), tmpvar_39.xy, tmpvar_39.zw);
  citylightoverlaydetail_1.xyz = tmpvar_43.xyz;
  citydarkoverlaydetail_2.w = (tmpvar_31.w * tmpvar_19.w);
  citylightoverlaydetail_1.w = (tmpvar_43.w * tmpvar_19.w);
  color_3.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_43.xyz, citylightoverlaydetail_1.www);
  color_3.w = 0.0;
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_45;
  tmpvar_45 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  float tmpvar_46;
  tmpvar_46 = ((sqrt(
    dot (xlv_TEXCOORD7, xlv_TEXCOORD7)
  ) * _LightPositionRange.w) * 0.97);
  float tmpvar_47;
  tmpvar_47 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float tmpvar_48;
  if ((tmpvar_47 < tmpvar_46)) {
    tmpvar_48 = _LightShadowData.x;
  } else {
    tmpvar_48 = 1.0;
  };
  float atten_49;
  atten_49 = ((tmpvar_44.w * tmpvar_45.w) * tmpvar_48);
  vec4 c_50;
  vec3 tmpvar_51;
  tmpvar_51 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_52;
  tmpvar_52 = normalize(normal_11);
  float tmpvar_53;
  tmpvar_53 = dot (tmpvar_52, tmpvar_51);
  c_50.xyz = (((
    (color_3.xyz * _LightColor0.xyz)
   * tmpvar_53) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_51 + normalize(xlv_TEXCOORD1)))
    , tmpvar_52), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_49 * 4.0));
  c_50.w = (tmpvar_53 * (atten_49 * 4.0));
  float tmpvar_54;
  tmpvar_54 = dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_50 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_54)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_54)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_55;
  tmpvar_55 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_3 = tmpvar_55;
  gl_FragData[0] = tmpvar_55;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Vector 19 [unity_Scale]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c20, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r0.xyz, v1.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v2.w
mov r0.w, c20.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
mad r0.xyz, r1, c19.w, -v0
dp3 r2.y, r0, r3
dp3 r2.x, r0, v2
dp3 r2.z, v1, r0
dp3 r1.x, r2, r2
rsq r2.w, r1.x
mov r1, c8
mov r0, c10
dp4 r4.z, c17, r0
mov r0, c9
dp4 r4.y, c17, r0
dp4 r4.x, c17, r1
mad r0.xyz, r4, c19.w, -v0
dp3 r1.y, r3, r0
dp3 r1.x, v2, r0
dp3 r1.z, v1, r0
mov r0.xyz, v1
mov r0.w, c20.y
mul o2.xyz, r2.w, r2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r1.w, r1, r1
rsq r0.y, r1.w
mul o5.xyz, r0.y, r1
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c16
dp4 o6.z, r0, c14
dp4 o6.y, r0, c13
dp4 o6.x, r0, c12
dp3 r0.w, r1, r1
dp4 r1.w, v0, v0
rsq r1.x, r1.w
rsq r0.w, r0.w
mul r1.xyz, r1.x, v0
rcp o1.x, r0.w
mov o3.xyz, -r1
add o7.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 55 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 304
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
Vector 320 [unity_Scale]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefieceddockaodmikplkpajocmcbmbmhpcakegbabaaaaaajmajaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcbaaiaaaaeaaaabaaaeacaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
adaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaacgbjbaaaabaaaaaajgbebaaaacaaaaaadcaaaaakhcaabaaa
aaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
abaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaa
aaaaaaaabaaaaaahecaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaacaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaah
icaabaaaacaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaajgahbaaaacaaaaaajgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaa
acaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaagaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafbccabaaaabaaaaaadkaabaaaaaaaaaaabbaaaaahicaabaaaaaaaaaaa
egbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaa
dgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaabaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaabaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
adaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaa
fgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaia
ebaaaaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
baaaaaahecaabaaaaaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
adaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaafaaaaaaegiccaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 325 math, 7 textures, 13 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
  xlv_TEXCOORD7 = (cse_4.xyz - _LightPositionRange.xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2D (_LightTextureB0, vec2(tmpvar_66));
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_69;
  tmpvar_69 = ((sqrt(
    dot (xlv_TEXCOORD7, xlv_TEXCOORD7)
  ) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_70 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp float tmpvar_73;
  if ((tmpvar_72 < tmpvar_69)) {
    tmpvar_73 = _LightShadowData.x;
  } else {
    tmpvar_73 = 1.0;
  };
  mediump vec3 lightDir_74;
  lightDir_74 = xlv_TEXCOORD5;
  mediump vec3 viewDir_75;
  viewDir_75 = xlv_TEXCOORD1;
  mediump float atten_76;
  atten_76 = ((tmpvar_67.w * tmpvar_68.w) * tmpvar_73);
  mediump vec4 c_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(lightDir_74);
  lightDir_74 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(viewDir_75);
  viewDir_75 = tmpvar_79;
  mediump vec3 tmpvar_80;
  tmpvar_80 = normalize(normT_4);
  mediump float tmpvar_81;
  tmpvar_81 = dot (tmpvar_80, tmpvar_78);
  highp float tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalize(
    (tmpvar_78 + tmpvar_79)
  ), tmpvar_80), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_81) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_82, _SpecularPower) * _SpecularColor.w)
  )) * (atten_76 * 4.0));
  c_77.xyz = tmpvar_84;
  c_77.w = (tmpvar_81 * (atten_76 * 4.0));
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_86;
  lightDir_86 = tmpvar_85;
  mediump vec3 normal_87;
  normal_87 = xlv_TEXCOORD3;
  mediump float tmpvar_88;
  tmpvar_88 = dot (normal_87, lightDir_86);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_77 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_88)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_88)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_89;
  tmpvar_89 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_89;
  tmpvar_1 = tmpvar_89;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 325 math, 7 textures, 13 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
  xlv_TEXCOORD7 = (cse_4.xyz - _LightPositionRange.xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2D (_LightTextureB0, vec2(tmpvar_66));
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_69;
  tmpvar_69 = ((sqrt(
    dot (xlv_TEXCOORD7, xlv_TEXCOORD7)
  ) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_70 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp float tmpvar_73;
  if ((tmpvar_72 < tmpvar_69)) {
    tmpvar_73 = _LightShadowData.x;
  } else {
    tmpvar_73 = 1.0;
  };
  mediump vec3 lightDir_74;
  lightDir_74 = xlv_TEXCOORD5;
  mediump vec3 viewDir_75;
  viewDir_75 = xlv_TEXCOORD1;
  mediump float atten_76;
  atten_76 = ((tmpvar_67.w * tmpvar_68.w) * tmpvar_73);
  mediump vec4 c_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(lightDir_74);
  lightDir_74 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(viewDir_75);
  viewDir_75 = tmpvar_79;
  mediump vec3 tmpvar_80;
  tmpvar_80 = normalize(normT_4);
  mediump float tmpvar_81;
  tmpvar_81 = dot (tmpvar_80, tmpvar_78);
  highp float tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalize(
    (tmpvar_78 + tmpvar_79)
  ), tmpvar_80), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_81) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_82, _SpecularPower) * _SpecularColor.w)
  )) * (atten_76 * 4.0));
  c_77.xyz = tmpvar_84;
  c_77.w = (tmpvar_81 * (atten_76 * 4.0));
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_86;
  lightDir_86 = tmpvar_85;
  mediump vec3 normal_87;
  normal_87 = xlv_TEXCOORD3;
  mediump float tmpvar_88;
  tmpvar_88 = dot (normal_87, lightDir_86);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_77 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_88)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_88)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_89;
  tmpvar_89 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_89;
  tmpvar_1 = tmpvar_89;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 325 math, 7 textures, 13 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
  xlv_TEXCOORD7 = (cse_4.xyz - _LightPositionRange.xyz);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = textureGrad (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = textureGrad (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureGrad (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture (_LightTextureB0, vec2(tmpvar_66));
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_69;
  tmpvar_69 = ((sqrt(
    dot (xlv_TEXCOORD7, xlv_TEXCOORD7)
  ) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_70 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp float tmpvar_73;
  if ((tmpvar_72 < tmpvar_69)) {
    tmpvar_73 = _LightShadowData.x;
  } else {
    tmpvar_73 = 1.0;
  };
  mediump vec3 lightDir_74;
  lightDir_74 = xlv_TEXCOORD5;
  mediump vec3 viewDir_75;
  viewDir_75 = xlv_TEXCOORD1;
  mediump float atten_76;
  atten_76 = ((tmpvar_67.w * tmpvar_68.w) * tmpvar_73);
  mediump vec4 c_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = normalize(lightDir_74);
  lightDir_74 = tmpvar_78;
  mediump vec3 tmpvar_79;
  tmpvar_79 = normalize(viewDir_75);
  viewDir_75 = tmpvar_79;
  mediump vec3 tmpvar_80;
  tmpvar_80 = normalize(normT_4);
  mediump float tmpvar_81;
  tmpvar_81 = dot (tmpvar_80, tmpvar_78);
  highp float tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalize(
    (tmpvar_78 + tmpvar_79)
  ), tmpvar_80), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_81) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_82, _SpecularPower) * _SpecularColor.w)
  )) * (atten_76 * 4.0));
  c_77.xyz = tmpvar_84;
  c_77.w = (tmpvar_81 * (atten_76 * 4.0));
  highp vec3 tmpvar_85;
  tmpvar_85 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_86;
  lightDir_86 = tmpvar_85;
  mediump vec3 normal_87;
  normal_87 = xlv_TEXCOORD3;
  mediump float tmpvar_88;
  tmpvar_88 = dot (normal_87, lightDir_86);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_77 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_88)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_88)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_89;
  tmpvar_89 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_89;
  tmpvar_1 = tmpvar_89;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 29 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "tangent" ATTR2
ConstBuffer "$Globals" 320
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [_Object2World]
Matrix 176 [_World2Object]
Matrix 256 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [unity_Scale]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesTANGENT [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float4 unity_Scale;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = normalize(_mtl_i._glesNormal);
  float4 tmpvar_2;
  tmpvar_2.xyz = normalize(_mtl_i._glesTANGENT.xyz);
  tmpvar_2.w = _mtl_i._glesTANGENT.w;
  float3 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  tmpvar_3 = (cse_4.xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * tmpvar_9).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_5).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * _mtl_u._WorldSpaceLightPos0).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_4).xyz;
  _mtl_o.xlv_TEXCOORD7 = (cse_4.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 338 math, 10 textures, 16 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 unity_Scale;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
void main ()
{
  vec3 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  tmpvar_1 = (cse_2.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_6 * (
    ((_World2Object * tmpvar_7).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_2);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_2);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 color_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  vec2 uv_5;
  float tmpvar_6;
  if ((abs(tmpvar_4.z) > (1e-08 * abs(tmpvar_4.x)))) {
    float tmpvar_7;
    tmpvar_7 = (tmpvar_4.x / tmpvar_4.z);
    tmpvar_6 = (tmpvar_7 * inversesqrt((
      (tmpvar_7 * tmpvar_7)
     + 1.0)));
    tmpvar_6 = (sign(tmpvar_6) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_6)))
     * 
      (1.5708 + (abs(tmpvar_6) * (-0.214602 + (
        abs(tmpvar_6)
       * 
        (0.0865667 + (abs(tmpvar_6) * -0.0310296))
      ))))
    )));
    if ((tmpvar_4.z < 0.0)) {
      if ((tmpvar_4.x >= 0.0)) {
        tmpvar_6 += 3.14159;
      } else {
        tmpvar_6 = (tmpvar_6 - 3.14159);
      };
    };
  } else {
    tmpvar_6 = (sign(tmpvar_4.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * tmpvar_6));
  uv_5.y = (0.31831 * (1.5708 - (
    sign(tmpvar_4.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_4.y)
    )) * (1.5708 + (
      abs(tmpvar_4.y)
     * 
      (-0.214602 + (abs(tmpvar_4.y) * (0.0865667 + (
        abs(tmpvar_4.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_4.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_4.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_5.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_5.y);
  vec3 normal_11;
  normal_11.xy = ((texture2DGradARB (_BumpMap, uv_5, tmpvar_10.xy, tmpvar_10.zw).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (
    dot (normal_11.xy, normal_11.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float tmpvar_15;
    tmpvar_15 = (tmpvar_12.x / tmpvar_12.z);
    tmpvar_14 = (tmpvar_15 * inversesqrt((
      (tmpvar_15 * tmpvar_15)
     + 1.0)));
    tmpvar_14 = (sign(tmpvar_14) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_14)))
     * 
      (1.5708 + (abs(tmpvar_14) * (-0.214602 + (
        abs(tmpvar_14)
       * 
        (0.0865667 + (abs(tmpvar_14) * -0.0310296))
      ))))
    )));
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.14159;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.14159);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * tmpvar_14));
  uv_13.y = (0.31831 * (1.5708 - (
    sign(tmpvar_12.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.5708 + (
      abs(tmpvar_12.y)
     * 
      (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (
        abs(tmpvar_12.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_13.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_13.y);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_CityOverlayTex, uv_13, tmpvar_18.xy, tmpvar_18.zw);
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2);
  vec2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_28.yxz, mix (tmpvar_28, tmpvar_28.zxy, vec3(tmpvar_29)), vec3(float((
    mix (tmpvar_28.x, tmpvar_28.z, tmpvar_29)
   >= tmpvar_28.y))));
  vec4 tmpvar_31;
  tmpvar_31 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_30.zy) / abs(tmpvar_30.x)) * _CityOverlayDetailScale), tmpvar_27.xy, tmpvar_27.zw);
  citydarkoverlaydetail_2 = tmpvar_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec2 uv_33;
  float tmpvar_34;
  if ((abs(tmpvar_32.z) > (1e-08 * abs(tmpvar_32.x)))) {
    float tmpvar_35;
    tmpvar_35 = (tmpvar_32.x / tmpvar_32.z);
    tmpvar_34 = (tmpvar_35 * inversesqrt((
      (tmpvar_35 * tmpvar_35)
     + 1.0)));
    tmpvar_34 = (sign(tmpvar_34) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_34)))
     * 
      (1.5708 + (abs(tmpvar_34) * (-0.214602 + (
        abs(tmpvar_34)
       * 
        (0.0865667 + (abs(tmpvar_34) * -0.0310296))
      ))))
    )));
    if ((tmpvar_32.z < 0.0)) {
      if ((tmpvar_32.x >= 0.0)) {
        tmpvar_34 += 3.14159;
      } else {
        tmpvar_34 = (tmpvar_34 - 3.14159);
      };
    };
  } else {
    tmpvar_34 = (sign(tmpvar_32.x) * 1.5708);
  };
  uv_33.x = (0.5 + (0.159155 * tmpvar_34));
  uv_33.y = (0.31831 * (1.5708 - (
    sign(tmpvar_32.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_32.y)
    )) * (1.5708 + (
      abs(tmpvar_32.y)
     * 
      (-0.214602 + (abs(tmpvar_32.y) * (0.0865667 + (
        abs(tmpvar_32.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_36;
  tmpvar_36 = ((uv_33 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_37;
  tmpvar_37 = dFdx(tmpvar_32.xz);
  vec2 tmpvar_38;
  tmpvar_38 = dFdy(tmpvar_32.xz);
  vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36.y);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36.y);
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_32);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.yxz, mix (tmpvar_40, tmpvar_40.zxy, vec3(tmpvar_41)), vec3(float((
    mix (tmpvar_40.x, tmpvar_40.z, tmpvar_41)
   >= tmpvar_40.y))));
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_42.zy) / abs(tmpvar_42.x)) * _CityOverlayDetailScale), tmpvar_39.xy, tmpvar_39.zw);
  citylightoverlaydetail_1.xyz = tmpvar_43.xyz;
  citydarkoverlaydetail_2.w = (tmpvar_31.w * tmpvar_19.w);
  citylightoverlaydetail_1.w = (tmpvar_43.w * tmpvar_19.w);
  color_3.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_43.xyz, citylightoverlaydetail_1.www);
  color_3.w = 0.0;
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 shadowVals_46;
  vec3 tmpvar_47;
  tmpvar_47 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadowVals_46.x = texture2D (_ShadowMapTexture, (tmpvar_47.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_46.y = texture2D (_ShadowMapTexture, (tmpvar_47.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_46.z = texture2D (_ShadowMapTexture, (tmpvar_47.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_46.w = texture2D (_ShadowMapTexture, (tmpvar_47.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_48;
  tmpvar_48 = lessThan (shadowVals_46, tmpvar_47.zzzz);
  vec4 tmpvar_49;
  tmpvar_49 = _LightShadowData.xxxx;
  float tmpvar_50;
  if (tmpvar_48.x) {
    tmpvar_50 = tmpvar_49.x;
  } else {
    tmpvar_50 = 1.0;
  };
  float tmpvar_51;
  if (tmpvar_48.y) {
    tmpvar_51 = tmpvar_49.y;
  } else {
    tmpvar_51 = 1.0;
  };
  float tmpvar_52;
  if (tmpvar_48.z) {
    tmpvar_52 = tmpvar_49.z;
  } else {
    tmpvar_52 = 1.0;
  };
  float tmpvar_53;
  if (tmpvar_48.w) {
    tmpvar_53 = tmpvar_49.w;
  } else {
    tmpvar_53 = 1.0;
  };
  vec4 tmpvar_54;
  tmpvar_54.x = tmpvar_50;
  tmpvar_54.y = tmpvar_51;
  tmpvar_54.z = tmpvar_52;
  tmpvar_54.w = tmpvar_53;
  float atten_55;
  atten_55 = (((
    float((xlv_TEXCOORD6.z > 0.0))
   * tmpvar_44.w) * tmpvar_45.w) * dot (tmpvar_54, vec4(0.25, 0.25, 0.25, 0.25)));
  vec4 c_56;
  vec3 tmpvar_57;
  tmpvar_57 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_58;
  tmpvar_58 = normalize(normal_11);
  float tmpvar_59;
  tmpvar_59 = dot (tmpvar_58, tmpvar_57);
  c_56.xyz = (((
    (color_3.xyz * _LightColor0.xyz)
   * tmpvar_59) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_57 + normalize(xlv_TEXCOORD1)))
    , tmpvar_58), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_55 * 4.0));
  c_56.w = (tmpvar_59 * (atten_55 * 4.0));
  float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_56 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_60)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_60)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_61;
  tmpvar_61 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_3 = tmpvar_61;
  gl_FragData[0] = tmpvar_61;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 62 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Matrix 16 [_LightMatrix0]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Vector 22 [unity_Scale]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c23, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r0.xyz, v1.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v2.w
mov r0.w, c23.x
mov r0.xyz, c20
dp4 r1.z, r0, c14
dp4 r1.x, r0, c12
dp4 r1.y, r0, c13
mad r0.xyz, r1, c22.w, -v0
dp3 r2.y, r0, r3
dp3 r2.x, r0, v2
dp3 r2.z, v1, r0
dp3 r1.x, r2, r2
rsq r2.w, r1.x
mov r1, c12
mov r0, c14
dp4 r4.z, c21, r0
mov r0, c13
dp4 r4.y, c21, r0
dp4 r4.x, c21, r1
mad r0.xyz, r4, c22.w, -v0
dp3 r1.y, r3, r0
dp3 r1.x, v2, r0
dp3 r1.z, v1, r0
mov r0.xyz, v1
mov r0.w, c23.y
mul o2.xyz, r2.w, r2
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
dp3 r1.w, r1, r1
rsq r0.y, r1.w
mul o5.xyz, r0.y, r1
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o6.w, r0, c19
dp4 o6.z, r0, c18
dp4 o6.y, r0, c17
dp4 o6.x, r0, c16
dp4 o7.w, r0, c7
dp4 o7.z, r0, c6
dp4 o7.y, r0, c5
dp4 o7.x, r0, c4
add r0.xyz, -r0, c20
dp3 r0.x, r0, r0
dp4 r0.w, v0, v0
rsq r0.y, r0.w
rsq r0.x, r0.x
mul r1.xyz, r0.y, v0
rcp o1.x, r0.x
mov o3.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "gles " {
// Stats: 334 math, 10 textures, 16 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  lowp float tmpvar_70;
  highp vec4 shadowVals_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_73;
  P_73 = (tmpvar_72.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_74;
  tmpvar_74 = texture2D (_ShadowMapTexture, P_73).x;
  shadowVals_71.x = tmpvar_74;
  highp vec2 P_75;
  P_75 = (tmpvar_72.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_76;
  tmpvar_76 = texture2D (_ShadowMapTexture, P_75).x;
  shadowVals_71.y = tmpvar_76;
  highp vec2 P_77;
  P_77 = (tmpvar_72.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_78;
  tmpvar_78 = texture2D (_ShadowMapTexture, P_77).x;
  shadowVals_71.z = tmpvar_78;
  highp vec2 P_79;
  P_79 = (tmpvar_72.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_80;
  tmpvar_80 = texture2D (_ShadowMapTexture, P_79).x;
  shadowVals_71.w = tmpvar_80;
  bvec4 tmpvar_81;
  tmpvar_81 = lessThan (shadowVals_71, tmpvar_72.zzzz);
  highp vec4 tmpvar_82;
  tmpvar_82 = _LightShadowData.xxxx;
  highp float tmpvar_83;
  if (tmpvar_81.x) {
    tmpvar_83 = tmpvar_82.x;
  } else {
    tmpvar_83 = 1.0;
  };
  highp float tmpvar_84;
  if (tmpvar_81.y) {
    tmpvar_84 = tmpvar_82.y;
  } else {
    tmpvar_84 = 1.0;
  };
  highp float tmpvar_85;
  if (tmpvar_81.z) {
    tmpvar_85 = tmpvar_82.z;
  } else {
    tmpvar_85 = 1.0;
  };
  highp float tmpvar_86;
  if (tmpvar_81.w) {
    tmpvar_86 = tmpvar_82.w;
  } else {
    tmpvar_86 = 1.0;
  };
  mediump vec4 tmpvar_87;
  tmpvar_87.x = tmpvar_83;
  tmpvar_87.y = tmpvar_84;
  tmpvar_87.z = tmpvar_85;
  tmpvar_87.w = tmpvar_86;
  mediump float tmpvar_88;
  tmpvar_88 = dot (tmpvar_87, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_70 = tmpvar_88;
  mediump vec3 lightDir_89;
  lightDir_89 = xlv_TEXCOORD5;
  mediump vec3 viewDir_90;
  viewDir_90 = xlv_TEXCOORD1;
  mediump float atten_91;
  atten_91 = (((
    float((xlv_TEXCOORD6.z > 0.0))
   * tmpvar_66.w) * tmpvar_69.w) * tmpvar_70);
  mediump vec4 c_92;
  mediump vec3 tmpvar_93;
  tmpvar_93 = normalize(lightDir_89);
  lightDir_89 = tmpvar_93;
  mediump vec3 tmpvar_94;
  tmpvar_94 = normalize(viewDir_90);
  viewDir_90 = tmpvar_94;
  mediump vec3 tmpvar_95;
  tmpvar_95 = normalize(normT_4);
  mediump float tmpvar_96;
  tmpvar_96 = dot (tmpvar_95, tmpvar_93);
  highp float tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (normalize(
    (tmpvar_93 + tmpvar_94)
  ), tmpvar_95), 0.0, 1.0);
  tmpvar_97 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_96) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_97, _SpecularPower) * _SpecularColor.w)
  )) * (atten_91 * 4.0));
  c_92.xyz = tmpvar_99;
  c_92.w = (tmpvar_96 * (atten_91 * 4.0));
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_101;
  lightDir_101 = tmpvar_100;
  mediump vec3 normal_102;
  normal_102 = xlv_TEXCOORD3;
  mediump float tmpvar_103;
  tmpvar_103 = dot (normal_102, lightDir_101);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_92 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_103)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_103)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_104;
  tmpvar_104 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_104;
  tmpvar_1 = tmpvar_104;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 334 math, 10 textures, 16 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  lowp float tmpvar_70;
  highp vec4 shadowVals_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_73;
  P_73 = (tmpvar_72.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_74;
  tmpvar_74 = texture2D (_ShadowMapTexture, P_73).x;
  shadowVals_71.x = tmpvar_74;
  highp vec2 P_75;
  P_75 = (tmpvar_72.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_76;
  tmpvar_76 = texture2D (_ShadowMapTexture, P_75).x;
  shadowVals_71.y = tmpvar_76;
  highp vec2 P_77;
  P_77 = (tmpvar_72.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_78;
  tmpvar_78 = texture2D (_ShadowMapTexture, P_77).x;
  shadowVals_71.z = tmpvar_78;
  highp vec2 P_79;
  P_79 = (tmpvar_72.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_80;
  tmpvar_80 = texture2D (_ShadowMapTexture, P_79).x;
  shadowVals_71.w = tmpvar_80;
  bvec4 tmpvar_81;
  tmpvar_81 = lessThan (shadowVals_71, tmpvar_72.zzzz);
  highp vec4 tmpvar_82;
  tmpvar_82 = _LightShadowData.xxxx;
  highp float tmpvar_83;
  if (tmpvar_81.x) {
    tmpvar_83 = tmpvar_82.x;
  } else {
    tmpvar_83 = 1.0;
  };
  highp float tmpvar_84;
  if (tmpvar_81.y) {
    tmpvar_84 = tmpvar_82.y;
  } else {
    tmpvar_84 = 1.0;
  };
  highp float tmpvar_85;
  if (tmpvar_81.z) {
    tmpvar_85 = tmpvar_82.z;
  } else {
    tmpvar_85 = 1.0;
  };
  highp float tmpvar_86;
  if (tmpvar_81.w) {
    tmpvar_86 = tmpvar_82.w;
  } else {
    tmpvar_86 = 1.0;
  };
  mediump vec4 tmpvar_87;
  tmpvar_87.x = tmpvar_83;
  tmpvar_87.y = tmpvar_84;
  tmpvar_87.z = tmpvar_85;
  tmpvar_87.w = tmpvar_86;
  mediump float tmpvar_88;
  tmpvar_88 = dot (tmpvar_87, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_70 = tmpvar_88;
  mediump vec3 lightDir_89;
  lightDir_89 = xlv_TEXCOORD5;
  mediump vec3 viewDir_90;
  viewDir_90 = xlv_TEXCOORD1;
  mediump float atten_91;
  atten_91 = (((
    float((xlv_TEXCOORD6.z > 0.0))
   * tmpvar_66.w) * tmpvar_69.w) * tmpvar_70);
  mediump vec4 c_92;
  mediump vec3 tmpvar_93;
  tmpvar_93 = normalize(lightDir_89);
  lightDir_89 = tmpvar_93;
  mediump vec3 tmpvar_94;
  tmpvar_94 = normalize(viewDir_90);
  viewDir_90 = tmpvar_94;
  mediump vec3 tmpvar_95;
  tmpvar_95 = normalize(normT_4);
  mediump float tmpvar_96;
  tmpvar_96 = dot (tmpvar_95, tmpvar_93);
  highp float tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = clamp (dot (normalize(
    (tmpvar_93 + tmpvar_94)
  ), tmpvar_95), 0.0, 1.0);
  tmpvar_97 = tmpvar_98;
  highp vec3 tmpvar_99;
  tmpvar_99 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_96) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_97, _SpecularPower) * _SpecularColor.w)
  )) * (atten_91 * 4.0));
  c_92.xyz = tmpvar_99;
  c_92.w = (tmpvar_96 * (atten_91 * 4.0));
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_101;
  lightDir_101 = tmpvar_100;
  mediump vec3 normal_102;
  normal_102 = xlv_TEXCOORD3;
  mediump float tmpvar_103;
  tmpvar_103 = dot (normal_102, lightDir_101);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_92 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_103)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_103)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_104;
  tmpvar_104 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_104;
  tmpvar_1 = tmpvar_104;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "opengl " {
// Stats: 336 math, 10 textures, 12 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform mat4 unity_World2Shadow[4];

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 unity_Scale;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
void main ()
{
  vec3 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  tmpvar_1 = (cse_2.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_6 * (
    ((_World2Object * tmpvar_7).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_2);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_2);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightShadowData;
uniform sampler2DShadow _ShadowMapTexture;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD6;
varying vec4 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 color_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  vec2 uv_5;
  float tmpvar_6;
  if ((abs(tmpvar_4.z) > (1e-08 * abs(tmpvar_4.x)))) {
    float tmpvar_7;
    tmpvar_7 = (tmpvar_4.x / tmpvar_4.z);
    tmpvar_6 = (tmpvar_7 * inversesqrt((
      (tmpvar_7 * tmpvar_7)
     + 1.0)));
    tmpvar_6 = (sign(tmpvar_6) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_6)))
     * 
      (1.5708 + (abs(tmpvar_6) * (-0.214602 + (
        abs(tmpvar_6)
       * 
        (0.0865667 + (abs(tmpvar_6) * -0.0310296))
      ))))
    )));
    if ((tmpvar_4.z < 0.0)) {
      if ((tmpvar_4.x >= 0.0)) {
        tmpvar_6 += 3.14159;
      } else {
        tmpvar_6 = (tmpvar_6 - 3.14159);
      };
    };
  } else {
    tmpvar_6 = (sign(tmpvar_4.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * tmpvar_6));
  uv_5.y = (0.31831 * (1.5708 - (
    sign(tmpvar_4.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_4.y)
    )) * (1.5708 + (
      abs(tmpvar_4.y)
     * 
      (-0.214602 + (abs(tmpvar_4.y) * (0.0865667 + (
        abs(tmpvar_4.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_4.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_4.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_5.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_5.y);
  vec3 normal_11;
  normal_11.xy = ((texture2DGradARB (_BumpMap, uv_5, tmpvar_10.xy, tmpvar_10.zw).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (
    dot (normal_11.xy, normal_11.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float tmpvar_15;
    tmpvar_15 = (tmpvar_12.x / tmpvar_12.z);
    tmpvar_14 = (tmpvar_15 * inversesqrt((
      (tmpvar_15 * tmpvar_15)
     + 1.0)));
    tmpvar_14 = (sign(tmpvar_14) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_14)))
     * 
      (1.5708 + (abs(tmpvar_14) * (-0.214602 + (
        abs(tmpvar_14)
       * 
        (0.0865667 + (abs(tmpvar_14) * -0.0310296))
      ))))
    )));
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.14159;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.14159);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * tmpvar_14));
  uv_13.y = (0.31831 * (1.5708 - (
    sign(tmpvar_12.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.5708 + (
      abs(tmpvar_12.y)
     * 
      (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (
        abs(tmpvar_12.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_13.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_13.y);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_CityOverlayTex, uv_13, tmpvar_18.xy, tmpvar_18.zw);
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2);
  vec2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_28.yxz, mix (tmpvar_28, tmpvar_28.zxy, vec3(tmpvar_29)), vec3(float((
    mix (tmpvar_28.x, tmpvar_28.z, tmpvar_29)
   >= tmpvar_28.y))));
  vec4 tmpvar_31;
  tmpvar_31 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_30.zy) / abs(tmpvar_30.x)) * _CityOverlayDetailScale), tmpvar_27.xy, tmpvar_27.zw);
  citydarkoverlaydetail_2 = tmpvar_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec2 uv_33;
  float tmpvar_34;
  if ((abs(tmpvar_32.z) > (1e-08 * abs(tmpvar_32.x)))) {
    float tmpvar_35;
    tmpvar_35 = (tmpvar_32.x / tmpvar_32.z);
    tmpvar_34 = (tmpvar_35 * inversesqrt((
      (tmpvar_35 * tmpvar_35)
     + 1.0)));
    tmpvar_34 = (sign(tmpvar_34) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_34)))
     * 
      (1.5708 + (abs(tmpvar_34) * (-0.214602 + (
        abs(tmpvar_34)
       * 
        (0.0865667 + (abs(tmpvar_34) * -0.0310296))
      ))))
    )));
    if ((tmpvar_32.z < 0.0)) {
      if ((tmpvar_32.x >= 0.0)) {
        tmpvar_34 += 3.14159;
      } else {
        tmpvar_34 = (tmpvar_34 - 3.14159);
      };
    };
  } else {
    tmpvar_34 = (sign(tmpvar_32.x) * 1.5708);
  };
  uv_33.x = (0.5 + (0.159155 * tmpvar_34));
  uv_33.y = (0.31831 * (1.5708 - (
    sign(tmpvar_32.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_32.y)
    )) * (1.5708 + (
      abs(tmpvar_32.y)
     * 
      (-0.214602 + (abs(tmpvar_32.y) * (0.0865667 + (
        abs(tmpvar_32.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_36;
  tmpvar_36 = ((uv_33 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_37;
  tmpvar_37 = dFdx(tmpvar_32.xz);
  vec2 tmpvar_38;
  tmpvar_38 = dFdy(tmpvar_32.xz);
  vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36.y);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36.y);
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_32);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.yxz, mix (tmpvar_40, tmpvar_40.zxy, vec3(tmpvar_41)), vec3(float((
    mix (tmpvar_40.x, tmpvar_40.z, tmpvar_41)
   >= tmpvar_40.y))));
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_42.zy) / abs(tmpvar_42.x)) * _CityOverlayDetailScale), tmpvar_39.xy, tmpvar_39.zw);
  citylightoverlaydetail_1.xyz = tmpvar_43.xyz;
  citydarkoverlaydetail_2.w = (tmpvar_31.w * tmpvar_19.w);
  citylightoverlaydetail_1.w = (tmpvar_43.w * tmpvar_19.w);
  color_3.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_43.xyz, citylightoverlaydetail_1.www);
  color_3.w = 0.0;
  vec4 shadows_44;
  vec3 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadows_44.x = shadow2D (_ShadowMapTexture, (tmpvar_45 + _ShadowOffsets[0].xyz)).x;
  shadows_44.y = shadow2D (_ShadowMapTexture, (tmpvar_45 + _ShadowOffsets[1].xyz)).x;
  shadows_44.z = shadow2D (_ShadowMapTexture, (tmpvar_45 + _ShadowOffsets[2].xyz)).x;
  shadows_44.w = shadow2D (_ShadowMapTexture, (tmpvar_45 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_46;
  tmpvar_46 = (_LightShadowData.xxxx + (shadows_44 * (1.0 - _LightShadowData.xxxx)));
  shadows_44 = tmpvar_46;
  float atten_47;
  atten_47 = (((
    float((xlv_TEXCOORD6.z > 0.0))
   * texture2D (_LightTexture0, 
    ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)
  ).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * dot (tmpvar_46, vec4(0.25, 0.25, 0.25, 0.25)));
  vec4 c_48;
  vec3 tmpvar_49;
  tmpvar_49 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_50;
  tmpvar_50 = normalize(normal_11);
  float tmpvar_51;
  tmpvar_51 = dot (tmpvar_50, tmpvar_49);
  c_48.xyz = (((
    (color_3.xyz * _LightColor0.xyz)
   * tmpvar_51) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_49 + normalize(xlv_TEXCOORD1)))
    , tmpvar_50), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_47 * 4.0));
  c_48.w = (tmpvar_51 * (atten_47 * 4.0));
  float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_48 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_52)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_52)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_53;
  tmpvar_53 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_3 = tmpvar_53;
  gl_FragData[0] = tmpvar_53;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 62 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Matrix 16 [_LightMatrix0]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Vector 22 [unity_Scale]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c23, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r0.xyz, v1.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v2.w
mov r0.w, c23.x
mov r0.xyz, c20
dp4 r1.z, r0, c14
dp4 r1.x, r0, c12
dp4 r1.y, r0, c13
mad r0.xyz, r1, c22.w, -v0
dp3 r2.y, r0, r3
dp3 r2.x, r0, v2
dp3 r2.z, v1, r0
dp3 r1.x, r2, r2
rsq r2.w, r1.x
mov r1, c12
mov r0, c14
dp4 r4.z, c21, r0
mov r0, c13
dp4 r4.y, c21, r0
dp4 r4.x, c21, r1
mad r0.xyz, r4, c22.w, -v0
dp3 r1.y, r3, r0
dp3 r1.x, v2, r0
dp3 r1.z, v1, r0
mov r0.xyz, v1
mov r0.w, c23.y
mul o2.xyz, r2.w, r2
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
dp3 r1.w, r1, r1
rsq r0.y, r1.w
mul o5.xyz, r0.y, r1
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o6.w, r0, c19
dp4 o6.z, r0, c18
dp4 o6.y, r0, c17
dp4 o6.x, r0, c16
dp4 o7.w, r0, c7
dp4 o7.z, r0, c6
dp4 o7.y, r0, c5
dp4 o7.x, r0, c4
add r0.xyz, -r0, c20
dp3 r0.x, r0, r0
dp4 r0.w, v0, v0
rsq r0.y, r0.w
rsq r0.x, r0.x
mul r1.xyz, r0.y, v0
rcp o1.x, r0.x
mov o3.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 58 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 368
Matrix 80 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityShadows" 416
Matrix 128 [unity_World2Shadow0]
Matrix 192 [unity_World2Shadow1]
Matrix 256 [unity_World2Shadow2]
Matrix 320 [unity_World2Shadow3]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
Vector 320 [unity_Scale]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityShadows" 3
BindCB  "UnityPerDraw" 4
"vs_4_0
eefiecedimnlngiibcbmbfpmeeheoijckeebcfpaabaaaaaacaakaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcjeaiaaaaeaaaabaacfacaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
abaaaaaafjaaaaaeegiocaaaadaaaaaaamaaaaaafjaaaaaeegiocaaaaeaaaaaa
bfaaaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaaabaaaaaafpaaaaad
pcbabaaaacaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadbccabaaa
abaaaaaagfaaaaadoccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaa
gfaaaaadpccabaaaagaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaeaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaeaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaaeaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaaaeaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaa
egiccaaaaeaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
aaaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaelaaaaafbccabaaaabaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaacgbjbaaaabaaaaaajgbebaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
jgbebaaaabaaaaaacgbjbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaajhcaabaaa
abaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaaeaaaaaabbaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaaeaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaaeaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaaeaaaaaabdaaaaaadcaaaaalhcaabaaaabaaaaaa
egacbaaaabaaaaaapgipcaaaaeaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaa
baaaaaahecaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaah
ccaabaaaacaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
acaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
jgahbaaaacaaaaaajgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahoccabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaaacaaaaaa
bbaaaaahicaabaaaaaaaaaaaegbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegbcbaaaaaaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaa
abaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaabaaaaaaegiccaaaaeaaaaaa
anaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaa
abaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaeaaaaaa
aoaaaaaakgbkbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaajhcaabaaaabaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaaeaaaaaa
bbaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaaeaaaaaabaaaaaaaagiacaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
aeaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegiccaaaaeaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaa
aeaaaaaabeaaaaaaegbcbaiaebaaaaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegacbaaaabaaaaaabaaaaaahecaabaaaaaaaaaaaegbcbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaaeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaaaaaaaaaagaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
afaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pccabaaaafaaaaaaegiocaaaaaaaaaaaaiaaaaaapgapbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaa
ajaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
akaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaagaaaaaa
egiocaaaadaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadoaaaaab
"
}
SubProgram "gles " {
// Stats: 332 math, 10 textures, 12 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_66 = texture2D (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture2D (_LightTextureB0, vec2(tmpvar_68));
  lowp float tmpvar_70;
  mediump vec4 shadows_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec3 coord_73;
  coord_73 = (tmpvar_72 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_74;
  tmpvar_74 = shadow2DEXT (_ShadowMapTexture, coord_73);
  shadows_71.x = tmpvar_74;
  highp vec3 coord_75;
  coord_75 = (tmpvar_72 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_76;
  tmpvar_76 = shadow2DEXT (_ShadowMapTexture, coord_75);
  shadows_71.y = tmpvar_76;
  highp vec3 coord_77;
  coord_77 = (tmpvar_72 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_78;
  tmpvar_78 = shadow2DEXT (_ShadowMapTexture, coord_77);
  shadows_71.z = tmpvar_78;
  highp vec3 coord_79;
  coord_79 = (tmpvar_72 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_80;
  tmpvar_80 = shadow2DEXT (_ShadowMapTexture, coord_79);
  shadows_71.w = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = (_LightShadowData.xxxx + (shadows_71 * (1.0 - _LightShadowData.xxxx)));
  shadows_71 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = dot (shadows_71, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_70 = tmpvar_82;
  mediump vec3 lightDir_83;
  lightDir_83 = xlv_TEXCOORD5;
  mediump vec3 viewDir_84;
  viewDir_84 = xlv_TEXCOORD1;
  mediump float atten_85;
  atten_85 = (((
    float((xlv_TEXCOORD6.z > 0.0))
   * tmpvar_66.w) * tmpvar_69.w) * tmpvar_70);
  mediump vec4 c_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = normalize(lightDir_83);
  lightDir_83 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = normalize(viewDir_84);
  viewDir_84 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = normalize(normT_4);
  mediump float tmpvar_90;
  tmpvar_90 = dot (tmpvar_89, tmpvar_87);
  highp float tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp (dot (normalize(
    (tmpvar_87 + tmpvar_88)
  ), tmpvar_89), 0.0, 1.0);
  tmpvar_91 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_90) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_91, _SpecularPower) * _SpecularColor.w)
  )) * (atten_85 * 4.0));
  c_86.xyz = tmpvar_93;
  c_86.w = (tmpvar_90 * (atten_85 * 4.0));
  highp vec3 tmpvar_94;
  tmpvar_94 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_95;
  lightDir_95 = tmpvar_94;
  mediump vec3 normal_96;
  normal_96 = xlv_TEXCOORD3;
  mediump float tmpvar_97;
  tmpvar_97 = dot (normal_96, lightDir_95);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_86 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_97)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_97)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_98;
  tmpvar_98 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_98;
  tmpvar_1 = tmpvar_98;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 332 math, 10 textures, 12 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4);
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = textureGrad (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = textureGrad (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureGrad (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_66 = texture (_LightTexture0, P_67);
  highp float tmpvar_68;
  tmpvar_68 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_69;
  tmpvar_69 = texture (_LightTextureB0, vec2(tmpvar_68));
  lowp float tmpvar_70;
  mediump vec4 shadows_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec3 coord_73;
  coord_73 = (tmpvar_72 + _ShadowOffsets[0].xyz);
  mediump float tmpvar_74;
  tmpvar_74 = texture (_ShadowMapTexture, coord_73);
  shadows_71.x = tmpvar_74;
  highp vec3 coord_75;
  coord_75 = (tmpvar_72 + _ShadowOffsets[1].xyz);
  mediump float tmpvar_76;
  tmpvar_76 = texture (_ShadowMapTexture, coord_75);
  shadows_71.y = tmpvar_76;
  highp vec3 coord_77;
  coord_77 = (tmpvar_72 + _ShadowOffsets[2].xyz);
  mediump float tmpvar_78;
  tmpvar_78 = texture (_ShadowMapTexture, coord_77);
  shadows_71.z = tmpvar_78;
  highp vec3 coord_79;
  coord_79 = (tmpvar_72 + _ShadowOffsets[3].xyz);
  mediump float tmpvar_80;
  tmpvar_80 = texture (_ShadowMapTexture, coord_79);
  shadows_71.w = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = (_LightShadowData.xxxx + (shadows_71 * (1.0 - _LightShadowData.xxxx)));
  shadows_71 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = dot (shadows_71, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_70 = tmpvar_82;
  mediump vec3 lightDir_83;
  lightDir_83 = xlv_TEXCOORD5;
  mediump vec3 viewDir_84;
  viewDir_84 = xlv_TEXCOORD1;
  mediump float atten_85;
  atten_85 = (((
    float((xlv_TEXCOORD6.z > 0.0))
   * tmpvar_66.w) * tmpvar_69.w) * tmpvar_70);
  mediump vec4 c_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = normalize(lightDir_83);
  lightDir_83 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = normalize(viewDir_84);
  viewDir_84 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = normalize(normT_4);
  mediump float tmpvar_90;
  tmpvar_90 = dot (tmpvar_89, tmpvar_87);
  highp float tmpvar_91;
  mediump float tmpvar_92;
  tmpvar_92 = clamp (dot (normalize(
    (tmpvar_87 + tmpvar_88)
  ), tmpvar_89), 0.0, 1.0);
  tmpvar_91 = tmpvar_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_90) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_91, _SpecularPower) * _SpecularColor.w)
  )) * (atten_85 * 4.0));
  c_86.xyz = tmpvar_93;
  c_86.w = (tmpvar_90 * (atten_85 * 4.0));
  highp vec3 tmpvar_94;
  tmpvar_94 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_95;
  lightDir_95 = tmpvar_94;
  mediump vec3 normal_96;
  normal_96 = xlv_TEXCOORD3;
  mediump float tmpvar_97;
  tmpvar_97 = dot (normal_96, lightDir_95);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_86 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_97)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_97)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_98;
  tmpvar_98 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_98;
  tmpvar_1 = tmpvar_98;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 29 math
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "tangent" ATTR2
ConstBuffer "$Globals" 560
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [_Object2World]
Matrix 416 [_World2Object]
Matrix 496 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 480 [unity_Scale]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesTANGENT [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float4 unity_Scale;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = normalize(_mtl_i._glesNormal);
  float4 tmpvar_2;
  tmpvar_2.xyz = normalize(_mtl_i._glesTANGENT.xyz);
  tmpvar_2.w = _mtl_i._glesTANGENT.w;
  float3 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  tmpvar_3 = (cse_4.xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * tmpvar_9).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_5).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * _mtl_u._WorldSpaceLightPos0).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_4);
  _mtl_o.xlv_TEXCOORD7 = (_mtl_u.unity_World2Shadow[0] * cse_4);
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 339 math, 9 textures, 16 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 unity_Scale;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec3 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  tmpvar_1 = (cse_2.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_6 * (
    ((_World2Object * tmpvar_7).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_2).xyz;
  xlv_TEXCOORD7 = (cse_2.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 color_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  vec2 uv_5;
  float tmpvar_6;
  if ((abs(tmpvar_4.z) > (1e-08 * abs(tmpvar_4.x)))) {
    float tmpvar_7;
    tmpvar_7 = (tmpvar_4.x / tmpvar_4.z);
    tmpvar_6 = (tmpvar_7 * inversesqrt((
      (tmpvar_7 * tmpvar_7)
     + 1.0)));
    tmpvar_6 = (sign(tmpvar_6) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_6)))
     * 
      (1.5708 + (abs(tmpvar_6) * (-0.214602 + (
        abs(tmpvar_6)
       * 
        (0.0865667 + (abs(tmpvar_6) * -0.0310296))
      ))))
    )));
    if ((tmpvar_4.z < 0.0)) {
      if ((tmpvar_4.x >= 0.0)) {
        tmpvar_6 += 3.14159;
      } else {
        tmpvar_6 = (tmpvar_6 - 3.14159);
      };
    };
  } else {
    tmpvar_6 = (sign(tmpvar_4.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * tmpvar_6));
  uv_5.y = (0.31831 * (1.5708 - (
    sign(tmpvar_4.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_4.y)
    )) * (1.5708 + (
      abs(tmpvar_4.y)
     * 
      (-0.214602 + (abs(tmpvar_4.y) * (0.0865667 + (
        abs(tmpvar_4.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_4.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_4.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_5.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_5.y);
  vec3 normal_11;
  normal_11.xy = ((texture2DGradARB (_BumpMap, uv_5, tmpvar_10.xy, tmpvar_10.zw).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (
    dot (normal_11.xy, normal_11.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float tmpvar_15;
    tmpvar_15 = (tmpvar_12.x / tmpvar_12.z);
    tmpvar_14 = (tmpvar_15 * inversesqrt((
      (tmpvar_15 * tmpvar_15)
     + 1.0)));
    tmpvar_14 = (sign(tmpvar_14) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_14)))
     * 
      (1.5708 + (abs(tmpvar_14) * (-0.214602 + (
        abs(tmpvar_14)
       * 
        (0.0865667 + (abs(tmpvar_14) * -0.0310296))
      ))))
    )));
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.14159;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.14159);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * tmpvar_14));
  uv_13.y = (0.31831 * (1.5708 - (
    sign(tmpvar_12.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.5708 + (
      abs(tmpvar_12.y)
     * 
      (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (
        abs(tmpvar_12.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_13.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_13.y);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_CityOverlayTex, uv_13, tmpvar_18.xy, tmpvar_18.zw);
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2);
  vec2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_28.yxz, mix (tmpvar_28, tmpvar_28.zxy, vec3(tmpvar_29)), vec3(float((
    mix (tmpvar_28.x, tmpvar_28.z, tmpvar_29)
   >= tmpvar_28.y))));
  vec4 tmpvar_31;
  tmpvar_31 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_30.zy) / abs(tmpvar_30.x)) * _CityOverlayDetailScale), tmpvar_27.xy, tmpvar_27.zw);
  citydarkoverlaydetail_2 = tmpvar_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec2 uv_33;
  float tmpvar_34;
  if ((abs(tmpvar_32.z) > (1e-08 * abs(tmpvar_32.x)))) {
    float tmpvar_35;
    tmpvar_35 = (tmpvar_32.x / tmpvar_32.z);
    tmpvar_34 = (tmpvar_35 * inversesqrt((
      (tmpvar_35 * tmpvar_35)
     + 1.0)));
    tmpvar_34 = (sign(tmpvar_34) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_34)))
     * 
      (1.5708 + (abs(tmpvar_34) * (-0.214602 + (
        abs(tmpvar_34)
       * 
        (0.0865667 + (abs(tmpvar_34) * -0.0310296))
      ))))
    )));
    if ((tmpvar_32.z < 0.0)) {
      if ((tmpvar_32.x >= 0.0)) {
        tmpvar_34 += 3.14159;
      } else {
        tmpvar_34 = (tmpvar_34 - 3.14159);
      };
    };
  } else {
    tmpvar_34 = (sign(tmpvar_32.x) * 1.5708);
  };
  uv_33.x = (0.5 + (0.159155 * tmpvar_34));
  uv_33.y = (0.31831 * (1.5708 - (
    sign(tmpvar_32.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_32.y)
    )) * (1.5708 + (
      abs(tmpvar_32.y)
     * 
      (-0.214602 + (abs(tmpvar_32.y) * (0.0865667 + (
        abs(tmpvar_32.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_36;
  tmpvar_36 = ((uv_33 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_37;
  tmpvar_37 = dFdx(tmpvar_32.xz);
  vec2 tmpvar_38;
  tmpvar_38 = dFdy(tmpvar_32.xz);
  vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36.y);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36.y);
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_32);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.yxz, mix (tmpvar_40, tmpvar_40.zxy, vec3(tmpvar_41)), vec3(float((
    mix (tmpvar_40.x, tmpvar_40.z, tmpvar_41)
   >= tmpvar_40.y))));
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_42.zy) / abs(tmpvar_42.x)) * _CityOverlayDetailScale), tmpvar_39.xy, tmpvar_39.zw);
  citylightoverlaydetail_1.xyz = tmpvar_43.xyz;
  citydarkoverlaydetail_2.w = (tmpvar_31.w * tmpvar_19.w);
  citylightoverlaydetail_1.w = (tmpvar_43.w * tmpvar_19.w);
  color_3.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_43.xyz, citylightoverlaydetail_1.www);
  color_3.w = 0.0;
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 shadowVals_45;
  shadowVals_45.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  shadowVals_45.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  shadowVals_45.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  shadowVals_45.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_46;
  tmpvar_46 = lessThan (shadowVals_45, vec4(((
    sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_47;
  tmpvar_47 = _LightShadowData.xxxx;
  float tmpvar_48;
  if (tmpvar_46.x) {
    tmpvar_48 = tmpvar_47.x;
  } else {
    tmpvar_48 = 1.0;
  };
  float tmpvar_49;
  if (tmpvar_46.y) {
    tmpvar_49 = tmpvar_47.y;
  } else {
    tmpvar_49 = 1.0;
  };
  float tmpvar_50;
  if (tmpvar_46.z) {
    tmpvar_50 = tmpvar_47.z;
  } else {
    tmpvar_50 = 1.0;
  };
  float tmpvar_51;
  if (tmpvar_46.w) {
    tmpvar_51 = tmpvar_47.w;
  } else {
    tmpvar_51 = 1.0;
  };
  vec4 tmpvar_52;
  tmpvar_52.x = tmpvar_48;
  tmpvar_52.y = tmpvar_49;
  tmpvar_52.z = tmpvar_50;
  tmpvar_52.w = tmpvar_51;
  float atten_53;
  atten_53 = (tmpvar_44.w * dot (tmpvar_52, vec4(0.25, 0.25, 0.25, 0.25)));
  vec4 c_54;
  vec3 tmpvar_55;
  tmpvar_55 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_56;
  tmpvar_56 = normalize(normal_11);
  float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_55);
  c_54.xyz = (((
    (color_3.xyz * _LightColor0.xyz)
   * tmpvar_57) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_55 + normalize(xlv_TEXCOORD1)))
    , tmpvar_56), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_53 * 4.0));
  c_54.w = (tmpvar_57 * (atten_53 * 4.0));
  float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_54 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_58)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_58)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_59;
  tmpvar_59 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_3 = tmpvar_59;
  gl_FragData[0] = tmpvar_59;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Vector 19 [unity_Scale]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c20, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r0.xyz, v1.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v2.w
mov r0.w, c20.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
mad r0.xyz, r1, c19.w, -v0
dp3 r2.y, r0, r3
dp3 r2.x, r0, v2
dp3 r2.z, v1, r0
dp3 r1.x, r2, r2
rsq r2.w, r1.x
mov r1, c8
mov r0, c10
dp4 r4.z, c17, r0
mov r0, c9
dp4 r4.y, c17, r0
dp4 r4.x, c17, r1
mad r0.xyz, r4, c19.w, -v0
dp3 r1.y, r3, r0
dp3 r1.x, v2, r0
dp3 r1.z, v1, r0
mov r0.xyz, v1
mov r0.w, c20.y
mul o2.xyz, r2.w, r2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r1.w, r1, r1
rsq r0.y, r1.w
mul o5.xyz, r0.y, r1
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c16
dp4 o6.z, r0, c14
dp4 o6.y, r0, c13
dp4 o6.x, r0, c12
dp3 r0.w, r1, r1
dp4 r1.w, v0, v0
rsq r1.x, r1.w
rsq r0.w, r0.w
mul r1.xyz, r1.x, v0
rcp o1.x, r0.w
mov o3.xyz, -r1
add o7.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 55 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 304
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
Vector 320 [unity_Scale]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefieceddockaodmikplkpajocmcbmbmhpcakegbabaaaaaajmajaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcbaaiaaaaeaaaabaaaeacaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
adaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaacgbjbaaaabaaaaaajgbebaaaacaaaaaadcaaaaakhcaabaaa
aaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
abaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaa
aaaaaaaabaaaaaahecaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaacaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaah
icaabaaaacaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaajgahbaaaacaaaaaajgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaa
acaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaagaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafbccabaaaabaaaaaadkaabaaaaaaaaaaabbaaaaahicaabaaaaaaaaaaa
egbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaa
dgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaabaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaabaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
adaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaa
fgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaia
ebaaaaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
baaaaaahecaabaaaaaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
adaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaafaaaaaaegiccaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 335 math, 9 textures, 16 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
  xlv_TEXCOORD7 = (cse_4.xyz - _LightPositionRange.xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2D (_LightTexture0, vec2(tmpvar_66));
  highp float tmpvar_68;
  highp vec4 shadowVals_69;
  highp float tmpvar_70;
  tmpvar_70 = ((sqrt(
    dot (xlv_TEXCOORD7, xlv_TEXCOORD7)
  ) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_69.x = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_69.y = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_77;
  vec_77 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = textureCube (_ShadowMapTexture, vec_77);
  packDist_78 = tmpvar_79;
  shadowVals_69.z = dot (packDist_78, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_80;
  vec_80 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_81;
  lowp vec4 tmpvar_82;
  tmpvar_82 = textureCube (_ShadowMapTexture, vec_80);
  packDist_81 = tmpvar_82;
  shadowVals_69.w = dot (packDist_81, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_83;
  tmpvar_83 = lessThan (shadowVals_69, vec4(tmpvar_70));
  highp vec4 tmpvar_84;
  tmpvar_84 = _LightShadowData.xxxx;
  highp float tmpvar_85;
  if (tmpvar_83.x) {
    tmpvar_85 = tmpvar_84.x;
  } else {
    tmpvar_85 = 1.0;
  };
  highp float tmpvar_86;
  if (tmpvar_83.y) {
    tmpvar_86 = tmpvar_84.y;
  } else {
    tmpvar_86 = 1.0;
  };
  highp float tmpvar_87;
  if (tmpvar_83.z) {
    tmpvar_87 = tmpvar_84.z;
  } else {
    tmpvar_87 = 1.0;
  };
  highp float tmpvar_88;
  if (tmpvar_83.w) {
    tmpvar_88 = tmpvar_84.w;
  } else {
    tmpvar_88 = 1.0;
  };
  mediump vec4 tmpvar_89;
  tmpvar_89.x = tmpvar_85;
  tmpvar_89.y = tmpvar_86;
  tmpvar_89.z = tmpvar_87;
  tmpvar_89.w = tmpvar_88;
  mediump float tmpvar_90;
  tmpvar_90 = dot (tmpvar_89, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_68 = tmpvar_90;
  mediump vec3 lightDir_91;
  lightDir_91 = xlv_TEXCOORD5;
  mediump vec3 viewDir_92;
  viewDir_92 = xlv_TEXCOORD1;
  mediump float atten_93;
  atten_93 = (tmpvar_67.w * tmpvar_68);
  mediump vec4 c_94;
  mediump vec3 tmpvar_95;
  tmpvar_95 = normalize(lightDir_91);
  lightDir_91 = tmpvar_95;
  mediump vec3 tmpvar_96;
  tmpvar_96 = normalize(viewDir_92);
  viewDir_92 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = normalize(normT_4);
  mediump float tmpvar_98;
  tmpvar_98 = dot (tmpvar_97, tmpvar_95);
  highp float tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = clamp (dot (normalize(
    (tmpvar_95 + tmpvar_96)
  ), tmpvar_97), 0.0, 1.0);
  tmpvar_99 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_98) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_99, _SpecularPower) * _SpecularColor.w)
  )) * (atten_93 * 4.0));
  c_94.xyz = tmpvar_101;
  c_94.w = (tmpvar_98 * (atten_93 * 4.0));
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_103;
  lightDir_103 = tmpvar_102;
  mediump vec3 normal_104;
  normal_104 = xlv_TEXCOORD3;
  mediump float tmpvar_105;
  tmpvar_105 = dot (normal_104, lightDir_103);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_94 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_105)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_105)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_106;
  tmpvar_106 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_106;
  tmpvar_1 = tmpvar_106;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 335 math, 9 textures, 16 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
  xlv_TEXCOORD7 = (cse_4.xyz - _LightPositionRange.xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2D (_LightTexture0, vec2(tmpvar_66));
  highp float tmpvar_68;
  highp vec4 shadowVals_69;
  highp float tmpvar_70;
  tmpvar_70 = ((sqrt(
    dot (xlv_TEXCOORD7, xlv_TEXCOORD7)
  ) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_69.x = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_69.y = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_77;
  vec_77 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = textureCube (_ShadowMapTexture, vec_77);
  packDist_78 = tmpvar_79;
  shadowVals_69.z = dot (packDist_78, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_80;
  vec_80 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_81;
  lowp vec4 tmpvar_82;
  tmpvar_82 = textureCube (_ShadowMapTexture, vec_80);
  packDist_81 = tmpvar_82;
  shadowVals_69.w = dot (packDist_81, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_83;
  tmpvar_83 = lessThan (shadowVals_69, vec4(tmpvar_70));
  highp vec4 tmpvar_84;
  tmpvar_84 = _LightShadowData.xxxx;
  highp float tmpvar_85;
  if (tmpvar_83.x) {
    tmpvar_85 = tmpvar_84.x;
  } else {
    tmpvar_85 = 1.0;
  };
  highp float tmpvar_86;
  if (tmpvar_83.y) {
    tmpvar_86 = tmpvar_84.y;
  } else {
    tmpvar_86 = 1.0;
  };
  highp float tmpvar_87;
  if (tmpvar_83.z) {
    tmpvar_87 = tmpvar_84.z;
  } else {
    tmpvar_87 = 1.0;
  };
  highp float tmpvar_88;
  if (tmpvar_83.w) {
    tmpvar_88 = tmpvar_84.w;
  } else {
    tmpvar_88 = 1.0;
  };
  mediump vec4 tmpvar_89;
  tmpvar_89.x = tmpvar_85;
  tmpvar_89.y = tmpvar_86;
  tmpvar_89.z = tmpvar_87;
  tmpvar_89.w = tmpvar_88;
  mediump float tmpvar_90;
  tmpvar_90 = dot (tmpvar_89, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_68 = tmpvar_90;
  mediump vec3 lightDir_91;
  lightDir_91 = xlv_TEXCOORD5;
  mediump vec3 viewDir_92;
  viewDir_92 = xlv_TEXCOORD1;
  mediump float atten_93;
  atten_93 = (tmpvar_67.w * tmpvar_68);
  mediump vec4 c_94;
  mediump vec3 tmpvar_95;
  tmpvar_95 = normalize(lightDir_91);
  lightDir_91 = tmpvar_95;
  mediump vec3 tmpvar_96;
  tmpvar_96 = normalize(viewDir_92);
  viewDir_92 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = normalize(normT_4);
  mediump float tmpvar_98;
  tmpvar_98 = dot (tmpvar_97, tmpvar_95);
  highp float tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = clamp (dot (normalize(
    (tmpvar_95 + tmpvar_96)
  ), tmpvar_97), 0.0, 1.0);
  tmpvar_99 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_98) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_99, _SpecularPower) * _SpecularColor.w)
  )) * (atten_93 * 4.0));
  c_94.xyz = tmpvar_101;
  c_94.w = (tmpvar_98 * (atten_93 * 4.0));
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_103;
  lightDir_103 = tmpvar_102;
  mediump vec3 normal_104;
  normal_104 = xlv_TEXCOORD3;
  mediump float tmpvar_105;
  tmpvar_105 = dot (normal_104, lightDir_103);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_94 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_105)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_105)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_106;
  tmpvar_106 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_106;
  tmpvar_1 = tmpvar_106;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 335 math, 9 textures, 16 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
  xlv_TEXCOORD7 = (cse_4.xyz - _LightPositionRange.xyz);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = textureGrad (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = textureGrad (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureGrad (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture (_LightTexture0, vec2(tmpvar_66));
  highp float tmpvar_68;
  highp vec4 shadowVals_69;
  highp float tmpvar_70;
  tmpvar_70 = ((sqrt(
    dot (xlv_TEXCOORD7, xlv_TEXCOORD7)
  ) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = texture (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_69.x = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = texture (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_69.y = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_77;
  vec_77 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_78;
  lowp vec4 tmpvar_79;
  tmpvar_79 = texture (_ShadowMapTexture, vec_77);
  packDist_78 = tmpvar_79;
  shadowVals_69.z = dot (packDist_78, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_80;
  vec_80 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_81;
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture (_ShadowMapTexture, vec_80);
  packDist_81 = tmpvar_82;
  shadowVals_69.w = dot (packDist_81, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_83;
  tmpvar_83 = lessThan (shadowVals_69, vec4(tmpvar_70));
  highp vec4 tmpvar_84;
  tmpvar_84 = _LightShadowData.xxxx;
  highp float tmpvar_85;
  if (tmpvar_83.x) {
    tmpvar_85 = tmpvar_84.x;
  } else {
    tmpvar_85 = 1.0;
  };
  highp float tmpvar_86;
  if (tmpvar_83.y) {
    tmpvar_86 = tmpvar_84.y;
  } else {
    tmpvar_86 = 1.0;
  };
  highp float tmpvar_87;
  if (tmpvar_83.z) {
    tmpvar_87 = tmpvar_84.z;
  } else {
    tmpvar_87 = 1.0;
  };
  highp float tmpvar_88;
  if (tmpvar_83.w) {
    tmpvar_88 = tmpvar_84.w;
  } else {
    tmpvar_88 = 1.0;
  };
  mediump vec4 tmpvar_89;
  tmpvar_89.x = tmpvar_85;
  tmpvar_89.y = tmpvar_86;
  tmpvar_89.z = tmpvar_87;
  tmpvar_89.w = tmpvar_88;
  mediump float tmpvar_90;
  tmpvar_90 = dot (tmpvar_89, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_68 = tmpvar_90;
  mediump vec3 lightDir_91;
  lightDir_91 = xlv_TEXCOORD5;
  mediump vec3 viewDir_92;
  viewDir_92 = xlv_TEXCOORD1;
  mediump float atten_93;
  atten_93 = (tmpvar_67.w * tmpvar_68);
  mediump vec4 c_94;
  mediump vec3 tmpvar_95;
  tmpvar_95 = normalize(lightDir_91);
  lightDir_91 = tmpvar_95;
  mediump vec3 tmpvar_96;
  tmpvar_96 = normalize(viewDir_92);
  viewDir_92 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = normalize(normT_4);
  mediump float tmpvar_98;
  tmpvar_98 = dot (tmpvar_97, tmpvar_95);
  highp float tmpvar_99;
  mediump float tmpvar_100;
  tmpvar_100 = clamp (dot (normalize(
    (tmpvar_95 + tmpvar_96)
  ), tmpvar_97), 0.0, 1.0);
  tmpvar_99 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_98) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_99, _SpecularPower) * _SpecularColor.w)
  )) * (atten_93 * 4.0));
  c_94.xyz = tmpvar_101;
  c_94.w = (tmpvar_98 * (atten_93 * 4.0));
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_103;
  lightDir_103 = tmpvar_102;
  mediump vec3 normal_104;
  normal_104 = xlv_TEXCOORD3;
  mediump float tmpvar_105;
  tmpvar_105 = dot (normal_104, lightDir_103);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_94 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_105)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_105)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_106;
  tmpvar_106 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_106;
  tmpvar_1 = tmpvar_106;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 29 math
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "tangent" ATTR2
ConstBuffer "$Globals" 320
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [_Object2World]
Matrix 176 [_World2Object]
Matrix 256 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [unity_Scale]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesTANGENT [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float4 unity_Scale;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = normalize(_mtl_i._glesNormal);
  float4 tmpvar_2;
  tmpvar_2.xyz = normalize(_mtl_i._glesTANGENT.xyz);
  tmpvar_2.w = _mtl_i._glesTANGENT.w;
  float3 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  tmpvar_3 = (cse_4.xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * tmpvar_9).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_5).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * _mtl_u._WorldSpaceLightPos0).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_4).xyz;
  _mtl_o.xlv_TEXCOORD7 = (cse_4.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "opengl " {
// Stats: 340 math, 10 textures, 16 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
uniform vec3 _WorldSpaceCameraPos;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;

uniform mat4 _Object2World;
uniform mat4 _World2Object;
uniform vec4 unity_Scale;
uniform mat4 _LightMatrix0;
attribute vec4 TANGENT;
varying float xlv_TEXCOORD0;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec3 tmpvar_1;
  vec4 cse_2;
  cse_2 = (_Object2World * gl_Vertex);
  tmpvar_1 = (cse_2.xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = _WorldSpaceCameraPos;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_1, tmpvar_1));
  xlv_TEXCOORD1 = normalize((tmpvar_6 * (
    ((_World2Object * tmpvar_7).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_3).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_2).xyz;
  xlv_TEXCOORD7 = (cse_2.xyz - _LightPositionRange.xyz);
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _LightPositionRange;
uniform vec4 _LightShadowData;
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform vec4 _LightColor0;
uniform float _SpecularPower;
uniform vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD7;
void main ()
{
  vec4 citylightoverlaydetail_1;
  vec4 citydarkoverlaydetail_2;
  vec4 color_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize(xlv_TEXCOORD2);
  vec2 uv_5;
  float tmpvar_6;
  if ((abs(tmpvar_4.z) > (1e-08 * abs(tmpvar_4.x)))) {
    float tmpvar_7;
    tmpvar_7 = (tmpvar_4.x / tmpvar_4.z);
    tmpvar_6 = (tmpvar_7 * inversesqrt((
      (tmpvar_7 * tmpvar_7)
     + 1.0)));
    tmpvar_6 = (sign(tmpvar_6) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_6)))
     * 
      (1.5708 + (abs(tmpvar_6) * (-0.214602 + (
        abs(tmpvar_6)
       * 
        (0.0865667 + (abs(tmpvar_6) * -0.0310296))
      ))))
    )));
    if ((tmpvar_4.z < 0.0)) {
      if ((tmpvar_4.x >= 0.0)) {
        tmpvar_6 += 3.14159;
      } else {
        tmpvar_6 = (tmpvar_6 - 3.14159);
      };
    };
  } else {
    tmpvar_6 = (sign(tmpvar_4.x) * 1.5708);
  };
  uv_5.x = (0.5 + (0.159155 * tmpvar_6));
  uv_5.y = (0.31831 * (1.5708 - (
    sign(tmpvar_4.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_4.y)
    )) * (1.5708 + (
      abs(tmpvar_4.y)
     * 
      (-0.214602 + (abs(tmpvar_4.y) * (0.0865667 + (
        abs(tmpvar_4.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_8;
  tmpvar_8 = dFdx(tmpvar_4.xz);
  vec2 tmpvar_9;
  tmpvar_9 = dFdy(tmpvar_4.xz);
  vec4 tmpvar_10;
  tmpvar_10.x = (0.159155 * sqrt(dot (tmpvar_8, tmpvar_8)));
  tmpvar_10.y = dFdx(uv_5.y);
  tmpvar_10.z = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_10.w = dFdy(uv_5.y);
  vec3 normal_11;
  normal_11.xy = ((texture2DGradARB (_BumpMap, uv_5, tmpvar_10.xy, tmpvar_10.zw).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (
    dot (normal_11.xy, normal_11.xy)
  , 0.0, 1.0)));
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2);
  vec2 uv_13;
  float tmpvar_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float tmpvar_15;
    tmpvar_15 = (tmpvar_12.x / tmpvar_12.z);
    tmpvar_14 = (tmpvar_15 * inversesqrt((
      (tmpvar_15 * tmpvar_15)
     + 1.0)));
    tmpvar_14 = (sign(tmpvar_14) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_14)))
     * 
      (1.5708 + (abs(tmpvar_14) * (-0.214602 + (
        abs(tmpvar_14)
       * 
        (0.0865667 + (abs(tmpvar_14) * -0.0310296))
      ))))
    )));
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        tmpvar_14 += 3.14159;
      } else {
        tmpvar_14 = (tmpvar_14 - 3.14159);
      };
    };
  } else {
    tmpvar_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * tmpvar_14));
  uv_13.y = (0.31831 * (1.5708 - (
    sign(tmpvar_12.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_12.y)
    )) * (1.5708 + (
      abs(tmpvar_12.y)
     * 
      (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (
        abs(tmpvar_12.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_13.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_13.y);
  vec4 tmpvar_19;
  tmpvar_19 = texture2DGradARB (_CityOverlayTex, uv_13, tmpvar_18.xy, tmpvar_18.zw);
  vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD2);
  vec2 uv_21;
  float tmpvar_22;
  if ((abs(tmpvar_20.z) > (1e-08 * abs(tmpvar_20.x)))) {
    float tmpvar_23;
    tmpvar_23 = (tmpvar_20.x / tmpvar_20.z);
    tmpvar_22 = (tmpvar_23 * inversesqrt((
      (tmpvar_23 * tmpvar_23)
     + 1.0)));
    tmpvar_22 = (sign(tmpvar_22) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_22)))
     * 
      (1.5708 + (abs(tmpvar_22) * (-0.214602 + (
        abs(tmpvar_22)
       * 
        (0.0865667 + (abs(tmpvar_22) * -0.0310296))
      ))))
    )));
    if ((tmpvar_20.z < 0.0)) {
      if ((tmpvar_20.x >= 0.0)) {
        tmpvar_22 += 3.14159;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.14159);
      };
    };
  } else {
    tmpvar_22 = (sign(tmpvar_20.x) * 1.5708);
  };
  uv_21.x = (0.5 + (0.159155 * tmpvar_22));
  uv_21.y = (0.31831 * (1.5708 - (
    sign(tmpvar_20.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_20.y)
    )) * (1.5708 + (
      abs(tmpvar_20.y)
     * 
      (-0.214602 + (abs(tmpvar_20.y) * (0.0865667 + (
        abs(tmpvar_20.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_24;
  tmpvar_24 = ((uv_21 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_25;
  tmpvar_25 = dFdx(tmpvar_20.xz);
  vec2 tmpvar_26;
  tmpvar_26 = dFdy(tmpvar_20.xz);
  vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24.y);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24.y);
  vec3 tmpvar_28;
  tmpvar_28 = abs(tmpvar_20);
  float tmpvar_29;
  tmpvar_29 = float((tmpvar_28.z >= tmpvar_28.x));
  vec3 tmpvar_30;
  tmpvar_30 = mix (tmpvar_28.yxz, mix (tmpvar_28, tmpvar_28.zxy, vec3(tmpvar_29)), vec3(float((
    mix (tmpvar_28.x, tmpvar_28.z, tmpvar_29)
   >= tmpvar_28.y))));
  vec4 tmpvar_31;
  tmpvar_31 = texture2DGradARB (_CityDarkOverlayDetailTex, (((0.5 * tmpvar_30.zy) / abs(tmpvar_30.x)) * _CityOverlayDetailScale), tmpvar_27.xy, tmpvar_27.zw);
  citydarkoverlaydetail_2 = tmpvar_31;
  vec3 tmpvar_32;
  tmpvar_32 = normalize(xlv_TEXCOORD2);
  vec2 uv_33;
  float tmpvar_34;
  if ((abs(tmpvar_32.z) > (1e-08 * abs(tmpvar_32.x)))) {
    float tmpvar_35;
    tmpvar_35 = (tmpvar_32.x / tmpvar_32.z);
    tmpvar_34 = (tmpvar_35 * inversesqrt((
      (tmpvar_35 * tmpvar_35)
     + 1.0)));
    tmpvar_34 = (sign(tmpvar_34) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_34)))
     * 
      (1.5708 + (abs(tmpvar_34) * (-0.214602 + (
        abs(tmpvar_34)
       * 
        (0.0865667 + (abs(tmpvar_34) * -0.0310296))
      ))))
    )));
    if ((tmpvar_32.z < 0.0)) {
      if ((tmpvar_32.x >= 0.0)) {
        tmpvar_34 += 3.14159;
      } else {
        tmpvar_34 = (tmpvar_34 - 3.14159);
      };
    };
  } else {
    tmpvar_34 = (sign(tmpvar_32.x) * 1.5708);
  };
  uv_33.x = (0.5 + (0.159155 * tmpvar_34));
  uv_33.y = (0.31831 * (1.5708 - (
    sign(tmpvar_32.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_32.y)
    )) * (1.5708 + (
      abs(tmpvar_32.y)
     * 
      (-0.214602 + (abs(tmpvar_32.y) * (0.0865667 + (
        abs(tmpvar_32.y)
       * -0.0310296))))
    ))))
  )));
  vec2 tmpvar_36;
  tmpvar_36 = ((uv_33 * 4.0) * _CityOverlayDetailScale);
  vec2 tmpvar_37;
  tmpvar_37 = dFdx(tmpvar_32.xz);
  vec2 tmpvar_38;
  tmpvar_38 = dFdy(tmpvar_32.xz);
  vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36.y);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36.y);
  vec3 tmpvar_40;
  tmpvar_40 = abs(tmpvar_32);
  float tmpvar_41;
  tmpvar_41 = float((tmpvar_40.z >= tmpvar_40.x));
  vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40.yxz, mix (tmpvar_40, tmpvar_40.zxy, vec3(tmpvar_41)), vec3(float((
    mix (tmpvar_40.x, tmpvar_40.z, tmpvar_41)
   >= tmpvar_40.y))));
  vec4 tmpvar_43;
  tmpvar_43 = texture2DGradARB (_CityLightOverlayDetailTex, (((0.5 * tmpvar_42.zy) / abs(tmpvar_42.x)) * _CityOverlayDetailScale), tmpvar_39.xy, tmpvar_39.zw);
  citylightoverlaydetail_1.xyz = tmpvar_43.xyz;
  citydarkoverlaydetail_2.w = (tmpvar_31.w * tmpvar_19.w);
  citylightoverlaydetail_1.w = (tmpvar_43.w * tmpvar_19.w);
  color_3.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_43.xyz, citylightoverlaydetail_1.www);
  color_3.w = 0.0;
  vec4 tmpvar_44;
  tmpvar_44 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_45;
  tmpvar_45 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  vec4 shadowVals_46;
  shadowVals_46.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  shadowVals_46.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  shadowVals_46.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  shadowVals_46.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_47;
  tmpvar_47 = lessThan (shadowVals_46, vec4(((
    sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7))
   * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_48;
  tmpvar_48 = _LightShadowData.xxxx;
  float tmpvar_49;
  if (tmpvar_47.x) {
    tmpvar_49 = tmpvar_48.x;
  } else {
    tmpvar_49 = 1.0;
  };
  float tmpvar_50;
  if (tmpvar_47.y) {
    tmpvar_50 = tmpvar_48.y;
  } else {
    tmpvar_50 = 1.0;
  };
  float tmpvar_51;
  if (tmpvar_47.z) {
    tmpvar_51 = tmpvar_48.z;
  } else {
    tmpvar_51 = 1.0;
  };
  float tmpvar_52;
  if (tmpvar_47.w) {
    tmpvar_52 = tmpvar_48.w;
  } else {
    tmpvar_52 = 1.0;
  };
  vec4 tmpvar_53;
  tmpvar_53.x = tmpvar_49;
  tmpvar_53.y = tmpvar_50;
  tmpvar_53.z = tmpvar_51;
  tmpvar_53.w = tmpvar_52;
  float atten_54;
  atten_54 = ((tmpvar_44.w * tmpvar_45.w) * dot (tmpvar_53, vec4(0.25, 0.25, 0.25, 0.25)));
  vec4 c_55;
  vec3 tmpvar_56;
  tmpvar_56 = normalize(xlv_TEXCOORD5);
  vec3 tmpvar_57;
  tmpvar_57 = normalize(normal_11);
  float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_56);
  c_55.xyz = (((
    (color_3.xyz * _LightColor0.xyz)
   * tmpvar_58) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (clamp (dot (
      normalize((tmpvar_56 + normalize(xlv_TEXCOORD1)))
    , tmpvar_57), 0.0, 1.0), _SpecularPower) * _SpecularColor.w)
  )) * (atten_54 * 4.0));
  c_55.w = (tmpvar_58 * (atten_54 * 4.0));
  float tmpvar_59;
  tmpvar_59 = dot (xlv_TEXCOORD3, normalize(_WorldSpaceLightPos0).xyz);
  citydarkoverlaydetail_2.w = (citydarkoverlaydetail_2.w * (1.0 - clamp (
    (c_55 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_59)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_59)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  vec4 tmpvar_60;
  tmpvar_60 = mix (citylightoverlaydetail_1, citydarkoverlaydetail_2, citydarkoverlaydetail_2.wwww);
  color_3 = tmpvar_60;
  gl_FragData[0] = tmpvar_60;
}


#endif
"
}
SubProgram "d3d9 " {
// Stats: 58 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Vector 19 [unity_Scale]
"vs_3_0
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c20, 1.00000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r0.xyz, v1.yzxw, r0.zxyw, -r1
mul r3.xyz, r0, v2.w
mov r0.w, c20.x
mov r0.xyz, c16
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
mad r0.xyz, r1, c19.w, -v0
dp3 r2.y, r0, r3
dp3 r2.x, r0, v2
dp3 r2.z, v1, r0
dp3 r1.x, r2, r2
rsq r2.w, r1.x
mov r1, c8
mov r0, c10
dp4 r4.z, c17, r0
mov r0, c9
dp4 r4.y, c17, r0
dp4 r4.x, c17, r1
mad r0.xyz, r4, c19.w, -v0
dp3 r1.y, r3, r0
dp3 r1.x, v2, r0
dp3 r1.z, v1, r0
mov r0.xyz, v1
mov r0.w, c20.y
mul o2.xyz, r2.w, r2
dp4 r2.z, r0, c6
dp4 r2.x, r0, c4
dp4 r2.y, r0, c5
dp3 r1.w, r1, r1
rsq r0.y, r1.w
mul o5.xyz, r0.y, r1
dp3 r0.x, r2, r2
rsq r0.x, r0.x
mul o4.xyz, r0.x, r2
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 r0.w, v0, c7
add r1.xyz, -r0, c16
dp4 o6.z, r0, c14
dp4 o6.y, r0, c13
dp4 o6.x, r0, c12
dp3 r0.w, r1, r1
dp4 r1.w, v0, v0
rsq r1.x, r1.w
rsq r0.w, r0.w
mul r1.xyz, r1.x, v0
rcp o1.x, r0.w
mov o3.xyz, -r1
add o7.xyz, r0, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}
SubProgram "d3d11 " {
// Stats: 55 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
ConstBuffer "$Globals" 304
Matrix 16 [_LightMatrix0]
ConstBuffer "UnityPerCamera" 128
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityPerDraw" 336
Matrix 0 [glstate_matrix_mvp]
Matrix 192 [_Object2World]
Matrix 256 [_World2Object]
Vector 320 [unity_Scale]
BindCB  "$Globals" 0
BindCB  "UnityPerCamera" 1
BindCB  "UnityLighting" 2
BindCB  "UnityPerDraw" 3
"vs_4_0
eefieceddockaodmikplkpajocmcbmbmhpcakegbabaaaaaajmajaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apapaaaafaepfdejfeejepeoaaeoepfcenebemaafeebeoehefeofeaaepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaabaoaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaaoabaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaneaaaaaa
agaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaaahaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcbaaiaaaaeaaaabaaaeacaaaafjaaaaaeegiocaaaaaaaaaaa
afaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaafpaaaaadpcbabaaaacaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaadbccabaaaabaaaaaagfaaaaadoccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaa
aeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaac
adaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaa
egiocaaaadaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaacgbjbaaaabaaaaaajgbebaaaacaaaaaadcaaaaakhcaabaaa
aaaaaaaajgbebaaaabaaaaaacgbjbaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaadiaaaaaj
hcaabaaaabaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaabaaaaaaaaaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
abaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaiaebaaaaaa
aaaaaaaabaaaaaahecaabaaaacaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahccaabaaaacaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaabaaaaaah
icaabaaaacaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaajgahbaaaacaaaaaajgahbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahoccabaaaabaaaaaapgapbaaaaaaaaaaafgaobaaa
acaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaagaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafbccabaaaabaaaaaadkaabaaaaaaaaaaabbaaaaahicaabaaaaaaaaaaa
egbobaaaaaaaaaaaegbobaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaa
dgaaaaaghccabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaadiaaaaaihcaabaaa
abaaaaaafgbfbaaaabaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaabaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaabaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
adaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaajhcaabaaaabaaaaaa
fgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaa
abaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaa
acaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaalhcaabaaaabaaaaaaegiccaaa
adaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaabaaaaaadcaaaaal
hcaabaaaabaaaaaaegacbaaaabaaaaaapgipcaaaadaaaaaabeaaaaaaegbcbaia
ebaaaaaaaaaaaaaabaaaaaahccaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegacbaaaabaaaaaa
baaaaaahecaabaaaaaaaaaaaegbcbaaaabaaaaaaegacbaaaabaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
adaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagaabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaafaaaaaaegiccaaa
aaaaaaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
// Stats: 336 math, 10 textures, 16 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
  xlv_TEXCOORD7 = (cse_4.xyz - _LightPositionRange.xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2D (_LightTextureB0, vec2(tmpvar_66));
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_69;
  highp vec4 shadowVals_70;
  highp float tmpvar_71;
  tmpvar_71 = ((sqrt(
    dot (xlv_TEXCOORD7, xlv_TEXCOORD7)
  ) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_72;
  vec_72 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_73;
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_ShadowMapTexture, vec_72);
  packDist_73 = tmpvar_74;
  shadowVals_70.x = dot (packDist_73, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_75;
  vec_75 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = textureCube (_ShadowMapTexture, vec_75);
  packDist_76 = tmpvar_77;
  shadowVals_70.y = dot (packDist_76, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_78;
  vec_78 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = textureCube (_ShadowMapTexture, vec_78);
  packDist_79 = tmpvar_80;
  shadowVals_70.z = dot (packDist_79, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_81;
  vec_81 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_82;
  lowp vec4 tmpvar_83;
  tmpvar_83 = textureCube (_ShadowMapTexture, vec_81);
  packDist_82 = tmpvar_83;
  shadowVals_70.w = dot (packDist_82, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_84;
  tmpvar_84 = lessThan (shadowVals_70, vec4(tmpvar_71));
  highp vec4 tmpvar_85;
  tmpvar_85 = _LightShadowData.xxxx;
  highp float tmpvar_86;
  if (tmpvar_84.x) {
    tmpvar_86 = tmpvar_85.x;
  } else {
    tmpvar_86 = 1.0;
  };
  highp float tmpvar_87;
  if (tmpvar_84.y) {
    tmpvar_87 = tmpvar_85.y;
  } else {
    tmpvar_87 = 1.0;
  };
  highp float tmpvar_88;
  if (tmpvar_84.z) {
    tmpvar_88 = tmpvar_85.z;
  } else {
    tmpvar_88 = 1.0;
  };
  highp float tmpvar_89;
  if (tmpvar_84.w) {
    tmpvar_89 = tmpvar_85.w;
  } else {
    tmpvar_89 = 1.0;
  };
  mediump vec4 tmpvar_90;
  tmpvar_90.x = tmpvar_86;
  tmpvar_90.y = tmpvar_87;
  tmpvar_90.z = tmpvar_88;
  tmpvar_90.w = tmpvar_89;
  mediump float tmpvar_91;
  tmpvar_91 = dot (tmpvar_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_69 = tmpvar_91;
  mediump vec3 lightDir_92;
  lightDir_92 = xlv_TEXCOORD5;
  mediump vec3 viewDir_93;
  viewDir_93 = xlv_TEXCOORD1;
  mediump float atten_94;
  atten_94 = ((tmpvar_67.w * tmpvar_68.w) * tmpvar_69);
  mediump vec4 c_95;
  mediump vec3 tmpvar_96;
  tmpvar_96 = normalize(lightDir_92);
  lightDir_92 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = normalize(viewDir_93);
  viewDir_93 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = normalize(normT_4);
  mediump float tmpvar_99;
  tmpvar_99 = dot (tmpvar_98, tmpvar_96);
  highp float tmpvar_100;
  mediump float tmpvar_101;
  tmpvar_101 = clamp (dot (normalize(
    (tmpvar_96 + tmpvar_97)
  ), tmpvar_98), 0.0, 1.0);
  tmpvar_100 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_99) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_100, _SpecularPower) * _SpecularColor.w)
  )) * (atten_94 * 4.0));
  c_95.xyz = tmpvar_102;
  c_95.w = (tmpvar_99 * (atten_94 * 4.0));
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_104;
  lightDir_104 = tmpvar_103;
  mediump vec3 normal_105;
  normal_105 = xlv_TEXCOORD3;
  mediump float tmpvar_106;
  tmpvar_106 = dot (normal_105, lightDir_104);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_95 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_106)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_106)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_107;
  tmpvar_107 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_107;
  tmpvar_1 = tmpvar_107;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "glesdesktop " {
// Stats: 336 math, 10 textures, 16 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
  xlv_TEXCOORD7 = (cse_4.xyz - _LightPositionRange.xyz);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture2D (_LightTextureB0, vec2(tmpvar_66));
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_69;
  highp vec4 shadowVals_70;
  highp float tmpvar_71;
  tmpvar_71 = ((sqrt(
    dot (xlv_TEXCOORD7, xlv_TEXCOORD7)
  ) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_72;
  vec_72 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_73;
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_ShadowMapTexture, vec_72);
  packDist_73 = tmpvar_74;
  shadowVals_70.x = dot (packDist_73, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_75;
  vec_75 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = textureCube (_ShadowMapTexture, vec_75);
  packDist_76 = tmpvar_77;
  shadowVals_70.y = dot (packDist_76, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_78;
  vec_78 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = textureCube (_ShadowMapTexture, vec_78);
  packDist_79 = tmpvar_80;
  shadowVals_70.z = dot (packDist_79, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_81;
  vec_81 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_82;
  lowp vec4 tmpvar_83;
  tmpvar_83 = textureCube (_ShadowMapTexture, vec_81);
  packDist_82 = tmpvar_83;
  shadowVals_70.w = dot (packDist_82, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_84;
  tmpvar_84 = lessThan (shadowVals_70, vec4(tmpvar_71));
  highp vec4 tmpvar_85;
  tmpvar_85 = _LightShadowData.xxxx;
  highp float tmpvar_86;
  if (tmpvar_84.x) {
    tmpvar_86 = tmpvar_85.x;
  } else {
    tmpvar_86 = 1.0;
  };
  highp float tmpvar_87;
  if (tmpvar_84.y) {
    tmpvar_87 = tmpvar_85.y;
  } else {
    tmpvar_87 = 1.0;
  };
  highp float tmpvar_88;
  if (tmpvar_84.z) {
    tmpvar_88 = tmpvar_85.z;
  } else {
    tmpvar_88 = 1.0;
  };
  highp float tmpvar_89;
  if (tmpvar_84.w) {
    tmpvar_89 = tmpvar_85.w;
  } else {
    tmpvar_89 = 1.0;
  };
  mediump vec4 tmpvar_90;
  tmpvar_90.x = tmpvar_86;
  tmpvar_90.y = tmpvar_87;
  tmpvar_90.z = tmpvar_88;
  tmpvar_90.w = tmpvar_89;
  mediump float tmpvar_91;
  tmpvar_91 = dot (tmpvar_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_69 = tmpvar_91;
  mediump vec3 lightDir_92;
  lightDir_92 = xlv_TEXCOORD5;
  mediump vec3 viewDir_93;
  viewDir_93 = xlv_TEXCOORD1;
  mediump float atten_94;
  atten_94 = ((tmpvar_67.w * tmpvar_68.w) * tmpvar_69);
  mediump vec4 c_95;
  mediump vec3 tmpvar_96;
  tmpvar_96 = normalize(lightDir_92);
  lightDir_92 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = normalize(viewDir_93);
  viewDir_93 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = normalize(normT_4);
  mediump float tmpvar_99;
  tmpvar_99 = dot (tmpvar_98, tmpvar_96);
  highp float tmpvar_100;
  mediump float tmpvar_101;
  tmpvar_101 = clamp (dot (normalize(
    (tmpvar_96 + tmpvar_97)
  ), tmpvar_98), 0.0, 1.0);
  tmpvar_100 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_99) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_100, _SpecularPower) * _SpecularColor.w)
  )) * (atten_94 * 4.0));
  c_95.xyz = tmpvar_102;
  c_95.w = (tmpvar_99 * (atten_94 * 4.0));
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_104;
  lightDir_104 = tmpvar_103;
  mediump vec3 normal_105;
  normal_105 = xlv_TEXCOORD3;
  mediump float tmpvar_106;
  tmpvar_106 = dot (normal_105, lightDir_104);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_95 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_106)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_106)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_107;
  tmpvar_107 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_107;
  tmpvar_1 = tmpvar_107;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 336 math, 10 textures, 16 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xyz;
  xlv_TEXCOORD7 = (cse_4.xyz - _LightPositionRange.xyz);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _LightShadowData;
uniform lowp samplerCube _ShadowMapTexture;
uniform lowp samplerCube _LightTexture0;
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = textureGrad (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = textureGrad (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureGrad (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  highp float tmpvar_66;
  tmpvar_66 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture (_LightTextureB0, vec2(tmpvar_66));
  lowp vec4 tmpvar_68;
  tmpvar_68 = texture (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_69;
  highp vec4 shadowVals_70;
  highp float tmpvar_71;
  tmpvar_71 = ((sqrt(
    dot (xlv_TEXCOORD7, xlv_TEXCOORD7)
  ) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_72;
  vec_72 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_73;
  lowp vec4 tmpvar_74;
  tmpvar_74 = texture (_ShadowMapTexture, vec_72);
  packDist_73 = tmpvar_74;
  shadowVals_70.x = dot (packDist_73, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_75;
  vec_75 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = texture (_ShadowMapTexture, vec_75);
  packDist_76 = tmpvar_77;
  shadowVals_70.y = dot (packDist_76, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_78;
  vec_78 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_79;
  lowp vec4 tmpvar_80;
  tmpvar_80 = texture (_ShadowMapTexture, vec_78);
  packDist_79 = tmpvar_80;
  shadowVals_70.z = dot (packDist_79, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  highp vec3 vec_81;
  vec_81 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_82;
  lowp vec4 tmpvar_83;
  tmpvar_83 = texture (_ShadowMapTexture, vec_81);
  packDist_82 = tmpvar_83;
  shadowVals_70.w = dot (packDist_82, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bvec4 tmpvar_84;
  tmpvar_84 = lessThan (shadowVals_70, vec4(tmpvar_71));
  highp vec4 tmpvar_85;
  tmpvar_85 = _LightShadowData.xxxx;
  highp float tmpvar_86;
  if (tmpvar_84.x) {
    tmpvar_86 = tmpvar_85.x;
  } else {
    tmpvar_86 = 1.0;
  };
  highp float tmpvar_87;
  if (tmpvar_84.y) {
    tmpvar_87 = tmpvar_85.y;
  } else {
    tmpvar_87 = 1.0;
  };
  highp float tmpvar_88;
  if (tmpvar_84.z) {
    tmpvar_88 = tmpvar_85.z;
  } else {
    tmpvar_88 = 1.0;
  };
  highp float tmpvar_89;
  if (tmpvar_84.w) {
    tmpvar_89 = tmpvar_85.w;
  } else {
    tmpvar_89 = 1.0;
  };
  mediump vec4 tmpvar_90;
  tmpvar_90.x = tmpvar_86;
  tmpvar_90.y = tmpvar_87;
  tmpvar_90.z = tmpvar_88;
  tmpvar_90.w = tmpvar_89;
  mediump float tmpvar_91;
  tmpvar_91 = dot (tmpvar_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_69 = tmpvar_91;
  mediump vec3 lightDir_92;
  lightDir_92 = xlv_TEXCOORD5;
  mediump vec3 viewDir_93;
  viewDir_93 = xlv_TEXCOORD1;
  mediump float atten_94;
  atten_94 = ((tmpvar_67.w * tmpvar_68.w) * tmpvar_69);
  mediump vec4 c_95;
  mediump vec3 tmpvar_96;
  tmpvar_96 = normalize(lightDir_92);
  lightDir_92 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = normalize(viewDir_93);
  viewDir_93 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = normalize(normT_4);
  mediump float tmpvar_99;
  tmpvar_99 = dot (tmpvar_98, tmpvar_96);
  highp float tmpvar_100;
  mediump float tmpvar_101;
  tmpvar_101 = clamp (dot (normalize(
    (tmpvar_96 + tmpvar_97)
  ), tmpvar_98), 0.0, 1.0);
  tmpvar_100 = tmpvar_101;
  highp vec3 tmpvar_102;
  tmpvar_102 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_99) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_100, _SpecularPower) * _SpecularColor.w)
  )) * (atten_94 * 4.0));
  c_95.xyz = tmpvar_102;
  c_95.w = (tmpvar_99 * (atten_94 * 4.0));
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_104;
  lightDir_104 = tmpvar_103;
  mediump vec3 normal_105;
  normal_105 = xlv_TEXCOORD3;
  mediump float tmpvar_106;
  tmpvar_106 = dot (normal_105, lightDir_104);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_95 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_106)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_106)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_107;
  tmpvar_107 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_107;
  tmpvar_1 = tmpvar_107;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 29 math
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "tangent" ATTR2
ConstBuffer "$Globals" 320
Matrix 48 [glstate_matrix_mvp]
Matrix 112 [_Object2World]
Matrix 176 [_World2Object]
Matrix 256 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
Vector 16 [_WorldSpaceLightPos0]
Vector 32 [_LightPositionRange]
Vector 240 [unity_Scale]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesTANGENT [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float4 unity_Scale;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = normalize(_mtl_i._glesNormal);
  float4 tmpvar_2;
  tmpvar_2.xyz = normalize(_mtl_i._glesTANGENT.xyz);
  tmpvar_2.w = _mtl_i._glesTANGENT.w;
  float3 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  tmpvar_3 = (cse_4.xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * tmpvar_9).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_5).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * _mtl_u._WorldSpaceLightPos0).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_4).xyz;
  _mtl_o.xlv_TEXCOORD7 = (cse_4.xyz - _mtl_u._LightPositionRange.xyz);
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 318 math, 5 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp float shadow_66;
  lowp float tmpvar_67;
  tmpvar_67 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  highp float tmpvar_68;
  tmpvar_68 = (_LightShadowData.x + (tmpvar_67 * (1.0 - _LightShadowData.x)));
  shadow_66 = tmpvar_68;
  mediump vec3 lightDir_69;
  lightDir_69 = xlv_TEXCOORD5;
  mediump vec3 viewDir_70;
  viewDir_70 = xlv_TEXCOORD1;
  mediump float atten_71;
  atten_71 = shadow_66;
  mediump vec4 c_72;
  mediump vec3 tmpvar_73;
  tmpvar_73 = normalize(lightDir_69);
  lightDir_69 = tmpvar_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = normalize(viewDir_70);
  viewDir_70 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = normalize(normT_4);
  mediump float tmpvar_76;
  tmpvar_76 = dot (tmpvar_75, tmpvar_73);
  highp float tmpvar_77;
  mediump float tmpvar_78;
  tmpvar_78 = clamp (dot (normalize(
    (tmpvar_73 + tmpvar_74)
  ), tmpvar_75), 0.0, 1.0);
  tmpvar_77 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_76) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_77, _SpecularPower) * _SpecularColor.w)
  )) * (atten_71 * 4.0));
  c_72.xyz = tmpvar_79;
  c_72.w = (tmpvar_76 * (atten_71 * 4.0));
  lowp vec3 tmpvar_80;
  tmpvar_80 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_81;
  lightDir_81 = tmpvar_80;
  mediump vec3 normal_82;
  normal_82 = xlv_TEXCOORD3;
  mediump float tmpvar_83;
  tmpvar_83 = dot (normal_82, lightDir_81);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_72 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_83)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_83)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_84;
  tmpvar_84 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_84;
  tmpvar_1 = tmpvar_84;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 318 math, 5 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = textureGrad (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = textureGrad (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureGrad (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp float shadow_66;
  mediump float tmpvar_67;
  tmpvar_67 = texture (_ShadowMapTexture, xlv_TEXCOORD6.xyz);
  lowp float tmpvar_68;
  tmpvar_68 = tmpvar_67;
  highp float tmpvar_69;
  tmpvar_69 = (_LightShadowData.x + (tmpvar_68 * (1.0 - _LightShadowData.x)));
  shadow_66 = tmpvar_69;
  mediump vec3 lightDir_70;
  lightDir_70 = xlv_TEXCOORD5;
  mediump vec3 viewDir_71;
  viewDir_71 = xlv_TEXCOORD1;
  mediump float atten_72;
  atten_72 = shadow_66;
  mediump vec4 c_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = normalize(lightDir_70);
  lightDir_70 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = normalize(viewDir_71);
  viewDir_71 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = normalize(normT_4);
  mediump float tmpvar_77;
  tmpvar_77 = dot (tmpvar_76, tmpvar_74);
  highp float tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp (dot (normalize(
    (tmpvar_74 + tmpvar_75)
  ), tmpvar_76), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_77) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_78, _SpecularPower) * _SpecularColor.w)
  )) * (atten_72 * 4.0));
  c_73.xyz = tmpvar_80;
  c_73.w = (tmpvar_77 * (atten_72 * 4.0));
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_82;
  lightDir_82 = tmpvar_81;
  mediump vec3 normal_83;
  normal_83 = xlv_TEXCOORD3;
  mediump float tmpvar_84;
  tmpvar_84 = dot (normal_83, lightDir_82);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_73 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_84)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_84)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_85;
  tmpvar_85 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_85;
  tmpvar_1 = tmpvar_85;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 26 math
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "tangent" ATTR2
ConstBuffer "$Globals" 496
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [_Object2World]
Matrix 416 [_World2Object]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 480 [unity_Scale]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesTANGENT [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float4 unity_Scale;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = normalize(_mtl_i._glesNormal);
  float4 tmpvar_2;
  tmpvar_2.xyz = normalize(_mtl_i._glesTANGENT.xyz);
  tmpvar_2.w = _mtl_i._glesTANGENT.w;
  float3 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  tmpvar_3 = (cse_4.xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * tmpvar_9).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_5).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * (float4)_mtl_u._WorldSpaceLightPos0).xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u.unity_World2Shadow[0] * cse_4);
  return _mtl_o;
}

"
}
SubProgram "gles " {
// Stats: 319 math, 6 textures, 12 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
varying highp float xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2DGradEXT (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DGradEXT (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture2DGradEXT (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2D (_LightTexture0, xlv_TEXCOORD6);
  lowp float shadow_67;
  lowp float tmpvar_68;
  tmpvar_68 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  highp float tmpvar_69;
  tmpvar_69 = (_LightShadowData.x + (tmpvar_68 * (1.0 - _LightShadowData.x)));
  shadow_67 = tmpvar_69;
  mediump vec3 lightDir_70;
  lightDir_70 = xlv_TEXCOORD5;
  mediump vec3 viewDir_71;
  viewDir_71 = xlv_TEXCOORD1;
  mediump float atten_72;
  atten_72 = (tmpvar_66.w * shadow_67);
  mediump vec4 c_73;
  mediump vec3 tmpvar_74;
  tmpvar_74 = normalize(lightDir_70);
  lightDir_70 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = normalize(viewDir_71);
  viewDir_71 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = normalize(normT_4);
  mediump float tmpvar_77;
  tmpvar_77 = dot (tmpvar_76, tmpvar_74);
  highp float tmpvar_78;
  mediump float tmpvar_79;
  tmpvar_79 = clamp (dot (normalize(
    (tmpvar_74 + tmpvar_75)
  ), tmpvar_76), 0.0, 1.0);
  tmpvar_78 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_77) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_78, _SpecularPower) * _SpecularColor.w)
  )) * (atten_72 * 4.0));
  c_73.xyz = tmpvar_80;
  c_73.w = (tmpvar_77 * (atten_72 * 4.0));
  lowp vec3 tmpvar_81;
  tmpvar_81 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_82;
  lightDir_82 = tmpvar_81;
  mediump vec3 normal_83;
  normal_83 = xlv_TEXCOORD3;
  mediump float tmpvar_84;
  tmpvar_84 = dot (normal_83, lightDir_82);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_73 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_84)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_84)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_85;
  tmpvar_85 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_85;
  tmpvar_1 = tmpvar_85;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
// Stats: 319 math, 6 textures, 12 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 _LightMatrix0;
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  highp vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  highp vec3 tmpvar_3;
  highp vec4 cse_4;
  cse_4 = (_Object2World * _glesVertex);
  tmpvar_3 = (cse_4.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  highp vec3 tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_World2Object * tmpvar_9).xyz * unity_Scale.w)
   - _glesVertex.xyz)));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD3 = normalize((_Object2World * tmpvar_5).xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_8 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * cse_4).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * cse_4);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _LightShadowData;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
uniform highp float _SpecularPower;
uniform mediump vec4 _SpecularColor;
uniform sampler2D _BumpMap;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 citylightoverlaydetail_2;
  mediump vec4 citydarkoverlaydetail_3;
  mediump vec3 normT_4;
  mediump vec4 color_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_7;
  highp float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    highp float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * inversesqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_10;
  tmpvar_10 = dFdx(tmpvar_6.xz);
  highp vec2 tmpvar_11;
  tmpvar_11 = dFdy(tmpvar_6.xz);
  highp vec4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dFdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dFdy(uv_7.y);
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureGrad (_BumpMap, uv_7, tmpvar_12.xy, tmpvar_12.zw);
  mediump vec4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  lowp vec3 tmpvar_15;
  lowp vec4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * 2.0) - 1.0);
  normT_4 = tmpvar_15;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_18;
  highp float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    highp float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * inversesqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_21;
  tmpvar_21 = dFdx(tmpvar_17.xz);
  highp vec2 tmpvar_22;
  tmpvar_22 = dFdy(tmpvar_17.xz);
  highp vec4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dFdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dFdy(uv_18.y);
  lowp vec4 tmpvar_24;
  tmpvar_24 = textureGrad (_CityOverlayTex, uv_18, tmpvar_23.xy, tmpvar_23.zw);
  mediump vec4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  mediump vec4 tmpvar_26;
  mediump vec3 detailCoords_27;
  mediump float nylerp_28;
  mediump float zxlerp_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_31;
  highp float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    highp float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * inversesqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_35;
  tmpvar_35 = dFdx(tmpvar_30.xz);
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdy(tmpvar_30.xz);
  highp vec4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dFdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dFdy(tmpvar_34.y);
  highp vec3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  highp float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = tmpvar_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, vec3(zxlerp_29));
  detailCoords_27 = tmpvar_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, detailCoords_27, vec3(nylerp_28));
  detailCoords_27 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  highp vec2 coord_44;
  coord_44 = (((0.5 * detailCoords_27.zy) / tmpvar_43) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_45;
  tmpvar_45 = textureGrad (_CityDarkOverlayDetailTex, coord_44, tmpvar_37.xy, tmpvar_37.zw);
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  mediump vec4 tmpvar_46;
  mediump vec3 detailCoords_47;
  mediump float nylerp_48;
  mediump float zxlerp_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(xlv_TEXCOORD2);
  highp vec2 uv_51;
  highp float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    highp float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * inversesqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  highp vec2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _CityOverlayDetailScale);
  highp vec2 tmpvar_55;
  tmpvar_55 = dFdx(tmpvar_50.xz);
  highp vec2 tmpvar_56;
  tmpvar_56 = dFdy(tmpvar_50.xz);
  highp vec4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dFdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dFdy(tmpvar_54.y);
  highp vec3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, vec3(zxlerp_49));
  detailCoords_47 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, detailCoords_47, vec3(nylerp_48));
  detailCoords_47 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  highp vec2 coord_64;
  coord_64 = (((0.5 * detailCoords_47.zy) / tmpvar_63) * _CityOverlayDetailScale);
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureGrad (_CityLightOverlayDetailTex, coord_64, tmpvar_57.xy, tmpvar_57.zw);
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix (vec3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = 0.0;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture (_LightTexture0, xlv_TEXCOORD6);
  lowp float shadow_67;
  mediump float tmpvar_68;
  tmpvar_68 = texture (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  lowp float tmpvar_69;
  tmpvar_69 = tmpvar_68;
  highp float tmpvar_70;
  tmpvar_70 = (_LightShadowData.x + (tmpvar_69 * (1.0 - _LightShadowData.x)));
  shadow_67 = tmpvar_70;
  mediump vec3 lightDir_71;
  lightDir_71 = xlv_TEXCOORD5;
  mediump vec3 viewDir_72;
  viewDir_72 = xlv_TEXCOORD1;
  mediump float atten_73;
  atten_73 = (tmpvar_66.w * shadow_67);
  mediump vec4 c_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = normalize(lightDir_71);
  lightDir_71 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = normalize(viewDir_72);
  viewDir_72 = tmpvar_76;
  mediump vec3 tmpvar_77;
  tmpvar_77 = normalize(normT_4);
  mediump float tmpvar_78;
  tmpvar_78 = dot (tmpvar_77, tmpvar_75);
  highp float tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp (dot (normalize(
    (tmpvar_75 + tmpvar_76)
  ), tmpvar_77), 0.0, 1.0);
  tmpvar_79 = tmpvar_80;
  highp vec3 tmpvar_81;
  tmpvar_81 = (((
    (color_5.xyz * _LightColor0.xyz)
   * tmpvar_78) + (
    (_LightColor0.xyz * _SpecularColor.xyz)
   * 
    (pow (tmpvar_79, _SpecularPower) * _SpecularColor.w)
  )) * (atten_73 * 4.0));
  c_74.xyz = tmpvar_81;
  c_74.w = (tmpvar_78 * (atten_73 * 4.0));
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  mediump vec3 lightDir_83;
  lightDir_83 = tmpvar_82;
  mediump vec3 normal_84;
  normal_84 = xlv_TEXCOORD3;
  mediump float tmpvar_85;
  tmpvar_85 = dot (normal_84, lightDir_83);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * (1.0 - clamp (
    (c_74 * mix (1.0, clamp (floor(
      (1.01 + tmpvar_85)
    ), 0.0, 1.0), clamp ((10.0 * 
      -(tmpvar_85)
    ), 0.0, 1.0)))
  .w, 0.0, 1.0)));
  mediump vec4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_86;
  tmpvar_1 = tmpvar_86;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "metal " {
// Stats: 27 math
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
Bind "vertex" ATTR0
Bind "normal" ATTR1
Bind "tangent" ATTR2
ConstBuffer "$Globals" 560
Matrix 32 [unity_World2Shadow0]
Matrix 96 [unity_World2Shadow1]
Matrix 160 [unity_World2Shadow2]
Matrix 224 [unity_World2Shadow3]
Matrix 288 [glstate_matrix_mvp]
Matrix 352 [_Object2World]
Matrix 416 [_World2Object]
Matrix 496 [_LightMatrix0]
Vector 0 [_WorldSpaceCameraPos] 3
VectorHalf 16 [_WorldSpaceLightPos0] 4
Vector 480 [unity_Scale]
"metal_vs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float4 _glesVertex [[attribute(0)]];
  float3 _glesNormal [[attribute(1)]];
  float4 _glesTANGENT [[attribute(2)]];
};
struct xlatMtlShaderOutput {
  float4 gl_Position [[position]];
  float xlv_TEXCOORD0;
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float2 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
};
struct xlatMtlShaderUniform {
  float3 _WorldSpaceCameraPos;
  half4 _WorldSpaceLightPos0;
  float4x4 unity_World2Shadow[4];
  float4x4 glstate_matrix_mvp;
  float4x4 _Object2World;
  float4x4 _World2Object;
  float4 unity_Scale;
  float4x4 _LightMatrix0;
};
vertex xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  float3 tmpvar_1;
  tmpvar_1 = normalize(_mtl_i._glesNormal);
  float4 tmpvar_2;
  tmpvar_2.xyz = normalize(_mtl_i._glesTANGENT.xyz);
  tmpvar_2.w = _mtl_i._glesTANGENT.w;
  float3 tmpvar_3;
  float4 cse_4;
  cse_4 = (_mtl_u._Object2World * _mtl_i._glesVertex);
  tmpvar_3 = (cse_4.xyz - _mtl_u._WorldSpaceCameraPos);
  float4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = tmpvar_1;
  float3 tmpvar_6;
  float3 tmpvar_7;
  tmpvar_6 = tmpvar_2.xyz;
  tmpvar_7 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _mtl_i._glesTANGENT.w);
  float3x3 tmpvar_8;
  tmpvar_8[0].x = tmpvar_6.x;
  tmpvar_8[0].y = tmpvar_7.x;
  tmpvar_8[0].z = tmpvar_1.x;
  tmpvar_8[1].x = tmpvar_6.y;
  tmpvar_8[1].y = tmpvar_7.y;
  tmpvar_8[1].z = tmpvar_1.y;
  tmpvar_8[2].x = tmpvar_6.z;
  tmpvar_8[2].y = tmpvar_7.z;
  tmpvar_8[2].z = tmpvar_1.z;
  float4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _mtl_u._WorldSpaceCameraPos;
  _mtl_o.gl_Position = (_mtl_u.glstate_matrix_mvp * _mtl_i._glesVertex);
  _mtl_o.xlv_TEXCOORD0 = sqrt(dot (tmpvar_3, tmpvar_3));
  _mtl_o.xlv_TEXCOORD1 = normalize((tmpvar_8 * (
    ((_mtl_u._World2Object * tmpvar_9).xyz * _mtl_u.unity_Scale.w)
   - _mtl_i._glesVertex.xyz)));
  _mtl_o.xlv_TEXCOORD2 = -(normalize(_mtl_i._glesVertex)).xyz;
  _mtl_o.xlv_TEXCOORD3 = normalize((_mtl_u._Object2World * tmpvar_5).xyz);
  _mtl_o.xlv_TEXCOORD5 = normalize((tmpvar_8 * (_mtl_u._World2Object * (float4)_mtl_u._WorldSpaceLightPos0).xyz));
  _mtl_o.xlv_TEXCOORD6 = (_mtl_u._LightMatrix0 * cse_4).xy;
  _mtl_o.xlv_TEXCOORD7 = (_mtl_u.unity_World2Shadow[0] * cse_4);
  return _mtl_o;
}

"
}
}
Program "fp" {
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 111 math, 13 textures
Keywords { "POINT" "SHADOWS_OFF" }
Vector 0 [_WorldSpaceLightPos0]
Float 1 [_CityOverlayDetailScale]
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
SetTexture 5 [_LightTexture0] 2D 5
"ps_3_0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c2, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c3, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c4, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c5, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c6, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c7, 2.00000000, -1.00000000, 1.00976563, 4.00000000
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
abs r0.w, r0.z
max r1.w, r1.x, r0
rcp r2.x, r1.w
min r1.w, r1.x, r0
mul r1.w, r1, r2.x
mul r2.x, r1.w, r1.w
mad r2.y, r2.x, c5.x, c5
mad r2.y, r2, r2.x, c5.z
mad r2.y, r2, r2.x, c5.w
mad r2.y, r2, r2.x, c6.x
mad r2.x, r2.y, r2, c6.y
mul r2.x, r2, r1.w
add r1.w, r1.x, -r0
abs r0.w, r0.y
add r2.y, -r2.x, c6.z
cmp r2.y, -r1.w, r2.x, r2
add r2.x, -r0.w, c2
mad r1.w, r0, c3.x, c3.y
mad r1.w, r1, r0, c3.z
rsq r2.x, r2.x
cmp r0.y, r0, c2, c2.x
rcp r2.x, r2.x
mad r0.w, r1, r0, c3
mul r0.w, r0, r2.x
mul r1.w, r0.y, r0
mad r0.w, -r1, c4.x, r0
mad r1.w, r0.y, c4.y, r0
mul r0.y, r1.w, c4.w
add r2.x, -r2.y, c4.y
cmp r2.x, r0.z, r2.y, r2
cmp r0.w, r0.x, r2.x, -r2.x
dsx r2.xy, r0.xzzw
mad r4.x, r0.w, c2.w, c2.z
mov r4.y, r0
dsx r3.w, r0.y
dsy r3.y, r0
dsy r0.xy, r0.xzzw
mul r0.zw, r2.xyxy, r2.xyxy
mul r0.xy, r0, r0
add r0.y, r0.x, r0
add r0.z, r0, r0.w
rsq r0.x, r0.z
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
dp4 r2.x, c0, c0
rsq r2.x, r2.x
mul r3.x, r0.y, c2.w
mul r3.z, r0.x, c2.w
texldd r0.yw, r4, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c7.x, c7.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c2.x
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r0.xyz, r0.w, r0
dp3_pp r0.w, v4, v4
rsq_pp r2.w, r0.w
mul r2.xyz, r2.x, c0
dp3_pp r0.w, v3, r2
mul_pp r2.xyz, r2.w, v4
dp3_pp r0.y, r0, r2
add_pp r2.w, r0, c7.z
frc_pp r0.z, r2.w
dp3 r0.x, v5, v5
texld r0.x, r0.x, s5
mul_pp r2.x, r0, r0.y
add_pp_sat r0.z, r2.w, -r0
mul_pp_sat r0.x, -r0.w, c6.w
add_pp r0.y, r0.z, c7
mad_pp r2.y, r0.x, r0, c2.x
add r0.w, r1.z, -r1.x
mov r2.z, r3.x
add r0.xyz, r1.zxyw, -r1
cmp r0.w, r0, c2.x, c2.y
mad r0.xyz, r0.w, r0, r1
mul_pp r0.w, r2.x, r2.y
add r2.x, r0, -r1.y
mul_pp_sat r0.w, r0, c7
add_pp r4.z, -r0.w, c2.x
add r0.xyz, r0, -r1.yxzw
cmp r2.x, r2, c2, c2.y
mad r0.xyz, r2.x, r0, r1.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c2.z
mul r2.xy, r0, c1.x
mul r0.z, r1.w, c1.x
mul r0.z, r0, c4
dsx r0.y, r0.z
texldd r0.w, r4, s2, r3.zwzw, r3
dsy r2.w, r0.z
mov r0.x, r3.z
texldd r1, r2, s3, r0, r2.zwzw
mul_pp r0.z, r1.w, r0.w
mul_pp r3.x, r0.z, r4.z
texldd r2, r2, s4, r0, r2.zwzw
mul_pp r0.w, r0, r2
mov_pp r0.xyz, r2
mov_pp r1.w, r3.x
add_pp r1, r1, -r0
mad_pp oC0, r3.x, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 92 math, 1 textures
Keywords { "POINT" "SHADOWS_OFF" }
SetTexture 0 [_BumpMap] 2D 1
SetTexture 1 [_CityOverlayTex] 2D 2
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 3 [_CityLightOverlayDetailTex] 2D 4
SetTexture 4 [_LightTexture0] 2D 0
ConstBuffer "$Globals" 304
Float 292 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
"ps_4_0
eefiecedjipfjmnpijmmhpnckplfiblemcaigjkpabaaaaaadmaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaeanaaaaeaaaaaaaebadaaaa
fjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacahaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaabgbgbaaaacaaaaaadeaaaaaj
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaacgakbaaaaaaaaaaacgakbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaabkaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaa
bkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
ecaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdodiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaabkiacaaaaaaaaaaabcaaaaaaalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaacaaaaaafgajbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaa
ogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdo
amaaaaafmcaabaaaacaaaaaafgajbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaa
ogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaabnaaaaajccaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaajpcaabaaaafaaaaaafgaibaiambaaaaaaaaaaaaaakgabbaia
ibaaaaaaaaaaaaaadcaaaaakhcaabaaaagaaaaaafgafbaaaabaaaaaaegacbaaa
afaaaaaafgaebaiaibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaa
abaaaaaadkaabaaaafaaaaaadgaaaaaficaabaaaagaaaaaaabeaaaaaaaaaaaaa
dgaaaaagdcaabaaaaeaaaaaaegaabaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaa
aeaaaaaaegacbaaaaeaaaaaajgahbaaaagaaaaaabnaaaaaiccaabaaaabaaaaaa
akaabaaaagaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaaaaaaaaafgafbaaa
abaaaaaaegacbaaaaeaaaaaaegacbaiaibaaaaaaaaaaaaaadiaaaaakocaabaaa
aaaaaaaakganbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpidpjkcdp
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaafgifcaaaaaaaaaaabcaaaaaaalaaaaaf
ecaabaaaabaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaaigaabaaaabaaaaaaigaabaaaadaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaaeaaaaaaigaabaaa
abaaaaaaigaabaaaadaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaeaaaaaa
dkaabaaaafaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaeaaaaaadkaabaaa
aaaaaaaaapaaaaahccaabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaacaaaaaabkaabaaaabaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahocaabaaaabaaaaaafgafbaaaabaaaaaaagajbaaaacaaaaaabaaaaaah
bcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaahhcaabaaaacaaaaaaagaabaaaacaaaaaa
egbcbaaaaeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaaegacbaaa
acaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaa
efaaaaajpcaabaaaacaaaaaakgakbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aaaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiaeabbaaaaaj
ecaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaihcaabaaaacaaaaaa
kgakbaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabaaaaaahecaabaaaabaaaaaa
egbcbaaaadaaaaaaegacbaaaacaaaaaaaaaaaaahicaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaakoehibdpdicaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaacambebcaaaaficaabaaaabaaaaaadkaabaaaabaaaaaaaaaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaialpdcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdicaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
afaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaipcaabaaaabaaaaaa
egaobaiaebaaaaaaaaaaaaaaegaobaaaafaaaaaadcaaaaajpccabaaaaaaaaaaa
pgapbaaaafaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 316 math, 5 textures, 12 branches
Keywords { "POINT" "SHADOWS_OFF" }
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 44
Vector 0 [_WorldSpaceLightPos0]
VectorHalf 16 [_LightColor0] 4
Float 24 [_SpecularPower]
VectorHalf 32 [_SpecularColor] 4
Float 40 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(0)]], sampler _mtlsmp__LightTexture0 [[sampler(0)]]
  ,   texture2d<half> _BumpMap [[texture(1)]], sampler _mtlsmp__BumpMap [[sampler(1)]]
  ,   texture2d<half> _CityOverlayTex [[texture(2)]], sampler _mtlsmp__CityOverlayTex [[sampler(2)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(3)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half3 normT_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half3 tmpvar_15;
  half4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * (half)2.0) - (half)1.0);
  normT_4 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * rsqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_21;
  tmpvar_21 = dfdx(tmpvar_17.xz);
  float2 tmpvar_22;
  tmpvar_22 = dfdy(tmpvar_17.xz);
  float4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dfdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dfdy(uv_18.y);
  half4 tmpvar_24;
  tmpvar_24 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_18), gradient2d((float2)(tmpvar_23.xy), (float2)(tmpvar_23.zw)));
  half4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  half4 tmpvar_26;
  half3 detailCoords_27;
  half nylerp_28;
  half zxlerp_29;
  float3 tmpvar_30;
  tmpvar_30 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_31;
  float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * rsqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_35;
  tmpvar_35 = dfdx(tmpvar_30.xz);
  float2 tmpvar_36;
  tmpvar_36 = dfdy(tmpvar_30.xz);
  float4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dfdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dfdy(tmpvar_34.y);
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, (float)zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = half(tmpvar_40);
  float3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, (float3)half3(zxlerp_29));
  detailCoords_27 = half3(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, (float3)detailCoords_27, (float3)half3(nylerp_28));
  detailCoords_27 = half3(tmpvar_42);
  half tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  float2 coord_44;
  coord_44 = ((float2)(((half)0.5 * detailCoords_27.zy) / tmpvar_43) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_45;
  tmpvar_45 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_44), gradient2d((float2)(tmpvar_37.xy), (float2)(tmpvar_37.zw)));
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  half4 tmpvar_46;
  half3 detailCoords_47;
  half nylerp_48;
  half zxlerp_49;
  float3 tmpvar_50;
  tmpvar_50 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_51;
  float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * rsqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_55;
  tmpvar_55 = dfdx(tmpvar_50.xz);
  float2 tmpvar_56;
  tmpvar_56 = dfdy(tmpvar_50.xz);
  float4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dfdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dfdy(tmpvar_54.y);
  float3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = half(tmpvar_59);
  float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, (float)zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = half(tmpvar_60);
  float3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, (float3)half3(zxlerp_49));
  detailCoords_47 = half3(tmpvar_61);
  float3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, (float3)detailCoords_47, (float3)half3(nylerp_48));
  detailCoords_47 = half3(tmpvar_62);
  half tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  float2 coord_64;
  coord_64 = ((float2)(((half)0.5 * detailCoords_47.zy) / tmpvar_63) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_65;
  tmpvar_65 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_64), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  float tmpvar_66;
  tmpvar_66 = dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_67;
  tmpvar_67 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_66)));
  half3 lightDir_68;
  lightDir_68 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_69;
  viewDir_69 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_70;
  atten_70 = tmpvar_67.w;
  half4 c_71;
  half3 tmpvar_72;
  tmpvar_72 = normalize(lightDir_68);
  lightDir_68 = tmpvar_72;
  half3 tmpvar_73;
  tmpvar_73 = normalize(viewDir_69);
  viewDir_69 = tmpvar_73;
  half3 tmpvar_74;
  tmpvar_74 = normalize(normT_4);
  half tmpvar_75;
  tmpvar_75 = dot (tmpvar_74, tmpvar_72);
  float tmpvar_76;
  half tmpvar_77;
  tmpvar_77 = clamp (dot (normalize(
    (tmpvar_72 + tmpvar_73)
  ), tmpvar_74), (half)0.0, (half)1.0);
  tmpvar_76 = float(tmpvar_77);
  float3 tmpvar_78;
  tmpvar_78 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_75) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_76, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_70 * (half)4.0));
  c_71.xyz = half3(tmpvar_78);
  c_71.w = (tmpvar_75 * (atten_70 * (half)4.0));
  float3 tmpvar_79;
  tmpvar_79 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_80;
  lightDir_80 = half3(tmpvar_79);
  half3 normal_81;
  normal_81 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_82;
  tmpvar_82 = dot (normal_81, lightDir_80);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_71 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_82)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_82)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_83;
  tmpvar_83 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_83;
  tmpvar_1 = tmpvar_83;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 108 math, 12 textures
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [_WorldSpaceLightPos0]
Float 1 [_CityOverlayDetailScale]
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
"ps_3_0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c2, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c3, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c4, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c5, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c6, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c7, 2.00000000, -1.00000000, 1.00976563, 4.00000000
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
abs r0.w, r0.z
max r1.w, r1.x, r0
rcp r2.x, r1.w
min r1.w, r1.x, r0
mul r1.w, r1, r2.x
mul r2.x, r1.w, r1.w
mad r2.y, r2.x, c5.x, c5
mad r2.y, r2, r2.x, c5.z
mad r2.y, r2, r2.x, c5.w
mad r2.y, r2, r2.x, c6.x
mad r2.x, r2.y, r2, c6.y
mul r2.x, r2, r1.w
add r1.w, r1.x, -r0
abs r0.w, r0.y
add r2.y, -r2.x, c6.z
cmp r2.y, -r1.w, r2.x, r2
add r2.x, -r0.w, c2
mad r1.w, r0, c3.x, c3.y
mad r1.w, r1, r0, c3.z
rsq r2.x, r2.x
cmp r0.y, r0, c2, c2.x
rcp r2.x, r2.x
mad r0.w, r1, r0, c3
mul r0.w, r0, r2.x
mul r1.w, r0.y, r0
mad r0.w, -r1, c4.x, r0
mad r0.w, r0.y, c4.y, r0
mul r0.y, r0.w, c4.w
add r2.x, -r2.y, c4.y
cmp r1.w, r0.z, r2.y, r2.x
cmp r1.w, r0.x, r1, -r1
dsx r2.xy, r0.xzzw
mul r2.xy, r2, r2
mad r4.x, r1.w, c2.w, c2.z
mov r4.y, r0
dsx r3.w, r0.y
dsy r3.y, r0
dsy r0.xy, r0.xzzw
mul r0.xy, r0, r0
add r0.y, r0.x, r0
add r0.z, r2.x, r2.y
rsq r0.x, r0.z
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c2.w
mul r3.x, r0.y, c2.w
texldd r2.yw, r4, s1, r3.zwzw, r3
mad_pp r0.xy, r2.wyzw, c7.x, c7.y
mul_pp r2.xy, r0, r0
add_pp_sat r0.z, r2.x, r2.y
add_pp r0.z, -r0, c2.x
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r1.w, r0, r0
rsq_pp r1.w, r1.w
dp4_pp r2.x, c0, c0
rsq_pp r2.x, r2.x
mul_pp r0.xyz, r1.w, r0
mul_pp r2.xyz, r2.x, c0
dp3_pp r1.w, v3, r2
add_pp r2.w, r1, c7.z
dp3_pp r2.x, v4, v4
rsq_pp r2.x, r2.x
mul_pp r2.xyz, r2.x, v4
dp3_pp r2.x, r0, r2
mul_pp_sat r0.x, -r1.w, c6.w
add r1.w, r1.z, -r1.x
frc_pp r4.z, r2.w
add_pp_sat r2.w, r2, -r4.z
add_pp r0.y, r2.w, c7
mad_pp r2.y, r0.x, r0, c2.x
add r0.xyz, r1.zxyw, -r1
cmp r1.w, r1, c2.x, c2.y
mad r0.xyz, r1.w, r0, r1
mul_pp r1.w, r2.x, r2.y
add r2.x, r0, -r1.y
add r0.xyz, r0, -r1.yxzw
cmp r2.x, r2, c2, c2.y
mad r0.xyz, r2.x, r0, r1.yxzw
mul_pp_sat r1.x, r1.w, c7.w
add_pp r2.z, -r1.x, c2.x
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul r0.z, r0.w, c1.x
mul r0.z, r0, c4
mul_pp r0.xy, r0, c2.z
mul r1.zw, r0.xyxy, c1.x
dsx r1.y, r0.z
dsy r2.y, r0.z
texldd r2.w, r4, s2, r3.zwzw, r3
mov r1.x, r3.z
mov r2.x, r3
texldd r0, r1.zwzw, s3, r1, r2
texldd r1, r1.zwzw, s4, r1, r2
mul_pp r0.w, r0, r2
mul_pp r2.z, r0.w, r2
mul_pp r1.w, r2, r1
mov_pp r0.w, r2.z
add_pp r0, r0, -r1
mad_pp oC0, r2.z, r0, r1
"
}
SubProgram "d3d11 " {
// Stats: 90 math
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
SetTexture 0 [_BumpMap] 2D 0
SetTexture 1 [_CityOverlayTex] 2D 1
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 2
SetTexture 3 [_CityLightOverlayDetailTex] 2D 3
ConstBuffer "$Globals" 240
Float 228 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
"ps_4_0
eefiecedocjgniimmgnkjpgdphnmkpffaoejdfhgabaaaaaakaanaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefciaamaaaa
eaaaaaaacaadaaaafjaaaaaeegiocaaaaaaaaaaaapaaaaaafjaaaaaeegiocaaa
abaaaaaaabaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacahaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaabgbgbaaaacaaaaaadeaaaaaj
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaacgakbaaaaaaaaaaacgakbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaabkaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaa
bkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
ecaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdodiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaabkiacaaaaaaaaaaaaoaaaaaaalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaacaaaaaafgajbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaa
ogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdo
amaaaaafmcaabaaaacaaaaaafgajbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaa
ogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaabnaaaaajccaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaajpcaabaaaafaaaaaafgaibaiambaaaaaaaaaaaaaakgabbaia
ibaaaaaaaaaaaaaadcaaaaakhcaabaaaagaaaaaafgafbaaaabaaaaaaegacbaaa
afaaaaaafgaebaiaibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaa
abaaaaaadkaabaaaafaaaaaadgaaaaaficaabaaaagaaaaaaabeaaaaaaaaaaaaa
dgaaaaagdcaabaaaaeaaaaaaegaabaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaa
aeaaaaaaegacbaaaaeaaaaaajgahbaaaagaaaaaabnaaaaaiccaabaaaabaaaaaa
akaabaaaagaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaaaaaaaaafgafbaaa
abaaaaaaegacbaaaaeaaaaaaegacbaiaibaaaaaaaaaaaaaadiaaaaakocaabaaa
aaaaaaaakganbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpidpjkcdp
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaafgifcaaaaaaaaaaaaoaaaaaaalaaaaaf
ecaabaaaabaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaaigaabaaaabaaaaaaigaabaaaadaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaaigaabaaa
abaaaaaaigaabaaaadaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaeaaaaaa
dkaabaaaafaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaeaaaaaadkaabaaa
aaaaaaaaapaaaaahccaabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaacaaaaaabkaabaaaabaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahocaabaaaabaaaaaafgafbaaaabaaaaaaagajbaaaacaaaaaabaaaaaah
bcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaahhcaabaaaacaaaaaaagaabaaaacaaaaaa
egbcbaaaaeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaaegacbaaa
acaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiaea
bbaaaaajecaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaihcaabaaa
acaaaaaakgakbaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabaaaaaahecaabaaa
abaaaaaaegbcbaaaadaaaaaaegacbaaaacaaaaaaaaaaaaahicaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaakoehibdpdicaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaaaaacambebcaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
aaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaialpdcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dicaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaai
ccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaafaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaiaebaaaaaaaaaaaaaaegaobaaaafaaaaaadcaaaaajpccabaaa
aaaaaaaapgapbaaaafaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaadoaaaaab
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 313 math, 4 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
SetTexture 0 [_BumpMap] 2D 0
SetTexture 1 [_CityOverlayTex] 2D 1
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 2
SetTexture 3 [_CityLightOverlayDetailTex] 2D 3
ConstBuffer "$Globals" 36
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [_LightColor0] 4
Float 16 [_SpecularPower]
VectorHalf 24 [_SpecularColor] 4
Float 32 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _BumpMap [[texture(0)]], sampler _mtlsmp__BumpMap [[sampler(0)]]
  ,   texture2d<half> _CityOverlayTex [[texture(1)]], sampler _mtlsmp__CityOverlayTex [[sampler(1)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(2)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(2)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(3)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half3 normT_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half3 tmpvar_15;
  half4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * (half)2.0) - (half)1.0);
  normT_4 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * rsqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_21;
  tmpvar_21 = dfdx(tmpvar_17.xz);
  float2 tmpvar_22;
  tmpvar_22 = dfdy(tmpvar_17.xz);
  float4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dfdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dfdy(uv_18.y);
  half4 tmpvar_24;
  tmpvar_24 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_18), gradient2d((float2)(tmpvar_23.xy), (float2)(tmpvar_23.zw)));
  half4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  half4 tmpvar_26;
  half3 detailCoords_27;
  half nylerp_28;
  half zxlerp_29;
  float3 tmpvar_30;
  tmpvar_30 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_31;
  float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * rsqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_35;
  tmpvar_35 = dfdx(tmpvar_30.xz);
  float2 tmpvar_36;
  tmpvar_36 = dfdy(tmpvar_30.xz);
  float4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dfdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dfdy(tmpvar_34.y);
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, (float)zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = half(tmpvar_40);
  float3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, (float3)half3(zxlerp_29));
  detailCoords_27 = half3(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, (float3)detailCoords_27, (float3)half3(nylerp_28));
  detailCoords_27 = half3(tmpvar_42);
  half tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  float2 coord_44;
  coord_44 = ((float2)(((half)0.5 * detailCoords_27.zy) / tmpvar_43) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_45;
  tmpvar_45 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_44), gradient2d((float2)(tmpvar_37.xy), (float2)(tmpvar_37.zw)));
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  half4 tmpvar_46;
  half3 detailCoords_47;
  half nylerp_48;
  half zxlerp_49;
  float3 tmpvar_50;
  tmpvar_50 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_51;
  float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * rsqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_55;
  tmpvar_55 = dfdx(tmpvar_50.xz);
  float2 tmpvar_56;
  tmpvar_56 = dfdy(tmpvar_50.xz);
  float4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dfdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dfdy(tmpvar_54.y);
  float3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = half(tmpvar_59);
  float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, (float)zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = half(tmpvar_60);
  float3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, (float3)half3(zxlerp_49));
  detailCoords_47 = half3(tmpvar_61);
  float3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, (float3)detailCoords_47, (float3)half3(nylerp_48));
  detailCoords_47 = half3(tmpvar_62);
  half tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  float2 coord_64;
  coord_64 = ((float2)(((half)0.5 * detailCoords_47.zy) / tmpvar_63) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_65;
  tmpvar_65 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_64), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  half3 lightDir_66;
  lightDir_66 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_67;
  viewDir_67 = half3(_mtl_i.xlv_TEXCOORD1);
  half4 c_68;
  half3 tmpvar_69;
  tmpvar_69 = normalize(lightDir_66);
  lightDir_66 = tmpvar_69;
  half3 tmpvar_70;
  tmpvar_70 = normalize(viewDir_67);
  viewDir_67 = tmpvar_70;
  half3 tmpvar_71;
  tmpvar_71 = normalize(normT_4);
  half tmpvar_72;
  tmpvar_72 = dot (tmpvar_71, tmpvar_69);
  float tmpvar_73;
  half tmpvar_74;
  tmpvar_74 = clamp (dot (normalize(
    (tmpvar_69 + tmpvar_70)
  ), tmpvar_71), (half)0.0, (half)1.0);
  tmpvar_73 = float(tmpvar_74);
  float3 tmpvar_75;
  tmpvar_75 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_72) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_73, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * 4.0);
  c_68.xyz = half3(tmpvar_75);
  c_68.w = (tmpvar_72 * (half)4.0);
  half3 tmpvar_76;
  tmpvar_76 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_77;
  lightDir_77 = tmpvar_76;
  half3 normal_78;
  normal_78 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_79;
  tmpvar_79 = dot (normal_78, lightDir_77);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_68 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_79)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_79)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_80;
  tmpvar_80 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_80;
  tmpvar_1 = tmpvar_80;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 115 math, 14 textures
Keywords { "SPOT" "SHADOWS_OFF" }
Vector 0 [_WorldSpaceLightPos0]
Float 1 [_CityOverlayDetailScale]
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
SetTexture 5 [_LightTexture0] 2D 5
SetTexture 6 [_LightTextureB0] 2D 6
"ps_3_0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c2, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c3, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c4, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c5, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c6, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c7, 2.00000000, -1.00000000, 1.00976563, 4.00000000
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
abs r0.w, r0.z
max r1.w, r1.x, r0
rcp r2.x, r1.w
min r1.w, r1.x, r0
mul r1.w, r1, r2.x
mul r2.x, r1.w, r1.w
mad r2.y, r2.x, c5.x, c5
mad r2.y, r2, r2.x, c5.z
mad r2.y, r2, r2.x, c5.w
mad r2.y, r2, r2.x, c6.x
mad r2.x, r2.y, r2, c6.y
mul r2.x, r2, r1.w
add r1.w, r1.x, -r0
abs r0.w, r0.y
add r2.y, -r2.x, c6.z
cmp r2.y, -r1.w, r2.x, r2
add r2.x, -r0.w, c2
mad r1.w, r0, c3.x, c3.y
mad r1.w, r1, r0, c3.z
rsq r2.x, r2.x
dsx r3.xy, r0.xzzw
cmp r0.y, r0, c2, c2.x
rcp r2.x, r2.x
mad r0.w, r1, r0, c3
mul r0.w, r0, r2.x
mul r1.w, r0.y, r0
mad r0.w, -r1, c4.x, r0
mad r1.w, r0.y, c4.y, r0
mul r0.y, r1.w, c4.w
add r2.x, -r2.y, c4.y
cmp r2.x, r0.z, r2.y, r2
cmp r0.w, r0.x, r2.x, -r2.x
dsx r2.w, r0.y
dsy r2.y, r0
mov r4.y, r0
dsy r0.xy, r0.xzzw
mul r0.xy, r0, r0
mad r4.x, r0.w, c2.w, c2.z
mul r0.zw, r3.xyxy, r3.xyxy
add r0.y, r0.x, r0
add r0.z, r0, r0.w
rsq r0.x, r0.z
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
dp4 r3.x, c0, c0
rsq r3.x, r3.x
mul r3.xyz, r3.x, c0
mul r2.z, r0.x, c2.w
mul r2.x, r0.y, c2.w
texldd r0.yw, r4, s1, r2.zwzw, r2
mad_pp r0.xy, r0.wyzw, c7.x, c7.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c2.x
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r0.xyz, r0.w, r0
dp3_pp r0.w, v4, v4
dp3_pp r3.w, v3, r3
rsq_pp r0.w, r0.w
mul_pp r3.xyz, r0.w, v4
dp3_pp r0.y, r0, r3
add_pp r0.w, r3, c7.z
frc_pp r0.z, r0.w
rcp r0.x, v5.w
mad r3.xy, v5, r0.x, c2.z
add_pp_sat r0.z, r0.w, -r0
texld r0.w, r3, s5
cmp r3.x, -v5.z, c2.y, c2
mul_pp r0.w, r3.x, r0
add r3.x, r1.z, -r1
dp3 r0.x, v5, v5
texld r0.x, r0.x, s6
mul_pp r0.x, r0.w, r0
mul_pp r0.w, r0.x, r0.y
add_pp r0.y, r0.z, c7
mul_pp_sat r0.x, -r3.w, c6.w
mad_pp r3.y, r0.x, r0, c2.x
mul_pp r0.w, r0, r3.y
mul_pp_sat r0.w, r0, c7
add_pp r3.z, -r0.w, c2.x
texldd r0.w, r4, s2, r2.zwzw, r2
add r0.xyz, r1.zxyw, -r1
cmp r3.x, r3, c2, c2.y
mad r0.xyz, r3.x, r0, r1
add r3.x, r0, -r1.y
add r0.xyz, r0, -r1.yxzw
cmp r3.x, r3, c2, c2.y
mad r0.xyz, r3.x, r0, r1.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c2.z
mul r3.xy, r0, c1.x
mul r0.z, r1.w, c1.x
mul r0.z, r0, c4
dsx r0.y, r0.z
mov r0.x, r2.z
dsy r2.y, r0.z
texldd r1, r3, s3, r0, r2
mul_pp r0.z, r1.w, r0.w
mul_pp r3.z, r0, r3
texldd r2, r3, s4, r0, r2
mul_pp r0.w, r0, r2
mov_pp r0.xyz, r2
mov_pp r1.w, r3.z
add_pp r1, r1, -r0
mad_pp oC0, r3.z, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 98 math, 2 textures
Keywords { "SPOT" "SHADOWS_OFF" }
SetTexture 0 [_BumpMap] 2D 2
SetTexture 1 [_CityOverlayTex] 2D 3
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 3 [_CityLightOverlayDetailTex] 2D 5
SetTexture 4 [_LightTexture0] 2D 0
SetTexture 5 [_LightTextureB0] 2D 1
ConstBuffer "$Globals" 304
Float 292 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
"ps_4_0
eefiecedmackamimgibkiimdcomlmhkdonghdcneabaaaaaadaapaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcpianaaaaeaaaaaaahoadaaaa
fjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacahaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaa
egbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaabgbgbaaaacaaaaaadeaaaaajicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
cgakbaaaaaaaaaaacgakbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaa
bkaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahecaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdodiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaabkiacaaaaaaaaaaabcaaaaaaalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaacaaaaaafgajbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaaogakbaaa
acaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaacaaaaaafgajbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaaogakbaaa
acaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaabaaaaaaegaabaaa
adaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
bnaaaaajccaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajpcaabaaaafaaaaaafgaibaiambaaaaaaaaaaaaaakgabbaiaibaaaaaa
aaaaaaaadcaaaaakhcaabaaaagaaaaaafgafbaaaabaaaaaaegacbaaaafaaaaaa
fgaebaiaibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaaabaaaaaa
dkaabaaaafaaaaaadgaaaaaficaabaaaagaaaaaaabeaaaaaaaaaaaaadgaaaaag
dcaabaaaaeaaaaaaegaabaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaaaeaaaaaa
egacbaaaaeaaaaaajgahbaaaagaaaaaabnaaaaaiccaabaaaabaaaaaaakaabaaa
agaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaaaaaaaaafgafbaaaabaaaaaa
egacbaaaaeaaaaaaegacbaiaibaaaaaaaaaaaaaadiaaaaakocaabaaaaaaaaaaa
kganbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpidpjkcdpaoaaaaah
dcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaadiaaaaaidcaabaaa
aaaaaaaaegaabaaaaaaaaaaafgifcaaaaaaaaaaabcaaaaaaalaaaaafecaabaaa
abaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaaaaaaaaaa
ejaaaaanpcaabaaaafaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaigaabaaaabaaaaaaigaabaaaadaaaaaaejaaaaanpcaabaaaaaaaaaaa
egaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaafaaaaaaigaabaaaabaaaaaa
igaabaaaadaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaeaaaaaadkaabaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaeaaaaaadkaabaaaaaaaaaaa
apaaaaahccaabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
acaaaaaabkaabaaaabaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaeeaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
ocaabaaaabaaaaaafgafbaaaabaaaaaaagajbaaaacaaaaaabaaaaaahbcaabaaa
acaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahhcaabaaaacaaaaaaagaabaaaacaaaaaaegbcbaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaaegacbaaaacaaaaaa
aoaaaaahmcaabaaaabaaaaaaagbebaaaafaaaaaapgbpbaaaafaaaaaaaaaaaaak
mcaabaaaabaaaaaakgaobaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpefaaaaajpcaabaaaacaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaa
aagabaaaaaaaaaaadbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaackbabaaa
afaaaaaaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahecaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaabaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaefaaaaajpcaabaaa
acaaaaaapgapbaaaabaaaaaaeghobaaaafaaaaaaaagabaaaabaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiaeabbaaaaajecaabaaaabaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaaihcaabaaaacaaaaaakgakbaaaabaaaaaaegiccaaa
abaaaaaaaaaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaaadaaaaaaegacbaaa
acaaaaaaaaaaaaahicaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaakoehibdp
dicaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaacambebcaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaaaaaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaialpdcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdicaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaafaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaiaebaaaaaaaaaaaaaa
egaobaaaafaaaaaadcaaaaajpccabaaaaaaaaaaapgapbaaaafaaaaaaegaobaaa
abaaaaaaegaobaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 322 math, 6 textures, 12 branches
Keywords { "SPOT" "SHADOWS_OFF" }
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_LightTextureB0] 2D 1
SetTexture 2 [_BumpMap] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 44
Vector 0 [_WorldSpaceLightPos0]
VectorHalf 16 [_LightColor0] 4
Float 24 [_SpecularPower]
VectorHalf 32 [_SpecularColor] 4
Float 40 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(0)]], sampler _mtlsmp__LightTexture0 [[sampler(0)]]
  ,   texture2d<half> _LightTextureB0 [[texture(1)]], sampler _mtlsmp__LightTextureB0 [[sampler(1)]]
  ,   texture2d<half> _BumpMap [[texture(2)]], sampler _mtlsmp__BumpMap [[sampler(2)]]
  ,   texture2d<half> _CityOverlayTex [[texture(3)]], sampler _mtlsmp__CityOverlayTex [[sampler(3)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(4)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half3 normT_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half3 tmpvar_15;
  half4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * (half)2.0) - (half)1.0);
  normT_4 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * rsqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_21;
  tmpvar_21 = dfdx(tmpvar_17.xz);
  float2 tmpvar_22;
  tmpvar_22 = dfdy(tmpvar_17.xz);
  float4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dfdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dfdy(uv_18.y);
  half4 tmpvar_24;
  tmpvar_24 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_18), gradient2d((float2)(tmpvar_23.xy), (float2)(tmpvar_23.zw)));
  half4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  half4 tmpvar_26;
  half3 detailCoords_27;
  half nylerp_28;
  half zxlerp_29;
  float3 tmpvar_30;
  tmpvar_30 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_31;
  float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * rsqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_35;
  tmpvar_35 = dfdx(tmpvar_30.xz);
  float2 tmpvar_36;
  tmpvar_36 = dfdy(tmpvar_30.xz);
  float4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dfdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dfdy(tmpvar_34.y);
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, (float)zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = half(tmpvar_40);
  float3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, (float3)half3(zxlerp_29));
  detailCoords_27 = half3(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, (float3)detailCoords_27, (float3)half3(nylerp_28));
  detailCoords_27 = half3(tmpvar_42);
  half tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  float2 coord_44;
  coord_44 = ((float2)(((half)0.5 * detailCoords_27.zy) / tmpvar_43) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_45;
  tmpvar_45 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_44), gradient2d((float2)(tmpvar_37.xy), (float2)(tmpvar_37.zw)));
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  half4 tmpvar_46;
  half3 detailCoords_47;
  half nylerp_48;
  half zxlerp_49;
  float3 tmpvar_50;
  tmpvar_50 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_51;
  float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * rsqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_55;
  tmpvar_55 = dfdx(tmpvar_50.xz);
  float2 tmpvar_56;
  tmpvar_56 = dfdy(tmpvar_50.xz);
  float4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dfdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dfdy(tmpvar_54.y);
  float3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = half(tmpvar_59);
  float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, (float)zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = half(tmpvar_60);
  float3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, (float3)half3(zxlerp_49));
  detailCoords_47 = half3(tmpvar_61);
  float3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, (float3)detailCoords_47, (float3)half3(nylerp_48));
  detailCoords_47 = half3(tmpvar_62);
  half tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  float2 coord_64;
  coord_64 = ((float2)(((half)0.5 * detailCoords_47.zy) / tmpvar_63) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_65;
  tmpvar_65 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_64), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  half4 tmpvar_66;
  float2 P_67;
  P_67 = ((_mtl_i.xlv_TEXCOORD6.xy / _mtl_i.xlv_TEXCOORD6.w) + 0.5);
  tmpvar_66 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_67));
  float tmpvar_68;
  tmpvar_68 = dot (_mtl_i.xlv_TEXCOORD6.xyz, _mtl_i.xlv_TEXCOORD6.xyz);
  half4 tmpvar_69;
  tmpvar_69 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_68)));
  half3 lightDir_70;
  lightDir_70 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_71;
  viewDir_71 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_72;
  atten_72 = half(((float(
    (_mtl_i.xlv_TEXCOORD6.z > 0.0)
  ) * (float)tmpvar_66.w) * (float)tmpvar_69.w));
  half4 c_73;
  half3 tmpvar_74;
  tmpvar_74 = normalize(lightDir_70);
  lightDir_70 = tmpvar_74;
  half3 tmpvar_75;
  tmpvar_75 = normalize(viewDir_71);
  viewDir_71 = tmpvar_75;
  half3 tmpvar_76;
  tmpvar_76 = normalize(normT_4);
  half tmpvar_77;
  tmpvar_77 = dot (tmpvar_76, tmpvar_74);
  float tmpvar_78;
  half tmpvar_79;
  tmpvar_79 = clamp (dot (normalize(
    (tmpvar_74 + tmpvar_75)
  ), tmpvar_76), (half)0.0, (half)1.0);
  tmpvar_78 = float(tmpvar_79);
  float3 tmpvar_80;
  tmpvar_80 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_77) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_78, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_72 * (half)4.0));
  c_73.xyz = half3(tmpvar_80);
  c_73.w = (tmpvar_77 * (atten_72 * (half)4.0));
  float3 tmpvar_81;
  tmpvar_81 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_82;
  lightDir_82 = half3(tmpvar_81);
  half3 normal_83;
  normal_83 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_84;
  tmpvar_84 = dot (normal_83, lightDir_82);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_73 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_84)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_84)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_85;
  tmpvar_85 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_85;
  tmpvar_1 = tmpvar_85;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 111 math, 14 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [_WorldSpaceLightPos0]
Float 1 [_CityOverlayDetailScale]
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
SetTexture 5 [_LightTextureB0] 2D 5
SetTexture 6 [_LightTexture0] CUBE 6
"ps_3_0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
def c2, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c3, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c4, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c5, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c6, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c7, 2.00000000, -1.00000000, 1.00976563, 4.00000000
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
abs r0.w, r0.z
max r1.w, r1.x, r0
rcp r2.x, r1.w
min r1.w, r1.x, r0
mul r1.w, r1, r2.x
mul r2.x, r1.w, r1.w
mad r2.y, r2.x, c5.x, c5
mad r2.y, r2, r2.x, c5.z
mad r2.y, r2, r2.x, c5.w
mad r2.y, r2, r2.x, c6.x
mad r2.x, r2.y, r2, c6.y
mul r2.x, r2, r1.w
add r1.w, r1.x, -r0
abs r0.w, r0.y
add r2.y, -r2.x, c6.z
cmp r2.y, -r1.w, r2.x, r2
add r2.x, -r0.w, c2
mad r1.w, r0, c3.x, c3.y
mad r1.w, r1, r0, c3.z
rsq r2.x, r2.x
dsx r3.xy, r0.xzzw
cmp r0.y, r0, c2, c2.x
rcp r2.x, r2.x
mad r0.w, r1, r0, c3
mul r0.w, r0, r2.x
mul r1.w, r0.y, r0
mad r0.w, -r1, c4.x, r0
mad r1.w, r0.y, c4.y, r0
mul r0.y, r1.w, c4.w
add r2.x, -r2.y, c4.y
cmp r2.x, r0.z, r2.y, r2
cmp r0.w, r0.x, r2.x, -r2.x
dsx r2.w, r0.y
dsy r2.y, r0
mov r4.y, r0
dsy r0.xy, r0.xzzw
mul r0.xy, r0, r0
mad r4.x, r0.w, c2.w, c2.z
mul r0.zw, r3.xyxy, r3.xyxy
add r0.y, r0.x, r0
add r0.z, r0, r0.w
rsq r0.x, r0.z
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
dp4 r3.x, c0, c0
rsq r3.x, r3.x
mul r3.xyz, r3.x, c0
mul r2.z, r0.x, c2.w
mul r2.x, r0.y, c2.w
texldd r0.yw, r4, s1, r2.zwzw, r2
mad_pp r0.xy, r0.wyzw, c7.x, c7.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c2.x
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r0.xyz, r0.w, r0
dp3_pp r3.w, v3, r3
dp3_pp r0.w, v4, v4
rsq_pp r3.x, r0.w
mul_pp r3.xyz, r3.x, v4
dp3_pp r0.y, r0, r3
add_pp r0.w, r3, c7.z
frc_pp r4.z, r0.w
add_pp_sat r0.z, r0.w, -r4
add r3.x, r1.z, -r1
dp3 r0.x, v5, v5
texld r0.w, v5, s6
texld r0.x, r0.x, s5
mul r0.x, r0, r0.w
mul_pp r0.w, r0.x, r0.y
add_pp r0.y, r0.z, c7
mul_pp_sat r0.x, -r3.w, c6.w
mad_pp r3.y, r0.x, r0, c2.x
mul_pp r0.w, r0, r3.y
mul_pp_sat r0.w, r0, c7
add_pp r3.z, -r0.w, c2.x
texldd r0.w, r4, s2, r2.zwzw, r2
add r0.xyz, r1.zxyw, -r1
cmp r3.x, r3, c2, c2.y
mad r0.xyz, r3.x, r0, r1
add r3.x, r0, -r1.y
add r0.xyz, r0, -r1.yxzw
cmp r3.x, r3, c2, c2.y
mad r0.xyz, r3.x, r0, r1.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c2.z
mul r3.xy, r0, c1.x
mul r0.z, r1.w, c1.x
mul r0.z, r0, c4
dsx r0.y, r0.z
mov r0.x, r2.z
dsy r2.y, r0.z
texldd r1, r3, s3, r0, r2
mul_pp r0.z, r1.w, r0.w
mul_pp r3.z, r0, r3
texldd r2, r3, s4, r0, r2
mul_pp r0.w, r0, r2
mov_pp r0.xyz, r2
mov_pp r1.w, r3.z
add_pp r1, r1, -r0
mad_pp oC0, r3.z, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 93 math, 2 textures
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
SetTexture 0 [_BumpMap] 2D 2
SetTexture 1 [_CityOverlayTex] 2D 3
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 3 [_CityLightOverlayDetailTex] 2D 5
SetTexture 4 [_LightTextureB0] 2D 1
SetTexture 5 [_LightTexture0] CUBE 0
ConstBuffer "$Globals" 304
Float 292 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
"ps_4_0
eefiecedigchbhddoobjelghdicehbbkohijggdnabaaaaaajiaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcgaanaaaaeaaaaaaafiadaaaa
fjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafidaaaaeaahabaaa
afaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacahaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaa
egbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaabgbgbaaaacaaaaaadeaaaaajicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
cgakbaaaaaaaaaaacgakbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaa
bkaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahecaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdodiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaabkiacaaaaaaaaaaabcaaaaaaalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaacaaaaaafgajbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaaogakbaaa
acaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaaf
mcaabaaaacaaaaaafgajbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaaogakbaaa
acaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaa
acaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaabaaaaaaegaabaaa
adaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
bnaaaaajccaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaajpcaabaaaafaaaaaafgaibaiambaaaaaaaaaaaaaakgabbaiaibaaaaaa
aaaaaaaadcaaaaakhcaabaaaagaaaaaafgafbaaaabaaaaaaegacbaaaafaaaaaa
fgaebaiaibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaaabaaaaaa
dkaabaaaafaaaaaadgaaaaaficaabaaaagaaaaaaabeaaaaaaaaaaaaadgaaaaag
dcaabaaaaeaaaaaaegaabaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaaaeaaaaaa
egacbaaaaeaaaaaajgahbaaaagaaaaaabnaaaaaiccaabaaaabaaaaaaakaabaaa
agaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaaaaaaaaafgafbaaaabaaaaaa
egacbaaaaeaaaaaaegacbaiaibaaaaaaaaaaaaaadiaaaaakocaabaaaaaaaaaaa
kganbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpidpjkcdpaoaaaaah
dcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaadiaaaaaidcaabaaa
aaaaaaaaegaabaaaaaaaaaaafgifcaaaaaaaaaaabcaaaaaaalaaaaafecaabaaa
abaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaaaaaaaaaa
ejaaaaanpcaabaaaafaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
aeaaaaaaigaabaaaabaaaaaaigaabaaaadaaaaaaejaaaaanpcaabaaaaaaaaaaa
egaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaafaaaaaaigaabaaaabaaaaaa
igaabaaaadaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaeaaaaaadkaabaaa
afaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaeaaaaaadkaabaaaaaaaaaaa
apaaaaahccaabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
acaaaaaabkaabaaaabaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaeeaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
ocaabaaaabaaaaaafgafbaaaabaaaaaaagajbaaaacaaaaaabaaaaaahbcaabaaa
acaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahhcaabaaaacaaaaaaagaabaaaacaaaaaaegbcbaaa
aeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaaegacbaaaacaaaaaa
baaaaaahecaabaaaabaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaefaaaaaj
pcaabaaaacaaaaaakgakbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaabaaaaaa
efaaaaajpcaabaaaadaaaaaaegbcbaaaafaaaaaaeghobaaaafaaaaaaaagabaaa
aaaaaaaadiaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaaadaaaaaa
diaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiaeabbaaaaajecaabaaa
abaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaihcaabaaaacaaaaaakgakbaaa
abaaaaaaegiccaaaabaaaaaaaaaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
adaaaaaaegacbaaaacaaaaaaaaaaaaahicaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaakoehibdpdicaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
aaaacambebcaaaaficaabaaaabaaaaaadkaabaaaabaaaaaaaaaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaialpdcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdicaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaafaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaia
ebaaaaaaaaaaaaaaegaobaaaafaaaaaadcaaaaajpccabaaaaaaaaaaapgapbaaa
afaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 317 math, 6 textures, 12 branches
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
SetTexture 0 [_LightTexture0] CUBE 0
SetTexture 1 [_LightTextureB0] 2D 1
SetTexture 2 [_BumpMap] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 44
Vector 0 [_WorldSpaceLightPos0]
VectorHalf 16 [_LightColor0] 4
Float 24 [_SpecularPower]
VectorHalf 32 [_SpecularColor] 4
Float 40 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> _LightTexture0 [[texture(0)]], sampler _mtlsmp__LightTexture0 [[sampler(0)]]
  ,   texture2d<half> _LightTextureB0 [[texture(1)]], sampler _mtlsmp__LightTextureB0 [[sampler(1)]]
  ,   texture2d<half> _BumpMap [[texture(2)]], sampler _mtlsmp__BumpMap [[sampler(2)]]
  ,   texture2d<half> _CityOverlayTex [[texture(3)]], sampler _mtlsmp__CityOverlayTex [[sampler(3)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(4)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half3 normT_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half3 tmpvar_15;
  half4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * (half)2.0) - (half)1.0);
  normT_4 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * rsqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_21;
  tmpvar_21 = dfdx(tmpvar_17.xz);
  float2 tmpvar_22;
  tmpvar_22 = dfdy(tmpvar_17.xz);
  float4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dfdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dfdy(uv_18.y);
  half4 tmpvar_24;
  tmpvar_24 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_18), gradient2d((float2)(tmpvar_23.xy), (float2)(tmpvar_23.zw)));
  half4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  half4 tmpvar_26;
  half3 detailCoords_27;
  half nylerp_28;
  half zxlerp_29;
  float3 tmpvar_30;
  tmpvar_30 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_31;
  float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * rsqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_35;
  tmpvar_35 = dfdx(tmpvar_30.xz);
  float2 tmpvar_36;
  tmpvar_36 = dfdy(tmpvar_30.xz);
  float4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dfdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dfdy(tmpvar_34.y);
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, (float)zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = half(tmpvar_40);
  float3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, (float3)half3(zxlerp_29));
  detailCoords_27 = half3(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, (float3)detailCoords_27, (float3)half3(nylerp_28));
  detailCoords_27 = half3(tmpvar_42);
  half tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  float2 coord_44;
  coord_44 = ((float2)(((half)0.5 * detailCoords_27.zy) / tmpvar_43) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_45;
  tmpvar_45 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_44), gradient2d((float2)(tmpvar_37.xy), (float2)(tmpvar_37.zw)));
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  half4 tmpvar_46;
  half3 detailCoords_47;
  half nylerp_48;
  half zxlerp_49;
  float3 tmpvar_50;
  tmpvar_50 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_51;
  float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * rsqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_55;
  tmpvar_55 = dfdx(tmpvar_50.xz);
  float2 tmpvar_56;
  tmpvar_56 = dfdy(tmpvar_50.xz);
  float4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dfdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dfdy(tmpvar_54.y);
  float3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = half(tmpvar_59);
  float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, (float)zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = half(tmpvar_60);
  float3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, (float3)half3(zxlerp_49));
  detailCoords_47 = half3(tmpvar_61);
  float3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, (float3)detailCoords_47, (float3)half3(nylerp_48));
  detailCoords_47 = half3(tmpvar_62);
  half tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  float2 coord_64;
  coord_64 = ((float2)(((half)0.5 * detailCoords_47.zy) / tmpvar_63) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_65;
  tmpvar_65 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_64), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  float tmpvar_66;
  tmpvar_66 = dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_67;
  tmpvar_67 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_66)));
  half4 tmpvar_68;
  tmpvar_68 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD6));
  half3 lightDir_69;
  lightDir_69 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_70;
  viewDir_70 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_71;
  atten_71 = (tmpvar_67.w * tmpvar_68.w);
  half4 c_72;
  half3 tmpvar_73;
  tmpvar_73 = normalize(lightDir_69);
  lightDir_69 = tmpvar_73;
  half3 tmpvar_74;
  tmpvar_74 = normalize(viewDir_70);
  viewDir_70 = tmpvar_74;
  half3 tmpvar_75;
  tmpvar_75 = normalize(normT_4);
  half tmpvar_76;
  tmpvar_76 = dot (tmpvar_75, tmpvar_73);
  float tmpvar_77;
  half tmpvar_78;
  tmpvar_78 = clamp (dot (normalize(
    (tmpvar_73 + tmpvar_74)
  ), tmpvar_75), (half)0.0, (half)1.0);
  tmpvar_77 = float(tmpvar_78);
  float3 tmpvar_79;
  tmpvar_79 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_76) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_77, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_71 * (half)4.0));
  c_72.xyz = half3(tmpvar_79);
  c_72.w = (tmpvar_76 * (atten_71 * (half)4.0));
  float3 tmpvar_80;
  tmpvar_80 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_81;
  lightDir_81 = half3(tmpvar_80);
  half3 normal_82;
  normal_82 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_83;
  tmpvar_83 = dot (normal_82, lightDir_81);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_72 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_83)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_83)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_84;
  tmpvar_84 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_84;
  tmpvar_1 = tmpvar_84;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 110 math, 13 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [_WorldSpaceLightPos0]
Float 1 [_CityOverlayDetailScale]
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
SetTexture 5 [_LightTexture0] 2D 5
"ps_3_0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c2, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c3, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c4, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c5, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c6, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c7, 2.00000000, -1.00000000, 1.00976563, 4.00000000
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xy
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
abs r0.w, r1.z
max r1.w, r0.x, r0
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
mul r2.x, r1.w, r1.w
mad r2.y, r2.x, c5.x, c5
mad r2.y, r2, r2.x, c5.z
mad r2.y, r2, r2.x, c5.w
mad r2.y, r2, r2.x, c6.x
mad r2.x, r2.y, r2, c6.y
mul r2.x, r2, r1.w
add r1.w, r0.x, -r0
add r2.y, -r2.x, c6.z
abs r0.w, r1.y
cmp r2.y, -r1.w, r2.x, r2
add r2.x, -r0.w, c2
mad r1.w, r0, c3.x, c3.y
mad r1.w, r1, r0, c3.z
rsq r2.x, r2.x
mad r0.w, r1, r0, c3
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, r1.y, c2.y, c2.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c4.x, r1.w
mad r1.w, r0, c4.y, r1.y
mul r0.w, r1, c4
add r2.x, -r2.y, c4.y
cmp r2.x, r1.z, r2.y, r2
cmp r1.y, r1.x, r2.x, -r2.x
dsx r2.xy, r1.xzzw
mad r4.x, r1.y, c2.w, c2.z
dsy r1.xy, r1.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r2.xy, r2, r2
mul r3.x, r1, c2.w
mov r4.y, r0.w
dsx r3.w, r0
dsy r3.y, r0.w
add r0.w, r2.x, r2.y
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.z, r0.w, c2.w
texldd r2.yw, r4, s1, r3.zwzw, r3
mad_pp r1.xy, r2.wyzw, c7.x, c7.y
mul_pp r2.xy, r1, r1
add_pp_sat r0.w, r2.x, r2.y
add_pp r0.w, -r0, c2.x
rsq_pp r0.w, r0.w
rcp_pp r1.z, r0.w
dp3_pp r0.w, r1, r1
rsq_pp r0.w, r0.w
mul_pp r1.xyz, r0.w, r1
dp4_pp r2.x, c0, c0
rsq_pp r2.x, r2.x
mul_pp r2.xyz, r2.x, c0
dp3_pp r2.w, v3, r2
dp3_pp r0.w, v4, v4
rsq_pp r2.x, r0.w
mul_pp r2.xyz, r2.x, v4
dp3_pp r1.x, r1, r2
add_pp r0.w, r2, c7.z
frc_pp r4.z, r0.w
add_pp_sat r1.y, r0.w, -r4.z
add r2.x, r0.z, -r0
texld r0.w, v5, s5
mul_pp r0.w, r0, r1.x
mul_pp_sat r1.x, -r2.w, c6.w
add_pp r1.y, r1, c7
mad_pp r2.y, r1.x, r1, c2.x
mul_pp r0.w, r0, r2.y
mul_pp_sat r0.w, r0, c7
add_pp r4.z, -r0.w, c2.x
texldd r0.w, r4, s2, r3.zwzw, r3
mov r2.z, r3.x
add r1.xyz, r0.zxyw, -r0
cmp r2.x, r2, c2, c2.y
mad r1.xyz, r2.x, r1, r0
add r2.x, r1, -r0.y
add r1.xyz, r1, -r0.yxzw
cmp r2.x, r2, c2, c2.y
mad r0.xyz, r2.x, r1, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c2.z
mul r2.xy, r0, c1.x
mul r0.z, r1.w, c1.x
mul r0.z, r0, c4
dsx r0.y, r0.z
dsy r2.w, r0.z
mov r0.x, r3.z
texldd r1, r2, s3, r0, r2.zwzw
mul_pp r0.z, r1.w, r0.w
mul_pp r3.x, r0.z, r4.z
texldd r2, r2, s4, r0, r2.zwzw
mul_pp r0.w, r0, r2
mov_pp r0.xyz, r2
mov_pp r1.w, r3.x
add_pp r1, r1, -r0
mad_pp oC0, r3.x, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 91 math, 1 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
SetTexture 0 [_BumpMap] 2D 1
SetTexture 1 [_CityOverlayTex] 2D 2
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 3 [_CityLightOverlayDetailTex] 2D 4
SetTexture 4 [_LightTexture0] 2D 0
ConstBuffer "$Globals" 304
Float 292 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
"ps_4_0
eefiecedlmncipiednpchclgkpmokfcplfapfceiabaaaaaacaaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
adadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcoiamaaaaeaaaaaaadkadaaaa
fjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaaddcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacahaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaabgbgbaaaacaaaaaadeaaaaaj
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaacgakbaaaaaaaaaaacgakbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaabkaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaa
bkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
ecaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdodiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaabkiacaaaaaaaaaaabcaaaaaaalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaacaaaaaafgajbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaa
ogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdo
amaaaaafmcaabaaaacaaaaaafgajbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaa
ogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaabnaaaaajccaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaajpcaabaaaafaaaaaafgaibaiambaaaaaaaaaaaaaakgabbaia
ibaaaaaaaaaaaaaadcaaaaakhcaabaaaagaaaaaafgafbaaaabaaaaaaegacbaaa
afaaaaaafgaebaiaibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaa
abaaaaaadkaabaaaafaaaaaadgaaaaaficaabaaaagaaaaaaabeaaaaaaaaaaaaa
dgaaaaagdcaabaaaaeaaaaaaegaabaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaa
aeaaaaaaegacbaaaaeaaaaaajgahbaaaagaaaaaabnaaaaaiccaabaaaabaaaaaa
akaabaaaagaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaaaaaaaaafgafbaaa
abaaaaaaegacbaaaaeaaaaaaegacbaiaibaaaaaaaaaaaaaadiaaaaakocaabaaa
aaaaaaaakganbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpidpjkcdp
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaafgifcaaaaaaaaaaabcaaaaaaalaaaaaf
ecaabaaaabaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaaigaabaaaabaaaaaaigaabaaaadaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaaeaaaaaaigaabaaa
abaaaaaaigaabaaaadaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaeaaaaaa
dkaabaaaafaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaeaaaaaadkaabaaa
aaaaaaaaapaaaaahccaabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaacaaaaaabkaabaaaabaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahocaabaaaabaaaaaafgafbaaaabaaaaaaagajbaaaacaaaaaabaaaaaah
bcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaahhcaabaaaacaaaaaaagaabaaaacaaaaaa
egbcbaaaaeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaaegacbaaa
acaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaafaaaaaaeghobaaaaeaaaaaa
aagabaaaaaaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaadkaabaaa
acaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiaea
bbaaaaajecaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaihcaabaaa
acaaaaaakgakbaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabaaaaaahecaabaaa
abaaaaaaegbcbaaaadaaaaaaegacbaaaacaaaaaaaaaaaaahicaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaakoehibdpdicaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaaaaacambebcaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
aaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaialpdcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dicaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaai
ccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaafaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaiaebaaaaaaaaaaaaaaegaobaaaafaaaaaadcaaaaajpccabaaa
aaaaaaaapgapbaaaafaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaadoaaaaab
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 315 math, 5 textures, 12 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
SetTexture 0 [_LightTexture0] 2D 0
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 36
VectorHalf 0 [_WorldSpaceLightPos0] 4
VectorHalf 8 [_LightColor0] 4
Float 16 [_SpecularPower]
VectorHalf 24 [_SpecularColor] 4
Float 32 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float2 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(0)]], sampler _mtlsmp__LightTexture0 [[sampler(0)]]
  ,   texture2d<half> _BumpMap [[texture(1)]], sampler _mtlsmp__BumpMap [[sampler(1)]]
  ,   texture2d<half> _CityOverlayTex [[texture(2)]], sampler _mtlsmp__CityOverlayTex [[sampler(2)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(3)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half3 normT_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half3 tmpvar_15;
  half4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * (half)2.0) - (half)1.0);
  normT_4 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * rsqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_21;
  tmpvar_21 = dfdx(tmpvar_17.xz);
  float2 tmpvar_22;
  tmpvar_22 = dfdy(tmpvar_17.xz);
  float4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dfdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dfdy(uv_18.y);
  half4 tmpvar_24;
  tmpvar_24 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_18), gradient2d((float2)(tmpvar_23.xy), (float2)(tmpvar_23.zw)));
  half4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  half4 tmpvar_26;
  half3 detailCoords_27;
  half nylerp_28;
  half zxlerp_29;
  float3 tmpvar_30;
  tmpvar_30 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_31;
  float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * rsqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_35;
  tmpvar_35 = dfdx(tmpvar_30.xz);
  float2 tmpvar_36;
  tmpvar_36 = dfdy(tmpvar_30.xz);
  float4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dfdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dfdy(tmpvar_34.y);
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, (float)zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = half(tmpvar_40);
  float3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, (float3)half3(zxlerp_29));
  detailCoords_27 = half3(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, (float3)detailCoords_27, (float3)half3(nylerp_28));
  detailCoords_27 = half3(tmpvar_42);
  half tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  float2 coord_44;
  coord_44 = ((float2)(((half)0.5 * detailCoords_27.zy) / tmpvar_43) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_45;
  tmpvar_45 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_44), gradient2d((float2)(tmpvar_37.xy), (float2)(tmpvar_37.zw)));
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  half4 tmpvar_46;
  half3 detailCoords_47;
  half nylerp_48;
  half zxlerp_49;
  float3 tmpvar_50;
  tmpvar_50 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_51;
  float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * rsqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_55;
  tmpvar_55 = dfdx(tmpvar_50.xz);
  float2 tmpvar_56;
  tmpvar_56 = dfdy(tmpvar_50.xz);
  float4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dfdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dfdy(tmpvar_54.y);
  float3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = half(tmpvar_59);
  float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, (float)zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = half(tmpvar_60);
  float3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, (float3)half3(zxlerp_49));
  detailCoords_47 = half3(tmpvar_61);
  float3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, (float3)detailCoords_47, (float3)half3(nylerp_48));
  detailCoords_47 = half3(tmpvar_62);
  half tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  float2 coord_64;
  coord_64 = ((float2)(((half)0.5 * detailCoords_47.zy) / tmpvar_63) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_65;
  tmpvar_65 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_64), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  half4 tmpvar_66;
  tmpvar_66 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(_mtl_i.xlv_TEXCOORD6));
  half3 lightDir_67;
  lightDir_67 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_68;
  viewDir_68 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_69;
  atten_69 = tmpvar_66.w;
  half4 c_70;
  half3 tmpvar_71;
  tmpvar_71 = normalize(lightDir_67);
  lightDir_67 = tmpvar_71;
  half3 tmpvar_72;
  tmpvar_72 = normalize(viewDir_68);
  viewDir_68 = tmpvar_72;
  half3 tmpvar_73;
  tmpvar_73 = normalize(normT_4);
  half tmpvar_74;
  tmpvar_74 = dot (tmpvar_73, tmpvar_71);
  float tmpvar_75;
  half tmpvar_76;
  tmpvar_76 = clamp (dot (normalize(
    (tmpvar_71 + tmpvar_72)
  ), tmpvar_73), (half)0.0, (half)1.0);
  tmpvar_75 = float(tmpvar_76);
  float3 tmpvar_77;
  tmpvar_77 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_74) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_75, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_69 * (half)4.0));
  c_70.xyz = half3(tmpvar_77);
  c_70.w = (tmpvar_74 * (atten_69 * (half)4.0));
  half3 tmpvar_78;
  tmpvar_78 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_79;
  lightDir_79 = tmpvar_78;
  half3 normal_80;
  normal_80 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_81;
  tmpvar_81 = dot (normal_80, lightDir_79);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_70 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_81)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_81)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_82;
  tmpvar_82 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_82;
  tmpvar_1 = tmpvar_82;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 121 math, 15 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightShadowData]
Float 2 [_CityOverlayDetailScale]
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
SetTexture 5 [_LightTexture0] 2D 5
SetTexture 6 [_LightTextureB0] 2D 6
SetTexture 7 [_ShadowMapTexture] 2D 7
"ps_3_0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c3, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c4, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c5, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c6, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c7, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c8, 2.00000000, -1.00000000, 1.00976563, 4.00000000
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5
dcl_texcoord7 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
abs r0.w, r0.z
max r1.w, r1.x, r0
rcp r2.x, r1.w
min r1.w, r1.x, r0
mul r1.w, r1, r2.x
mul r2.x, r1.w, r1.w
mad r2.y, r2.x, c6.x, c6
mad r2.y, r2, r2.x, c6.z
mad r2.y, r2, r2.x, c6.w
mad r2.y, r2, r2.x, c7.x
mad r2.x, r2.y, r2, c7.y
mul r2.x, r2, r1.w
add r1.w, r1.x, -r0
abs r0.w, r0.y
add r2.y, -r2.x, c7.z
cmp r2.y, -r1.w, r2.x, r2
add r2.x, -r0.w, c3
mad r1.w, r0, c4.x, c4.y
mad r1.w, r1, r0, c4.z
rsq r2.x, r2.x
dsx r3.xy, r0.xzzw
cmp r0.y, r0, c3, c3.x
rcp r2.x, r2.x
mad r0.w, r1, r0, c4
mul r0.w, r0, r2.x
mul r1.w, r0.y, r0
mad r0.w, -r1, c5.x, r0
mad r1.w, r0.y, c5.y, r0
mul r0.y, r1.w, c5.w
add r2.x, -r2.y, c5.y
cmp r2.x, r0.z, r2.y, r2
cmp r0.w, r0.x, r2.x, -r2.x
dsx r2.y, r0
dsy r2.w, r0.y
mov r4.y, r0
dsy r0.xy, r0.xzzw
mul r0.xy, r0, r0
mad r4.x, r0.w, c3.w, c3.z
mul r0.zw, r3.xyxy, r3.xyxy
add r0.y, r0.x, r0
add r0.z, r0, r0.w
rsq r0.x, r0.z
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
dp4 r3.x, c0, c0
rsq r3.x, r3.x
mul r3.xyz, r3.x, c0
mul r2.x, r0, c3.w
mul r2.z, r0.y, c3.w
texldd r0.yw, r4, s1, r2, r2.zwzw
mad_pp r0.xy, r0.wyzw, c8.x, c8.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c3.x
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r0.xyz, r0.w, r0
dp3_pp r3.w, v3, r3
dp3_pp r0.w, v4, v4
rsq_pp r3.x, r0.w
mul_pp r3.xyz, r3.x, v4
dp3_pp r0.z, r0, r3
add_pp r0.w, r3, c8.z
frc_pp r4.z, r0.w
add_pp_sat r0.y, r0.w, -r4.z
texldp r0.x, v6, s7
rcp r0.w, v6.w
mad r0.w, -v6.z, r0, r0.x
mov r3.x, c1
cmp r3.z, r0.w, c3.x, r3.x
rcp r0.x, v5.w
mad r3.xy, v5, r0.x, c3.z
texld r0.w, r3, s5
cmp r3.x, -v5.z, c3.y, c3
mul_pp r0.w, r3.x, r0
add r3.x, r1.z, -r1
dp3 r0.x, v5, v5
texld r0.x, r0.x, s6
mul_pp r0.x, r0.w, r0
mul_pp r0.x, r0, r3.z
mul_pp r0.w, r0.x, r0.z
add_pp r0.y, r0, c8
mul_pp_sat r0.x, -r3.w, c7.w
mad_pp r3.y, r0.x, r0, c3.x
mul_pp r0.w, r0, r3.y
mul_pp_sat r0.w, r0, c8
add_pp r3.z, -r0.w, c3.x
texldd r0.w, r4, s2, r2, r2.zwzw
add r0.xyz, r1.zxyw, -r1
cmp r3.x, r3, c3, c3.y
mad r0.xyz, r3.x, r0, r1
add r3.x, r0, -r1.y
add r0.xyz, r0, -r1.yxzw
cmp r3.x, r3, c3, c3.y
mad r0.xyz, r3.x, r0, r1.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c3.z
mul r3.xy, r0, c2.x
mov r0.x, r2
mul r0.z, r1.w, c2.x
mul r0.z, r0, c5
dsx r0.y, r0.z
dsy r2.y, r0.z
mov r2.x, r2.z
texldd r1, r3, s3, r0, r2
mul_pp r0.z, r1.w, r0.w
mul_pp r3.z, r0, r3
texldd r2, r3, s4, r0, r2
mul_pp r0.w, r0, r2
mov_pp r0.xyz, r2
mov_pp r1.w, r3.z
add_pp r1, r1, -r0
mad_pp oC0, r3.z, r1, r0
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 120 math, 15 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightShadowData]
Float 2 [_CityOverlayDetailScale]
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
SetTexture 5 [_LightTexture0] 2D 5
SetTexture 6 [_LightTextureB0] 2D 6
SetTexture 7 [_ShadowMapTexture] 2D 7
"ps_3_0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c3, 0.50000000, 0.15915494, 0.00000000, 1.00000000
def c4, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c5, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c6, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c7, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c8, 2.00000000, -1.00000000, 1.00976563, 4.00000000
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5
dcl_texcoord7 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
abs r0.w, r0.z
max r1.w, r1.x, r0
rcp r2.x, r1.w
min r1.w, r1.x, r0
mul r1.w, r1, r2.x
mul r2.x, r1.w, r1.w
mad r2.y, r2.x, c6.x, c6
mad r2.y, r2, r2.x, c6.z
mad r2.y, r2, r2.x, c6.w
mad r2.y, r2, r2.x, c7.x
mad r2.x, r2.y, r2, c7.y
mul r2.x, r2, r1.w
add r1.w, r1.x, -r0
abs r0.w, r0.y
add r2.y, -r2.x, c7.z
cmp r2.y, -r1.w, r2.x, r2
add r2.x, -r0.w, c3.w
mad r1.w, r0, c4.x, c4.y
mad r1.w, r1, r0, c4.z
rsq r2.x, r2.x
dsx r3.xy, r0.xzzw
cmp r0.y, r0, c3.z, c3.w
rcp r2.x, r2.x
mad r0.w, r1, r0, c4
mul r0.w, r0, r2.x
mul r1.w, r0.y, r0
mad r0.w, -r1, c5.x, r0
mad r1.w, r0.y, c5.y, r0
mul r0.y, r1.w, c5.w
add r2.x, -r2.y, c5.y
cmp r2.x, r0.z, r2.y, r2
cmp r0.w, r0.x, r2.x, -r2.x
dsx r2.y, r0
dsy r2.w, r0.y
mov r4.y, r0
dsy r0.xy, r0.xzzw
mul r0.xy, r0, r0
mad r4.x, r0.w, c3.y, c3
mul r0.zw, r3.xyxy, r3.xyxy
add r0.y, r0.x, r0
add r0.z, r0, r0.w
rsq r0.x, r0.z
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
dp4 r3.x, c0, c0
rsq r3.x, r3.x
mul r3.xyz, r3.x, c0
mul r2.x, r0, c3.y
mul r2.z, r0.y, c3.y
texldd r0.yw, r4, s1, r2, r2.zwzw
mad_pp r0.xy, r0.wyzw, c8.x, c8.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c3.w
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r0.xyz, r0.w, r0
dp3_pp r3.w, v3, r3
dp3_pp r0.w, v4, v4
rsq_pp r3.x, r0.w
mul_pp r3.xyz, r3.x, v4
dp3_pp r0.z, r0, r3
add_pp r0.w, r3, c8.z
frc_pp r4.z, r0.w
add_pp_sat r0.y, r0.w, -r4.z
mov r0.x, c1
add r3.x, c3.w, -r0
texldp r0.x, v6, s7
mad r3.z, r0.x, r3.x, c1.x
rcp r0.w, v5.w
mad r3.xy, v5, r0.w, c3.x
texld r0.w, r3, s5
cmp r3.x, -v5.z, c3.z, c3.w
mul_pp r0.w, r3.x, r0
add r3.x, r1.z, -r1
dp3 r0.x, v5, v5
texld r0.x, r0.x, s6
mul_pp r0.x, r0.w, r0
mul_pp r0.x, r0, r3.z
mul_pp r0.w, r0.x, r0.z
add_pp r0.y, r0, c8
mul_pp_sat r0.x, -r3.w, c7.w
mad_pp r3.y, r0.x, r0, c3.w
mul_pp r0.w, r0, r3.y
mul_pp_sat r0.w, r0, c8
add_pp r3.z, -r0.w, c3.w
texldd r0.w, r4, s2, r2, r2.zwzw
add r0.xyz, r1.zxyw, -r1
cmp r3.x, r3, c3.w, c3.z
mad r0.xyz, r3.x, r0, r1
add r3.x, r0, -r1.y
add r0.xyz, r0, -r1.yxzw
cmp r3.x, r3, c3.w, c3.z
mad r0.xyz, r3.x, r0, r1.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c3.x
mul r3.xy, r0, c2.x
mov r0.x, r2
mul r0.z, r1.w, c2.x
mul r0.z, r0, c5
dsx r0.y, r0.z
dsy r2.y, r0.z
mov r2.x, r2.z
texldd r1, r3, s3, r0, r2
mul_pp r0.z, r1.w, r0.w
mul_pp r3.z, r0, r3
texldd r2, r3, s4, r0, r2
mul_pp r0.w, r0, r2
mov_pp r0.xyz, r2
mov_pp r1.w, r3.z
add_pp r1, r1, -r0
mad_pp oC0, r3.z, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 102 math, 2 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
SetTexture 0 [_BumpMap] 2D 3
SetTexture 1 [_CityOverlayTex] 2D 4
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 3 [_CityLightOverlayDetailTex] 2D 6
SetTexture 4 [_LightTexture0] 2D 1
SetTexture 5 [_LightTextureB0] 2D 2
SetTexture 6 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 304
Float 292 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityShadows" 416
Vector 384 [_LightShadowData]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
BindCB  "UnityShadows" 2
"ps_4_0
eefieceddanoacmkfmkmacmdifmekcelnmhlkbliabaaaaaadabaaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apapaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcoaaoaaaaeaaaaaaaliadaaaafjaaaaaeegiocaaa
aaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagcbaaaad
pcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
bgbgbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaacgakbaaaaaaaaaaacgakbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaa
akaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjkcdodiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaabkiacaaaaaaaaaaa
bcaaaaaaalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaacaaaaaafgajbaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaafgajbaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
adaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadcaaaaapdcaabaaaacaaaaaa
hgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaaaaaaaaaaaaabnaaaaajccaabaaaabaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaaafaaaaaafgaibaia
mbaaaaaaaaaaaaaakgabbaiaibaaaaaaaaaaaaaadcaaaaakhcaabaaaagaaaaaa
fgafbaaaabaaaaaaegacbaaaafaaaaaafgaebaiaibaaaaaaaaaaaaaadiaaaaah
ecaabaaaaeaaaaaabkaabaaaabaaaaaadkaabaaaafaaaaaadgaaaaaficaabaaa
agaaaaaaabeaaaaaaaaaaaaadgaaaaagdcaabaaaaeaaaaaaegaabaiambaaaaaa
aaaaaaaaaaaaaaahhcaabaaaaeaaaaaaegacbaaaaeaaaaaajgahbaaaagaaaaaa
bnaaaaaiccaabaaaabaaaaaaakaabaaaagaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaaaaaaaaafgafbaaaabaaaaaaegacbaaaaeaaaaaaegacbaiaibaaaaaa
aaaaaaaadiaaaaakocaabaaaaaaaaaaakganbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpidpjkcdpaoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaafgifcaaa
aaaaaaaabcaaaaaaalaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaamaaaaaf
ecaabaaaadaaaaaadkaabaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaafaaaaaaigaabaaaabaaaaaaigaabaaa
adaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaa
aagabaaaagaaaaaaigaabaaaabaaaaaaigaabaaaadaaaaaadiaaaaahbcaabaaa
abaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaeaaaaaadkaabaaaaaaaaaaaapaaaaahccaabaaaabaaaaaaegaabaaa
acaaaaaaegaabaaaacaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaabkaabaaaabaaaaaabaaaaaah
ccaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaahocaabaaaabaaaaaafgafbaaaabaaaaaa
agajbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahhcaabaaa
acaaaaaaagaabaaaacaaaaaaegbcbaaaaeaaaaaabaaaaaahccaabaaaabaaaaaa
jgahbaaaabaaaaaaegacbaaaacaaaaaaaoaaaaahmcaabaaaabaaaaaaagbebaaa
afaaaaaapgbpbaaaafaaaaaaaaaaaaakmcaabaaaabaaaaaakgaobaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpefaaaaajpcaabaaaacaaaaaa
ogakbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaabaaaaaadbaaaaahecaabaaa
abaaaaaaabeaaaaaaaaaaaaackbabaaaafaaaaaaabaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahecaabaaaabaaaaaadkaabaaa
acaaaaaackaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaafaaaaaa
egbcbaaaafaaaaaaefaaaaajpcaabaaaacaaaaaapgapbaaaabaaaaaaeghobaaa
afaaaaaaaagabaaaacaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaaaacaaaaaaaoaaaaahhcaabaaaacaaaaaaegbcbaaaagaaaaaapgbpbaaa
agaaaaaaehaaaaalicaabaaaabaaaaaaegaabaaaacaaaaaaaghabaaaagaaaaaa
aagabaaaaaaaaaaackaabaaaacaaaaaaaaaaaaajbcaabaaaacaaaaaaakiacaia
ebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdcaaaaakicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaaakiacaaaacaaaaaabiaaaaaadiaaaaah
ecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiaeadiaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaabbaaaaajecaabaaaabaaaaaaegiocaaa
abaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaeeaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaaihcaabaaaacaaaaaakgakbaaaabaaaaaaegiccaaa
abaaaaaaaaaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaaadaaaaaaegacbaaa
acaaaaaaaaaaaaahicaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaakoehibdp
dicaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaacambebcaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaaaaaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaialpdcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdicaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaaiccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaafaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaiaebaaaaaaaaaaaaaa
egaobaaaafaaaaaadcaaaaajpccabaaaaaaaaaaapgapbaaaafaaaaaaegaobaaa
abaaaaaaegaobaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 326 math, 7 textures, 12 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [_LightTexture0] 2D 1
SetTexture 2 [_LightTextureB0] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityOverlayTex] 2D 4
SetTexture 5 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 6 [_CityLightOverlayDetailTex] 2D 6
ConstBuffer "$Globals" 60
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightShadowData]
VectorHalf 32 [_LightColor0] 4
Float 40 [_SpecularPower]
VectorHalf 48 [_SpecularColor] 4
Float 56 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::less);
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 _LightShadowData;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   depth2d<float> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _LightTextureB0 [[texture(2)]], sampler _mtlsmp__LightTextureB0 [[sampler(2)]]
  ,   texture2d<half> _BumpMap [[texture(3)]], sampler _mtlsmp__BumpMap [[sampler(3)]]
  ,   texture2d<half> _CityOverlayTex [[texture(4)]], sampler _mtlsmp__CityOverlayTex [[sampler(4)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(5)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(6)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half3 normT_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half3 tmpvar_15;
  half4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * (half)2.0) - (half)1.0);
  normT_4 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * rsqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_21;
  tmpvar_21 = dfdx(tmpvar_17.xz);
  float2 tmpvar_22;
  tmpvar_22 = dfdy(tmpvar_17.xz);
  float4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dfdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dfdy(uv_18.y);
  half4 tmpvar_24;
  tmpvar_24 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_18), gradient2d((float2)(tmpvar_23.xy), (float2)(tmpvar_23.zw)));
  half4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  half4 tmpvar_26;
  half3 detailCoords_27;
  half nylerp_28;
  half zxlerp_29;
  float3 tmpvar_30;
  tmpvar_30 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_31;
  float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * rsqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_35;
  tmpvar_35 = dfdx(tmpvar_30.xz);
  float2 tmpvar_36;
  tmpvar_36 = dfdy(tmpvar_30.xz);
  float4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dfdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dfdy(tmpvar_34.y);
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, (float)zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = half(tmpvar_40);
  float3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, (float3)half3(zxlerp_29));
  detailCoords_27 = half3(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, (float3)detailCoords_27, (float3)half3(nylerp_28));
  detailCoords_27 = half3(tmpvar_42);
  half tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  float2 coord_44;
  coord_44 = ((float2)(((half)0.5 * detailCoords_27.zy) / tmpvar_43) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_45;
  tmpvar_45 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_44), gradient2d((float2)(tmpvar_37.xy), (float2)(tmpvar_37.zw)));
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  half4 tmpvar_46;
  half3 detailCoords_47;
  half nylerp_48;
  half zxlerp_49;
  float3 tmpvar_50;
  tmpvar_50 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_51;
  float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * rsqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_55;
  tmpvar_55 = dfdx(tmpvar_50.xz);
  float2 tmpvar_56;
  tmpvar_56 = dfdy(tmpvar_50.xz);
  float4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dfdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dfdy(tmpvar_54.y);
  float3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = half(tmpvar_59);
  float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, (float)zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = half(tmpvar_60);
  float3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, (float3)half3(zxlerp_49));
  detailCoords_47 = half3(tmpvar_61);
  float3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, (float3)detailCoords_47, (float3)half3(nylerp_48));
  detailCoords_47 = half3(tmpvar_62);
  half tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  float2 coord_64;
  coord_64 = ((float2)(((half)0.5 * detailCoords_47.zy) / tmpvar_63) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_65;
  tmpvar_65 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_64), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  half4 tmpvar_66;
  float2 P_67;
  P_67 = ((_mtl_i.xlv_TEXCOORD6.xy / _mtl_i.xlv_TEXCOORD6.w) + 0.5);
  tmpvar_66 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_67));
  float tmpvar_68;
  tmpvar_68 = dot (_mtl_i.xlv_TEXCOORD6.xyz, _mtl_i.xlv_TEXCOORD6.xyz);
  half4 tmpvar_69;
  tmpvar_69 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_68)));
  half tmpvar_70;
  half shadow_71;
  half tmpvar_72;
  tmpvar_72 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(_mtl_i.xlv_TEXCOORD7).xy / (float)(_mtl_i.xlv_TEXCOORD7).w, (float)(_mtl_i.xlv_TEXCOORD7).z / (float)(_mtl_i.xlv_TEXCOORD7).w);
  float tmpvar_73;
  tmpvar_73 = (_mtl_u._LightShadowData.x + ((float)tmpvar_72 * (1.0 - _mtl_u._LightShadowData.x)));
  shadow_71 = half(tmpvar_73);
  tmpvar_70 = shadow_71;
  half3 lightDir_74;
  lightDir_74 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_75;
  viewDir_75 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_76;
  atten_76 = half((((
    float((_mtl_i.xlv_TEXCOORD6.z > 0.0))
   * (float)tmpvar_66.w) * (float)tmpvar_69.w) * (float)tmpvar_70));
  half4 c_77;
  half3 tmpvar_78;
  tmpvar_78 = normalize(lightDir_74);
  lightDir_74 = tmpvar_78;
  half3 tmpvar_79;
  tmpvar_79 = normalize(viewDir_75);
  viewDir_75 = tmpvar_79;
  half3 tmpvar_80;
  tmpvar_80 = normalize(normT_4);
  half tmpvar_81;
  tmpvar_81 = dot (tmpvar_80, tmpvar_78);
  float tmpvar_82;
  half tmpvar_83;
  tmpvar_83 = clamp (dot (normalize(
    (tmpvar_78 + tmpvar_79)
  ), tmpvar_80), (half)0.0, (half)1.0);
  tmpvar_82 = float(tmpvar_83);
  float3 tmpvar_84;
  tmpvar_84 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_81) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_82, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_76 * (half)4.0));
  c_77.xyz = half3(tmpvar_84);
  c_77.w = (tmpvar_81 * (atten_76 * (half)4.0));
  float3 tmpvar_85;
  tmpvar_85 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_86;
  lightDir_86 = half3(tmpvar_85);
  half3 normal_87;
  normal_87 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_88;
  tmpvar_88 = dot (normal_87, lightDir_86);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_77 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_88)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_88)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_89;
  tmpvar_89 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_89;
  tmpvar_1 = tmpvar_89;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 110 math, 13 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [_WorldSpaceLightPos0]
Float 1 [_CityOverlayDetailScale]
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
SetTexture 5 [_ShadowMapTexture] 2D 5
"ps_3_0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c2, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c3, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c4, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c5, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c6, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c7, 2.00000000, -1.00000000, 1.00976563, 4.00000000
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
abs r0.w, r0.z
max r1.w, r1.x, r0
rcp r2.x, r1.w
min r1.w, r1.x, r0
mul r1.w, r1, r2.x
mul r2.x, r1.w, r1.w
mad r2.y, r2.x, c5.x, c5
mad r2.y, r2, r2.x, c5.z
mad r2.y, r2, r2.x, c5.w
mad r2.y, r2, r2.x, c6.x
mad r2.x, r2.y, r2, c6.y
mul r2.x, r2, r1.w
add r1.w, r1.x, -r0
abs r0.w, r0.y
add r2.y, -r2.x, c6.z
cmp r2.y, -r1.w, r2.x, r2
add r2.x, -r0.w, c2
mad r1.w, r0, c3.x, c3.y
mad r1.w, r1, r0, c3.z
rsq r2.x, r2.x
cmp r0.y, r0, c2, c2.x
rcp r2.x, r2.x
mad r0.w, r1, r0, c3
mul r0.w, r0, r2.x
mul r1.w, r0.y, r0
mad r0.w, -r1, c4.x, r0
mad r1.w, r0.y, c4.y, r0
mul r0.y, r1.w, c4.w
add r2.x, -r2.y, c4.y
cmp r2.x, r0.z, r2.y, r2
cmp r0.w, r0.x, r2.x, -r2.x
dsx r2.xy, r0.xzzw
mad r4.x, r0.w, c2.w, c2.z
mov r4.y, r0
dsx r3.w, r0.y
dsy r3.y, r0
dsy r0.xy, r0.xzzw
mul r0.zw, r2.xyxy, r2.xyxy
mul r0.xy, r0, r0
add r0.y, r0.x, r0
add r0.z, r0, r0.w
rsq r0.x, r0.z
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
dp4_pp r2.x, c0, c0
rsq_pp r2.x, r2.x
mul r3.x, r0.y, c2.w
mul r3.z, r0.x, c2.w
texldd r0.yw, r4, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c7.x, c7.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c2.x
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r0.xyz, r0.w, r0
mul_pp r2.xyz, r2.x, c0
dp3_pp r0.w, v3, r2
dp3_pp r2.w, v4, v4
rsq_pp r2.x, r2.w
mul_pp r2.xyz, r2.x, v4
dp3_pp r0.y, r0, r2
add_pp r2.w, r0, c7.z
frc_pp r4.z, r2.w
texldp r0.x, v5, s5
mul_pp r2.x, r0, r0.y
add_pp_sat r0.z, r2.w, -r4
mul_pp_sat r0.x, -r0.w, c6.w
add_pp r0.y, r0.z, c7
mad_pp r2.y, r0.x, r0, c2.x
add r0.w, r1.z, -r1.x
mov r2.z, r3.x
add r0.xyz, r1.zxyw, -r1
cmp r0.w, r0, c2.x, c2.y
mad r0.xyz, r0.w, r0, r1
mul_pp r0.w, r2.x, r2.y
add r2.x, r0, -r1.y
mul_pp_sat r0.w, r0, c7
add_pp r4.z, -r0.w, c2.x
add r0.xyz, r0, -r1.yxzw
cmp r2.x, r2, c2, c2.y
mad r0.xyz, r2.x, r0, r1.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c2.z
mul r2.xy, r0, c1.x
mul r0.z, r1.w, c1.x
mul r0.z, r0, c4
dsx r0.y, r0.z
texldd r0.w, r4, s2, r3.zwzw, r3
dsy r2.w, r0.z
mov r0.x, r3.z
texldd r1, r2, s3, r0, r2.zwzw
mul_pp r0.z, r1.w, r0.w
mul_pp r3.x, r0.z, r4.z
texldd r2, r2, s4, r0, r2.zwzw
mul_pp r0.w, r0, r2
mov_pp r0.xyz, r2
mov_pp r1.w, r3.x
add_pp r1, r1, -r0
mad_pp oC0, r3.x, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 92 math, 1 textures
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
SetTexture 0 [_BumpMap] 2D 1
SetTexture 1 [_CityOverlayTex] 2D 2
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 3 [_CityLightOverlayDetailTex] 2D 4
SetTexture 4 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 304
Float 292 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
"ps_4_0
eefiecedcaakdjebcdlkfmkighnbcgbcilaicpmmabaaaaaadmaoaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaalmaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcaeanaaaaeaaaaaaaebadaaaa
fjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadlcbabaaaafaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacahaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaabgbgbaaaacaaaaaadeaaaaaj
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaacgakbaaaaaaaaaaacgakbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaabkaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaa
bkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
ecaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdodiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaabkiacaaaaaaaaaaabcaaaaaaalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaacaaaaaafgajbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaa
ogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdo
amaaaaafmcaabaaaacaaaaaafgajbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaa
ogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaa
acaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaabnaaaaajccaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaajpcaabaaaafaaaaaafgaibaiambaaaaaaaaaaaaaakgabbaia
ibaaaaaaaaaaaaaadcaaaaakhcaabaaaagaaaaaafgafbaaaabaaaaaaegacbaaa
afaaaaaafgaebaiaibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaa
abaaaaaadkaabaaaafaaaaaadgaaaaaficaabaaaagaaaaaaabeaaaaaaaaaaaaa
dgaaaaagdcaabaaaaeaaaaaaegaabaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaa
aeaaaaaaegacbaaaaeaaaaaajgahbaaaagaaaaaabnaaaaaiccaabaaaabaaaaaa
akaabaaaagaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaaaaaaaaafgafbaaa
abaaaaaaegacbaaaaeaaaaaaegacbaiaibaaaaaaaaaaaaaadiaaaaakocaabaaa
aaaaaaaakganbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpidpjkcdp
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaafgifcaaaaaaaaaaabcaaaaaaalaaaaaf
ecaabaaaabaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaaigaabaaaabaaaaaaigaabaaaadaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaaeaaaaaaigaabaaa
abaaaaaaigaabaaaadaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaeaaaaaa
dkaabaaaafaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaeaaaaaadkaabaaa
aaaaaaaaapaaaaahccaabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaacaaaaaabkaabaaaabaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahocaabaaaabaaaaaafgafbaaaabaaaaaaagajbaaaacaaaaaabaaaaaah
bcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaahhcaabaaaacaaaaaaagaabaaaacaaaaaa
egbcbaaaaeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaaegacbaaa
acaaaaaaaoaaaaahmcaabaaaabaaaaaaagbebaaaafaaaaaapgbpbaaaafaaaaaa
efaaaaajpcaabaaaacaaaaaaogakbaaaabaaaaaaeghobaaaaeaaaaaaaagabaaa
aaaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiaeabbaaaaaj
ecaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaihcaabaaaacaaaaaa
kgakbaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabaaaaaahecaabaaaabaaaaaa
egbcbaaaadaaaaaaegacbaaaacaaaaaaaaaaaaahicaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaakoehibdpdicaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaacambebcaaaaficaabaaaabaaaaaadkaabaaaabaaaaaaaaaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaialpdcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdicaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
afaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaipcaabaaaabaaaaaa
egaobaiaebaaaaaaaaaaaaaaegaobaaaafaaaaaadcaaaaajpccabaaaaaaaaaaa
pgapbaaaafaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 111 math, 14 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [_WorldSpaceLightPos0]
Float 1 [_CityOverlayDetailScale]
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
SetTexture 5 [_ShadowMapTexture] 2D 5
SetTexture 6 [_LightTexture0] 2D 6
"ps_3_0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c2, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c3, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c4, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c5, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c6, -0.33299461, 0.99999559, 1.57079601, 10.00000000
def c7, 2.00000000, -1.00000000, 1.00976563, 4.00000000
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xy
dcl_texcoord7 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
abs r0.w, r0.z
max r1.w, r1.x, r0
rcp r2.x, r1.w
min r1.w, r1.x, r0
mul r1.w, r1, r2.x
mul r2.x, r1.w, r1.w
mad r2.y, r2.x, c5.x, c5
mad r2.y, r2, r2.x, c5.z
mad r2.y, r2, r2.x, c5.w
mad r2.y, r2, r2.x, c6.x
mad r2.x, r2.y, r2, c6.y
mul r2.x, r2, r1.w
add r1.w, r1.x, -r0
abs r0.w, r0.y
add r2.y, -r2.x, c6.z
cmp r2.y, -r1.w, r2.x, r2
add r2.x, -r0.w, c2
mad r1.w, r0, c3.x, c3.y
mad r1.w, r1, r0, c3.z
rsq r2.x, r2.x
cmp r0.y, r0, c2, c2.x
rcp r2.x, r2.x
mad r0.w, r1, r0, c3
mul r0.w, r0, r2.x
mul r1.w, r0.y, r0
mad r0.w, -r1, c4.x, r0
mad r1.w, r0.y, c4.y, r0
mul r0.y, r1.w, c4.w
add r2.x, -r2.y, c4.y
cmp r2.x, r0.z, r2.y, r2
cmp r0.w, r0.x, r2.x, -r2.x
dsx r2.xy, r0.xzzw
mad r4.x, r0.w, c2.w, c2.z
mov r4.y, r0
dsx r3.w, r0.y
dsy r3.y, r0
dsy r0.xy, r0.xzzw
mul r0.zw, r2.xyxy, r2.xyxy
mul r0.xy, r0, r0
add r0.y, r0.x, r0
add r0.z, r0, r0.w
rsq r0.x, r0.z
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
dp4_pp r2.x, c0, c0
rsq_pp r2.x, r2.x
mul_pp r2.xyz, r2.x, c0
mul r3.x, r0.y, c2.w
mul r3.z, r0.x, c2.w
texldd r0.yw, r4, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c7.x, c7.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c2.x
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r0.xyz, r0.w, r0
dp3_pp r2.w, v3, r2
dp3_pp r0.w, v4, v4
rsq_pp r2.x, r0.w
mul_pp r2.xyz, r2.x, v4
dp3_pp r0.y, r0, r2
add_pp r0.w, r2, c7.z
frc_pp r4.z, r0.w
add_pp_sat r0.z, r0.w, -r4
add r2.x, r1.z, -r1
mov r2.z, r3.x
texld r0.w, v5, s6
texldp r0.x, v6, s5
mul r0.x, r0.w, r0
mul_pp r0.w, r0.x, r0.y
mul_pp_sat r0.x, -r2.w, c6.w
add_pp r0.y, r0.z, c7
mad_pp r2.y, r0.x, r0, c2.x
mul_pp r0.w, r0, r2.y
mul_pp_sat r0.w, r0, c7
add_pp r4.z, -r0.w, c2.x
texldd r0.w, r4, s2, r3.zwzw, r3
add r0.xyz, r1.zxyw, -r1
cmp r2.x, r2, c2, c2.y
mad r0.xyz, r2.x, r0, r1
add r2.x, r0, -r1.y
add r0.xyz, r0, -r1.yxzw
cmp r2.x, r2, c2, c2.y
mad r0.xyz, r2.x, r0, r1.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c2.z
mul r2.xy, r0, c1.x
mul r0.z, r1.w, c1.x
mul r0.z, r0, c4
dsx r0.y, r0.z
dsy r2.w, r0.z
mov r0.x, r3.z
texldd r1, r2, s3, r0, r2.zwzw
mul_pp r0.z, r1.w, r0.w
mul_pp r3.x, r0.z, r4.z
texldd r2, r2, s4, r0, r2.zwzw
mul_pp r0.w, r0, r2
mov_pp r0.xyz, r2
mov_pp r1.w, r3.x
add_pp r1, r1, -r0
mad_pp oC0, r3.x, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 93 math, 2 textures
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
SetTexture 0 [_BumpMap] 2D 2
SetTexture 1 [_CityOverlayTex] 2D 3
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 3 [_CityLightOverlayDetailTex] 2D 5
SetTexture 4 [_LightTexture0] 2D 1
SetTexture 5 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 368
Float 356 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
"ps_4_0
eefiecedgciljinbeilfcnkejnhikjbkhgloekhbabaaaaaalmaoaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
adadaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapalaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcgmanaaaaeaaaaaaafladaaaafjaaaaaeegiocaaa
aaaaaaaabhaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaaafaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaa
gcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaaddcbabaaaafaaaaaagcbaaaadlcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacahaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaabgbgbaaaacaaaaaadeaaaaaj
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaacgakbaaaaaaaaaaacgakbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaabkaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaa
bkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaaakaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
ecaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjkcdodiaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaabkiacaaaaaaaaaaabgaaaaaaalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaacaaaaaafgajbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaa
ogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdo
amaaaaafmcaabaaaacaaaaaafgajbaaaaaaaaaaaapaaaaahicaabaaaabaaaaaa
ogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaaeghobaaaabaaaaaaaagabaaa
adaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaaejaaaaanpcaabaaaacaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaabnaaaaajccaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaajpcaabaaaafaaaaaafgaibaiambaaaaaaaaaaaaaakgabbaia
ibaaaaaaaaaaaaaadcaaaaakhcaabaaaagaaaaaafgafbaaaabaaaaaaegacbaaa
afaaaaaafgaebaiaibaaaaaaaaaaaaaadiaaaaahecaabaaaaeaaaaaabkaabaaa
abaaaaaadkaabaaaafaaaaaadgaaaaaficaabaaaagaaaaaaabeaaaaaaaaaaaaa
dgaaaaagdcaabaaaaeaaaaaaegaabaiambaaaaaaaaaaaaaaaaaaaaahhcaabaaa
aeaaaaaaegacbaaaaeaaaaaajgahbaaaagaaaaaabnaaaaaiccaabaaaabaaaaaa
akaabaaaagaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaaaaaaaaafgafbaaa
abaaaaaaegacbaaaaeaaaaaaegacbaiaibaaaaaaaaaaaaaadiaaaaakocaabaaa
aaaaaaaakganbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpidpjkcdp
aoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaaagaabaaaaaaaaaaadiaaaaai
dcaabaaaaaaaaaaaegaabaaaaaaaaaaafgifcaaaaaaaaaaabgaaaaaaalaaaaaf
ecaabaaaabaaaaaadkaabaaaaaaaaaaaamaaaaafecaabaaaadaaaaaadkaabaaa
aaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaaigaabaaaabaaaaaaigaabaaaadaaaaaaejaaaaanpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaafaaaaaaigaabaaa
abaaaaaaigaabaaaadaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaeaaaaaa
dkaabaaaafaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaeaaaaaadkaabaaa
aaaaaaaaapaaaaahccaabaaaabaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaacaaaaaabkaabaaaabaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahocaabaaaabaaaaaafgafbaaaabaaaaaaagajbaaaacaaaaaabaaaaaah
bcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaahhcaabaaaacaaaaaaagaabaaaacaaaaaa
egbcbaaaaeaaaaaabaaaaaahccaabaaaabaaaaaajgahbaaaabaaaaaaegacbaaa
acaaaaaaaoaaaaahmcaabaaaabaaaaaaagbebaaaagaaaaaapgbpbaaaagaaaaaa
efaaaaajpcaabaaaacaaaaaaogakbaaaabaaaaaaeghobaaaafaaaaaaaagabaaa
aaaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaafaaaaaaeghobaaaaeaaaaaa
aagabaaaabaaaaaadiaaaaahecaabaaaabaaaaaaakaabaaaacaaaaaadkaabaaa
adaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiaeabbaaaaaj
ecaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaihcaabaaaacaaaaaa
kgakbaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabaaaaaahecaabaaaabaaaaaa
egbcbaaaadaaaaaaegacbaaaacaaaaaaaaaaaaahicaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaakoehibdpdicaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaacambebcaaaaficaabaaaabaaaaaadkaabaaaabaaaaaaaaaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaialpdcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdicaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaaiccaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
afaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaipcaabaaaabaaaaaa
egaobaiaebaaaaaaaaaaaaaaegaobaaaafaaaaaadcaaaaajpccabaaaaaaaaaaa
pgapbaaaafaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 119 math, 14 textures
Keywords { "POINT" "SHADOWS_CUBE" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Float 3 [_CityOverlayDetailScale]
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
SetTexture 5 [_ShadowMapTexture] CUBE 5
SetTexture 6 [_LightTexture0] 2D 6
"ps_3_0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_cube s5
dcl_2d s6
def c4, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c5, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c6, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c7, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c8, -0.33299461, 0.99999559, 1.57079601, 0.97000003
def c9, 1.00000000, 0.00392157, 0.00001538, 0.00000006
def c10, 2.00000000, -1.00000000, 10.00000000, 1.00976563
def c11, 4.00000000, 0, 0, 0
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
abs r0.w, r0.z
max r1.w, r1.x, r0
rcp r2.x, r1.w
min r1.w, r1.x, r0
mul r1.w, r1, r2.x
mul r2.x, r1.w, r1.w
mad r2.y, r2.x, c7.x, c7
mad r2.y, r2, r2.x, c7.z
mad r2.y, r2, r2.x, c7.w
mad r2.y, r2, r2.x, c8.x
mad r2.x, r2.y, r2, c8.y
mul r2.x, r2, r1.w
add r1.w, r1.x, -r0
abs r0.w, r0.y
add r2.y, -r2.x, c8.z
cmp r2.y, -r1.w, r2.x, r2
add r2.x, -r0.w, c4
mad r1.w, r0, c5.x, c5.y
mad r1.w, r1, r0, c5.z
rsq r2.x, r2.x
dsx r3.zw, r0.xyxz
cmp r0.y, r0, c4, c4.x
rcp r2.x, r2.x
mad r0.w, r1, r0, c5
mul r0.w, r0, r2.x
mul r1.w, r0.y, r0
mad r0.w, -r1, c6.x, r0
mad r1.w, r0.y, c6.y, r0
mul r0.y, r1.w, c6.w
add r2.x, -r2.y, c6.y
cmp r2.x, r0.z, r2.y, r2
cmp r0.w, r0.x, r2.x, -r2.x
mad r3.x, r0.w, c4.w, c4.z
mov r3.y, r0
dsx r2.w, r0.y
dsy r2.y, r0
dsy r0.xy, r0.xzzw
mul r0.zw, r3, r3
mul r0.xy, r0, r0
add r0.y, r0.x, r0
add r0.z, r0, r0.w
rsq r0.x, r0.z
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
dp4 r3.z, c0, c0
rsq r3.z, r3.z
mul r4.xyz, r3.z, c0
mul r2.z, r0.x, c4.w
mul r2.x, r0.y, c4.w
texldd r0.yw, r3, s1, r2.zwzw, r2
mad_pp r0.xy, r0.wyzw, c10.x, c10.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c4.x
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r0.xyz, r0.w, r0
dp3_pp r0.w, v4, v4
dp3_pp r3.z, v3, r4
rsq_pp r0.w, r0.w
mul_pp r4.xyz, r0.w, v4
dp3_pp r3.w, r0, r4
add_pp r0.w, r3.z, c10
frc_pp r0.y, r0.w
dp3 r0.x, v6, v6
rsq r4.y, r0.x
add_pp_sat r4.x, r0.w, -r0.y
texld r0, v6, s5
dp4 r0.y, r0, c9
rcp r4.y, r4.y
mul r0.x, r4.y, c1.w
mad r0.y, -r0.x, c8.w, r0
mov r0.z, c2.x
dp3 r0.x, v5, v5
cmp r0.y, r0, c4.x, r0.z
texld r0.x, r0.x, s6
mul r0.x, r0, r0.y
mul_pp r0.w, r0.x, r3
mul_pp_sat r0.x, -r3.z, c10.z
add_pp r0.y, r4.x, c10
mad_pp r3.w, r0.x, r0.y, c4.x
add r3.z, r1, -r1.x
mul_pp r0.w, r0, r3
add r0.xyz, r1.zxyw, -r1
cmp r3.z, r3, c4.x, c4.y
mad r0.xyz, r3.z, r0, r1
add r3.z, r0.x, -r1.y
add r0.xyz, r0, -r1.yxzw
cmp r3.z, r3, c4.x, c4.y
mad r0.xyz, r3.z, r0, r1.yxzw
mul_pp_sat r0.w, r0, c11.x
add_pp r3.z, -r0.w, c4.x
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul r0.z, r1.w, c3.x
texldd r0.w, r3, s2, r2.zwzw, r2
mul_pp r0.xy, r0, c4.z
mul r3.xy, r0, c3.x
mul r0.z, r0, c6
dsx r0.y, r0.z
mov r0.x, r2.z
dsy r2.y, r0.z
texldd r1, r3, s3, r0, r2
mul_pp r0.z, r1.w, r0.w
mul_pp r3.z, r0, r3
texldd r2, r3, s4, r0, r2
mul_pp r0.w, r0, r2
mov_pp r0.xyz, r2
mov_pp r1.w, r3.z
add_pp r1, r1, -r0
mad_pp oC0, r3.z, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 99 math, 2 textures
Keywords { "POINT" "SHADOWS_CUBE" }
SetTexture 0 [_BumpMap] 2D 2
SetTexture 1 [_CityOverlayTex] 2D 3
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 3 [_CityLightOverlayDetailTex] 2D 5
SetTexture 4 [_LightTexture0] 2D 1
SetTexture 5 [_ShadowMapTexture] CUBE 0
ConstBuffer "$Globals" 304
Float 292 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityShadows" 416
Vector 384 [_LightShadowData]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
BindCB  "UnityShadows" 2
"ps_4_0
eefiecedabjdhdeialnelcdlgboeebnpljlpidchabaaaaaakeapaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcfeaoaaaaeaaaaaaajfadaaaafjaaaaaeegiocaaa
aaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fidaaaaeaahabaaaafaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaabgbgbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaa
abaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaacgakbaaaaaaaaaaacgakbaia
ebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaah
ecaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaa
abaaaaaaakaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjkcdodiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaabkiacaaa
aaaaaaaabcaaaaaaalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaaf
ccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaacaaaaaafgajbaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaa
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaafgajbaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaa
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
dkaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaeaaaaaaegaabaaa
acaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaaegaabaaaabaaaaaaegaabaaa
adaaaaaaejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaacaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadcaaaaapdcaabaaa
acaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaabnaaaaajccaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaaafaaaaaa
fgaibaiambaaaaaaaaaaaaaakgabbaiaibaaaaaaaaaaaaaadcaaaaakhcaabaaa
agaaaaaafgafbaaaabaaaaaaegacbaaaafaaaaaafgaebaiaibaaaaaaaaaaaaaa
diaaaaahecaabaaaaeaaaaaabkaabaaaabaaaaaadkaabaaaafaaaaaadgaaaaaf
icaabaaaagaaaaaaabeaaaaaaaaaaaaadgaaaaagdcaabaaaaeaaaaaaegaabaia
mbaaaaaaaaaaaaaaaaaaaaahhcaabaaaaeaaaaaaegacbaaaaeaaaaaajgahbaaa
agaaaaaabnaaaaaiccaabaaaabaaaaaaakaabaaaagaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaaaaaaaaafgafbaaaabaaaaaaegacbaaaaeaaaaaaegacbaia
ibaaaaaaaaaaaaaadiaaaaakocaabaaaaaaaaaaakganbaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpidpjkcdpaoaaaaahdcaabaaaaaaaaaaajgafbaaa
aaaaaaaaagaabaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaa
fgifcaaaaaaaaaaabcaaaaaaalaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaa
amaaaaafecaabaaaadaaaaaadkaabaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaa
egaabaaaaaaaaaaaeghobaaaacaaaaaaaagabaaaaeaaaaaaigaabaaaabaaaaaa
igaabaaaadaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaa
adaaaaaaaagabaaaafaaaaaaigaabaaaabaaaaaaigaabaaaadaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaeaaaaaadkaabaaaaaaaaaaaapaaaaahccaabaaaabaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaabkaabaaaabaaaaaa
baaaaaahccaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahocaabaaaabaaaaaafgafbaaa
abaaaaaaagajbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaagaabaaaacaaaaaaegbcbaaaaeaaaaaabaaaaaahccaabaaa
abaaaaaajgahbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaagaaaaaaelaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaabaaaaaa
abaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaomfbhidp
efaaaaajpcaabaaaacaaaaaaegbcbaaaagaaaaaaeghobaaaafaaaaaaaagabaaa
aaaaaaaabbaaaaakicaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadp
ibiaiadlicabibdhafidibdddbaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadhaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakiacaaa
acaaaaaabiaaaaaaabeaaaaaaaaaiadpbaaaaaahicaabaaaabaaaaaaegbcbaaa
afaaaaaaegbcbaaaafaaaaaaefaaaaajpcaabaaaacaaaaaapgapbaaaabaaaaaa
eghobaaaaeaaaaaaaagabaaaabaaaaaadiaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaiaeadiaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaabbaaaaajecaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaa
abaaaaaaaaaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaai
hcaabaaaacaaaaaakgakbaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabaaaaaah
ecaabaaaabaaaaaaegbcbaaaadaaaaaaegacbaaaacaaaaaaaaaaaaahicaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaakoehibdpdicaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaacambebcaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaaaaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaialp
dcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdicaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
aaaaaaaiccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaafaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaai
pcaabaaaabaaaaaaegaobaiaebaaaaaaaaaaaaaaegaobaaaafaaaaaadcaaaaaj
pccabaaaaaaaaaaapgapbaaaafaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 324 math, 6 textures, 13 branches
Keywords { "POINT" "SHADOWS_CUBE" }
SetTexture 0 [_ShadowMapTexture] CUBE 0
SetTexture 1 [_LightTexture0] 2D 1
SetTexture 2 [_BumpMap] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 76
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
Vector 32 [_LightShadowData]
VectorHalf 48 [_LightColor0] 4
Float 56 [_SpecularPower]
VectorHalf 64 [_SpecularColor] 4
Float 72 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4 _LightShadowData;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _BumpMap [[texture(2)]], sampler _mtlsmp__BumpMap [[sampler(2)]]
  ,   texture2d<half> _CityOverlayTex [[texture(3)]], sampler _mtlsmp__CityOverlayTex [[sampler(3)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(4)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half3 normT_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half3 tmpvar_15;
  half4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * (half)2.0) - (half)1.0);
  normT_4 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * rsqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_21;
  tmpvar_21 = dfdx(tmpvar_17.xz);
  float2 tmpvar_22;
  tmpvar_22 = dfdy(tmpvar_17.xz);
  float4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dfdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dfdy(uv_18.y);
  half4 tmpvar_24;
  tmpvar_24 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_18), gradient2d((float2)(tmpvar_23.xy), (float2)(tmpvar_23.zw)));
  half4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  half4 tmpvar_26;
  half3 detailCoords_27;
  half nylerp_28;
  half zxlerp_29;
  float3 tmpvar_30;
  tmpvar_30 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_31;
  float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * rsqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_35;
  tmpvar_35 = dfdx(tmpvar_30.xz);
  float2 tmpvar_36;
  tmpvar_36 = dfdy(tmpvar_30.xz);
  float4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dfdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dfdy(tmpvar_34.y);
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, (float)zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = half(tmpvar_40);
  float3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, (float3)half3(zxlerp_29));
  detailCoords_27 = half3(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, (float3)detailCoords_27, (float3)half3(nylerp_28));
  detailCoords_27 = half3(tmpvar_42);
  half tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  float2 coord_44;
  coord_44 = ((float2)(((half)0.5 * detailCoords_27.zy) / tmpvar_43) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_45;
  tmpvar_45 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_44), gradient2d((float2)(tmpvar_37.xy), (float2)(tmpvar_37.zw)));
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  half4 tmpvar_46;
  half3 detailCoords_47;
  half nylerp_48;
  half zxlerp_49;
  float3 tmpvar_50;
  tmpvar_50 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_51;
  float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * rsqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_55;
  tmpvar_55 = dfdx(tmpvar_50.xz);
  float2 tmpvar_56;
  tmpvar_56 = dfdy(tmpvar_50.xz);
  float4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dfdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dfdy(tmpvar_54.y);
  float3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = half(tmpvar_59);
  float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, (float)zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = half(tmpvar_60);
  float3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, (float3)half3(zxlerp_49));
  detailCoords_47 = half3(tmpvar_61);
  float3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, (float3)detailCoords_47, (float3)half3(nylerp_48));
  detailCoords_47 = half3(tmpvar_62);
  half tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  float2 coord_64;
  coord_64 = ((float2)(((half)0.5 * detailCoords_47.zy) / tmpvar_63) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_65;
  tmpvar_65 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_64), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  float tmpvar_66;
  tmpvar_66 = dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_67;
  tmpvar_67 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_66)));
  float tmpvar_68;
  tmpvar_68 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD7, _mtl_i.xlv_TEXCOORD7)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float4 packDist_69;
  half4 tmpvar_70;
  tmpvar_70 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(_mtl_i.xlv_TEXCOORD7));
  packDist_69 = float4(tmpvar_70);
  float tmpvar_71;
  tmpvar_71 = dot (packDist_69, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float tmpvar_72;
  if ((tmpvar_71 < tmpvar_68)) {
    tmpvar_72 = _mtl_u._LightShadowData.x;
  } else {
    tmpvar_72 = 1.0;
  };
  half3 lightDir_73;
  lightDir_73 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_74;
  viewDir_74 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_75;
  atten_75 = half(((float)tmpvar_67.w * tmpvar_72));
  half4 c_76;
  half3 tmpvar_77;
  tmpvar_77 = normalize(lightDir_73);
  lightDir_73 = tmpvar_77;
  half3 tmpvar_78;
  tmpvar_78 = normalize(viewDir_74);
  viewDir_74 = tmpvar_78;
  half3 tmpvar_79;
  tmpvar_79 = normalize(normT_4);
  half tmpvar_80;
  tmpvar_80 = dot (tmpvar_79, tmpvar_77);
  float tmpvar_81;
  half tmpvar_82;
  tmpvar_82 = clamp (dot (normalize(
    (tmpvar_77 + tmpvar_78)
  ), tmpvar_79), (half)0.0, (half)1.0);
  tmpvar_81 = float(tmpvar_82);
  float3 tmpvar_83;
  tmpvar_83 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_80) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_81, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_75 * (half)4.0));
  c_76.xyz = half3(tmpvar_83);
  c_76.w = (tmpvar_80 * (atten_75 * (half)4.0));
  float3 tmpvar_84;
  tmpvar_84 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_85;
  lightDir_85 = half3(tmpvar_84);
  half3 normal_86;
  normal_86 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_87;
  tmpvar_87 = dot (normal_86, lightDir_85);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_76 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_87)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_87)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_88;
  tmpvar_88 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_88;
  tmpvar_1 = tmpvar_88;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 120 math, 15 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Float 3 [_CityOverlayDetailScale]
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
SetTexture 5 [_ShadowMapTexture] CUBE 5
SetTexture 6 [_LightTextureB0] 2D 6
SetTexture 7 [_LightTexture0] CUBE 7
"ps_3_0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_cube s5
dcl_2d s6
dcl_cube s7
def c4, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c5, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c6, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c7, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c8, -0.33299461, 0.99999559, 1.57079601, 0.97000003
def c9, 1.00000000, 0.00392157, 0.00001538, 0.00000006
def c10, 2.00000000, -1.00000000, 10.00000000, 1.00976563
def c11, 4.00000000, 0, 0, 0
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
abs r0.w, r0.z
max r1.w, r1.x, r0
rcp r2.x, r1.w
min r1.w, r1.x, r0
mul r1.w, r1, r2.x
mul r2.x, r1.w, r1.w
mad r2.y, r2.x, c7.x, c7
mad r2.y, r2, r2.x, c7.z
mad r2.y, r2, r2.x, c7.w
mad r2.y, r2, r2.x, c8.x
mad r2.x, r2.y, r2, c8.y
mul r2.x, r2, r1.w
add r1.w, r1.x, -r0
abs r0.w, r0.y
add r2.y, -r2.x, c8.z
cmp r2.y, -r1.w, r2.x, r2
add r2.x, -r0.w, c4
mad r1.w, r0, c5.x, c5.y
mad r1.w, r1, r0, c5.z
rsq r2.x, r2.x
dsx r3.zw, r0.xyxz
cmp r0.y, r0, c4, c4.x
rcp r2.x, r2.x
mad r0.w, r1, r0, c5
mul r0.w, r0, r2.x
mul r1.w, r0.y, r0
mad r0.w, -r1, c6.x, r0
mad r1.w, r0.y, c6.y, r0
mul r0.y, r1.w, c6.w
add r2.x, -r2.y, c6.y
cmp r2.x, r0.z, r2.y, r2
cmp r0.w, r0.x, r2.x, -r2.x
mad r3.x, r0.w, c4.w, c4.z
mov r3.y, r0
dsx r2.w, r0.y
dsy r2.y, r0
dsy r0.xy, r0.xzzw
mul r0.zw, r3, r3
mul r0.xy, r0, r0
add r0.y, r0.x, r0
add r0.z, r0, r0.w
rsq r0.x, r0.z
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
dp4 r3.z, c0, c0
rsq r3.z, r3.z
mul r4.xyz, r3.z, c0
mul r2.z, r0.x, c4.w
mul r2.x, r0.y, c4.w
texldd r0.yw, r3, s1, r2.zwzw, r2
mad_pp r0.xy, r0.wyzw, c10.x, c10.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c4.x
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r0.xyz, r0.w, r0
dp3_pp r0.w, v4, v4
dp3_pp r3.z, v3, r4
rsq_pp r3.w, r0.w
mul_pp r4.xyz, r3.w, v4
add_pp r0.w, r3.z, c10
dp3_pp r4.x, r0, r4
frc_pp r3.w, r0
add_pp_sat r3.w, r0, -r3
texld r0, v6, s5
dp4 r0.y, r0, c9
dp3 r4.y, v6, v6
rsq r4.y, r4.y
rcp r0.x, r4.y
mul r0.x, r0, c1.w
mad r0.x, -r0, c8.w, r0.y
mov r0.z, c2.x
cmp r0.y, r0.x, c4.x, r0.z
dp3 r0.x, v5, v5
texld r0.w, v5, s7
texld r0.x, r0.x, s6
mul r0.x, r0, r0.w
mul r0.x, r0, r0.y
mul_pp r0.w, r0.x, r4.x
mul_pp_sat r0.x, -r3.z, c10.z
add_pp r0.y, r3.w, c10
mad_pp r3.w, r0.x, r0.y, c4.x
add r3.z, r1, -r1.x
mul_pp r0.w, r0, r3
add r0.xyz, r1.zxyw, -r1
cmp r3.z, r3, c4.x, c4.y
mad r0.xyz, r3.z, r0, r1
add r3.z, r0.x, -r1.y
add r0.xyz, r0, -r1.yxzw
cmp r3.z, r3, c4.x, c4.y
mad r0.xyz, r3.z, r0, r1.yxzw
mul_pp_sat r0.w, r0, c11.x
add_pp r3.z, -r0.w, c4.x
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul r0.z, r1.w, c3.x
texldd r0.w, r3, s2, r2.zwzw, r2
mul_pp r0.xy, r0, c4.z
mul r3.xy, r0, c3.x
mul r0.z, r0, c6
dsx r0.y, r0.z
mov r0.x, r2.z
dsy r2.y, r0.z
texldd r1, r3, s3, r0, r2
mul_pp r0.z, r1.w, r0.w
mul_pp r3.z, r0, r3
texldd r2, r3, s4, r0, r2
mul_pp r0.w, r0, r2
mov_pp r0.xyz, r2
mov_pp r1.w, r3.z
add_pp r1, r1, -r0
mad_pp oC0, r3.z, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 100 math, 3 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
SetTexture 0 [_BumpMap] 2D 3
SetTexture 1 [_CityOverlayTex] 2D 4
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 3 [_CityLightOverlayDetailTex] 2D 6
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_LightTexture0] CUBE 1
SetTexture 6 [_ShadowMapTexture] CUBE 0
ConstBuffer "$Globals" 304
Float 292 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityShadows" 416
Vector 384 [_LightShadowData]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
BindCB  "UnityShadows" 2
"ps_4_0
eefiecedchheacggdadjjcljcbpefnpcddebkanlabaaaaaaaabaaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefclaaoaaaaeaaaaaaakmadaaaafjaaaaaeegiocaaa
aaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafidaaaaeaahabaaaafaaaaaaffffaaaafidaaaae
aahabaaaagaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
bgbgbaaaacaaaaaadeaaaaajicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
ckaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaacgakbaaaaaaaaaaacgakbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaackaabaaaaaaaaaaabkaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaibcaabaaaabaaaaaa
akaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjkcdodiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaabkiacaaaaaaaaaaa
bcaaaaaaalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaacaaaaaafgajbaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaacaaaaaafgajbaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaogakbaaaacaaaaaaogakbaaaacaaaaaaelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaadkaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaeaaaaaaegaabaaaacaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
ejaaaaanpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
adaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadcaaaaapdcaabaaaacaaaaaa
hgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaa
aaaaialpaaaaialpaaaaaaaaaaaaaaaabnaaaaajccaabaaaabaaaaaackaabaia
ibaaaaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaaafaaaaaafgaibaia
mbaaaaaaaaaaaaaakgabbaiaibaaaaaaaaaaaaaadcaaaaakhcaabaaaagaaaaaa
fgafbaaaabaaaaaaegacbaaaafaaaaaafgaebaiaibaaaaaaaaaaaaaadiaaaaah
ecaabaaaaeaaaaaabkaabaaaabaaaaaadkaabaaaafaaaaaadgaaaaaficaabaaa
agaaaaaaabeaaaaaaaaaaaaadgaaaaagdcaabaaaaeaaaaaaegaabaiambaaaaaa
aaaaaaaaaaaaaaahhcaabaaaaeaaaaaaegacbaaaaeaaaaaajgahbaaaagaaaaaa
bnaaaaaiccaabaaaabaaaaaaakaabaaaagaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaaaaaaaaafgafbaaaabaaaaaaegacbaaaaeaaaaaaegacbaiaibaaaaaa
aaaaaaaadiaaaaakocaabaaaaaaaaaaakganbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpidpjkcdpaoaaaaahdcaabaaaaaaaaaaajgafbaaaaaaaaaaa
agaabaaaaaaaaaaadiaaaaaidcaabaaaaaaaaaaaegaabaaaaaaaaaaafgifcaaa
aaaaaaaabcaaaaaaalaaaaafecaabaaaabaaaaaadkaabaaaaaaaaaaaamaaaaaf
ecaabaaaadaaaaaadkaabaaaaaaaaaaaejaaaaanpcaabaaaafaaaaaaegaabaaa
aaaaaaaaeghobaaaacaaaaaaaagabaaaafaaaaaaigaabaaaabaaaaaaigaabaaa
adaaaaaaejaaaaanpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaa
aagabaaaagaaaaaaigaabaaaabaaaaaaigaabaaaadaaaaaadiaaaaahbcaabaaa
abaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaeaaaaaadkaabaaaaaaaaaaaapaaaaahccaabaaaabaaaaaaegaabaaa
acaaaaaaegaabaaaacaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaabkaabaaaabaaaaaabaaaaaah
ccaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaahocaabaaaabaaaaaafgafbaaaabaaaaaa
agajbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahhcaabaaa
acaaaaaaagaabaaaacaaaaaaegbcbaaaaeaaaaaabaaaaaahccaabaaaabaaaaaa
jgahbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaabaaaaaaegbcbaaa
agaaaaaaegbcbaaaagaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaabaaaaaaabaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaomfbhidpefaaaaaj
pcaabaaaacaaaaaaegbcbaaaagaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaa
bbaaaaakicaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadl
icabibdhafidibdddbaaaaahecaabaaaabaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadhaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakiacaaaacaaaaaa
biaaaaaaabeaaaaaaaaaiadpbaaaaaahicaabaaaabaaaaaaegbcbaaaafaaaaaa
egbcbaaaafaaaaaaefaaaaajpcaabaaaacaaaaaapgapbaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaadaaaaaaegbcbaaaafaaaaaa
eghobaaaafaaaaaaaagabaaaabaaaaaadiaaaaahicaabaaaabaaaaaaakaabaaa
acaaaaaadkaabaaaadaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
aaaaiaeadiaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
bbaaaaajecaabaaaabaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaihcaabaaa
acaaaaaakgakbaaaabaaaaaaegiccaaaabaaaaaaaaaaaaaabaaaaaahecaabaaa
abaaaaaaegbcbaaaadaaaaaaegacbaaaacaaaaaaaaaaaaahicaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaakoehibdpdicaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaaaaacambebcaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
aaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaialpdcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dicaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaaaaaaaai
ccaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaafaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaiaebaaaaaaaaaaaaaaegaobaaaafaaaaaadcaaaaajpccabaaa
aaaaaaaapgapbaaaafaaaaaaegaobaaaabaaaaaaegaobaaaaaaaaaaadoaaaaab
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 325 math, 7 textures, 13 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
SetTexture 0 [_ShadowMapTexture] CUBE 0
SetTexture 1 [_LightTexture0] CUBE 1
SetTexture 2 [_LightTextureB0] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityOverlayTex] 2D 4
SetTexture 5 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 6 [_CityLightOverlayDetailTex] 2D 6
ConstBuffer "$Globals" 76
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
Vector 32 [_LightShadowData]
VectorHalf 48 [_LightColor0] 4
Float 56 [_SpecularPower]
VectorHalf 64 [_SpecularColor] 4
Float 72 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4 _LightShadowData;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texturecube<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _LightTextureB0 [[texture(2)]], sampler _mtlsmp__LightTextureB0 [[sampler(2)]]
  ,   texture2d<half> _BumpMap [[texture(3)]], sampler _mtlsmp__BumpMap [[sampler(3)]]
  ,   texture2d<half> _CityOverlayTex [[texture(4)]], sampler _mtlsmp__CityOverlayTex [[sampler(4)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(5)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(6)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half3 normT_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half3 tmpvar_15;
  half4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * (half)2.0) - (half)1.0);
  normT_4 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * rsqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_21;
  tmpvar_21 = dfdx(tmpvar_17.xz);
  float2 tmpvar_22;
  tmpvar_22 = dfdy(tmpvar_17.xz);
  float4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dfdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dfdy(uv_18.y);
  half4 tmpvar_24;
  tmpvar_24 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_18), gradient2d((float2)(tmpvar_23.xy), (float2)(tmpvar_23.zw)));
  half4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  half4 tmpvar_26;
  half3 detailCoords_27;
  half nylerp_28;
  half zxlerp_29;
  float3 tmpvar_30;
  tmpvar_30 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_31;
  float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * rsqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_35;
  tmpvar_35 = dfdx(tmpvar_30.xz);
  float2 tmpvar_36;
  tmpvar_36 = dfdy(tmpvar_30.xz);
  float4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dfdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dfdy(tmpvar_34.y);
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, (float)zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = half(tmpvar_40);
  float3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, (float3)half3(zxlerp_29));
  detailCoords_27 = half3(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, (float3)detailCoords_27, (float3)half3(nylerp_28));
  detailCoords_27 = half3(tmpvar_42);
  half tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  float2 coord_44;
  coord_44 = ((float2)(((half)0.5 * detailCoords_27.zy) / tmpvar_43) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_45;
  tmpvar_45 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_44), gradient2d((float2)(tmpvar_37.xy), (float2)(tmpvar_37.zw)));
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  half4 tmpvar_46;
  half3 detailCoords_47;
  half nylerp_48;
  half zxlerp_49;
  float3 tmpvar_50;
  tmpvar_50 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_51;
  float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * rsqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_55;
  tmpvar_55 = dfdx(tmpvar_50.xz);
  float2 tmpvar_56;
  tmpvar_56 = dfdy(tmpvar_50.xz);
  float4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dfdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dfdy(tmpvar_54.y);
  float3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = half(tmpvar_59);
  float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, (float)zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = half(tmpvar_60);
  float3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, (float3)half3(zxlerp_49));
  detailCoords_47 = half3(tmpvar_61);
  float3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, (float3)detailCoords_47, (float3)half3(nylerp_48));
  detailCoords_47 = half3(tmpvar_62);
  half tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  float2 coord_64;
  coord_64 = ((float2)(((half)0.5 * detailCoords_47.zy) / tmpvar_63) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_65;
  tmpvar_65 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_64), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  float tmpvar_66;
  tmpvar_66 = dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_67;
  tmpvar_67 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_66)));
  half4 tmpvar_68;
  tmpvar_68 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD6));
  float tmpvar_69;
  tmpvar_69 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD7, _mtl_i.xlv_TEXCOORD7)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float4 packDist_70;
  half4 tmpvar_71;
  tmpvar_71 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(_mtl_i.xlv_TEXCOORD7));
  packDist_70 = float4(tmpvar_71);
  float tmpvar_72;
  tmpvar_72 = dot (packDist_70, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float tmpvar_73;
  if ((tmpvar_72 < tmpvar_69)) {
    tmpvar_73 = _mtl_u._LightShadowData.x;
  } else {
    tmpvar_73 = 1.0;
  };
  half3 lightDir_74;
  lightDir_74 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_75;
  viewDir_75 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_76;
  atten_76 = half(((float)(tmpvar_67.w * tmpvar_68.w) * tmpvar_73));
  half4 c_77;
  half3 tmpvar_78;
  tmpvar_78 = normalize(lightDir_74);
  lightDir_74 = tmpvar_78;
  half3 tmpvar_79;
  tmpvar_79 = normalize(viewDir_75);
  viewDir_75 = tmpvar_79;
  half3 tmpvar_80;
  tmpvar_80 = normalize(normT_4);
  half tmpvar_81;
  tmpvar_81 = dot (tmpvar_80, tmpvar_78);
  float tmpvar_82;
  half tmpvar_83;
  tmpvar_83 = clamp (dot (normalize(
    (tmpvar_78 + tmpvar_79)
  ), tmpvar_80), (half)0.0, (half)1.0);
  tmpvar_82 = float(tmpvar_83);
  float3 tmpvar_84;
  tmpvar_84 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_81) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_82, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_76 * (half)4.0));
  c_77.xyz = half3(tmpvar_84);
  c_77.w = (tmpvar_81 * (atten_76 * (half)4.0));
  float3 tmpvar_85;
  tmpvar_85 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_86;
  lightDir_86 = half3(tmpvar_85);
  half3 normal_87;
  normal_87 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_88;
  tmpvar_88 = dot (normal_87, lightDir_86);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_77 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_88)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_88)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_89;
  tmpvar_89 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_89;
  tmpvar_1 = tmpvar_89;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 128 math, 18 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Float 6 [_CityOverlayDetailScale]
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
SetTexture 5 [_LightTexture0] 2D 5
SetTexture 6 [_LightTextureB0] 2D 6
SetTexture 7 [_ShadowMapTexture] 2D 7
"ps_3_0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c7, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c8, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c9, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c10, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c11, -0.33299461, 0.99999559, 1.57079601, 0.25000000
def c12, 2.00000000, -1.00000000, 10.00000000, 1.00976563
def c13, 4.00000000, 0, 0, 0
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5
dcl_texcoord7 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
abs r0.w, r0.z
max r1.w, r1.x, r0
rcp r2.x, r1.w
min r1.w, r1.x, r0
mul r1.w, r1, r2.x
mul r2.x, r1.w, r1.w
mad r2.y, r2.x, c10.x, c10
mad r2.y, r2, r2.x, c10.z
mad r2.y, r2, r2.x, c10.w
mad r2.y, r2, r2.x, c11.x
mad r2.x, r2.y, r2, c11.y
mul r2.x, r2, r1.w
add r1.w, r1.x, -r0
abs r0.w, r0.y
add r2.y, -r2.x, c11.z
cmp r2.y, -r1.w, r2.x, r2
add r2.x, -r0.w, c7
mad r1.w, r0, c8.x, c8.y
mad r1.w, r1, r0, c8.z
rsq r2.x, r2.x
dsx r3.zw, r0.xyxz
cmp r0.y, r0, c7, c7.x
rcp r2.x, r2.x
mad r0.w, r1, r0, c8
mul r0.w, r0, r2.x
mul r1.w, r0.y, r0
mad r0.w, -r1, c9.x, r0
mad r1.w, r0.y, c9.y, r0
mul r0.y, r1.w, c9.w
add r2.x, -r2.y, c9.y
cmp r2.x, r0.z, r2.y, r2
cmp r0.w, r0.x, r2.x, -r2.x
mad r3.x, r0.w, c7.w, c7.z
mov r3.y, r0
dsx r2.w, r0.y
dsy r2.y, r0
dsy r0.xy, r0.xzzw
mul r0.zw, r3, r3
rcp r3.w, v6.w
mul r0.xy, r0, r0
add r0.y, r0.x, r0
add r0.z, r0, r0.w
rsq r0.x, r0.z
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c7.w
mul r2.x, r0.y, c7.w
texldd r0.yw, r3, s1, r2.zwzw, r2
mad_pp r0.xy, r0.wyzw, c12.x, c12.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c7.x
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r0.xyz, r0.w, r0
dp3_pp r3.z, v4, v4
rsq_pp r0.w, r3.z
mul_pp r4.xyz, r0.w, v4
dp3_pp r3.z, r0, r4
mad r5.xy, v6, r3.w, c5
texld r0.x, r5, s7
mad r4.xy, v6, r3.w, c4
mov r0.w, r0.x
texld r0.x, r4, s7
mad r4.xy, v6, r3.w, c3
mov r0.z, r0.x
texld r0.x, r4, s7
mad r4.xy, v6, r3.w, c2
mov r0.y, r0.x
texld r0.x, r4, s7
mad r0, -v6.z, r3.w, r0
mov r3.w, c1.x
cmp r0, r0, c7.x, r3.w
dp4_pp r0.y, r0, c11.w
dp4 r4.x, c0, c0
rsq r4.x, r4.x
mul r4.xyz, r4.x, c0
dp3_pp r3.w, v3, r4
add_pp r0.z, r3.w, c12.w
rcp r0.x, v5.w
mad r4.xy, v5, r0.x, c7.z
texld r0.w, r4, s5
dp3 r0.x, v5, v5
cmp r4.x, -v5.z, c7.y, c7
frc_pp r4.z, r0
mul_pp r0.w, r4.x, r0
texld r0.x, r0.x, s6
mul_pp r0.x, r0.w, r0
mul_pp r0.x, r0, r0.y
mul_pp r0.w, r0.x, r3.z
add_pp_sat r0.y, r0.z, -r4.z
add r3.z, r1, -r1.x
mul_pp_sat r0.x, -r3.w, c12.z
add_pp r0.y, r0, c12
mad_pp r3.w, r0.x, r0.y, c7.x
mul_pp r0.w, r0, r3
add r0.xyz, r1.zxyw, -r1
cmp r3.z, r3, c7.x, c7.y
mad r0.xyz, r3.z, r0, r1
add r3.z, r0.x, -r1.y
add r0.xyz, r0, -r1.yxzw
cmp r3.z, r3, c7.x, c7.y
mad r0.xyz, r3.z, r0, r1.yxzw
mul_pp_sat r0.w, r0, c13.x
add_pp r3.z, -r0.w, c7.x
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul r0.z, r1.w, c6.x
texldd r0.w, r3, s2, r2.zwzw, r2
mul_pp r0.xy, r0, c7.z
mul r3.xy, r0, c6.x
mul r0.z, r0, c9
dsx r0.y, r0.z
mov r0.x, r2.z
dsy r2.y, r0.z
texldd r1, r3, s3, r0, r2
mul_pp r0.z, r1.w, r0.w
mul_pp r3.z, r0, r3
texldd r2, r3, s4, r0, r2
mul_pp r0.w, r0, r2
mov_pp r0.xyz, r2
mov_pp r1.w, r3.z
add_pp r1, r1, -r0
mad_pp oC0, r3.z, r1, r0
"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NONATIVE" }
"!!GLES"
}
SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 129 math, 18 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Float 6 [_CityOverlayDetailScale]
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
SetTexture 5 [_LightTexture0] 2D 5
SetTexture 6 [_LightTextureB0] 2D 6
SetTexture 7 [_ShadowMapTexture] 2D 7
"ps_3_0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c7, 0.50000000, 0.15915494, 0.00000000, 1.00000000
def c8, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c9, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c10, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c11, -0.33299461, 0.99999559, 1.57079601, 0.25000000
def c12, 2.00000000, -1.00000000, 10.00000000, 1.00976563
def c13, 4.00000000, 0, 0, 0
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5
dcl_texcoord7 v6
rcp r3.w, v6.w
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r2.xyz, r1
abs r0.x, r1.z
max r0.y, r2.x, r0.x
rcp r0.z, r0.y
min r0.y, r2.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
mad r0.w, r0.z, c10.x, c10.y
mad r0.w, r0, r0.z, c10.z
mad r0.w, r0, r0.z, c10
mad r0.w, r0, r0.z, c11.x
mad r0.z, r0.w, r0, c11.y
mul r0.z, r0, r0.y
add r0.y, r2.x, -r0.x
add r0.w, -r0.z, c11.z
abs r0.x, r1.y
cmp r0.w, -r0.y, r0.z, r0
add r0.z, -r0.x, c7.w
mad r0.y, r0.x, c8.x, c8
mad r0.y, r0, r0.x, c8.z
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c8.w
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, r1.y, c7.z, c7.w
mul r0.z, r0.x, r0.y
add r1.y, -r0.w, c9
mad r0.y, -r0.z, c9.x, r0
cmp r0.z, r1, r0.w, r1.y
mad r1.y, r0.x, c9, r0
mul r0.x, r1.y, c9.w
cmp r0.y, r1.x, r0.z, -r0.z
dsy r0.zw, r1.xyxz
mul r0.zw, r0, r0
dsy r1.w, r0.x
mad r4.z, r0.y, c7.y, c7.x
mov r4.w, r0.x
dsx r4.y, r0.x
dsx r0.xy, r1.xzzw
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
dp3_pp r1.x, v4, v4
rsq_pp r1.x, r1.x
mul r1.z, r0.y, c7.y
mul r4.x, r0, c7.y
texldd r0.yw, r4.zwzw, s1, r4, r1.zwzw
mad_pp r0.xy, r0.wyzw, c12.x, c12.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c7.w
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r0.xyz, r0.w, r0
mul_pp r3.xyz, r1.x, v4
dp3_pp r2.w, r0, r3
mad r0.xyz, v6, r3.w, c5
mad r5.xyz, v6, r3.w, c3
texld r1.x, r5, s7
dp4 r0.w, c0, c0
rsq r0.w, r0.w
mul r3.xyz, r0.w, c0
texld r0.x, r0, s7
mov_pp r0.w, r0.x
mad r0.xyz, v6, r3.w, c4
texld r0.x, r0, s7
mov_pp r0.z, r0.x
mov_pp r0.y, r1.x
mov r0.x, c1
add r1.x, c7.w, -r0
mad r5.xyz, v6, r3.w, c2
texld r0.x, r5, s7
mad r0, r0, r1.x, c1.x
dp3_pp r1.x, v3, r3
dp4_pp r3.z, r0, c11.w
add_pp r0.y, r1.x, c12.w
frc_pp r0.z, r0.y
add_pp_sat r0.y, r0, -r0.z
rcp r0.x, v5.w
mad r3.xy, v5, r0.x, c7.x
texld r0.w, r3, s5
cmp r3.x, -v5.z, c7.z, c7.w
dp3 r0.x, v5, v5
mul_pp r0.w, r3.x, r0
texld r0.x, r0.x, s6
mul_pp r0.x, r0.w, r0
add r0.w, r2.z, -r2.x
mul_pp r0.x, r0, r3.z
mul_pp r2.w, r0.x, r2
mul_pp_sat r0.x, -r1, c12.z
add_pp r0.y, r0, c12
mad_pp r1.x, r0, r0.y, c7.w
add r0.xyz, r2.zxyw, -r2
cmp r0.w, r0, c7, c7.z
mad r0.xyz, r0.w, r0, r2
add r0.w, r0.x, -r2.y
add r0.xyz, r0, -r2.yxzw
cmp r0.w, r0, c7, c7.z
mad r0.xyz, r0.w, r0, r2.yxzw
mul_pp r1.x, r2.w, r1
mul_pp_sat r0.w, r1.x, c13.x
add_pp r3.x, -r0.w, c7.w
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul r0.z, r1.y, c6.x
mul r0.z, r0, c9
mul_pp r0.xy, r0, c7.x
texldd r0.w, r4.zwzw, s2, r4, r1.zwzw
mul r0.xy, r0, c6.x
dsx r2.y, r0.z
dsy r2.w, r0.z
mov r2.z, r1
mov r2.x, r4
texldd r1, r0, s3, r2, r2.zwzw
mul_pp r0.z, r1.w, r0.w
mul_pp r3.x, r0.z, r3
texldd r2, r0, s4, r2, r2.zwzw
mul_pp r0.w, r0, r2
mov_pp r0.xyz, r2
mov_pp r1.w, r3.x
add_pp r1, r1, -r0
mad_pp oC0, r3.x, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 107 math, 2 textures
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
SetTexture 0 [_BumpMap] 2D 3
SetTexture 1 [_CityOverlayTex] 2D 4
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 3 [_CityLightOverlayDetailTex] 2D 6
SetTexture 4 [_LightTexture0] 2D 1
SetTexture 5 [_LightTextureB0] 2D 2
SetTexture 6 [_ShadowMapTexture] 2D 0
ConstBuffer "$Globals" 368
Vector 16 [_ShadowOffsets0]
Vector 32 [_ShadowOffsets1]
Vector 48 [_ShadowOffsets2]
Vector 64 [_ShadowOffsets3]
Float 356 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
ConstBuffer "UnityShadows" 416
Vector 384 [_LightShadowData]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
BindCB  "UnityShadows" 2
"ps_4_0
eefiecedaegnjklmdglmjmlihddjbcakkbibkdegabaaaaaagibbaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
apapaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcbibaaaaaeaaaaaaaagaeaaaafjaaaaaeegiocaaa
aaaaaaaabhaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaaffffaaaafibiaaae
aahabaaaagaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaaafaaaaaagcbaaaad
pcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaabbaaaaaj
bcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
agaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaaaaaaaaaaaaaaaahccaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakoehibdpdicaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaacambebcaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaaaaaaaaah
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaialpdcaaaaajbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaj
ccaabaaaaaaaaaaaakiacaiaebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadp
aoaaaaahhcaabaaaabaaaaaaegbcbaaaagaaaaaapgbpbaaaagaaaaaaaaaaaaai
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaehaaaaal
bcaabaaaacaaaaaaegaabaaaacaaaaaaaghabaaaagaaaaaaaagabaaaaaaaaaaa
ckaabaaaacaaaaaaaaaaaaaihcaabaaaadaaaaaaegacbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaaehaaaaalccaabaaaacaaaaaaegaabaaaadaaaaaaaghabaaa
agaaaaaaaagabaaaaaaaaaaackaabaaaadaaaaaaaaaaaaaihcaabaaaadaaaaaa
egacbaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaaaaaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaaaaaaaaaaeaaaaaaehaaaaalicaabaaaacaaaaaa
egaabaaaabaaaaaaaghabaaaagaaaaaaaagabaaaaaaaaaaackaabaaaabaaaaaa
ehaaaaalecaabaaaacaaaaaaegaabaaaadaaaaaaaghabaaaagaaaaaaaagabaaa
aaaaaaaackaabaaaadaaaaaadcaaaaakpcaabaaaabaaaaaaegaobaaaacaaaaaa
fgafbaaaaaaaaaaaagiacaaaacaaaaaabiaaaaaabbaaaaakccaabaaaaaaaaaaa
egaobaaaabaaaaaaaceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadoaoaaaaah
mcaabaaaaaaaaaaaagbebaaaafaaaaaapgbpbaaaafaaaaaaaaaaaaakmcaabaaa
aaaaaaaakgaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
efaaaaajpcaabaaaabaaaaaaogakbaaaaaaaaaaaeghobaaaaeaaaaaaaagabaaa
abaaaaaadbaaaaahecaabaaaaaaaaaaaabeaaaaaaaaaaaaackbabaaaafaaaaaa
abaaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
ecaabaaaaaaaaaaadkaabaaaabaaaaaackaabaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegbcbaaaafaaaaaaegbcbaaaafaaaaaaefaaaaajpcaabaaaabaaaaaa
pgapbaaaaaaaaaaaeghobaaaafaaaaaaaagabaaaacaaaaaadiaaaaahecaabaaa
aaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackaabaaaaaaaaaaabaaaaaahecaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaakgakbaaaaaaaaaaaegbcbaaaaeaaaaaabaaaaaah
ecaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaakgakbaaaaaaaaaaa
bgbgbaaaacaaaaaadeaaaaajecaabaaaaaaaaaaackaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaaoaaaaakecaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpckaabaaaaaaaaaaaddaaaaajicaabaaaaaaaaaaa
ckaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaadiaaaaahecaabaaa
aaaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
ckaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajicaabaaaabaaaaaadkaabaaa
aaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajicaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajicaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaaj
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaacaaaaaackaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadbaaaaaidcaabaaaadaaaaaacgakbaaaacaaaaaacgakbaiaebaaaaaa
acaaaaaaabaaaaahicaabaaaaaaaaaaaakaabaaaadaaaaaaabeaaaaanlapejma
aaaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaackaabaaaacaaaaaabkaabaaaacaaaaaadbaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahicaabaaa
abaaaaaackaabaaaacaaaaaabkaabaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadhaaaaakecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaebaaaaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaa
aeaaaaaackaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
ecaabaaaaaaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaaaaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahicaabaaaabaaaaaabkaabaaaadaaaaaadkaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadiaaaaahccaabaaaaeaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdodiaaaaaiecaabaaaaaaaaaaackaabaaaaaaaaaaabkiacaaaaaaaaaaa
bgaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaiaeaidpjkcdpaaaaaaaaalaaaaafccaabaaaadaaaaaabkaabaaaaeaaaaaa
amaaaaafccaabaaaafaaaaaabkaabaaaaeaaaaaaalaaaaafmcaabaaaaeaaaaaa
fgajbaaaacaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaaeaaaaaaogakbaaa
aeaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaaeaaaaaa
fgajbaaaacaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaaeaaaaaaogakbaaa
aeaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
afaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaagaaaaaa
egaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaa
egaabaaaafaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaafaaaaaadcaaaaap
dcaabaaaaeaaaaaahgapbaaaagaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaa
aaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaa
aaaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaddaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaeaaaaaadkaabaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aeaaaaaaegacbaaaabaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadicaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpbnaaaaajccaabaaaaaaaaaaackaabaiaibaaaaaaacaaaaaabkaabaia
ibaaaaaaacaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaajpcaabaaaabaaaaaafgaibaiambaaaaaaacaaaaaakgabbaia
ibaaaaaaacaaaaaadcaaaaakhcaabaaaagaaaaaafgafbaaaaaaaaaaaegacbaaa
abaaaaaafgaebaiaibaaaaaaacaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaa
aaaaaaaadkaabaaaabaaaaaadgaaaaaficaabaaaagaaaaaaabeaaaaaaaaaaaaa
dgaaaaagdcaabaaaabaaaaaaegaabaiambaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaajgahbaaaagaaaaaabnaaaaaiccaabaaaaaaaaaaa
akaabaaaagaaaaaaakaabaiaibaaaaaaacaaaaaaabaaaaahccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaafgafbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaiaibaaaaaaacaaaaaadiaaaaakkcaabaaa
aaaaaaaakgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaaaaaaaaaadp
aoaaaaahkcaabaaaaaaaaaaafganbaaaaaaaaaaaagaabaaaabaaaaaadiaaaaai
kcaabaaaaaaaaaaafganbaaaaaaaaaaafgifcaaaaaaaaaaabgaaaaaaalaaaaaf
ecaabaaaadaaaaaackaabaaaaaaaaaaaamaaaaafecaabaaaafaaaaaackaabaaa
aaaaaaaaejaaaaanpcaabaaaabaaaaaangafbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaafaaaaaaigaabaaaadaaaaaaigaabaaaafaaaaaaejaaaaanpcaabaaa
acaaaaaangafbaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaigaabaaa
adaaaaaaigaabaaaafaaaaaadiaaaaahccaabaaaaaaaaaaadkaabaaaaeaaaaaa
dkaabaaaabaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaaeaaaaaadkaabaaa
acaaaaaadiaaaaahicaabaaaabaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
aaaaaaaipcaabaaaaaaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaa
dcaaaaajpccabaaaaaaaaaaapgapbaaaabaaaaaaegaobaaaaaaaaaaaegaobaaa
acaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 332 math, 10 textures, 12 branches
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [_LightTexture0] 2D 1
SetTexture 2 [_LightTextureB0] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityOverlayTex] 2D 4
SetTexture 5 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 6 [_CityLightOverlayDetailTex] 2D 6
ConstBuffer "$Globals" 124
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightShadowData]
Vector 32 [_ShadowOffsets0]
Vector 48 [_ShadowOffsets1]
Vector 64 [_ShadowOffsets2]
Vector 80 [_ShadowOffsets3]
VectorHalf 96 [_LightColor0] 4
Float 104 [_SpecularPower]
VectorHalf 112 [_SpecularColor] 4
Float 120 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::less);
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 _LightShadowData;
  float4 _ShadowOffsets[4];
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   depth2d<float> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _LightTextureB0 [[texture(2)]], sampler _mtlsmp__LightTextureB0 [[sampler(2)]]
  ,   texture2d<half> _BumpMap [[texture(3)]], sampler _mtlsmp__BumpMap [[sampler(3)]]
  ,   texture2d<half> _CityOverlayTex [[texture(4)]], sampler _mtlsmp__CityOverlayTex [[sampler(4)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(5)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(6)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half3 normT_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half3 tmpvar_15;
  half4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * (half)2.0) - (half)1.0);
  normT_4 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * rsqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_21;
  tmpvar_21 = dfdx(tmpvar_17.xz);
  float2 tmpvar_22;
  tmpvar_22 = dfdy(tmpvar_17.xz);
  float4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dfdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dfdy(uv_18.y);
  half4 tmpvar_24;
  tmpvar_24 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_18), gradient2d((float2)(tmpvar_23.xy), (float2)(tmpvar_23.zw)));
  half4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  half4 tmpvar_26;
  half3 detailCoords_27;
  half nylerp_28;
  half zxlerp_29;
  float3 tmpvar_30;
  tmpvar_30 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_31;
  float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * rsqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_35;
  tmpvar_35 = dfdx(tmpvar_30.xz);
  float2 tmpvar_36;
  tmpvar_36 = dfdy(tmpvar_30.xz);
  float4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dfdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dfdy(tmpvar_34.y);
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, (float)zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = half(tmpvar_40);
  float3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, (float3)half3(zxlerp_29));
  detailCoords_27 = half3(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, (float3)detailCoords_27, (float3)half3(nylerp_28));
  detailCoords_27 = half3(tmpvar_42);
  half tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  float2 coord_44;
  coord_44 = ((float2)(((half)0.5 * detailCoords_27.zy) / tmpvar_43) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_45;
  tmpvar_45 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_44), gradient2d((float2)(tmpvar_37.xy), (float2)(tmpvar_37.zw)));
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  half4 tmpvar_46;
  half3 detailCoords_47;
  half nylerp_48;
  half zxlerp_49;
  float3 tmpvar_50;
  tmpvar_50 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_51;
  float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * rsqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_55;
  tmpvar_55 = dfdx(tmpvar_50.xz);
  float2 tmpvar_56;
  tmpvar_56 = dfdy(tmpvar_50.xz);
  float4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dfdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dfdy(tmpvar_54.y);
  float3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = half(tmpvar_59);
  float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, (float)zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = half(tmpvar_60);
  float3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, (float3)half3(zxlerp_49));
  detailCoords_47 = half3(tmpvar_61);
  float3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, (float3)detailCoords_47, (float3)half3(nylerp_48));
  detailCoords_47 = half3(tmpvar_62);
  half tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  float2 coord_64;
  coord_64 = ((float2)(((half)0.5 * detailCoords_47.zy) / tmpvar_63) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_65;
  tmpvar_65 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_64), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  half4 tmpvar_66;
  float2 P_67;
  P_67 = ((_mtl_i.xlv_TEXCOORD6.xy / _mtl_i.xlv_TEXCOORD6.w) + 0.5);
  tmpvar_66 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(P_67));
  float tmpvar_68;
  tmpvar_68 = dot (_mtl_i.xlv_TEXCOORD6.xyz, _mtl_i.xlv_TEXCOORD6.xyz);
  half4 tmpvar_69;
  tmpvar_69 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_68)));
  half tmpvar_70;
  half4 shadows_71;
  float3 tmpvar_72;
  tmpvar_72 = (_mtl_i.xlv_TEXCOORD7.xyz / _mtl_i.xlv_TEXCOORD7.w);
  float3 coord_73;
  coord_73 = (tmpvar_72 + _mtl_u._ShadowOffsets[0].xyz);
  half tmpvar_74;
  tmpvar_74 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_73).xy, (float)(coord_73).z);
  shadows_71.x = tmpvar_74;
  float3 coord_75;
  coord_75 = (tmpvar_72 + _mtl_u._ShadowOffsets[1].xyz);
  half tmpvar_76;
  tmpvar_76 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_75).xy, (float)(coord_75).z);
  shadows_71.y = tmpvar_76;
  float3 coord_77;
  coord_77 = (tmpvar_72 + _mtl_u._ShadowOffsets[2].xyz);
  half tmpvar_78;
  tmpvar_78 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_77).xy, (float)(coord_77).z);
  shadows_71.z = tmpvar_78;
  float3 coord_79;
  coord_79 = (tmpvar_72 + _mtl_u._ShadowOffsets[3].xyz);
  half tmpvar_80;
  tmpvar_80 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(coord_79).xy, (float)(coord_79).z);
  shadows_71.w = tmpvar_80;
  float4 tmpvar_81;
  tmpvar_81 = (_mtl_u._LightShadowData.xxxx + ((float4)shadows_71 * (1.0 - _mtl_u._LightShadowData.xxxx)));
  shadows_71 = half4(tmpvar_81);
  half tmpvar_82;
  tmpvar_82 = dot (shadows_71, (half4)float4(0.25, 0.25, 0.25, 0.25));
  tmpvar_70 = tmpvar_82;
  half3 lightDir_83;
  lightDir_83 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_84;
  viewDir_84 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_85;
  atten_85 = half((((
    float((_mtl_i.xlv_TEXCOORD6.z > 0.0))
   * (float)tmpvar_66.w) * (float)tmpvar_69.w) * (float)tmpvar_70));
  half4 c_86;
  half3 tmpvar_87;
  tmpvar_87 = normalize(lightDir_83);
  lightDir_83 = tmpvar_87;
  half3 tmpvar_88;
  tmpvar_88 = normalize(viewDir_84);
  viewDir_84 = tmpvar_88;
  half3 tmpvar_89;
  tmpvar_89 = normalize(normT_4);
  half tmpvar_90;
  tmpvar_90 = dot (tmpvar_89, tmpvar_87);
  float tmpvar_91;
  half tmpvar_92;
  tmpvar_92 = clamp (dot (normalize(
    (tmpvar_87 + tmpvar_88)
  ), tmpvar_89), (half)0.0, (half)1.0);
  tmpvar_91 = float(tmpvar_92);
  float3 tmpvar_93;
  tmpvar_93 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_90) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_91, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_85 * (half)4.0));
  c_86.xyz = half3(tmpvar_93);
  c_86.w = (tmpvar_90 * (atten_85 * (half)4.0));
  float3 tmpvar_94;
  tmpvar_94 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_95;
  lightDir_95 = half3(tmpvar_94);
  half3 normal_96;
  normal_96 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_97;
  tmpvar_97 = dot (normal_96, lightDir_95);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_86 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_97)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_97)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_98;
  tmpvar_98 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_98;
  tmpvar_1 = tmpvar_98;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 128 math, 17 textures
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Float 3 [_CityOverlayDetailScale]
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
SetTexture 5 [_ShadowMapTexture] CUBE 5
SetTexture 6 [_LightTexture0] 2D 6
"ps_3_0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_cube s5
dcl_2d s6
def c4, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c5, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c6, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c7, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c8, -0.33299461, 0.99999559, 1.57079601, 0.00781250
def c9, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c10, 1.00000000, 0.00392157, 0.00001538, 0.00000006
def c11, 2.00000000, -1.00000000, 10.00000000, 1.00976563
def c12, 4.00000000, 0, 0, 0
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r2.xyz, r0
abs r0.w, r0.z
max r1.x, r2, r0.w
rcp r1.y, r1.x
min r1.x, r2, r0.w
mul r1.x, r1, r1.y
mul r1.y, r1.x, r1.x
mad r1.z, r1.y, c7.x, c7.y
mad r1.z, r1, r1.y, c7
mad r1.z, r1, r1.y, c7.w
mad r1.z, r1, r1.y, c8.x
mad r1.y, r1.z, r1, c8
mul r1.y, r1, r1.x
add r1.x, r2, -r0.w
abs r0.w, r0.y
add r1.z, -r1.y, c8
cmp r1.z, -r1.x, r1.y, r1
add r1.y, -r0.w, c4.x
mad r1.x, r0.w, c5, c5.y
mad r1.x, r1, r0.w, c5.z
rsq r1.y, r1.y
cmp r0.y, r0, c4, c4.x
rcp r1.y, r1.y
mad r0.w, r1.x, r0, c5
mul r0.w, r0, r1.y
mul r1.x, r0.y, r0.w
mad r0.w, -r1.x, c6.x, r0
mad r2.w, r0.y, c6.y, r0
mul r0.y, r2.w, c6.w
add r1.y, -r1.z, c6
cmp r1.x, r0.z, r1.z, r1.y
cmp r0.w, r0.x, r1.x, -r1.x
dsx r1.xy, r0.xzzw
mad r5.x, r0.w, c4.w, c4.z
mov r5.y, r0
dsx r3.w, r0.y
dsy r3.y, r0
dsy r0.xy, r0.xzzw
mul r0.xy, r0, r0
mul r0.zw, r1.xyxy, r1.xyxy
add r0.y, r0.x, r0
add r0.z, r0, r0.w
rsq r0.x, r0.z
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.x, r0.y, c4.w
mul r3.z, r0.x, c4.w
texldd r0.yw, r5, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c11.x, c11.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c4.x
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r1.xyz, r0.w, r0
dp3_pp r1.w, v4, v4
rsq_pp r0.w, r1.w
mul_pp r4.xyz, r0.w, v4
dp3_pp r5.z, r1, r4
add r0.xyz, v6, c9.xyyw
texld r0, r0, s5
dp4 r4.w, r0, c10
add r0.xyz, v6, c9.yxyw
texld r0, r0, s5
dp4 r4.z, r0, c10
add r1.xyz, v6, c9.yyxw
texld r1, r1, s5
dp4 r4.y, r1, c10
add r0.xyz, v6, c8.w
texld r0, r0, s5
dp3 r1.x, v6, v6
dp4 r4.x, r0, c10
rsq r1.x, r1.x
rcp r0.x, r1.x
dp4 r1.x, c0, c0
mul r0.x, r0, c1.w
rsq r1.x, r1.x
mul r1.xyz, r1.x, c0
dp3_pp r1.x, v3, r1
mad r0, -r0.x, c9.z, r4
mov r1.w, c2.x
cmp r0, r0, c4.x, r1.w
dp4_pp r0.y, r0, c9.w
add_pp r0.z, r1.x, c11.w
dp3 r0.x, v5, v5
texld r0.x, r0.x, s6
mul r0.x, r0, r0.y
frc_pp r0.w, r0.z
add_pp_sat r0.y, r0.z, -r0.w
mul_pp r0.w, r0.x, r5.z
mul_pp_sat r0.x, -r1, c11.z
add r1.x, r2.z, -r2
add_pp r0.y, r0, c11
mad_pp r1.y, r0.x, r0, c4.x
mul_pp r0.w, r0, r1.y
mul_pp_sat r0.w, r0, c12.x
add_pp r4.x, -r0.w, c4
add r0.xyz, r2.zxyw, -r2
cmp r1.x, r1, c4, c4.y
mad r0.xyz, r1.x, r0, r2
add r1.x, r0, -r2.y
add r0.xyz, r0, -r2.yxzw
cmp r1.x, r1, c4, c4.y
mad r0.xyz, r1.x, r0, r2.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c4.z
mul r2.xy, r0, c3.x
mul r0.z, r2.w, c3.x
mul r0.z, r0, c6
dsx r0.y, r0.z
texldd r0.w, r5, s2, r3.zwzw, r3
dsy r2.w, r0.z
mov r0.x, r3.z
mov r2.z, r3.x
texldd r1, r2, s3, r0, r2.zwzw
mul_pp r0.z, r1.w, r0.w
mul_pp r3.x, r0.z, r4
texldd r2, r2, s4, r0, r2.zwzw
mul_pp r0.w, r0, r2
mov_pp r0.xyz, r2
mov_pp r1.w, r3.x
add_pp r1, r1, -r0
mad_pp oC0, r3.x, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 107 math, 5 textures
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
SetTexture 0 [_BumpMap] 2D 2
SetTexture 1 [_CityOverlayTex] 2D 3
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 3 [_CityLightOverlayDetailTex] 2D 5
SetTexture 4 [_LightTexture0] 2D 1
SetTexture 5 [_ShadowMapTexture] CUBE 0
ConstBuffer "$Globals" 304
Float 292 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityShadows" 416
Vector 384 [_LightShadowData]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
BindCB  "UnityShadows" 2
"ps_4_0
eefiecedpkiddnpekmlahmkppmegfjklbhjbmfcaabaaaaaagibbaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcbibaaaaaeaaaaaaaagaeaaaafjaaaaaeegiocaaa
aaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaa
fidaaaaeaahabaaaafaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaa
bbaaaaajbcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaa
aaaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaadaaaaaaegacbaaaaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaakoehibdpdicaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaacambebcaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaa
aaaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaialpdcaaaaaj
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaiadp
baaaaaahccaabaaaaaaaaaaaegbcbaaaagaaaaaaegbcbaaaagaaaaaaelaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaa
aaaaaaaadkiacaaaabaaaaaaabaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaomfbhidpaaaaaaakhcaabaaaabaaaaaaegbcbaaaagaaaaaa
aceaaaaaaaaaaadmaaaaaadmaaaaaadmaaaaaaaaefaaaaajpcaabaaaabaaaaaa
egacbaaaabaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaa
abaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhafidibdd
aaaaaaakhcaabaaaacaaaaaaegbcbaaaagaaaaaaaceaaaaaaaaaaalmaaaaaalm
aaaaaadmaaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaa
afaaaaaaaagabaaaaaaaaaaabbaaaaakccaabaaaabaaaaaaegaobaaaacaaaaaa
aceaaaaaaaaaiadpibiaiadlicabibdhafidibddaaaaaaakhcaabaaaacaaaaaa
egbcbaaaagaaaaaaaceaaaaaaaaaaalmaaaaaadmaaaaaalmaaaaaaaaefaaaaaj
pcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaa
bbaaaaakecaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadl
icabibdhafidibddaaaaaaakhcaabaaaacaaaaaaegbcbaaaagaaaaaaaceaaaaa
aaaaaadmaaaaaalmaaaaaalmaaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaa
acaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaabbaaaaakicaabaaaabaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhafidibdddbaaaaah
pcaabaaaabaaaaaaegaobaaaabaaaaaafgafbaaaaaaaaaaadhaaaaanpcaabaaa
abaaaaaaegaobaaaabaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpbbaaaaakccaabaaaaaaaaaaaegaobaaaabaaaaaa
aceaaaaaaaaaiadoaaaaiadoaaaaiadoaaaaiadobaaaaaahecaabaaaaaaaaaaa
egbcbaaaafaaaaaaegbcbaaaafaaaaaaefaaaaajpcaabaaaabaaaaaakgakbaaa
aaaaaaaaeghobaaaaeaaaaaaaagabaaaabaaaaaadiaaaaahccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahecaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhcaabaaaabaaaaaakgakbaaaaaaaaaaaegbcbaaaaeaaaaaabaaaaaah
ecaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaakgakbaaaaaaaaaaa
bgbgbaaaacaaaaaadeaaaaajecaabaaaaaaaaaaackaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaaoaaaaakecaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpckaabaaaaaaaaaaaddaaaaajicaabaaaaaaaaaaa
ckaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaadiaaaaahecaabaaa
aaaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
ckaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajicaabaaaabaaaaaadkaabaaa
aaaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajicaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajicaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaaj
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajicaabaaaacaaaaaackaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadbaaaaaidcaabaaaadaaaaaacgakbaaaacaaaaaacgakbaiaebaaaaaa
acaaaaaaabaaaaahicaabaaaaaaaaaaaakaabaaaadaaaaaaabeaaaaanlapejma
aaaaaaahecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaackaabaaaacaaaaaabkaabaaaacaaaaaadbaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahicaabaaa
abaaaaaackaabaaaacaaaaaabkaabaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaadhaaaaakecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaebaaaaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaa
aeaaaaaackaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
ecaabaaaaaaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaaaaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaadcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahicaabaaaabaaaaaabkaabaaaadaaaaaadkaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkaabaaaabaaaaaadiaaaaahccaabaaaaeaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdodiaaaaaiecaabaaaaaaaaaaackaabaaaaaaaaaaabkiacaaaaaaaaaaa
bcaaaaaadiaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaa
aaaaiaeaidpjkcdpaaaaaaaaalaaaaafccaabaaaadaaaaaabkaabaaaaeaaaaaa
amaaaaafccaabaaaafaaaaaabkaabaaaaeaaaaaaalaaaaafmcaabaaaaeaaaaaa
fgajbaaaacaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaaeaaaaaaogakbaaa
aeaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaaeaaaaaa
fgajbaaaacaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaaeaaaaaaogakbaaa
aeaaaaaaelaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaa
afaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaagaaaaaa
egaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaacaaaaaaegaabaaaadaaaaaa
egaabaaaafaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaaafaaaaaadcaaaaap
dcaabaaaaeaaaaaahgapbaaaagaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaa
aaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaa
aaaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaaddaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaeaaaaaadkaabaaa
aaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aeaaaaaaegacbaaaabaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadicaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaa
aaaaiadpbnaaaaajccaabaaaaaaaaaaackaabaiaibaaaaaaacaaaaaabkaabaia
ibaaaaaaacaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaa
aaaaiadpaaaaaaajpcaabaaaabaaaaaafgaibaiambaaaaaaacaaaaaakgabbaia
ibaaaaaaacaaaaaadcaaaaakhcaabaaaagaaaaaafgafbaaaaaaaaaaaegacbaaa
abaaaaaafgaebaiaibaaaaaaacaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaa
aaaaaaaadkaabaaaabaaaaaadgaaaaaficaabaaaagaaaaaaabeaaaaaaaaaaaaa
dgaaaaagdcaabaaaabaaaaaaegaabaiambaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaajgahbaaaagaaaaaabnaaaaaiccaabaaaaaaaaaaa
akaabaaaagaaaaaaakaabaiaibaaaaaaacaaaaaaabaaaaahccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaafgafbaaa
aaaaaaaaegacbaaaabaaaaaaegacbaiaibaaaaaaacaaaaaadiaaaaakkcaabaaa
aaaaaaaakgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaaaaaaaaaadp
aoaaaaahkcaabaaaaaaaaaaafganbaaaaaaaaaaaagaabaaaabaaaaaadiaaaaai
kcaabaaaaaaaaaaafganbaaaaaaaaaaafgifcaaaaaaaaaaabcaaaaaaalaaaaaf
ecaabaaaadaaaaaackaabaaaaaaaaaaaamaaaaafecaabaaaafaaaaaackaabaaa
aaaaaaaaejaaaaanpcaabaaaabaaaaaangafbaaaaaaaaaaaeghobaaaacaaaaaa
aagabaaaaeaaaaaaigaabaaaadaaaaaaigaabaaaafaaaaaaejaaaaanpcaabaaa
acaaaaaangafbaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaafaaaaaaigaabaaa
adaaaaaaigaabaaaafaaaaaadiaaaaahccaabaaaaaaaaaaadkaabaaaaeaaaaaa
dkaabaaaabaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaaeaaaaaadkaabaaa
acaaaaaadiaaaaahicaabaaaabaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
aaaaaaaipcaabaaaaaaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaa
dcaaaaajpccabaaaaaaaaaaapgapbaaaabaaaaaaegaobaaaaaaaaaaaegaobaaa
acaaaaaadoaaaaab"
}
SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 335 math, 9 textures, 16 branches
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
SetTexture 0 [_ShadowMapTexture] CUBE 0
SetTexture 1 [_LightTexture0] 2D 1
SetTexture 2 [_BumpMap] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 76
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
Vector 32 [_LightShadowData]
VectorHalf 48 [_LightColor0] 4
Float 56 [_SpecularPower]
VectorHalf 64 [_SpecularColor] 4
Float 72 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4 _LightShadowData;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _BumpMap [[texture(2)]], sampler _mtlsmp__BumpMap [[sampler(2)]]
  ,   texture2d<half> _CityOverlayTex [[texture(3)]], sampler _mtlsmp__CityOverlayTex [[sampler(3)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(4)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half3 normT_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half3 tmpvar_15;
  half4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * (half)2.0) - (half)1.0);
  normT_4 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * rsqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_21;
  tmpvar_21 = dfdx(tmpvar_17.xz);
  float2 tmpvar_22;
  tmpvar_22 = dfdy(tmpvar_17.xz);
  float4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dfdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dfdy(uv_18.y);
  half4 tmpvar_24;
  tmpvar_24 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_18), gradient2d((float2)(tmpvar_23.xy), (float2)(tmpvar_23.zw)));
  half4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  half4 tmpvar_26;
  half3 detailCoords_27;
  half nylerp_28;
  half zxlerp_29;
  float3 tmpvar_30;
  tmpvar_30 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_31;
  float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * rsqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_35;
  tmpvar_35 = dfdx(tmpvar_30.xz);
  float2 tmpvar_36;
  tmpvar_36 = dfdy(tmpvar_30.xz);
  float4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dfdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dfdy(tmpvar_34.y);
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, (float)zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = half(tmpvar_40);
  float3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, (float3)half3(zxlerp_29));
  detailCoords_27 = half3(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, (float3)detailCoords_27, (float3)half3(nylerp_28));
  detailCoords_27 = half3(tmpvar_42);
  half tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  float2 coord_44;
  coord_44 = ((float2)(((half)0.5 * detailCoords_27.zy) / tmpvar_43) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_45;
  tmpvar_45 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_44), gradient2d((float2)(tmpvar_37.xy), (float2)(tmpvar_37.zw)));
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  half4 tmpvar_46;
  half3 detailCoords_47;
  half nylerp_48;
  half zxlerp_49;
  float3 tmpvar_50;
  tmpvar_50 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_51;
  float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * rsqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_55;
  tmpvar_55 = dfdx(tmpvar_50.xz);
  float2 tmpvar_56;
  tmpvar_56 = dfdy(tmpvar_50.xz);
  float4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dfdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dfdy(tmpvar_54.y);
  float3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = half(tmpvar_59);
  float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, (float)zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = half(tmpvar_60);
  float3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, (float3)half3(zxlerp_49));
  detailCoords_47 = half3(tmpvar_61);
  float3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, (float3)detailCoords_47, (float3)half3(nylerp_48));
  detailCoords_47 = half3(tmpvar_62);
  half tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  float2 coord_64;
  coord_64 = ((float2)(((half)0.5 * detailCoords_47.zy) / tmpvar_63) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_65;
  tmpvar_65 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_64), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  float tmpvar_66;
  tmpvar_66 = dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_67;
  tmpvar_67 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(float2(tmpvar_66)));
  float tmpvar_68;
  float4 shadowVals_69;
  float tmpvar_70;
  tmpvar_70 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD7, _mtl_i.xlv_TEXCOORD7)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float3 vec_71;
  vec_71 = (_mtl_i.xlv_TEXCOORD7 + float3(0.0078125, 0.0078125, 0.0078125));
  float4 packDist_72;
  half4 tmpvar_73;
  tmpvar_73 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_71));
  packDist_72 = float4(tmpvar_73);
  shadowVals_69.x = dot (packDist_72, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float3 vec_74;
  vec_74 = (_mtl_i.xlv_TEXCOORD7 + float3(-0.0078125, -0.0078125, 0.0078125));
  float4 packDist_75;
  half4 tmpvar_76;
  tmpvar_76 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_74));
  packDist_75 = float4(tmpvar_76);
  shadowVals_69.y = dot (packDist_75, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float3 vec_77;
  vec_77 = (_mtl_i.xlv_TEXCOORD7 + float3(-0.0078125, 0.0078125, -0.0078125));
  float4 packDist_78;
  half4 tmpvar_79;
  tmpvar_79 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_77));
  packDist_78 = float4(tmpvar_79);
  shadowVals_69.z = dot (packDist_78, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float3 vec_80;
  vec_80 = (_mtl_i.xlv_TEXCOORD7 + float3(0.0078125, -0.0078125, -0.0078125));
  float4 packDist_81;
  half4 tmpvar_82;
  tmpvar_82 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_80));
  packDist_81 = float4(tmpvar_82);
  shadowVals_69.w = dot (packDist_81, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bool4 tmpvar_83;
  tmpvar_83 = bool4((shadowVals_69 < float4(tmpvar_70)));
  float4 tmpvar_84;
  tmpvar_84 = _mtl_u._LightShadowData.xxxx;
  float tmpvar_85;
  if (tmpvar_83.x) {
    tmpvar_85 = tmpvar_84.x;
  } else {
    tmpvar_85 = 1.0;
  };
  float tmpvar_86;
  if (tmpvar_83.y) {
    tmpvar_86 = tmpvar_84.y;
  } else {
    tmpvar_86 = 1.0;
  };
  float tmpvar_87;
  if (tmpvar_83.z) {
    tmpvar_87 = tmpvar_84.z;
  } else {
    tmpvar_87 = 1.0;
  };
  float tmpvar_88;
  if (tmpvar_83.w) {
    tmpvar_88 = tmpvar_84.w;
  } else {
    tmpvar_88 = 1.0;
  };
  half4 tmpvar_89;
  tmpvar_89.x = half(tmpvar_85);
  tmpvar_89.y = half(tmpvar_86);
  tmpvar_89.z = half(tmpvar_87);
  tmpvar_89.w = half(tmpvar_88);
  half tmpvar_90;
  tmpvar_90 = dot (tmpvar_89, (half4)float4(0.25, 0.25, 0.25, 0.25));
  tmpvar_68 = float(tmpvar_90);
  half3 lightDir_91;
  lightDir_91 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_92;
  viewDir_92 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_93;
  atten_93 = half(((float)tmpvar_67.w * tmpvar_68));
  half4 c_94;
  half3 tmpvar_95;
  tmpvar_95 = normalize(lightDir_91);
  lightDir_91 = tmpvar_95;
  half3 tmpvar_96;
  tmpvar_96 = normalize(viewDir_92);
  viewDir_92 = tmpvar_96;
  half3 tmpvar_97;
  tmpvar_97 = normalize(normT_4);
  half tmpvar_98;
  tmpvar_98 = dot (tmpvar_97, tmpvar_95);
  float tmpvar_99;
  half tmpvar_100;
  tmpvar_100 = clamp (dot (normalize(
    (tmpvar_95 + tmpvar_96)
  ), tmpvar_97), (half)0.0, (half)1.0);
  tmpvar_99 = float(tmpvar_100);
  float3 tmpvar_101;
  tmpvar_101 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_98) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_99, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_93 * (half)4.0));
  c_94.xyz = half3(tmpvar_101);
  c_94.w = (tmpvar_98 * (atten_93 * (half)4.0));
  float3 tmpvar_102;
  tmpvar_102 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_103;
  lightDir_103 = half3(tmpvar_102);
  half3 normal_104;
  normal_104 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_105;
  tmpvar_105 = dot (normal_104, lightDir_103);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_94 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_105)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_105)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_106;
  tmpvar_106 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_106;
  tmpvar_1 = tmpvar_106;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}
SubProgram "d3d9 " {
// Stats: 129 math, 18 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [_WorldSpaceLightPos0]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Float 3 [_CityOverlayDetailScale]
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
SetTexture 5 [_ShadowMapTexture] CUBE 5
SetTexture 6 [_LightTextureB0] 2D 6
SetTexture 7 [_LightTexture0] CUBE 7
"ps_3_0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_cube s5
dcl_2d s6
dcl_cube s7
def c4, 1.00000000, 0.00000000, 0.50000000, 0.15915494
def c5, -0.01872930, 0.07426100, -0.21211439, 1.57072902
def c6, 2.00000000, 3.14159298, 1.27323949, 0.31830987
def c7, -0.01348047, 0.05747731, -0.12123910, 0.19563590
def c8, -0.33299461, 0.99999559, 1.57079601, 0.00781250
def c9, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c10, 1.00000000, 0.00392157, 0.00001538, 0.00000006
def c11, 2.00000000, -1.00000000, 10.00000000, 1.00976563
def c12, 4.00000000, 0, 0, 0
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
dcl_texcoord7 v6.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.xyz, r0
abs r0.w, r0.z
max r1.w, r1.x, r0
rcp r2.x, r1.w
min r1.w, r1.x, r0
mul r1.w, r1, r2.x
mul r2.x, r1.w, r1.w
mad r2.y, r2.x, c7.x, c7
mad r2.y, r2, r2.x, c7.z
mad r2.y, r2, r2.x, c7.w
mad r2.y, r2, r2.x, c8.x
mad r2.x, r2.y, r2, c8.y
mul r2.x, r2, r1.w
add r1.w, r1.x, -r0
abs r0.w, r0.y
add r2.y, -r2.x, c8.z
cmp r2.y, -r1.w, r2.x, r2
add r2.x, -r0.w, c4
mad r1.w, r0, c5.x, c5.y
mad r1.w, r1, r0, c5.z
rsq r2.x, r2.x
cmp r0.y, r0, c4, c4.x
rcp r2.x, r2.x
mad r0.w, r1, r0, c5
mul r0.w, r0, r2.x
mul r1.w, r0.y, r0
mad r0.w, -r1, c6.x, r0
mad r1.w, r0.y, c6.y, r0
mul r0.y, r1.w, c6.w
add r2.x, -r2.y, c6.y
cmp r2.x, r0.z, r2.y, r2
cmp r0.w, r0.x, r2.x, -r2.x
dsx r2.xy, r0.xzzw
mad r5.x, r0.w, c4.w, c4.z
mov r5.y, r0
dsx r4.w, r0.y
dsy r4.y, r0
dsy r0.xy, r0.xzzw
mul r0.zw, r2.xyxy, r2.xyxy
mul r0.xy, r0, r0
add r0.y, r0.x, r0
add r0.z, r0, r0.w
rsq r0.x, r0.z
rcp r0.x, r0.x
dp3_pp r2.x, v4, v4
rsq_pp r2.w, r2.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul_pp r3.xyz, r2.w, v4
mul r4.z, r0.x, c4.w
mul r4.x, r0.y, c4.w
texldd r0.yw, r5, s1, r4.zwzw, r4
mad_pp r0.xy, r0.wyzw, c11.x, c11.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r0.z, -r0, c4.x
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r0
rsq_pp r0.w, r0.w
mul_pp r2.xyz, r0.w, r0
dp3_pp r2.w, r2, r3
add r0.xyz, v6, c9.xyyw
texld r0, r0, s5
add r2.xyz, v6, c9.yxyw
dp4 r3.w, r0, c10
texld r0, r2, s5
add r2.xyz, v6, c9.yyxw
dp4 r3.z, r0, c10
texld r0, r2, s5
add r2.xyz, v6, c8.w
dp4 r3.y, r0, c10
texld r0, r2, s5
dp4 r3.x, r0, c10
dp3 r2.x, v6, v6
rsq r0.x, r2.x
dp4 r0.y, c0, c0
rsq r2.x, r0.y
mul r2.xyz, r2.x, c0
dp3_pp r2.x, v3, r2
rcp r0.x, r0.x
mul r0.x, r0, c1.w
mad r0, -r0.x, c9.z, r3
mov r3.x, c2
cmp r0, r0, c4.x, r3.x
dp4_pp r0.y, r0, c9.w
add_pp r2.y, r2.x, c11.w
dp3 r0.x, v5, v5
frc_pp r0.z, r2.y
texld r0.w, v5, s7
texld r0.x, r0.x, s6
mul r0.x, r0, r0.w
mul r0.x, r0, r0.y
add_pp_sat r0.y, r2, -r0.z
mul_pp r0.w, r0.x, r2
mul_pp_sat r0.x, -r2, c11.z
add_pp r0.y, r0, c11
mad_pp r2.y, r0.x, r0, c4.x
mul_pp r0.w, r0, r2.y
add r2.x, r1.z, -r1
mul_pp_sat r0.w, r0, c12.x
add_pp r3.x, -r0.w, c4
add r0.xyz, r1.zxyw, -r1
cmp r2.x, r2, c4, c4.y
mad r0.xyz, r2.x, r0, r1
add r2.x, r0, -r1.y
add r0.xyz, r0, -r1.yxzw
cmp r2.x, r2, c4, c4.y
mad r0.xyz, r2.x, r0, r1.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c4.z
mul r2.xy, r0, c3.x
mul r0.z, r1.w, c3.x
mul r0.z, r0, c6
dsx r0.y, r0.z
dsy r2.w, r0.z
mov r0.x, r4.z
mov r2.z, r4.x
texldd r1, r2, s3, r0, r2.zwzw
texldd r0.w, r5, s2, r4.zwzw, r4
mul_pp r0.z, r1.w, r0.w
mul_pp r3.x, r0.z, r3
texldd r2, r2, s4, r0, r2.zwzw
mul_pp r0.w, r0, r2
mov_pp r0.xyz, r2
mov_pp r1.w, r3.x
add_pp r1, r1, -r0
mad_pp oC0, r3.x, r1, r0
"
}
SubProgram "d3d11 " {
// Stats: 108 math, 6 textures
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
SetTexture 0 [_BumpMap] 2D 3
SetTexture 1 [_CityOverlayTex] 2D 4
SetTexture 2 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 3 [_CityLightOverlayDetailTex] 2D 6
SetTexture 4 [_LightTextureB0] 2D 2
SetTexture 5 [_LightTexture0] CUBE 1
SetTexture 6 [_ShadowMapTexture] CUBE 0
ConstBuffer "$Globals" 304
Float 292 [_CityOverlayDetailScale]
ConstBuffer "UnityLighting" 720
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
ConstBuffer "UnityShadows" 416
Vector 384 [_LightShadowData]
BindCB  "$Globals" 0
BindCB  "UnityLighting" 1
BindCB  "UnityShadows" 2
"ps_4_0
eefiecedcljijmpmapmdbfmckkjihjagpebpagbeabaaaaaamebbaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaabaaaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaabaaaaaa
aoaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaahahaaaaneaaaaaaagaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahahaaaaneaaaaaaahaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefchebaaaaaeaaaaaaabnaeaaaafjaaaaaeegiocaaa
aaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaafjaaaaaeegiocaaa
acaaaaaabjaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaa
aeaaaaaafkaaaaadaagabaaaafaaaaaafkaaaaadaagabaaaagaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaafidaaaaeaahabaaaafaaaaaaffffaaaafidaaaae
aahabaaaagaaaaaaffffaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacahaaaaaabbaaaaaj
bcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
agaabaaaaaaaaaaaegiccaaaabaaaaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaadaaaaaaegacbaaaaaaaaaaaaaaaaaahccaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaakoehibdpdicaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaacambebcaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaaaaaaaaah
ccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaialpdcaaaaajbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaiadpbaaaaaah
ccaabaaaaaaaaaaaegbcbaaaagaaaaaaegbcbaaaagaaaaaaelaaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaa
dkiacaaaabaaaaaaabaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
abeaaaaaomfbhidpaaaaaaakhcaabaaaabaaaaaaegbcbaaaagaaaaaaaceaaaaa
aaaaaadmaaaaaadmaaaaaadmaaaaaaaaefaaaaajpcaabaaaabaaaaaaegacbaaa
abaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaabbaaaaakbcaabaaaabaaaaaa
egaobaaaabaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhafidibddaaaaaaak
hcaabaaaacaaaaaaegbcbaaaagaaaaaaaceaaaaaaaaaaalmaaaaaalmaaaaaadm
aaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaaagaaaaaa
aagabaaaaaaaaaaabbaaaaakccaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaiadpibiaiadlicabibdhafidibddaaaaaaakhcaabaaaacaaaaaaegbcbaaa
agaaaaaaaceaaaaaaaaaaalmaaaaaadmaaaaaalmaaaaaaaaefaaaaajpcaabaaa
acaaaaaaegacbaaaacaaaaaaeghobaaaagaaaaaaaagabaaaaaaaaaaabbaaaaak
ecaabaaaabaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdh
afidibddaaaaaaakhcaabaaaacaaaaaaegbcbaaaagaaaaaaaceaaaaaaaaaaadm
aaaaaalmaaaaaalmaaaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaaacaaaaaa
eghobaaaagaaaaaaaagabaaaaaaaaaaabbaaaaakicaabaaaabaaaaaaegaobaaa
acaaaaaaaceaaaaaaaaaiadpibiaiadlicabibdhafidibdddbaaaaahpcaabaaa
abaaaaaaegaobaaaabaaaaaafgafbaaaaaaaaaaadhaaaaanpcaabaaaabaaaaaa
egaobaaaabaaaaaaagiacaaaacaaaaaabiaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpbbaaaaakccaabaaaaaaaaaaaegaobaaaabaaaaaaaceaaaaa
aaaaiadoaaaaiadoaaaaiadoaaaaiadobaaaaaahecaabaaaaaaaaaaaegbcbaaa
afaaaaaaegbcbaaaafaaaaaaefaaaaajpcaabaaaabaaaaaakgakbaaaaaaaaaaa
eghobaaaaeaaaaaaaagabaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegbcbaaa
afaaaaaaeghobaaaafaaaaaaaagabaaaabaaaaaadiaaaaahecaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaaaaaaaaabaaaaaahecaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaakgakbaaaaaaaaaaaegbcbaaaaeaaaaaabaaaaaahecaabaaa
aaaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaakgakbaaaaaaaaaaabgbgbaaa
acaaaaaadeaaaaajecaabaaaaaaaaaaackaabaiaibaaaaaaacaaaaaabkaabaia
ibaaaaaaacaaaaaaaoaaaaakecaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpckaabaaaaaaaaaaaddaaaaajicaabaaaaaaaaaaackaabaia
ibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaadiaaaaahecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaackaabaaa
aaaaaaaackaabaaaaaaaaaaadcaaaaajicaabaaaabaaaaaadkaabaaaaaaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajicaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajicaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
icaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
icaabaaaacaaaaaackaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaaj
ecaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaabaaaaaa
dbaaaaaidcaabaaaadaaaaaacgakbaaaacaaaaaacgakbaiaebaaaaaaacaaaaaa
abaaaaahicaabaaaaaaaaaaaakaabaaaadaaaaaaabeaaaaanlapejmaaaaaaaah
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaddaaaaahicaabaaa
aaaaaaaackaabaaaacaaaaaabkaabaaaacaaaaaadbaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaadeaaaaahicaabaaaabaaaaaa
ckaabaaaacaaaaaabkaabaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaaabaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaadkaabaaaabaaaaaadhaaaaakecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaebaaaaaaaaaaaaaackaabaaaaaaaaaaadcaaaaajbcaabaaaaeaaaaaa
ckaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakecaabaaa
aaaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakecaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaaiedefjlodcaaaaakecaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaaaaaaaaaakaabaia
mbaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
dcaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahicaabaaaabaaaaaabkaabaaaadaaaaaadkaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
abaaaaaadiaaaaahccaabaaaaeaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
diaaaaaiecaabaaaaaaaaaaackaabaaaaaaaaaaabkiacaaaaaaaaaaabcaaaaaa
diaaaaakgcaabaaaaaaaaaaafgagbaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaiaea
idpjkcdpaaaaaaaaalaaaaafccaabaaaadaaaaaabkaabaaaaeaaaaaaamaaaaaf
ccaabaaaafaaaaaabkaabaaaaeaaaaaaalaaaaafmcaabaaaaeaaaaaafgajbaaa
acaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaaeaaaaaaogakbaaaaeaaaaaa
elaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoamaaaaafmcaabaaaaeaaaaaafgajbaaa
acaaaaaaapaaaaahicaabaaaaaaaaaaaogakbaaaaeaaaaaaogakbaaaaeaaaaaa
elaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahbcaabaaaafaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaagaaaaaaegaabaaa
aeaaaaaaeghobaaaaaaaaaaaaagabaaaadaaaaaaegaabaaaadaaaaaaegaabaaa
afaaaaaaejaaaaanpcaabaaaaeaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaaegaabaaaadaaaaaaegaabaaaafaaaaaadcaaaaapdcaabaaa
aeaaaaaahgapbaaaagaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
egaabaaaaeaaaaaaegaabaaaaeaaaaaaddaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaaaaaaaaadkaabaiaebaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaeaaaaaadkaabaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaeaaaaaapgapbaaa
aaaaaaaaegacbaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaeaaaaaa
egacbaaaabaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaa
aaaaaaaadicaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
aaaaaaaibcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadp
bnaaaaajccaabaaaaaaaaaaackaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaaabeaaaaaaaaaiadp
aaaaaaajpcaabaaaabaaaaaafgaibaiambaaaaaaacaaaaaakgabbaiaibaaaaaa
acaaaaaadcaaaaakhcaabaaaagaaaaaafgafbaaaaaaaaaaaegacbaaaabaaaaaa
fgaebaiaibaaaaaaacaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
dkaabaaaabaaaaaadgaaaaaficaabaaaagaaaaaaabeaaaaaaaaaaaaadgaaaaag
dcaabaaaabaaaaaaegaabaiambaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaajgahbaaaagaaaaaabnaaaaaiccaabaaaaaaaaaaaakaabaaa
agaaaaaaakaabaiaibaaaaaaacaaaaaaabaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaafgafbaaaaaaaaaaa
egacbaaaabaaaaaaegacbaiaibaaaaaaacaaaaaadiaaaaakkcaabaaaaaaaaaaa
kgagbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaaaaaaaaaadpaoaaaaah
kcaabaaaaaaaaaaafganbaaaaaaaaaaaagaabaaaabaaaaaadiaaaaaikcaabaaa
aaaaaaaafganbaaaaaaaaaaafgifcaaaaaaaaaaabcaaaaaaalaaaaafecaabaaa
adaaaaaackaabaaaaaaaaaaaamaaaaafecaabaaaafaaaaaackaabaaaaaaaaaaa
ejaaaaanpcaabaaaabaaaaaangafbaaaaaaaaaaaeghobaaaacaaaaaaaagabaaa
afaaaaaaigaabaaaadaaaaaaigaabaaaafaaaaaaejaaaaanpcaabaaaacaaaaaa
ngafbaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaagaaaaaaigaabaaaadaaaaaa
igaabaaaafaaaaaadiaaaaahccaabaaaaaaaaaaadkaabaaaaeaaaaaadkaabaaa
abaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaaeaaaaaadkaabaaaacaaaaaa
diaaaaahicaabaaaabaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaaaaaaai
pcaabaaaaaaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaadcaaaaaj
pccabaaaaaaaaaaapgapbaaaabaaaaaaegaobaaaaaaaaaaaegaobaaaacaaaaaa
doaaaaab"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 336 math, 10 textures, 16 branches
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
SetTexture 0 [_ShadowMapTexture] CUBE 0
SetTexture 1 [_LightTexture0] CUBE 1
SetTexture 2 [_LightTextureB0] 2D 2
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_CityOverlayTex] 2D 4
SetTexture 5 [_CityDarkOverlayDetailTex] 2D 5
SetTexture 6 [_CityLightOverlayDetailTex] 2D 6
ConstBuffer "$Globals" 76
Vector 0 [_WorldSpaceLightPos0]
Vector 16 [_LightPositionRange]
Vector 32 [_LightShadowData]
VectorHalf 48 [_LightColor0] 4
Float 56 [_SpecularPower]
VectorHalf 64 [_SpecularColor] 4
Float 72 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float3 xlv_TEXCOORD6;
  float3 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _WorldSpaceLightPos0;
  float4 _LightPositionRange;
  float4 _LightShadowData;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<half> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texturecube<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _LightTextureB0 [[texture(2)]], sampler _mtlsmp__LightTextureB0 [[sampler(2)]]
  ,   texture2d<half> _BumpMap [[texture(3)]], sampler _mtlsmp__BumpMap [[sampler(3)]]
  ,   texture2d<half> _CityOverlayTex [[texture(4)]], sampler _mtlsmp__CityOverlayTex [[sampler(4)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(5)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(6)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(6)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half3 normT_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half3 tmpvar_15;
  half4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * (half)2.0) - (half)1.0);
  normT_4 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * rsqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_21;
  tmpvar_21 = dfdx(tmpvar_17.xz);
  float2 tmpvar_22;
  tmpvar_22 = dfdy(tmpvar_17.xz);
  float4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dfdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dfdy(uv_18.y);
  half4 tmpvar_24;
  tmpvar_24 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_18), gradient2d((float2)(tmpvar_23.xy), (float2)(tmpvar_23.zw)));
  half4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  half4 tmpvar_26;
  half3 detailCoords_27;
  half nylerp_28;
  half zxlerp_29;
  float3 tmpvar_30;
  tmpvar_30 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_31;
  float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * rsqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_35;
  tmpvar_35 = dfdx(tmpvar_30.xz);
  float2 tmpvar_36;
  tmpvar_36 = dfdy(tmpvar_30.xz);
  float4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dfdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dfdy(tmpvar_34.y);
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, (float)zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = half(tmpvar_40);
  float3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, (float3)half3(zxlerp_29));
  detailCoords_27 = half3(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, (float3)detailCoords_27, (float3)half3(nylerp_28));
  detailCoords_27 = half3(tmpvar_42);
  half tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  float2 coord_44;
  coord_44 = ((float2)(((half)0.5 * detailCoords_27.zy) / tmpvar_43) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_45;
  tmpvar_45 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_44), gradient2d((float2)(tmpvar_37.xy), (float2)(tmpvar_37.zw)));
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  half4 tmpvar_46;
  half3 detailCoords_47;
  half nylerp_48;
  half zxlerp_49;
  float3 tmpvar_50;
  tmpvar_50 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_51;
  float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * rsqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_55;
  tmpvar_55 = dfdx(tmpvar_50.xz);
  float2 tmpvar_56;
  tmpvar_56 = dfdy(tmpvar_50.xz);
  float4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dfdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dfdy(tmpvar_54.y);
  float3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = half(tmpvar_59);
  float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, (float)zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = half(tmpvar_60);
  float3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, (float3)half3(zxlerp_49));
  detailCoords_47 = half3(tmpvar_61);
  float3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, (float3)detailCoords_47, (float3)half3(nylerp_48));
  detailCoords_47 = half3(tmpvar_62);
  half tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  float2 coord_64;
  coord_64 = ((float2)(((half)0.5 * detailCoords_47.zy) / tmpvar_63) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_65;
  tmpvar_65 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_64), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  float tmpvar_66;
  tmpvar_66 = dot (_mtl_i.xlv_TEXCOORD6, _mtl_i.xlv_TEXCOORD6);
  half4 tmpvar_67;
  tmpvar_67 = _LightTextureB0.sample(_mtlsmp__LightTextureB0, (float2)(float2(tmpvar_66)));
  half4 tmpvar_68;
  tmpvar_68 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float3)(_mtl_i.xlv_TEXCOORD6));
  float tmpvar_69;
  float4 shadowVals_70;
  float tmpvar_71;
  tmpvar_71 = ((sqrt(
    dot (_mtl_i.xlv_TEXCOORD7, _mtl_i.xlv_TEXCOORD7)
  ) * _mtl_u._LightPositionRange.w) * 0.97);
  float3 vec_72;
  vec_72 = (_mtl_i.xlv_TEXCOORD7 + float3(0.0078125, 0.0078125, 0.0078125));
  float4 packDist_73;
  half4 tmpvar_74;
  tmpvar_74 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_72));
  packDist_73 = float4(tmpvar_74);
  shadowVals_70.x = dot (packDist_73, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float3 vec_75;
  vec_75 = (_mtl_i.xlv_TEXCOORD7 + float3(-0.0078125, -0.0078125, 0.0078125));
  float4 packDist_76;
  half4 tmpvar_77;
  tmpvar_77 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_75));
  packDist_76 = float4(tmpvar_77);
  shadowVals_70.y = dot (packDist_76, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float3 vec_78;
  vec_78 = (_mtl_i.xlv_TEXCOORD7 + float3(-0.0078125, 0.0078125, -0.0078125));
  float4 packDist_79;
  half4 tmpvar_80;
  tmpvar_80 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_78));
  packDist_79 = float4(tmpvar_80);
  shadowVals_70.z = dot (packDist_79, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  float3 vec_81;
  vec_81 = (_mtl_i.xlv_TEXCOORD7 + float3(0.0078125, -0.0078125, -0.0078125));
  float4 packDist_82;
  half4 tmpvar_83;
  tmpvar_83 = _ShadowMapTexture.sample(_mtlsmp__ShadowMapTexture, (float3)(vec_81));
  packDist_82 = float4(tmpvar_83);
  shadowVals_70.w = dot (packDist_82, float4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08));
  bool4 tmpvar_84;
  tmpvar_84 = bool4((shadowVals_70 < float4(tmpvar_71)));
  float4 tmpvar_85;
  tmpvar_85 = _mtl_u._LightShadowData.xxxx;
  float tmpvar_86;
  if (tmpvar_84.x) {
    tmpvar_86 = tmpvar_85.x;
  } else {
    tmpvar_86 = 1.0;
  };
  float tmpvar_87;
  if (tmpvar_84.y) {
    tmpvar_87 = tmpvar_85.y;
  } else {
    tmpvar_87 = 1.0;
  };
  float tmpvar_88;
  if (tmpvar_84.z) {
    tmpvar_88 = tmpvar_85.z;
  } else {
    tmpvar_88 = 1.0;
  };
  float tmpvar_89;
  if (tmpvar_84.w) {
    tmpvar_89 = tmpvar_85.w;
  } else {
    tmpvar_89 = 1.0;
  };
  half4 tmpvar_90;
  tmpvar_90.x = half(tmpvar_86);
  tmpvar_90.y = half(tmpvar_87);
  tmpvar_90.z = half(tmpvar_88);
  tmpvar_90.w = half(tmpvar_89);
  half tmpvar_91;
  tmpvar_91 = dot (tmpvar_90, (half4)float4(0.25, 0.25, 0.25, 0.25));
  tmpvar_69 = float(tmpvar_91);
  half3 lightDir_92;
  lightDir_92 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_93;
  viewDir_93 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_94;
  atten_94 = half(((float)(tmpvar_67.w * tmpvar_68.w) * tmpvar_69));
  half4 c_95;
  half3 tmpvar_96;
  tmpvar_96 = normalize(lightDir_92);
  lightDir_92 = tmpvar_96;
  half3 tmpvar_97;
  tmpvar_97 = normalize(viewDir_93);
  viewDir_93 = tmpvar_97;
  half3 tmpvar_98;
  tmpvar_98 = normalize(normT_4);
  half tmpvar_99;
  tmpvar_99 = dot (tmpvar_98, tmpvar_96);
  float tmpvar_100;
  half tmpvar_101;
  tmpvar_101 = clamp (dot (normalize(
    (tmpvar_96 + tmpvar_97)
  ), tmpvar_98), (half)0.0, (half)1.0);
  tmpvar_100 = float(tmpvar_101);
  float3 tmpvar_102;
  tmpvar_102 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_99) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_100, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_94 * (half)4.0));
  c_95.xyz = half3(tmpvar_102);
  c_95.w = (tmpvar_99 * (atten_94 * (half)4.0));
  float3 tmpvar_103;
  tmpvar_103 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_104;
  lightDir_104 = half3(tmpvar_103);
  half3 normal_105;
  normal_105 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_106;
  tmpvar_106 = dot (normal_105, lightDir_104);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_95 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_106)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_106)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_107;
  tmpvar_107 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_107;
  tmpvar_1 = tmpvar_107;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 318 math, 5 textures, 12 branches
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [_BumpMap] 2D 1
SetTexture 2 [_CityOverlayTex] 2D 2
SetTexture 3 [_CityDarkOverlayDetailTex] 2D 3
SetTexture 4 [_CityLightOverlayDetailTex] 2D 4
ConstBuffer "$Globals" 60
VectorHalf 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightShadowData]
VectorHalf 32 [_LightColor0] 4
Float 40 [_SpecularPower]
VectorHalf 48 [_SpecularColor] 4
Float 56 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::less);
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float4 xlv_TEXCOORD6;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  float4 _LightShadowData;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   depth2d<float> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> _BumpMap [[texture(1)]], sampler _mtlsmp__BumpMap [[sampler(1)]]
  ,   texture2d<half> _CityOverlayTex [[texture(2)]], sampler _mtlsmp__CityOverlayTex [[sampler(2)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(3)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(3)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(4)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half3 normT_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half3 tmpvar_15;
  half4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * (half)2.0) - (half)1.0);
  normT_4 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * rsqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_21;
  tmpvar_21 = dfdx(tmpvar_17.xz);
  float2 tmpvar_22;
  tmpvar_22 = dfdy(tmpvar_17.xz);
  float4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dfdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dfdy(uv_18.y);
  half4 tmpvar_24;
  tmpvar_24 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_18), gradient2d((float2)(tmpvar_23.xy), (float2)(tmpvar_23.zw)));
  half4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  half4 tmpvar_26;
  half3 detailCoords_27;
  half nylerp_28;
  half zxlerp_29;
  float3 tmpvar_30;
  tmpvar_30 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_31;
  float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * rsqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_35;
  tmpvar_35 = dfdx(tmpvar_30.xz);
  float2 tmpvar_36;
  tmpvar_36 = dfdy(tmpvar_30.xz);
  float4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dfdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dfdy(tmpvar_34.y);
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, (float)zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = half(tmpvar_40);
  float3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, (float3)half3(zxlerp_29));
  detailCoords_27 = half3(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, (float3)detailCoords_27, (float3)half3(nylerp_28));
  detailCoords_27 = half3(tmpvar_42);
  half tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  float2 coord_44;
  coord_44 = ((float2)(((half)0.5 * detailCoords_27.zy) / tmpvar_43) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_45;
  tmpvar_45 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_44), gradient2d((float2)(tmpvar_37.xy), (float2)(tmpvar_37.zw)));
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  half4 tmpvar_46;
  half3 detailCoords_47;
  half nylerp_48;
  half zxlerp_49;
  float3 tmpvar_50;
  tmpvar_50 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_51;
  float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * rsqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_55;
  tmpvar_55 = dfdx(tmpvar_50.xz);
  float2 tmpvar_56;
  tmpvar_56 = dfdy(tmpvar_50.xz);
  float4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dfdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dfdy(tmpvar_54.y);
  float3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = half(tmpvar_59);
  float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, (float)zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = half(tmpvar_60);
  float3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, (float3)half3(zxlerp_49));
  detailCoords_47 = half3(tmpvar_61);
  float3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, (float3)detailCoords_47, (float3)half3(nylerp_48));
  detailCoords_47 = half3(tmpvar_62);
  half tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  float2 coord_64;
  coord_64 = ((float2)(((half)0.5 * detailCoords_47.zy) / tmpvar_63) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_65;
  tmpvar_65 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_64), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  half shadow_66;
  half tmpvar_67;
  tmpvar_67 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(_mtl_i.xlv_TEXCOORD6.xyz).xy, (float)(_mtl_i.xlv_TEXCOORD6.xyz).z);
  half tmpvar_68;
  tmpvar_68 = tmpvar_67;
  float tmpvar_69;
  tmpvar_69 = (_mtl_u._LightShadowData.x + ((float)tmpvar_68 * (1.0 - _mtl_u._LightShadowData.x)));
  shadow_66 = half(tmpvar_69);
  half3 lightDir_70;
  lightDir_70 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_71;
  viewDir_71 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_72;
  atten_72 = shadow_66;
  half4 c_73;
  half3 tmpvar_74;
  tmpvar_74 = normalize(lightDir_70);
  lightDir_70 = tmpvar_74;
  half3 tmpvar_75;
  tmpvar_75 = normalize(viewDir_71);
  viewDir_71 = tmpvar_75;
  half3 tmpvar_76;
  tmpvar_76 = normalize(normT_4);
  half tmpvar_77;
  tmpvar_77 = dot (tmpvar_76, tmpvar_74);
  float tmpvar_78;
  half tmpvar_79;
  tmpvar_79 = clamp (dot (normalize(
    (tmpvar_74 + tmpvar_75)
  ), tmpvar_76), (half)0.0, (half)1.0);
  tmpvar_78 = float(tmpvar_79);
  float3 tmpvar_80;
  tmpvar_80 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_77) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_78, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_72 * (half)4.0));
  c_73.xyz = half3(tmpvar_80);
  c_73.w = (tmpvar_77 * (atten_72 * (half)4.0));
  half3 tmpvar_81;
  tmpvar_81 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_82;
  lightDir_82 = tmpvar_81;
  half3 normal_83;
  normal_83 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_84;
  tmpvar_84 = dot (normal_83, lightDir_82);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_73 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_84)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_84)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_85;
  tmpvar_85 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_85;
  tmpvar_1 = tmpvar_85;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3"
}
SubProgram "metal " {
// Stats: 319 math, 6 textures, 12 branches
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
SetTexture 0 [_ShadowMapTexture] 2D 0
SetTexture 1 [_LightTexture0] 2D 1
SetTexture 2 [_BumpMap] 2D 2
SetTexture 3 [_CityOverlayTex] 2D 3
SetTexture 4 [_CityDarkOverlayDetailTex] 2D 4
SetTexture 5 [_CityLightOverlayDetailTex] 2D 5
ConstBuffer "$Globals" 60
VectorHalf 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightShadowData]
VectorHalf 32 [_LightColor0] 4
Float 40 [_SpecularPower]
VectorHalf 48 [_SpecularColor] 4
Float 56 [_CityOverlayDetailScale]
"metal_fs
#include <metal_stdlib>
using namespace metal;
constexpr sampler _mtl_xl_shadow_sampler(address::clamp_to_edge, filter::linear, compare_func::less);
struct xlatMtlShaderInput {
  float3 xlv_TEXCOORD1;
  float3 xlv_TEXCOORD2;
  float3 xlv_TEXCOORD3;
  float3 xlv_TEXCOORD5;
  float2 xlv_TEXCOORD6;
  float4 xlv_TEXCOORD7;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4 _WorldSpaceLightPos0;
  float4 _LightShadowData;
  half4 _LightColor0;
  float _SpecularPower;
  half4 _SpecularColor;
  float _CityOverlayDetailScale;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   depth2d<float> _ShadowMapTexture [[texture(0)]], sampler _mtlsmp__ShadowMapTexture [[sampler(0)]]
  ,   texture2d<half> _LightTexture0 [[texture(1)]], sampler _mtlsmp__LightTexture0 [[sampler(1)]]
  ,   texture2d<half> _BumpMap [[texture(2)]], sampler _mtlsmp__BumpMap [[sampler(2)]]
  ,   texture2d<half> _CityOverlayTex [[texture(3)]], sampler _mtlsmp__CityOverlayTex [[sampler(3)]]
  ,   texture2d<half> _CityDarkOverlayDetailTex [[texture(4)]], sampler _mtlsmp__CityDarkOverlayDetailTex [[sampler(4)]]
  ,   texture2d<half> _CityLightOverlayDetailTex [[texture(5)]], sampler _mtlsmp__CityLightOverlayDetailTex [[sampler(5)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 tmpvar_1;
  half4 citylightoverlaydetail_2;
  half4 citydarkoverlaydetail_3;
  half3 normT_4;
  half4 color_5;
  float3 tmpvar_6;
  tmpvar_6 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_7;
  float tmpvar_8;
  if ((abs(tmpvar_6.z) > (1e-08 * abs(tmpvar_6.x)))) {
    float tmpvar_9;
    tmpvar_9 = (tmpvar_6.x / tmpvar_6.z);
    tmpvar_8 = (tmpvar_9 * rsqrt((
      (tmpvar_9 * tmpvar_9)
     + 1.0)));
    tmpvar_8 = (sign(tmpvar_8) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_8)))
     * 
      (1.5708 + (abs(tmpvar_8) * (-0.214602 + (
        abs(tmpvar_8)
       * 
        (0.0865667 + (abs(tmpvar_8) * -0.0310296))
      ))))
    )));
    if ((tmpvar_6.z < 0.0)) {
      if ((tmpvar_6.x >= 0.0)) {
        tmpvar_8 += 3.14159;
      } else {
        tmpvar_8 = (tmpvar_8 - 3.14159);
      };
    };
  } else {
    tmpvar_8 = (sign(tmpvar_6.x) * 1.5708);
  };
  uv_7.x = (0.5 + (0.159155 * tmpvar_8));
  uv_7.y = (0.31831 * (1.5708 - (
    sign(tmpvar_6.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_6.y)
    )) * (1.5708 + (
      abs(tmpvar_6.y)
     * 
      (-0.214602 + (abs(tmpvar_6.y) * (0.0865667 + (
        abs(tmpvar_6.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_10;
  tmpvar_10 = dfdx(tmpvar_6.xz);
  float2 tmpvar_11;
  tmpvar_11 = dfdy(tmpvar_6.xz);
  float4 tmpvar_12;
  tmpvar_12.x = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_12.y = dfdx(uv_7.y);
  tmpvar_12.z = (0.159155 * sqrt(dot (tmpvar_11, tmpvar_11)));
  tmpvar_12.w = dfdy(uv_7.y);
  half4 tmpvar_13;
  tmpvar_13 = _BumpMap.sample(_mtlsmp__BumpMap, (float2)(uv_7), gradient2d((float2)(tmpvar_12.xy), (float2)(tmpvar_12.zw)));
  half4 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  half3 tmpvar_15;
  half4 packednormal_16;
  packednormal_16 = tmpvar_14;
  tmpvar_15 = ((packednormal_16.xyz * (half)2.0) - (half)1.0);
  normT_4 = tmpvar_15;
  float3 tmpvar_17;
  tmpvar_17 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_18;
  float tmpvar_19;
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_17.x)))) {
    float tmpvar_20;
    tmpvar_20 = (tmpvar_17.x / tmpvar_17.z);
    tmpvar_19 = (tmpvar_20 * rsqrt((
      (tmpvar_20 * tmpvar_20)
     + 1.0)));
    tmpvar_19 = (sign(tmpvar_19) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_19)))
     * 
      (1.5708 + (abs(tmpvar_19) * (-0.214602 + (
        abs(tmpvar_19)
       * 
        (0.0865667 + (abs(tmpvar_19) * -0.0310296))
      ))))
    )));
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_17.x >= 0.0)) {
        tmpvar_19 += 3.14159;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.14159);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_17.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * tmpvar_19));
  uv_18.y = (0.31831 * (1.5708 - (
    sign(tmpvar_17.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_17.y)
    )) * (1.5708 + (
      abs(tmpvar_17.y)
     * 
      (-0.214602 + (abs(tmpvar_17.y) * (0.0865667 + (
        abs(tmpvar_17.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_21;
  tmpvar_21 = dfdx(tmpvar_17.xz);
  float2 tmpvar_22;
  tmpvar_22 = dfdy(tmpvar_17.xz);
  float4 tmpvar_23;
  tmpvar_23.x = (0.159155 * sqrt(dot (tmpvar_21, tmpvar_21)));
  tmpvar_23.y = dfdx(uv_18.y);
  tmpvar_23.z = (0.159155 * sqrt(dot (tmpvar_22, tmpvar_22)));
  tmpvar_23.w = dfdy(uv_18.y);
  half4 tmpvar_24;
  tmpvar_24 = _CityOverlayTex.sample(_mtlsmp__CityOverlayTex, (float2)(uv_18), gradient2d((float2)(tmpvar_23.xy), (float2)(tmpvar_23.zw)));
  half4 tmpvar_25;
  tmpvar_25 = tmpvar_24;
  half4 tmpvar_26;
  half3 detailCoords_27;
  half nylerp_28;
  half zxlerp_29;
  float3 tmpvar_30;
  tmpvar_30 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_31;
  float tmpvar_32;
  if ((abs(tmpvar_30.z) > (1e-08 * abs(tmpvar_30.x)))) {
    float tmpvar_33;
    tmpvar_33 = (tmpvar_30.x / tmpvar_30.z);
    tmpvar_32 = (tmpvar_33 * rsqrt((
      (tmpvar_33 * tmpvar_33)
     + 1.0)));
    tmpvar_32 = (sign(tmpvar_32) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_32)))
     * 
      (1.5708 + (abs(tmpvar_32) * (-0.214602 + (
        abs(tmpvar_32)
       * 
        (0.0865667 + (abs(tmpvar_32) * -0.0310296))
      ))))
    )));
    if ((tmpvar_30.z < 0.0)) {
      if ((tmpvar_30.x >= 0.0)) {
        tmpvar_32 += 3.14159;
      } else {
        tmpvar_32 = (tmpvar_32 - 3.14159);
      };
    };
  } else {
    tmpvar_32 = (sign(tmpvar_30.x) * 1.5708);
  };
  uv_31.x = (0.5 + (0.159155 * tmpvar_32));
  uv_31.y = (0.31831 * (1.5708 - (
    sign(tmpvar_30.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_30.y)
    )) * (1.5708 + (
      abs(tmpvar_30.y)
     * 
      (-0.214602 + (abs(tmpvar_30.y) * (0.0865667 + (
        abs(tmpvar_30.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_34;
  tmpvar_34 = ((uv_31 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_35;
  tmpvar_35 = dfdx(tmpvar_30.xz);
  float2 tmpvar_36;
  tmpvar_36 = dfdy(tmpvar_30.xz);
  float4 tmpvar_37;
  tmpvar_37.x = (0.159155 * sqrt(dot (tmpvar_35, tmpvar_35)));
  tmpvar_37.y = dfdx(tmpvar_34.y);
  tmpvar_37.z = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_37.w = dfdy(tmpvar_34.y);
  float3 tmpvar_38;
  tmpvar_38 = abs(tmpvar_30);
  float tmpvar_39;
  tmpvar_39 = float((tmpvar_38.z >= tmpvar_38.x));
  zxlerp_29 = half(tmpvar_39);
  float tmpvar_40;
  tmpvar_40 = float((mix (tmpvar_38.x, tmpvar_38.z, (float)zxlerp_29) >= tmpvar_38.y));
  nylerp_28 = half(tmpvar_40);
  float3 tmpvar_41;
  tmpvar_41 = mix (tmpvar_38, tmpvar_38.zxy, (float3)half3(zxlerp_29));
  detailCoords_27 = half3(tmpvar_41);
  float3 tmpvar_42;
  tmpvar_42 = mix (tmpvar_38.yxz, (float3)detailCoords_27, (float3)half3(nylerp_28));
  detailCoords_27 = half3(tmpvar_42);
  half tmpvar_43;
  tmpvar_43 = abs(detailCoords_27.x);
  float2 coord_44;
  coord_44 = ((float2)(((half)0.5 * detailCoords_27.zy) / tmpvar_43) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_45;
  tmpvar_45 = _CityDarkOverlayDetailTex.sample(_mtlsmp__CityDarkOverlayDetailTex, (float2)(coord_44), gradient2d((float2)(tmpvar_37.xy), (float2)(tmpvar_37.zw)));
  tmpvar_26 = tmpvar_45;
  citydarkoverlaydetail_3 = tmpvar_26;
  half4 tmpvar_46;
  half3 detailCoords_47;
  half nylerp_48;
  half zxlerp_49;
  float3 tmpvar_50;
  tmpvar_50 = normalize(_mtl_i.xlv_TEXCOORD2);
  float2 uv_51;
  float tmpvar_52;
  if ((abs(tmpvar_50.z) > (1e-08 * abs(tmpvar_50.x)))) {
    float tmpvar_53;
    tmpvar_53 = (tmpvar_50.x / tmpvar_50.z);
    tmpvar_52 = (tmpvar_53 * rsqrt((
      (tmpvar_53 * tmpvar_53)
     + 1.0)));
    tmpvar_52 = (sign(tmpvar_52) * (1.5708 - (
      sqrt((1.0 - abs(tmpvar_52)))
     * 
      (1.5708 + (abs(tmpvar_52) * (-0.214602 + (
        abs(tmpvar_52)
       * 
        (0.0865667 + (abs(tmpvar_52) * -0.0310296))
      ))))
    )));
    if ((tmpvar_50.z < 0.0)) {
      if ((tmpvar_50.x >= 0.0)) {
        tmpvar_52 += 3.14159;
      } else {
        tmpvar_52 = (tmpvar_52 - 3.14159);
      };
    };
  } else {
    tmpvar_52 = (sign(tmpvar_50.x) * 1.5708);
  };
  uv_51.x = (0.5 + (0.159155 * tmpvar_52));
  uv_51.y = (0.31831 * (1.5708 - (
    sign(tmpvar_50.y)
   * 
    (1.5708 - (sqrt((1.0 - 
      abs(tmpvar_50.y)
    )) * (1.5708 + (
      abs(tmpvar_50.y)
     * 
      (-0.214602 + (abs(tmpvar_50.y) * (0.0865667 + (
        abs(tmpvar_50.y)
       * -0.0310296))))
    ))))
  )));
  float2 tmpvar_54;
  tmpvar_54 = ((uv_51 * 4.0) * _mtl_u._CityOverlayDetailScale);
  float2 tmpvar_55;
  tmpvar_55 = dfdx(tmpvar_50.xz);
  float2 tmpvar_56;
  tmpvar_56 = dfdy(tmpvar_50.xz);
  float4 tmpvar_57;
  tmpvar_57.x = (0.159155 * sqrt(dot (tmpvar_55, tmpvar_55)));
  tmpvar_57.y = dfdx(tmpvar_54.y);
  tmpvar_57.z = (0.159155 * sqrt(dot (tmpvar_56, tmpvar_56)));
  tmpvar_57.w = dfdy(tmpvar_54.y);
  float3 tmpvar_58;
  tmpvar_58 = abs(tmpvar_50);
  float tmpvar_59;
  tmpvar_59 = float((tmpvar_58.z >= tmpvar_58.x));
  zxlerp_49 = half(tmpvar_59);
  float tmpvar_60;
  tmpvar_60 = float((mix (tmpvar_58.x, tmpvar_58.z, (float)zxlerp_49) >= tmpvar_58.y));
  nylerp_48 = half(tmpvar_60);
  float3 tmpvar_61;
  tmpvar_61 = mix (tmpvar_58, tmpvar_58.zxy, (float3)half3(zxlerp_49));
  detailCoords_47 = half3(tmpvar_61);
  float3 tmpvar_62;
  tmpvar_62 = mix (tmpvar_58.yxz, (float3)detailCoords_47, (float3)half3(nylerp_48));
  detailCoords_47 = half3(tmpvar_62);
  half tmpvar_63;
  tmpvar_63 = abs(detailCoords_47.x);
  float2 coord_64;
  coord_64 = ((float2)(((half)0.5 * detailCoords_47.zy) / tmpvar_63) * _mtl_u._CityOverlayDetailScale);
  half4 tmpvar_65;
  tmpvar_65 = _CityLightOverlayDetailTex.sample(_mtlsmp__CityLightOverlayDetailTex, (float2)(coord_64), gradient2d((float2)(tmpvar_57.xy), (float2)(tmpvar_57.zw)));
  tmpvar_46 = tmpvar_65;
  citylightoverlaydetail_2.xyz = tmpvar_46.xyz;
  citydarkoverlaydetail_3.w = (tmpvar_26.w * tmpvar_25.w);
  citylightoverlaydetail_2.w = (tmpvar_46.w * tmpvar_25.w);
  color_5.xyz = mix ((half3)float3(0.0, 0.0, 0.0), tmpvar_46.xyz, citylightoverlaydetail_2.www);
  color_5.w = half(0.0);
  half4 tmpvar_66;
  tmpvar_66 = _LightTexture0.sample(_mtlsmp__LightTexture0, (float2)(_mtl_i.xlv_TEXCOORD6));
  half shadow_67;
  half tmpvar_68;
  tmpvar_68 = _ShadowMapTexture.sample_compare(_mtl_xl_shadow_sampler, (float2)(_mtl_i.xlv_TEXCOORD7.xyz).xy, (float)(_mtl_i.xlv_TEXCOORD7.xyz).z);
  half tmpvar_69;
  tmpvar_69 = tmpvar_68;
  float tmpvar_70;
  tmpvar_70 = (_mtl_u._LightShadowData.x + ((float)tmpvar_69 * (1.0 - _mtl_u._LightShadowData.x)));
  shadow_67 = half(tmpvar_70);
  half3 lightDir_71;
  lightDir_71 = half3(_mtl_i.xlv_TEXCOORD5);
  half3 viewDir_72;
  viewDir_72 = half3(_mtl_i.xlv_TEXCOORD1);
  half atten_73;
  atten_73 = (tmpvar_66.w * shadow_67);
  half4 c_74;
  half3 tmpvar_75;
  tmpvar_75 = normalize(lightDir_71);
  lightDir_71 = tmpvar_75;
  half3 tmpvar_76;
  tmpvar_76 = normalize(viewDir_72);
  viewDir_72 = tmpvar_76;
  half3 tmpvar_77;
  tmpvar_77 = normalize(normT_4);
  half tmpvar_78;
  tmpvar_78 = dot (tmpvar_77, tmpvar_75);
  float tmpvar_79;
  half tmpvar_80;
  tmpvar_80 = clamp (dot (normalize(
    (tmpvar_75 + tmpvar_76)
  ), tmpvar_77), (half)0.0, (half)1.0);
  tmpvar_79 = float(tmpvar_80);
  float3 tmpvar_81;
  tmpvar_81 = (((float3)(
    (color_5.xyz * _mtl_u._LightColor0.xyz)
   * tmpvar_78) + ((float3)
    (_mtl_u._LightColor0.xyz * _mtl_u._SpecularColor.xyz)
   * 
    (pow (tmpvar_79, _mtl_u._SpecularPower) * (float)_mtl_u._SpecularColor.w)
  )) * (float)(atten_73 * (half)4.0));
  c_74.xyz = half3(tmpvar_81);
  c_74.w = (tmpvar_78 * (atten_73 * (half)4.0));
  half3 tmpvar_82;
  tmpvar_82 = normalize(_mtl_u._WorldSpaceLightPos0).xyz;
  half3 lightDir_83;
  lightDir_83 = tmpvar_82;
  half3 normal_84;
  normal_84 = half3(_mtl_i.xlv_TEXCOORD3);
  half tmpvar_85;
  tmpvar_85 = dot (normal_84, lightDir_83);
  citydarkoverlaydetail_3.w = (citydarkoverlaydetail_3.w * ((half)1.0 - clamp (
    (c_74 * mix ((half)1.0, clamp (floor(
      ((half)1.01 + tmpvar_85)
    ), (half)0.0, (half)1.0), clamp (((half)10.0 * 
      -(tmpvar_85)
    ), (half)0.0, (half)1.0)))
  .w, (half)0.0, (half)1.0)));
  half4 tmpvar_86;
  tmpvar_86 = mix (citylightoverlaydetail_2, citydarkoverlaydetail_3, citydarkoverlaydetail_3.wwww);
  color_5 = tmpvar_86;
  tmpvar_1 = tmpvar_86;
  _mtl_o._glesFragData_0 = tmpvar_1;
  return _mtl_o;
}

"
}
}
 }
}
}