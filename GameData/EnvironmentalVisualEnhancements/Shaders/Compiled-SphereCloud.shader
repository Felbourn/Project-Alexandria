Shader "EVE/Cloud" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		_FalloffPow ("Falloff Power", Range(0,3)) = 2
		_FalloffScale ("Falloff Scale", Range(0,20)) = 3
		_DetailScale ("Detail Scale", Range(0,100)) = 100
		_DetailDist ("Detail Distance", Range(0,1)) = 0.00875
		_MinLight ("Minimum Light", Range(0,1)) = .5
		_DistFade ("Fade Distance", Range(0,100)) = 10
		_DistFadeVert ("Fade Scale", Range(0,1)) = .002
		_RimDist ("Rim Distance", Range(0,1)) = 1
		_RimDistSub ("Rim Distance Sub", Range(0,2)) = 1.01
		_InvFade ("Soft Particles Factor", Range(0.01,3.0)) = .01
		_OceanRadius ("Ocean Radius", Float) = 63000
	  	_PlanetOrigin ("Sphere Center", Vector) = (0,0,0,1)
		
	}

Category {
	
	Tags { "Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent" }
	Blend SrcAlpha OneMinusSrcAlpha
	Fog { Mode Global}
	AlphaTest Greater 0
	ColorMask RGB
	Cull Off Lighting On ZWrite Off
	
SubShader {
	Pass {

		Lighting On
		Tags { "LightMode"="ForwardBase"}
		
		Program "vp" {
// Vertex combos: 60
//   d3d9 - ALU: 30 to 48
//   d3d11 - ALU: 25 to 45, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjdopacgankbmpmdhodakkgmilpellmjkabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 517
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 510
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 487
uniform sampler2D _MainTex;
#line 495
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 499
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 503
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 507
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 530
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 530
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 534
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 538
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 542
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 517
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 510
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 487
uniform sampler2D _MainTex;
#line 495
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 499
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 503
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 507
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 530
#line 458
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 462
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 399
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 403
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 408
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 412
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 446
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 450
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 454
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 425
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 429
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 544
lowp vec4 frag( in v2f IN ) {
    #line 546
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 550
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 554
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 558
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 562
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_2.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_3);
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((tmpvar_2.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 256 // 252 used size, 18 vars
Matrix 48 [_MainRotation] 4
Matrix 112 [_DetailRotation] 4
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedlaokdemmdgfaghecnejaclgignbehnefabaaaaaaniafaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaneaaaaaaaiaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcemaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaa
baaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaa
egiccaaaaaaaaaaaapaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaeaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaafaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
agaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaahaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaakaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_3);
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((tmpvar_2.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_3);
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((tmpvar_2.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 514
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 507
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 393
#line 397
#line 406
#line 414
#line 423
#line 431
#line 444
#line 456
#line 472
#line 484
uniform sampler2D _MainTex;
#line 492
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 496
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 500
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 504
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 526
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 526
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 530
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 534
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 538
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 514
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 507
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 393
#line 397
#line 406
#line 414
#line 423
#line 431
#line 444
#line 456
#line 472
#line 484
uniform sampler2D _MainTex;
#line 492
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 496
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 500
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 504
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 526
#line 456
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 460
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 397
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 401
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 406
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 410
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 444
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 448
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 452
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 423
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 427
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 540
lowp vec4 frag( in v2f IN ) {
    #line 542
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 546
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 550
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 554
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 558
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednpgflnhfoeckphdgmmmegfmnkcbbghpfabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 526
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 519
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 404
#line 408
#line 417
#line 425
#line 434
#line 442
#line 455
#line 467
#line 483
#line 496
uniform sampler2D _MainTex;
#line 504
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 508
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 512
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 516
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 539
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 539
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 543
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 547
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 551
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 526
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 519
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 404
#line 408
#line 417
#line 425
#line 434
#line 442
#line 455
#line 467
#line 483
#line 496
uniform sampler2D _MainTex;
#line 504
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 508
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 512
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 516
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 539
#line 467
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 471
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 408
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 412
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 417
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 421
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 455
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 459
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 463
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 434
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 438
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 553
lowp vec4 frag( in v2f IN ) {
    #line 555
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 559
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 563
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 567
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 571
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjdopacgankbmpmdhodakkgmilpellmjkabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 518
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 511
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 396
#line 400
#line 409
#line 417
#line 426
#line 434
#line 447
#line 459
#line 475
#line 488
uniform sampler2D _MainTex;
#line 496
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 500
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 504
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 508
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 531
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 531
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 535
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 539
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 543
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 518
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 511
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 396
#line 400
#line 409
#line 417
#line 426
#line 434
#line 447
#line 459
#line 475
#line 488
uniform sampler2D _MainTex;
#line 496
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 500
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 504
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 508
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 531
#line 459
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 463
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 400
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 404
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 409
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 413
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 447
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 451
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 455
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 426
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 430
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 545
lowp vec4 frag( in v2f IN ) {
    #line 547
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 551
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 555
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 559
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 563
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedinfhlpgjmolfogngfogfledgoccpcacdabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 516
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 509
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 486
uniform sampler2D _MainTex;
#line 494
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 498
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 502
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 506
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 529
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 529
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 533
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 537
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 541
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 516
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 509
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 486
uniform sampler2D _MainTex;
#line 494
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 498
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 502
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 506
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 529
#line 458
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 462
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 399
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 403
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 408
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 412
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 446
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 450
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 454
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 425
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 429
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 543
lowp vec4 frag( in v2f IN ) {
    #line 545
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 549
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 553
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 557
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 561
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedddcdlkkcdipnnnjmmemaiabdoonoacfiabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 532
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 525
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 410
#line 414
#line 423
#line 431
#line 440
#line 448
#line 461
#line 473
#line 489
#line 502
uniform sampler2D _MainTex;
#line 510
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 514
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 518
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 522
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 546
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 546
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 550
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 554
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 558
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 532
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 525
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 410
#line 414
#line 423
#line 431
#line 440
#line 448
#line 461
#line 473
#line 489
#line 502
uniform sampler2D _MainTex;
#line 510
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 514
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 518
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 522
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 546
#line 473
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 477
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 414
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 418
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 423
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 427
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 461
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 465
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 469
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 440
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 444
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 560
lowp vec4 frag( in v2f IN ) {
    #line 562
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 566
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 570
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 574
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 578
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedddcdlkkcdipnnnjmmemaiabdoonoacfiabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 533
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 526
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 411
#line 415
#line 424
#line 432
#line 441
#line 449
#line 462
#line 474
#line 490
#line 503
uniform sampler2D _MainTex;
#line 511
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 515
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 519
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 523
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 547
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 547
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 551
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 555
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 559
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 533
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 526
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 411
#line 415
#line 424
#line 432
#line 441
#line 449
#line 462
#line 474
#line 490
#line 503
uniform sampler2D _MainTex;
#line 511
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 515
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 519
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 523
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 547
#line 474
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 478
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 415
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 419
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 424
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 428
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 462
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 466
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 470
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 441
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 445
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 561
lowp vec4 frag( in v2f IN ) {
    #line 563
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 567
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 571
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 575
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 579
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednpgflnhfoeckphdgmmmegfmnkcbbghpfabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 522
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 515
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 401
#line 405
#line 414
#line 422
#line 431
#line 439
#line 452
#line 464
#line 480
#line 492
uniform sampler2D _MainTex;
#line 500
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 504
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 508
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 512
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 535
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 535
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 539
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 543
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 547
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 522
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 515
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 401
#line 405
#line 414
#line 422
#line 431
#line 439
#line 452
#line 464
#line 480
#line 492
uniform sampler2D _MainTex;
#line 500
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 504
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 508
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 512
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 535
#line 464
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 468
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 405
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 409
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 414
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 418
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 452
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 456
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 460
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 431
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 435
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 549
lowp vec4 frag( in v2f IN ) {
    #line 551
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 555
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 559
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 563
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 567
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Matrix 176 [_MainRotation] 4
Matrix 240 [_DetailRotation] 4
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhcppkinpliajlonhjccinfgmohedhlekabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaabaaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaapaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 524
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 517
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 403
#line 407
#line 416
#line 424
#line 433
#line 441
#line 454
#line 466
#line 482
#line 494
uniform sampler2D _MainTex;
#line 502
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 506
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 510
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 514
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 538
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 538
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 542
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 546
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 550
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 524
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 517
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 403
#line 407
#line 416
#line 424
#line 433
#line 441
#line 454
#line 466
#line 482
#line 494
uniform sampler2D _MainTex;
#line 502
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 506
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 510
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 514
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 538
#line 466
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 470
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 407
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 411
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 416
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 420
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 454
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 458
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 462
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 433
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 437
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 552
lowp vec4 frag( in v2f IN ) {
    #line 554
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 558
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 562
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 566
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 570
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 530
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 523
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 408
#line 412
#line 421
#line 429
#line 438
#line 446
#line 459
#line 471
#line 487
#line 500
uniform sampler2D _MainTex;
#line 508
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 512
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 516
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 520
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 544
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 544
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 548
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 552
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 556
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 530
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 523
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 408
#line 412
#line 421
#line 429
#line 438
#line 446
#line 459
#line 471
#line 487
#line 500
uniform sampler2D _MainTex;
#line 508
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 512
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 516
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 520
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 544
#line 471
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 475
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 412
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 416
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 421
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 425
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 459
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 463
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 467
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 438
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 442
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 558
lowp vec4 frag( in v2f IN ) {
    #line 560
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 564
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 568
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 572
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 576
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 531
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 524
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 409
#line 413
#line 422
#line 430
#line 439
#line 447
#line 460
#line 472
#line 488
#line 501
uniform sampler2D _MainTex;
#line 509
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 513
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 517
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 521
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 545
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 545
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 549
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 553
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 557
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 531
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 524
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 409
#line 413
#line 422
#line 430
#line 439
#line 447
#line 460
#line 472
#line 488
#line 501
uniform sampler2D _MainTex;
#line 509
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 513
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 517
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 521
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 545
#line 472
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 476
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 413
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 417
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 422
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 426
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 460
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 464
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 468
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 439
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 443
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 559
lowp vec4 frag( in v2f IN ) {
    #line 561
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 565
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 569
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 573
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 577
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Matrix 176 [_MainRotation] 4
Matrix 240 [_DetailRotation] 4
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkiakkliaijpneaigabcpklbconhccfgnabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaabaaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaapaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 554
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 558
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 562
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 566
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 481
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 485
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 422
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 426
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 431
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 435
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 469
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 473
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 477
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 448
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 452
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 568
lowp vec4 frag( in v2f IN ) {
    #line 570
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 574
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 578
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 582
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 586
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Matrix 176 [_MainRotation] 4
Matrix 240 [_DetailRotation] 4
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkiakkliaijpneaigabcpklbconhccfgnabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaabaaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaapaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 554
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 558
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 562
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 566
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 481
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 485
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 422
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 426
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 431
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 435
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 469
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 473
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 477
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 448
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 452
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 568
lowp vec4 frag( in v2f IN ) {
    #line 570
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 574
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 578
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 582
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 586
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 536
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 529
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 414
#line 418
#line 427
#line 435
#line 444
#line 452
#line 465
#line 477
#line 493
#line 506
uniform sampler2D _MainTex;
#line 514
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 518
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 522
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 526
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 550
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 550
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 554
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 558
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 562
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 536
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 529
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 414
#line 418
#line 427
#line 435
#line 444
#line 452
#line 465
#line 477
#line 493
#line 506
uniform sampler2D _MainTex;
#line 514
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 518
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 522
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 526
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 550
#line 477
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 481
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 418
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 422
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 427
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 431
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 465
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 469
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 473
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 444
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 448
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 564
lowp vec4 frag( in v2f IN ) {
    #line 566
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 570
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 574
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 578
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 582
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float detailLevel_5;
  mediump vec4 color_6;
  mediump vec4 tex_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_9;
  highp float r_10;
  if ((abs(tmpvar_8.z) > (1e-08 * abs(tmpvar_8.x)))) {
    highp float y_over_x_11;
    y_over_x_11 = (tmpvar_8.x / tmpvar_8.z);
    highp float s_12;
    highp float x_13;
    x_13 = (y_over_x_11 * inversesqrt(((y_over_x_11 * y_over_x_11) + 1.0)));
    s_12 = (sign(x_13) * (1.5708 - (sqrt((1.0 - abs(x_13))) * (1.5708 + (abs(x_13) * (-0.214602 + (abs(x_13) * (0.0865667 + (abs(x_13) * -0.0310296)))))))));
    r_10 = s_12;
    if ((tmpvar_8.z < 0.0)) {
      if ((tmpvar_8.x >= 0.0)) {
        r_10 = (s_12 + 3.14159);
      } else {
        r_10 = (r_10 - 3.14159);
      };
    };
  } else {
    r_10 = (sign(tmpvar_8.x) * 1.5708);
  };
  uv_9.x = (0.5 + (0.159155 * r_10));
  uv_9.y = (0.31831 * (1.5708 - (sign(tmpvar_8.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_8.y))) * (1.5708 + (abs(tmpvar_8.y) * (-0.214602 + (abs(tmpvar_8.y) * (0.0865667 + (abs(tmpvar_8.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_14;
  tmpvar_14 = dFdx(tmpvar_8.xz);
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdy(tmpvar_8.xz);
  highp vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(uv_9.y);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(uv_9.y);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2DGradEXT (_MainTex, uv_9, tmpvar_16.xy, tmpvar_16.zw);
  tex_7 = tmpvar_17;
  mediump vec4 tmpvar_18;
  mediump vec3 detailCoords_19;
  mediump float nylerp_20;
  mediump float zxlerp_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_23;
  highp float r_24;
  if ((abs(tmpvar_22.z) > (1e-08 * abs(tmpvar_22.x)))) {
    highp float y_over_x_25;
    y_over_x_25 = (tmpvar_22.x / tmpvar_22.z);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((tmpvar_22.z < 0.0)) {
      if ((tmpvar_22.x >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(tmpvar_22.x) * 1.5708);
  };
  uv_23.x = (0.5 + (0.159155 * r_24));
  uv_23.y = (0.31831 * (1.5708 - (sign(tmpvar_22.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_22.y))) * (1.5708 + (abs(tmpvar_22.y) * (-0.214602 + (abs(tmpvar_22.y) * (0.0865667 + (abs(tmpvar_22.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = ((uv_23 * 4.0) * _DetailScale);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(tmpvar_22.xz);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(tmpvar_22.xz);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28.y);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28.y);
  highp vec3 tmpvar_32;
  tmpvar_32 = abs(tmpvar_22);
  highp float tmpvar_33;
  tmpvar_33 = float((tmpvar_32.z >= tmpvar_32.x));
  zxlerp_21 = tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = float((mix (tmpvar_32.x, tmpvar_32.z, zxlerp_21) >= tmpvar_32.y));
  nylerp_20 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_32, tmpvar_32.zxy, vec3(zxlerp_21));
  detailCoords_19 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_32.yxz, detailCoords_19, vec3(nylerp_20));
  detailCoords_19 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = abs(detailCoords_19.x);
  highp vec2 coord_38;
  coord_38 = (((0.5 * detailCoords_19.zy) / tmpvar_37) * _DetailScale);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_DetailTex, coord_38, tmpvar_31.xy, tmpvar_31.zw);
  tmpvar_18 = tmpvar_39;
  highp vec3 p_40;
  p_40 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_41;
  tmpvar_41 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_40, p_40))), 0.0, 1.0);
  detailLevel_5 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = ((_Color * tex_7) * mix (tmpvar_18, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_5)));
  highp float tmpvar_43;
  highp vec3 p_44;
  p_44 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_43 = sqrt(dot (p_44, p_44));
  highp vec3 p_45;
  p_45 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_47;
  tmpvar_47 = mix (0.0, tmpvar_42.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_43), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_43)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_45, p_45)) - (_RimDistSub * sqrt(dot (p_46, p_46))))), 0.0, 1.0)));
  color_6.w = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  color_6.xyz = (tmpvar_42.xyz * tmpvar_52);
  tmpvar_1 = color_6;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 537
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 530
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 415
#line 419
#line 428
#line 436
#line 445
#line 453
#line 466
#line 478
#line 494
#line 507
uniform sampler2D _MainTex;
#line 515
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 519
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 523
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 527
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 551
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 551
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 555
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 559
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 563
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 537
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 530
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 415
#line 419
#line 428
#line 436
#line 445
#line 453
#line 466
#line 478
#line 494
#line 507
uniform sampler2D _MainTex;
#line 515
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 519
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 523
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 527
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 551
#line 478
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 482
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 419
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 423
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 428
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 432
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 466
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 470
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 474
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 445
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 449
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 565
lowp vec4 frag( in v2f IN ) {
    #line 567
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 571
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 575
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 579
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 583
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjdopacgankbmpmdhodakkgmilpellmjkabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 517
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 510
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 487
uniform sampler2D _MainTex;
#line 495
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 499
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 503
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 507
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 530
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 530
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 534
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 538
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 542
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 517
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 510
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 487
uniform sampler2D _MainTex;
#line 495
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 499
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 503
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 507
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 530
#line 458
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 462
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 399
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 403
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 408
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 412
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 446
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 450
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 454
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 425
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 429
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 544
lowp vec4 frag( in v2f IN ) {
    #line 546
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 550
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 554
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 558
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 562
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 566
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 570
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 574
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_2.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_3);
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((tmpvar_2.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 256 // 252 used size, 18 vars
Matrix 48 [_MainRotation] 4
Matrix 112 [_DetailRotation] 4
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedlaokdemmdgfaghecnejaclgignbehnefabaaaaaaniafaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaneaaaaaaaiaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcemaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaa
baaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagiaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpccabaaaaaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaa
dgaaaaafhccabaaaabaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaa
egiccaaaaaaaaaaaapaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaeaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaafaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
agaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaa
fgafbaiaebaaaaaaabaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaalpcaabaaa
acaaaaaaegiocaaaaaaaaaaaahaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaa
acaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgakbaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaakaaaaaapgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egacbaaaaaaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
aaaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaa
egacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_3);
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((tmpvar_2.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  lowp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_2.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_3);
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = normalize((tmpvar_2.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  lowp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 514
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 507
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 393
#line 397
#line 406
#line 414
#line 423
#line 431
#line 444
#line 456
#line 472
#line 484
uniform sampler2D _MainTex;
#line 492
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 496
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 500
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 504
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 526
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 526
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 530
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 534
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 538
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 514
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 507
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 393
#line 397
#line 406
#line 414
#line 423
#line 431
#line 444
#line 456
#line 472
#line 484
uniform sampler2D _MainTex;
#line 492
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 496
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 500
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 504
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 526
#line 456
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 460
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 397
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 401
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 406
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 410
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 444
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 448
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 452
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 423
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 427
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 540
lowp vec4 frag( in v2f IN ) {
    #line 542
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 546
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 550
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 554
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 558
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 562
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 566
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 570
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednpgflnhfoeckphdgmmmegfmnkcbbghpfabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 526
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 519
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 404
#line 408
#line 417
#line 425
#line 434
#line 442
#line 455
#line 467
#line 483
#line 496
uniform sampler2D _MainTex;
#line 504
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 508
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 512
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 516
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 539
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 539
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 543
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 547
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 551
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 526
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 519
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 404
#line 408
#line 417
#line 425
#line 434
#line 442
#line 455
#line 467
#line 483
#line 496
uniform sampler2D _MainTex;
#line 504
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 508
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 512
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 516
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 539
#line 467
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 471
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 408
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 412
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 417
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 421
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 455
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 459
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 463
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 434
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 438
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 553
lowp vec4 frag( in v2f IN ) {
    #line 555
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 559
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 563
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 567
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 571
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 575
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 579
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 583
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjdopacgankbmpmdhodakkgmilpellmjkabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 518
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 511
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 396
#line 400
#line 409
#line 417
#line 426
#line 434
#line 447
#line 459
#line 475
#line 488
uniform sampler2D _MainTex;
#line 496
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 500
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 504
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 508
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 531
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 531
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 535
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 539
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 543
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 518
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 511
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 396
#line 400
#line 409
#line 417
#line 426
#line 434
#line 447
#line 459
#line 475
#line 488
uniform sampler2D _MainTex;
#line 496
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 500
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 504
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 508
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 531
#line 459
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 463
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 400
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 404
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 409
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 413
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 447
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 451
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 455
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 426
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 430
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 545
lowp vec4 frag( in v2f IN ) {
    #line 547
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 551
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 555
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 559
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 563
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 567
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 571
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 575
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedinfhlpgjmolfogngfogfledgoccpcacdabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  lowp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  lowp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 516
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 509
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 486
uniform sampler2D _MainTex;
#line 494
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 498
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 502
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 506
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 529
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 529
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 533
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 537
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 541
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 516
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 509
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 486
uniform sampler2D _MainTex;
#line 494
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 498
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 502
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 506
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 529
#line 458
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 462
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 399
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 403
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 408
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 412
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 446
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 450
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 454
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 425
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 429
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 543
lowp vec4 frag( in v2f IN ) {
    #line 545
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 549
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 553
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 557
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 561
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 565
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 569
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 573
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedddcdlkkcdipnnnjmmemaiabdoonoacfiabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 532
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 525
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 410
#line 414
#line 423
#line 431
#line 440
#line 448
#line 461
#line 473
#line 489
#line 502
uniform sampler2D _MainTex;
#line 510
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 514
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 518
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 522
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 546
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 546
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 550
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 554
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 558
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 532
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 525
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 410
#line 414
#line 423
#line 431
#line 440
#line 448
#line 461
#line 473
#line 489
#line 502
uniform sampler2D _MainTex;
#line 510
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 514
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 518
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 522
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 546
#line 473
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 477
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 414
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 418
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 423
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 427
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 461
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 465
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 469
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 440
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 444
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 560
lowp vec4 frag( in v2f IN ) {
    #line 562
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 566
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 570
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 574
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 578
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 582
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 586
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 590
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedddcdlkkcdipnnnjmmemaiabdoonoacfiabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 533
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 526
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 411
#line 415
#line 424
#line 432
#line 441
#line 449
#line 462
#line 474
#line 490
#line 503
uniform sampler2D _MainTex;
#line 511
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 515
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 519
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 523
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 547
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 547
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 551
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 555
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 559
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 533
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 526
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 411
#line 415
#line 424
#line 432
#line 441
#line 449
#line 462
#line 474
#line 490
#line 503
uniform sampler2D _MainTex;
#line 511
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 515
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 519
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 523
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 547
#line 474
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 478
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 415
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 419
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 424
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 428
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 462
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 466
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 470
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 441
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 445
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 561
lowp vec4 frag( in v2f IN ) {
    #line 563
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 567
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 571
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 575
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 579
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 583
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 587
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 591
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednpgflnhfoeckphdgmmmegfmnkcbbghpfabaaaaaapaafaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
emaeaaaaeaaaabaabdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
giaaaaacadaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaa
acaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
agbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaa
aaaaaaaaegiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
acaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaaaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaa
abaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaal
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaa
egiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaia
ebaaaaaaaaaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  lowp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD8 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  lowp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 522
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 515
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 401
#line 405
#line 414
#line 422
#line 431
#line 439
#line 452
#line 464
#line 480
#line 492
uniform sampler2D _MainTex;
#line 500
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 504
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 508
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 512
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 535
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 535
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 539
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 543
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 547
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 522
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 515
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 401
#line 405
#line 414
#line 422
#line 431
#line 439
#line 452
#line 464
#line 480
#line 492
uniform sampler2D _MainTex;
#line 500
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 504
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 508
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 512
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 535
#line 464
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 468
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 405
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 409
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 414
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 418
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 452
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 456
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 460
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 431
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 435
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 549
lowp vec4 frag( in v2f IN ) {
    #line 551
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 555
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 559
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 563
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 567
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 571
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 575
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 579
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec2 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Matrix 176 [_MainRotation] 4
Matrix 240 [_DetailRotation] 4
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhcppkinpliajlonhjccinfgmohedhlekabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaabaaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaapaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  lowp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec2 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  lowp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 524
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 517
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 403
#line 407
#line 416
#line 424
#line 433
#line 441
#line 454
#line 466
#line 482
#line 494
uniform sampler2D _MainTex;
#line 502
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 506
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 510
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 514
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 538
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 538
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 542
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 546
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 550
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 524
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 517
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 403
#line 407
#line 416
#line 424
#line 433
#line 441
#line 454
#line 466
#line 482
#line 494
uniform sampler2D _MainTex;
#line 502
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 506
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 510
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 514
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 538
#line 466
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 470
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 407
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 411
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 416
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 420
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 454
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 458
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 462
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 433
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 437
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 552
lowp vec4 frag( in v2f IN ) {
    #line 554
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 558
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 562
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 566
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 570
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 574
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 578
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 582
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 530
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 523
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 408
#line 412
#line 421
#line 429
#line 438
#line 446
#line 459
#line 471
#line 487
#line 500
uniform sampler2D _MainTex;
#line 508
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 512
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 516
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 520
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 544
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 544
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 548
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 552
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 556
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 530
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 523
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 408
#line 412
#line 421
#line 429
#line 438
#line 446
#line 459
#line 471
#line 487
#line 500
uniform sampler2D _MainTex;
#line 508
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 512
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 516
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 520
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 544
#line 471
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 475
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 412
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 416
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 421
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 425
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 459
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 463
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 467
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 438
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 442
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 558
lowp vec4 frag( in v2f IN ) {
    #line 560
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 564
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 568
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 572
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 576
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 580
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 584
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 588
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 531
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 524
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 409
#line 413
#line 422
#line 430
#line 439
#line 447
#line 460
#line 472
#line 488
#line 501
uniform sampler2D _MainTex;
#line 509
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 513
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 517
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 521
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 545
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 545
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 549
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 553
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 557
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 531
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 524
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 409
#line 413
#line 422
#line 430
#line 439
#line 447
#line 460
#line 472
#line 488
#line 501
uniform sampler2D _MainTex;
#line 509
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 513
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 517
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 521
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 545
#line 472
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 476
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 413
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 417
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 422
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 426
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 460
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 464
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 468
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 439
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 443
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 559
lowp vec4 frag( in v2f IN ) {
    #line 561
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 565
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 569
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 573
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 577
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 581
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 585
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 589
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Matrix 176 [_MainRotation] 4
Matrix 240 [_DetailRotation] 4
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkiakkliaijpneaigabcpklbconhccfgnabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaabaaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaapaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 554
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 558
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 562
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 566
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 481
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 485
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 422
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 426
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 431
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 435
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 469
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 473
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 477
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 448
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 452
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 568
lowp vec4 frag( in v2f IN ) {
    #line 570
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 574
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 578
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 582
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 586
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 590
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 594
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 598
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Matrix 176 [_MainRotation] 4
Matrix 240 [_DetailRotation] 4
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkiakkliaijpneaigabcpklbconhccfgnabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
alaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaabaaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaapaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 554
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 558
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 562
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 566
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 481
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 485
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 422
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 426
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 431
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 435
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 469
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 473
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 477
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 448
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 452
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 568
lowp vec4 frag( in v2f IN ) {
    #line 570
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 574
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 578
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 582
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 586
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 590
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 594
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 598
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 536
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 529
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 414
#line 418
#line 427
#line 435
#line 444
#line 452
#line 465
#line 477
#line 493
#line 506
uniform sampler2D _MainTex;
#line 514
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 518
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 522
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 526
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 550
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 550
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 554
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 558
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 562
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 536
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 529
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 414
#line 418
#line 427
#line 435
#line 444
#line 452
#line 465
#line 477
#line 493
#line 506
uniform sampler2D _MainTex;
#line 514
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 518
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 522
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 526
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 550
#line 477
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 481
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 418
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 422
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 427
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 431
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 465
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 469
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 473
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 444
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 448
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 564
lowp vec4 frag( in v2f IN ) {
    #line 566
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 570
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 574
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 578
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 582
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 586
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 590
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 594
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  vec3 tmpvar_2;
  vec4 tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * gl_Vertex);
  vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * gl_Vertex));
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_MainRotation]
Matrix 12 [_DetailRotation]
Vector 17 [_PlanetOrigin]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_position0 v0
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
add r2.xyz, -r1, c16
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o5.xyz, r0.w, r0
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 r0.w, v0, c11
dp4 o3.w, -r0, c15
dp4 o3.z, -r0, c14
dp4 o3.y, -r0, c13
dp4 o3.x, -r0, c12
mov o4, -r0
mov r0.xyz, c17
mul o6.xyz, r1.w, r2
mov o1.xyz, r1
add o2.xyz, -c16, r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 28 instructions, 3 temp regs, 0 temp arrays:
// ALU 25 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbigedjjhegaaphapidlpkbeehjkijjlpabaaaaaaaiagaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahapaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahapaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcemaeaaaaeaaaabaa
bdabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagiaaaaacadaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
ahaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaajpcaabaaaacaaaaaafgafbaiaebaaaaaaabaaaaaaegiocaaa
aaaaaaaaamaaaaaadcaaaaalpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaa
agaabaiaebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaalpcaabaaaacaaaaaa
egiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaa
abaaaaaaegaobaaaacaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaa
abaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaegiccaiaebaaaaaa
acaaaaaaapaaaaaaaaaaaaajhcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hccabaaaafaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_5;
  tmpvar_5 = -((_MainRotation * _glesVertex));
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_4.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_5);
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = normalize((tmpvar_4.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = tmpvar_1;
  xlv_TEXCOORD7 = tmpvar_2;
  xlv_TEXCOORD8 = tmpvar_3;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float NdotL_2;
  mediump vec3 lightDirection_3;
  mediump vec3 ambientLighting_4;
  mediump float sphereCheck_5;
  mediump vec3 worldDir_6;
  mediump float detailLevel_7;
  mediump vec4 color_8;
  mediump vec4 tex_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_11;
  highp float r_12;
  if ((abs(tmpvar_10.z) > (1e-08 * abs(tmpvar_10.x)))) {
    highp float y_over_x_13;
    y_over_x_13 = (tmpvar_10.x / tmpvar_10.z);
    highp float s_14;
    highp float x_15;
    x_15 = (y_over_x_13 * inversesqrt(((y_over_x_13 * y_over_x_13) + 1.0)));
    s_14 = (sign(x_15) * (1.5708 - (sqrt((1.0 - abs(x_15))) * (1.5708 + (abs(x_15) * (-0.214602 + (abs(x_15) * (0.0865667 + (abs(x_15) * -0.0310296)))))))));
    r_12 = s_14;
    if ((tmpvar_10.z < 0.0)) {
      if ((tmpvar_10.x >= 0.0)) {
        r_12 = (s_14 + 3.14159);
      } else {
        r_12 = (r_12 - 3.14159);
      };
    };
  } else {
    r_12 = (sign(tmpvar_10.x) * 1.5708);
  };
  uv_11.x = (0.5 + (0.159155 * r_12));
  uv_11.y = (0.31831 * (1.5708 - (sign(tmpvar_10.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_10.y))) * (1.5708 + (abs(tmpvar_10.y) * (-0.214602 + (abs(tmpvar_10.y) * (0.0865667 + (abs(tmpvar_10.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdx(tmpvar_10.xz);
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdy(tmpvar_10.xz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_18.y = dFdx(uv_11.y);
  tmpvar_18.z = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_18.w = dFdy(uv_11.y);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2DGradEXT (_MainTex, uv_11, tmpvar_18.xy, tmpvar_18.zw);
  tex_9 = tmpvar_19;
  mediump vec4 tmpvar_20;
  mediump vec3 detailCoords_21;
  mediump float nylerp_22;
  mediump float zxlerp_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_25;
  highp float r_26;
  if ((abs(tmpvar_24.z) > (1e-08 * abs(tmpvar_24.x)))) {
    highp float y_over_x_27;
    y_over_x_27 = (tmpvar_24.x / tmpvar_24.z);
    highp float s_28;
    highp float x_29;
    x_29 = (y_over_x_27 * inversesqrt(((y_over_x_27 * y_over_x_27) + 1.0)));
    s_28 = (sign(x_29) * (1.5708 - (sqrt((1.0 - abs(x_29))) * (1.5708 + (abs(x_29) * (-0.214602 + (abs(x_29) * (0.0865667 + (abs(x_29) * -0.0310296)))))))));
    r_26 = s_28;
    if ((tmpvar_24.z < 0.0)) {
      if ((tmpvar_24.x >= 0.0)) {
        r_26 = (s_28 + 3.14159);
      } else {
        r_26 = (r_26 - 3.14159);
      };
    };
  } else {
    r_26 = (sign(tmpvar_24.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_26));
  uv_25.y = (0.31831 * (1.5708 - (sign(tmpvar_24.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_24.y))) * (1.5708 + (abs(tmpvar_24.y) * (-0.214602 + (abs(tmpvar_24.y) * (0.0865667 + (abs(tmpvar_24.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_30;
  tmpvar_30 = ((uv_25 * 4.0) * _DetailScale);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdx(tmpvar_24.xz);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdy(tmpvar_24.xz);
  highp vec4 tmpvar_33;
  tmpvar_33.x = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_33.y = dFdx(tmpvar_30.y);
  tmpvar_33.z = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_33.w = dFdy(tmpvar_30.y);
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(tmpvar_24);
  highp float tmpvar_35;
  tmpvar_35 = float((tmpvar_34.z >= tmpvar_34.x));
  zxlerp_23 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = float((mix (tmpvar_34.x, tmpvar_34.z, zxlerp_23) >= tmpvar_34.y));
  nylerp_22 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_34, tmpvar_34.zxy, vec3(zxlerp_23));
  detailCoords_21 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_34.yxz, detailCoords_21, vec3(nylerp_22));
  detailCoords_21 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_21.x);
  highp vec2 coord_40;
  coord_40 = (((0.5 * detailCoords_21.zy) / tmpvar_39) * _DetailScale);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_DetailTex, coord_40, tmpvar_33.xy, tmpvar_33.zw);
  tmpvar_20 = tmpvar_41;
  highp vec3 p_42;
  p_42 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_43;
  tmpvar_43 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_42, p_42))), 0.0, 1.0);
  detailLevel_7 = tmpvar_43;
  mediump vec4 tmpvar_44;
  tmpvar_44 = ((_Color * tex_9) * mix (tmpvar_20, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7)));
  color_8.xyz = tmpvar_44.xyz;
  highp float tmpvar_45;
  highp vec3 p_46;
  p_46 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_45 = sqrt(dot (p_46, p_46));
  highp vec3 p_47;
  p_47 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_48;
  p_48 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_49;
  tmpvar_49 = mix (0.0, tmpvar_44.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_45), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_45)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_47, p_47)) - (_RimDistSub * sqrt(dot (p_48, p_48))))), 0.0, 1.0)));
  color_8.w = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_6 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = dot (xlv_TEXCOORD1, worldDir_6);
  highp float tmpvar_52;
  tmpvar_52 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_51 * tmpvar_51)));
  highp float tmpvar_53;
  tmpvar_53 = pow (tmpvar_52, 2.0);
  highp float tmpvar_54;
  tmpvar_54 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_53));
  highp float tmpvar_55;
  tmpvar_55 = (float((_OceanRadius >= tmpvar_52)) * float((tmpvar_51 >= 0.0)));
  sphereCheck_5 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (sphereCheck_5 * float((tmpvar_45 >= mix ((tmpvar_54 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_53))), (tmpvar_51 - tmpvar_54), float((tmpvar_51 >= 0.0))))));
  sphereCheck_5 = tmpvar_56;
  color_8.w = (color_8.w * (1.0 - sphereCheck_5));
  highp vec3 tmpvar_57;
  tmpvar_57 = glstate_lightmodel_ambient.xyz;
  ambientLighting_4 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_3 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = clamp (dot (xlv_TEXCOORD4, lightDirection_3), 0.0, 1.0);
  NdotL_2 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp (((_LightColor0.w * ((NdotL_2 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_4 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  color_8.xyz = (tmpvar_44.xyz * tmpvar_61);
  tmpvar_1 = color_8;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 537
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 530
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 415
#line 419
#line 428
#line 436
#line 445
#line 453
#line 466
#line 478
#line 494
#line 507
uniform sampler2D _MainTex;
#line 515
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 519
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 523
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 527
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 551
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 551
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 555
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 559
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 563
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 537
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 530
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 415
#line 419
#line 428
#line 436
#line 445
#line 453
#line 466
#line 478
#line 494
#line 507
uniform sampler2D _MainTex;
#line 515
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 519
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 523
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 527
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 551
#line 478
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 482
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 419
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 423
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 428
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 432
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 466
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 470
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 474
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 445
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 449
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 565
lowp vec4 frag( in v2f IN ) {
    #line 567
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 571
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 575
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 579
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 583
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 587
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 591
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 595
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 27 [_PlanetOrigin]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedinmcfmajchndmjaijioplpknlohblgaaabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadhccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 517
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 510
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 487
uniform sampler2D _MainTex;
#line 495
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 499
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 503
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 507
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 530
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 530
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 534
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 538
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 542
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 546
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 517
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 510
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 487
uniform sampler2D _MainTex;
#line 495
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 499
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 503
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 507
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 530
#line 458
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 462
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 399
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 403
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 408
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 412
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 446
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 450
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 454
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 425
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 429
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 548
lowp vec4 frag( in v2f IN ) {
    #line 550
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 554
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 558
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 562
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 566
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 570
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 574
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Vector 23 [_PlanetOrigin]
"vs_3_0
; 38 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord8 o7
def c24, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c24.x
mul r2.y, r2, c21.x
dp4 r0.z, v0, c6
mov o0, r0
mad o7.xy, r2.z, c22.zwzw, r2
add r2.xyz, -r1, c20
dp3 r2.w, r2, r2
rsq r2.w, r2.w
mov o1.xyz, r1
mov r1.xyz, c23
dp4 r0.x, v0, c12
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.y, v0, c13
dp4 o3.w, -r0, c19
dp4 o3.z, -r0, c18
dp4 o3.y, -r0, c17
dp4 o3.x, -r0, c16
mov o4, -r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c20, r1
mov o7.z, -r0.x
mov o7.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 256 // 252 used size, 18 vars
Matrix 48 [_MainRotation] 4
Matrix 112 [_DetailRotation] 4
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 38 instructions, 4 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedonaeokcmkahioilpnjdgbeommonlpfigabaaaaaacaahaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaneaaaaaaaiaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcjeafaaaaeaaaabaagfabaaaafjaaaaaeegiocaaaaaaaaaaa
baaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagiaaaaacaeaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaa
dgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaa
egiccaaaaaaaaaaaapaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaai
pcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaeaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaadaaaaaaagbabaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaakgbkbaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
agaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaa
fgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaalpcaabaaa
adaaaaaaegiocaaaaaaaaaaaahaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaajaaaaaakgakbaia
ebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaakaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaa
egacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaa
egacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaahaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaahaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaahaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 514
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 507
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 393
#line 397
#line 406
#line 414
#line 423
#line 431
#line 444
#line 456
#line 472
#line 484
uniform sampler2D _MainTex;
#line 492
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 496
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 500
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 504
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 526
#line 543
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 526
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 530
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 534
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 538
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 514
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 507
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 393
#line 397
#line 406
#line 414
#line 423
#line 431
#line 444
#line 456
#line 472
#line 484
uniform sampler2D _MainTex;
#line 492
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 496
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 500
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 504
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 526
#line 543
#line 456
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 460
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 397
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 401
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 406
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 410
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 444
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 448
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 452
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 423
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 427
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 543
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    #line 547
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 551
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    #line 555
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 559
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    #line 563
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 567
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 27 [_PlanetOrigin]
"vs_3_0
; 44 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.w, r0, c15
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkledjckfmhgkcoejpngolbbpebigobhjabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaa
abaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaakpccabaaaahaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 526
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 519
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 404
#line 408
#line 417
#line 425
#line 434
#line 442
#line 455
#line 467
#line 483
#line 496
uniform sampler2D _MainTex;
#line 504
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 508
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 512
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 516
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 539
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 539
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 543
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 547
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 551
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 555
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 526
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 519
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 404
#line 408
#line 417
#line 425
#line 434
#line 442
#line 455
#line 467
#line 483
#line 496
uniform sampler2D _MainTex;
#line 504
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 508
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 512
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 516
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 539
#line 467
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 471
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 408
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 412
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 417
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 421
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 455
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 459
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 463
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 434
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 438
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 557
lowp vec4 frag( in v2f IN ) {
    #line 559
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 563
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 567
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 571
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 575
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 579
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 583
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 27 [_PlanetOrigin]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedinmcfmajchndmjaijioplpknlohblgaaabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadhccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 518
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 511
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 396
#line 400
#line 409
#line 417
#line 426
#line 434
#line 447
#line 459
#line 475
#line 488
uniform sampler2D _MainTex;
#line 496
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 500
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 504
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 508
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 531
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 531
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 535
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 539
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 543
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 547
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 518
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 511
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 396
#line 400
#line 409
#line 417
#line 426
#line 434
#line 447
#line 459
#line 475
#line 488
uniform sampler2D _MainTex;
#line 496
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 500
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 504
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 508
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 531
#line 459
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 463
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 400
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 404
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 409
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 413
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 447
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 451
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 455
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 426
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 430
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 549
lowp vec4 frag( in v2f IN ) {
    #line 551
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 555
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 559
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 563
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 567
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 571
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 575
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 27 [_PlanetOrigin]
"vs_3_0
; 42 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedabikfgkhhfpdgnkaegeioogpooehdmdmabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadamaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaaddccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaaacaaaaaafgafbaaa
abaaaaaaegiacaaaaaaaaaaaacaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaadcaaaaakdcaabaaa
abaaaaaaegiacaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegaabaaaabaaaaaa
dcaaaaakdccabaaaahaaaaaaegiacaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egaabaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 516
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 509
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 486
uniform sampler2D _MainTex;
#line 494
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 498
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 502
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 506
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 529
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 529
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 533
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 537
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 541
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 545
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 516
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 509
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 486
uniform sampler2D _MainTex;
#line 494
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 498
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 502
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 506
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 529
#line 458
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 462
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 399
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 403
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 408
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 412
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 446
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 450
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 454
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 425
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 429
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 547
lowp vec4 frag( in v2f IN ) {
    #line 549
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 553
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 557
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 561
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 565
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 569
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 573
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 31 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 45 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcgchhcopdapfkifnbeohinhgoinlmicaabaaaaaaeaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcieahaaaaeaaaabaa
obabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaaacaaaaaa
alaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 532
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 525
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 410
#line 414
#line 423
#line 431
#line 440
#line 448
#line 461
#line 473
#line 489
#line 502
uniform sampler2D _MainTex;
#line 510
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 514
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 518
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 522
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 546
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 546
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 550
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 554
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 558
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 562
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 532
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 525
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 410
#line 414
#line 423
#line 431
#line 440
#line 448
#line 461
#line 473
#line 489
#line 502
uniform sampler2D _MainTex;
#line 510
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 514
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 518
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 522
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 546
#line 473
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 477
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 414
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 418
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 423
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 427
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 461
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 465
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 469
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 440
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 444
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 565
lowp vec4 frag( in v2f IN ) {
    #line 567
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 571
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 575
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 579
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 583
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 587
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 591
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 31 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 45 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcgchhcopdapfkifnbeohinhgoinlmicaabaaaaaaeaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcieahaaaaeaaaabaa
obabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaaacaaaaaa
alaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 533
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 526
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 411
#line 415
#line 424
#line 432
#line 441
#line 449
#line 462
#line 474
#line 490
#line 503
uniform sampler2D _MainTex;
#line 511
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 515
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 519
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 523
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 547
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 547
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 551
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 555
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 559
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 563
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 533
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 526
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 411
#line 415
#line 424
#line 432
#line 441
#line 449
#line 462
#line 474
#line 490
#line 503
uniform sampler2D _MainTex;
#line 511
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 515
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 519
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 523
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 547
#line 474
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 478
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 415
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 419
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 424
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 428
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 462
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 466
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 470
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 441
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 445
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 566
lowp vec4 frag( in v2f IN ) {
    #line 568
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 572
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 576
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 580
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 584
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 588
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 592
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_2 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = o_8;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Vector 23 [_PlanetOrigin]
"vs_3_0
; 41 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c24, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r2.w, v0, c7
mov r1.w, r2
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.z, v0, c6
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
dp3 r0.x, r3, r3
rsq r0.w, r0.x
mul r0.xyz, r1.xyww, c24.x
mul r0.y, r0, c21.x
mad r0.xy, r0.z, c22.zwzw, r0
mul o5.xyz, r0.w, r3
mov r0.zw, r1
mov o7, r0
mov o8.xy, r0
mov o0, r1
add r1.xyz, -r2, c20
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o6.xyz, r1.w, r1
mov r1.xyz, c23
dp4 r0.x, v0, c12
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.y, v0, c13
dp4 o3.w, -r0, c19
dp4 o3.z, -r0, c18
dp4 o3.y, -r0, c17
dp4 o3.x, -r0, c16
mov o4, -r0
dp4 r0.x, v0, c2
mov o1.xyz, r2
add o2.xyz, -c20, r1
mov o8.z, -r0.x
mov o8.w, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 40 instructions, 4 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjgaopjcdgkkgoeihlgcfnkeeaobokjhhabaaaaaaheahaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naafaaaaeaaaabaaheabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaagaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaahicaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaadpdiaaaaakfcaabaaaabaaaaaa
agadbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaaaaaaaaaaah
dcaabaaaaaaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadgaaaaafpccabaaa
ahaaaaaaegaobaaaaaaaaaaadgaaaaaflccabaaaaiaaaaaaegambaaaaaaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = o_8;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 522
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 515
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 401
#line 405
#line 414
#line 422
#line 431
#line 439
#line 452
#line 464
#line 480
#line 492
uniform sampler2D _MainTex;
#line 500
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 504
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 508
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 512
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 535
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 535
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 539
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 543
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 547
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 551
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 522
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 515
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 401
#line 405
#line 414
#line 422
#line 431
#line 439
#line 452
#line 464
#line 480
#line 492
uniform sampler2D _MainTex;
#line 500
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 504
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 508
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 512
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 535
#line 464
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 468
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 405
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 409
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 414
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 418
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 452
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 456
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 460
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 431
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 435
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 553
lowp vec4 frag( in v2f IN ) {
    #line 555
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 559
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 563
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 567
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 571
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 575
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 579
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_2 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD7 = o_8;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 27 [_PlanetOrigin]
"vs_3_0
; 45 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r2.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r1.w, r2
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.z, v0, c6
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
dp3 r0.x, r3, r3
rsq r0.w, r0.x
mul r0.xyz, r1.xyww, c28.x
mul r0.y, r0, c25.x
mad r0.xy, r0.z, c26.zwzw, r0
mul o5.xyz, r0.w, r3
mov r0.zw, r1
mov o8, r0
mov o9.xy, r0
mov o0, r1
add r1.xyz, -r2, c24
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o6.xyz, r1.w, r1
mov r1.xyz, c27
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r2
dp4 r0.w, v0, c11
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mov o1.xyz, r2
add o2.xyz, -c24, r1
mov o9.z, -r0.x
mov o9.w, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Matrix 80 [_LightMatrix0] 4
Matrix 176 [_MainRotation] 4
Matrix 240 [_DetailRotation] 4
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 48 instructions, 4 temp regs, 0 temp arrays:
// ALU 42 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhppaklinplcboldnoedlnopnabkjffjnabaaaaaamiaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadamaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcamahaaaaeaaaabaa
mdabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaaddccabaaa
ahaaaaaagfaaaaadpccabaaaaiaaaaaagfaaaaadpccabaaaajaaaaaagiaaaaac
aeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaak
hccabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
anaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaabaaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaapaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
bbaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaabcaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaafaaaaaa
pgapbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaaacaaaaaa
fgafbaaaabaaaaaaegiacaaaaaaaaaaaagaaaaaadcaaaaakdcaabaaaabaaaaaa
egiacaaaaaaaaaaaafaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaadcaaaaak
dcaabaaaabaaaaaaegiacaaaaaaaaaaaahaaaaaakgakbaaaabaaaaaaegaabaaa
abaaaaaadcaaaaakdccabaaaahaaaaaaegiacaaaaaaaaaaaaiaaaaaapgapbaaa
abaaaaaaegaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaabkaabaaaaaaaaaaa
akiacaaaabaaaaaaafaaaaaadiaaaaahicaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaadpdiaaaaakfcaabaaaabaaaaaaagadbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaaaaaaaaaaahdcaabaaaaaaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadgaaaaafpccabaaaaiaaaaaaegaobaaaaaaaaaaa
dgaaaaaflccabaaaajaaaaaaegambaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaa
bkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaa
aaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = o_8;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  lowp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 524
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 517
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 403
#line 407
#line 416
#line 424
#line 433
#line 441
#line 454
#line 466
#line 482
#line 494
uniform sampler2D _MainTex;
#line 502
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 506
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 510
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 514
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 538
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 538
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 542
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 546
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 550
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 554
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 524
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 517
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 403
#line 407
#line 416
#line 424
#line 433
#line 441
#line 454
#line 466
#line 482
#line 494
uniform sampler2D _MainTex;
#line 502
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 506
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 510
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 514
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 538
#line 466
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 470
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 407
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 411
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 416
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 420
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 454
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 458
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 462
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 433
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 437
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 557
lowp vec4 frag( in v2f IN ) {
    #line 559
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 563
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 567
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 571
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 575
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 579
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 583
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 28 [_PlanetOrigin]
"vs_3_0
; 44 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 42 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 530
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 523
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 408
#line 412
#line 421
#line 429
#line 438
#line 446
#line 459
#line 471
#line 487
#line 500
uniform sampler2D _MainTex;
#line 508
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 512
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 516
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 520
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 544
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 544
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 548
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 552
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 556
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 560
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 530
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 523
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 408
#line 412
#line 421
#line 429
#line 438
#line 446
#line 459
#line 471
#line 487
#line 500
uniform sampler2D _MainTex;
#line 508
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 512
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 516
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 520
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 544
#line 471
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 475
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 412
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 416
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 421
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 425
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 459
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 463
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 467
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 438
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 442
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 563
lowp vec4 frag( in v2f IN ) {
    #line 565
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 569
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 573
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 577
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 581
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 585
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 589
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 28 [_PlanetOrigin]
"vs_3_0
; 44 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 42 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 531
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 524
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 409
#line 413
#line 422
#line 430
#line 439
#line 447
#line 460
#line 472
#line 488
#line 501
uniform sampler2D _MainTex;
#line 509
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 513
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 517
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 521
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 545
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 545
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 549
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 553
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 557
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 561
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 531
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 524
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 409
#line 413
#line 422
#line 430
#line 439
#line 447
#line 460
#line 472
#line 488
#line 501
uniform sampler2D _MainTex;
#line 509
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 513
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 517
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 521
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 545
#line 472
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 476
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 413
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 417
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 422
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 426
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 460
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 464
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 468
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 439
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 443
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 564
lowp vec4 frag( in v2f IN ) {
    #line 566
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 570
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 574
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 578
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 582
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 586
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 590
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 31 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Matrix 80 [_LightMatrix0] 4
Matrix 176 [_MainRotation] 4
Matrix 240 [_DetailRotation] 4
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 45 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddgpdagppppmnijeogcoekeodlnkpnihbabaaaaaaeaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcieahaaaaeaaaabaa
obabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaalaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaabaaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaapaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaa
agaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaa
egiocaaaaaaaaaaaaiaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaaacaaaaaa
alaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 554
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 558
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 562
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 566
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 570
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 481
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 485
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 422
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 426
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 431
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 435
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 469
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 473
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 477
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 448
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 452
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 573
lowp vec4 frag( in v2f IN ) {
    #line 575
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 579
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 583
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 587
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 591
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 595
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 599
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 31 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Matrix 80 [_LightMatrix0] 4
Matrix 176 [_MainRotation] 4
Matrix 240 [_DetailRotation] 4
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 45 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddgpdagppppmnijeogcoekeodlnkpnihbabaaaaaaeaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcieahaaaaeaaaabaa
obabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaalaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaabaaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaapaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaa
agaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaa
egiocaaaaaaaaaaaaiaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaaacaaaaaa
alaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 554
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 558
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 562
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 566
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 570
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 481
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 485
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 422
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 426
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 431
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 435
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 469
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 473
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 477
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 448
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 452
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 573
lowp vec4 frag( in v2f IN ) {
    #line 575
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 579
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 583
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 587
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 591
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 595
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 599
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 28 [_PlanetOrigin]
"vs_3_0
; 44 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 42 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 536
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 529
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 414
#line 418
#line 427
#line 435
#line 444
#line 452
#line 465
#line 477
#line 493
#line 506
uniform sampler2D _MainTex;
#line 514
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 518
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 522
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 526
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 550
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 550
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 554
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 558
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 562
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 566
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 536
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 529
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 414
#line 418
#line 427
#line 435
#line 444
#line 452
#line 465
#line 477
#line 493
#line 506
uniform sampler2D _MainTex;
#line 514
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 518
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 522
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 526
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 550
#line 477
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 481
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 418
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 422
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 427
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 431
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 465
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 469
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 473
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 444
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 448
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 569
lowp vec4 frag( in v2f IN ) {
    #line 571
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 575
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 579
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 583
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 587
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 591
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 595
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 28 [_PlanetOrigin]
"vs_3_0
; 44 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 42 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 color_7;
  mediump vec4 tex_8;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_10;
  highp float r_11;
  if ((abs(tmpvar_9.z) > (1e-08 * abs(tmpvar_9.x)))) {
    highp float y_over_x_12;
    y_over_x_12 = (tmpvar_9.x / tmpvar_9.z);
    highp float s_13;
    highp float x_14;
    x_14 = (y_over_x_12 * inversesqrt(((y_over_x_12 * y_over_x_12) + 1.0)));
    s_13 = (sign(x_14) * (1.5708 - (sqrt((1.0 - abs(x_14))) * (1.5708 + (abs(x_14) * (-0.214602 + (abs(x_14) * (0.0865667 + (abs(x_14) * -0.0310296)))))))));
    r_11 = s_13;
    if ((tmpvar_9.z < 0.0)) {
      if ((tmpvar_9.x >= 0.0)) {
        r_11 = (s_13 + 3.14159);
      } else {
        r_11 = (r_11 - 3.14159);
      };
    };
  } else {
    r_11 = (sign(tmpvar_9.x) * 1.5708);
  };
  uv_10.x = (0.5 + (0.159155 * r_11));
  uv_10.y = (0.31831 * (1.5708 - (sign(tmpvar_9.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_9.y))) * (1.5708 + (abs(tmpvar_9.y) * (-0.214602 + (abs(tmpvar_9.y) * (0.0865667 + (abs(tmpvar_9.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_15;
  tmpvar_15 = dFdx(tmpvar_9.xz);
  highp vec2 tmpvar_16;
  tmpvar_16 = dFdy(tmpvar_9.xz);
  highp vec4 tmpvar_17;
  tmpvar_17.x = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_17.y = dFdx(uv_10.y);
  tmpvar_17.z = (0.159155 * sqrt(dot (tmpvar_16, tmpvar_16)));
  tmpvar_17.w = dFdy(uv_10.y);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2DGradEXT (_MainTex, uv_10, tmpvar_17.xy, tmpvar_17.zw);
  tex_8 = tmpvar_18;
  mediump vec4 tmpvar_19;
  mediump vec3 detailCoords_20;
  mediump float nylerp_21;
  mediump float zxlerp_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = ((uv_24 * 4.0) * _DetailScale);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdx(tmpvar_23.xz);
  highp vec2 tmpvar_31;
  tmpvar_31 = dFdy(tmpvar_23.xz);
  highp vec4 tmpvar_32;
  tmpvar_32.x = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_32.y = dFdx(tmpvar_29.y);
  tmpvar_32.z = (0.159155 * sqrt(dot (tmpvar_31, tmpvar_31)));
  tmpvar_32.w = dFdy(tmpvar_29.y);
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(tmpvar_23);
  highp float tmpvar_34;
  tmpvar_34 = float((tmpvar_33.z >= tmpvar_33.x));
  zxlerp_22 = tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = float((mix (tmpvar_33.x, tmpvar_33.z, zxlerp_22) >= tmpvar_33.y));
  nylerp_21 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_33, tmpvar_33.zxy, vec3(zxlerp_22));
  detailCoords_20 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (tmpvar_33.yxz, detailCoords_20, vec3(nylerp_21));
  detailCoords_20 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_20.x);
  highp vec2 coord_39;
  coord_39 = (((0.5 * detailCoords_20.zy) / tmpvar_38) * _DetailScale);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_DetailTex, coord_39, tmpvar_32.xy, tmpvar_32.zw);
  tmpvar_19 = tmpvar_40;
  highp vec3 p_41;
  p_41 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_42;
  tmpvar_42 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_41, p_41))), 0.0, 1.0);
  detailLevel_6 = tmpvar_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = ((_Color * tex_8) * mix (tmpvar_19, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6)));
  highp float tmpvar_44;
  highp vec3 p_45;
  p_45 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp vec3 p_46;
  p_46 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_48;
  tmpvar_48 = mix (0.0, tmpvar_43.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_46, p_46)) - (_RimDistSub * sqrt(dot (p_47, p_47))))), 0.0, 1.0)));
  color_7.w = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_51;
  mediump float tmpvar_52;
  tmpvar_52 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_53;
  tmpvar_53 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_52)), 0.0, 1.0);
  color_7.xyz = (tmpvar_43.xyz * tmpvar_53);
  lowp float tmpvar_54;
  tmpvar_54 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_55;
  highp float tmpvar_56;
  tmpvar_56 = (color_7.w * clamp ((_InvFade * (tmpvar_55 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_7.w = tmpvar_56;
  tmpvar_1 = color_7;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 537
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 530
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 415
#line 419
#line 428
#line 436
#line 445
#line 453
#line 466
#line 478
#line 494
#line 507
uniform sampler2D _MainTex;
#line 515
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 519
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 523
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 527
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 551
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 551
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 555
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 559
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 563
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 567
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 537
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 530
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 415
#line 419
#line 428
#line 436
#line 445
#line 453
#line 466
#line 478
#line 494
#line 507
uniform sampler2D _MainTex;
#line 515
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 519
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 523
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 527
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 551
#line 478
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 482
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 419
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 423
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 428
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 432
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 466
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 470
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 474
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 445
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 449
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 570
lowp vec4 frag( in v2f IN ) {
    #line 572
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 576
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 580
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 584
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    #line 588
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 592
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 596
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 27 [_PlanetOrigin]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedinmcfmajchndmjaijioplpknlohblgaaabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadhccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 517
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 510
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 487
uniform sampler2D _MainTex;
#line 495
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 499
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 503
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 507
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 530
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 530
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 534
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 538
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 542
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 546
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 517
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 510
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 487
uniform sampler2D _MainTex;
#line 495
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 499
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 503
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 507
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 530
#line 458
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 462
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 399
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 403
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 408
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 412
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 446
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 450
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 454
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 425
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 429
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 548
lowp vec4 frag( in v2f IN ) {
    #line 550
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 554
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 558
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 562
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 566
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 570
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 574
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 578
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    #line 582
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Vector 23 [_PlanetOrigin]
"vs_3_0
; 38 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord8 o7
def c24, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c24.x
mul r2.y, r2, c21.x
dp4 r0.z, v0, c6
mov o0, r0
mad o7.xy, r2.z, c22.zwzw, r2
add r2.xyz, -r1, c20
dp3 r2.w, r2, r2
rsq r2.w, r2.w
mov o1.xyz, r1
mov r1.xyz, c23
dp4 r0.x, v0, c12
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.y, v0, c13
dp4 o3.w, -r0, c19
dp4 o3.z, -r0, c18
dp4 o3.y, -r0, c17
dp4 o3.x, -r0, c16
mov o4, -r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c20, r1
mov o7.z, -r0.x
mov o7.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 256 // 252 used size, 18 vars
Matrix 48 [_MainRotation] 4
Matrix 112 [_DetailRotation] 4
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 38 instructions, 4 temp regs, 0 temp arrays:
// ALU 33 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedonaeokcmkahioilpnjdgbeommonlpfigabaaaaaacaahaaaaadaaaaaa
cmaaaaaajmaaaaaaieabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
oaaaaaaaaiaaaaaaaiaaaaaamiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaneaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaneaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaneaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaneaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaneaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaneaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaneaaaaaaaiaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcjeafaaaaeaaaabaagfabaaaafjaaaaaeegiocaaaaaaaaaaa
baaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagiaaaaacaeaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
adaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaa
acaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaamaaaaaa
agbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaa
dgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaa
egiccaaaaaaaaaaaapaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaai
pcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaeaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaadaaaaaaagbabaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaakgbkbaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
agaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaa
fgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaalpcaabaaa
adaaaaaaegiocaaaaaaaaaaaahaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaajaaaaaakgakbaia
ebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaa
aaaaaaaaakaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaag
pccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaa
egacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaajhcaabaaa
abaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaa
egacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaa
abaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaa
agaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaahaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaahaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaahaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 514
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 507
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 393
#line 397
#line 406
#line 414
#line 423
#line 431
#line 444
#line 456
#line 472
#line 484
uniform sampler2D _MainTex;
#line 492
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 496
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 500
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 504
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 526
#line 543
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 526
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 530
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 534
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 538
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 514
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 projPos;
};
#line 507
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 393
#line 397
#line 406
#line 414
#line 423
#line 431
#line 444
#line 456
#line 472
#line 484
uniform sampler2D _MainTex;
#line 492
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 496
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 500
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 504
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 526
#line 543
#line 456
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 460
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 397
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 401
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 406
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 410
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 444
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 448
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 452
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 423
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 427
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 543
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    #line 547
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 551
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    #line 555
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    #line 559
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    #line 563
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    #line 567
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    #line 571
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 575
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    #line 579
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 27 [_PlanetOrigin]
"vs_3_0
; 44 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.w, r0, c15
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkledjckfmhgkcoejpngolbbpebigobhjabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaa
abaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaa
acaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaakpccabaaaahaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 526
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 519
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 404
#line 408
#line 417
#line 425
#line 434
#line 442
#line 455
#line 467
#line 483
#line 496
uniform sampler2D _MainTex;
#line 504
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 508
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 512
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 516
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 539
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 539
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 543
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 547
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 551
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 555
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 526
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 519
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 404
#line 408
#line 417
#line 425
#line 434
#line 442
#line 455
#line 467
#line 483
#line 496
uniform sampler2D _MainTex;
#line 504
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 508
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 512
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 516
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 539
#line 467
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 471
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 408
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 412
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 417
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 421
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 455
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 459
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 463
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 434
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 438
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 557
lowp vec4 frag( in v2f IN ) {
    #line 559
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 563
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 567
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 571
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 575
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 579
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 583
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 587
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    #line 591
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 27 [_PlanetOrigin]
"vs_3_0
; 43 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedinmcfmajchndmjaijioplpknlohblgaaabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadhccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaaaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 518
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 511
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 396
#line 400
#line 409
#line 417
#line 426
#line 434
#line 447
#line 459
#line 475
#line 488
uniform sampler2D _MainTex;
#line 496
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 500
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 504
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 508
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 531
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 531
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 535
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 539
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 543
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 547
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 518
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 511
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 396
#line 400
#line 409
#line 417
#line 426
#line 434
#line 447
#line 459
#line 475
#line 488
uniform sampler2D _MainTex;
#line 496
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 500
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 504
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 508
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 531
#line 459
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 463
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 400
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 404
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 409
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 413
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 447
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 451
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 455
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 426
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 430
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 549
lowp vec4 frag( in v2f IN ) {
    #line 551
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 555
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 559
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 563
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 567
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 571
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 575
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 579
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    #line 583
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 27 [_PlanetOrigin]
"vs_3_0
; 42 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c28.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o8.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
mov o1.xyz, r1
mov r1.xyz, c27
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c24, r1
mov o8.z, -r0.x
mov o8.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 46 instructions, 4 temp regs, 0 temp arrays:
// ALU 41 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedabikfgkhhfpdgnkaegeioogpooehdmdmabaaaaaaheaiaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadamaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naagaaaaeaaaabaaleabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaaddccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaacaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
hccabaaaagaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaaacaaaaaafgafbaaa
abaaaaaaegiacaaaaaaaaaaaacaaaaaadcaaaaakdcaabaaaabaaaaaaegiacaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaadcaaaaakdcaabaaa
abaaaaaaegiacaaaaaaaaaaaadaaaaaakgakbaaaabaaaaaaegaabaaaabaaaaaa
dcaaaaakdccabaaaahaaaaaaegiacaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaa
egaabaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaficcabaaaaiaaaaaadkaabaaa
aaaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 516
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 509
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 486
uniform sampler2D _MainTex;
#line 494
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 498
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 502
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 506
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 529
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 529
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 533
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 537
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 541
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 545
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 516
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 509
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 395
#line 399
#line 408
#line 416
#line 425
#line 433
#line 446
#line 458
#line 474
#line 486
uniform sampler2D _MainTex;
#line 494
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 498
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 502
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 506
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 529
#line 458
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 462
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 399
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 403
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 408
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 412
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 446
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 450
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 454
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 425
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 429
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 547
lowp vec4 frag( in v2f IN ) {
    #line 549
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 553
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 557
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 561
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 565
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 569
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 573
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 577
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    #line 581
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 31 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 45 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcgchhcopdapfkifnbeohinhgoinlmicaabaaaaaaeaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcieahaaaaeaaaabaa
obabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaaacaaaaaa
alaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 532
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 525
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 410
#line 414
#line 423
#line 431
#line 440
#line 448
#line 461
#line 473
#line 489
#line 502
uniform sampler2D _MainTex;
#line 510
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 514
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 518
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 522
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 546
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 546
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 550
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 554
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 558
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 562
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 532
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 525
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 410
#line 414
#line 423
#line 431
#line 440
#line 448
#line 461
#line 473
#line 489
#line 502
uniform sampler2D _MainTex;
#line 510
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 514
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 518
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 522
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 546
#line 473
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 477
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 414
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 418
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 423
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 427
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 461
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 465
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 469
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 440
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 444
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 565
lowp vec4 frag( in v2f IN ) {
    #line 567
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 571
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 575
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 579
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 583
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 587
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 591
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 595
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    #line 599
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 31 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 45 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedcgchhcopdapfkifnbeohinhgoinlmicaabaaaaaaeaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcieahaaaaeaaaabaa
obabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
adaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaaacaaaaaa
alaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 533
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 526
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 411
#line 415
#line 424
#line 432
#line 441
#line 449
#line 462
#line 474
#line 490
#line 503
uniform sampler2D _MainTex;
#line 511
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 515
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 519
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 523
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 547
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 547
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 551
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 555
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 559
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 563
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 533
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 526
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 411
#line 415
#line 424
#line 432
#line 441
#line 449
#line 462
#line 474
#line 490
#line 503
uniform sampler2D _MainTex;
#line 511
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 515
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 519
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 523
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 547
#line 474
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 478
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 415
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 419
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 424
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 428
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 462
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 466
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 470
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 441
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 445
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 566
lowp vec4 frag( in v2f IN ) {
    #line 568
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 572
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 576
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 580
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 584
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 588
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 592
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 596
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    #line 600
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_2 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = o_8;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_ProjectionParams]
Vector 22 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_MainRotation]
Matrix 16 [_DetailRotation]
Vector 23 [_PlanetOrigin]
"vs_3_0
; 41 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord8 o8
def c24, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r2.w, v0, c7
mov r1.w, r2
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.z, v0, c6
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
dp3 r0.x, r3, r3
rsq r0.w, r0.x
mul r0.xyz, r1.xyww, c24.x
mul r0.y, r0, c21.x
mad r0.xy, r0.z, c22.zwzw, r0
mul o5.xyz, r0.w, r3
mov r0.zw, r1
mov o7, r0
mov o8.xy, r0
mov o0, r1
add r1.xyz, -r2, c20
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o6.xyz, r1.w, r1
mov r1.xyz, c23
dp4 r0.x, v0, c12
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.y, v0, c13
dp4 o3.w, -r0, c19
dp4 o3.z, -r0, c18
dp4 o3.y, -r0, c17
dp4 o3.x, -r0, c16
mov o4, -r0
dp4 r0.x, v0, c2
mov o1.xyz, r2
add o2.xyz, -c20, r1
mov o8.z, -r0.x
mov o8.w, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 40 instructions, 4 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjgaopjcdgkkgoeihlgcfnkeeaobokjhhabaaaaaaheahaaaaadaaaaaa
cmaaaaaajmaaaaaajmabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
piaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaomaaaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaomaaaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaomaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaomaaaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaomaaaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
naafaaaaeaaaabaaheabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaae
egiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaad
pcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaad
pccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
acaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaa
aaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaa
amaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaa
egiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaa
abaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaa
acaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
diaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
kgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaakaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaa
adaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaa
kgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaa
dgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaaaaaaaaaj
hcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaafaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
hccabaaaagaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaaibcaabaaa
abaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaahicaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaadpdiaaaaakfcaabaaaabaaaaaa
agadbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaaaaaaaaaaah
dcaabaaaaaaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadgaaaaafpccabaaa
ahaaaaaaegaobaaaaaaaaaaadgaaaaaflccabaaaaiaaaaaaegambaaaaaaaaaaa
diaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaa
ckbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
acaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaa
aiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = o_8;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 522
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 515
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 401
#line 405
#line 414
#line 422
#line 431
#line 439
#line 452
#line 464
#line 480
#line 492
uniform sampler2D _MainTex;
#line 500
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 504
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 508
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 512
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 535
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 535
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 539
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 543
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 547
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    #line 551
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 522
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 515
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 401
#line 405
#line 414
#line 422
#line 431
#line 439
#line 452
#line 464
#line 480
#line 492
uniform sampler2D _MainTex;
#line 500
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 504
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 508
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 512
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 535
#line 464
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 468
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 405
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 409
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 414
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 418
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 452
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 456
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 460
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 431
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 435
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 553
lowp vec4 frag( in v2f IN ) {
    #line 555
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 559
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 563
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 567
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 571
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 575
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 579
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 583
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    #line 587
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_2 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD7 = o_8;
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 27 [_PlanetOrigin]
"vs_3_0
; 45 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c28, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r2.w, v0, c7
dp4 r2.z, v0, c10
dp4 r2.y, v0, c9
dp4 r2.x, v0, c8
mov r1.w, r2
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.z, v0, c6
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r2, -r0
dp3 r0.x, r3, r3
rsq r0.w, r0.x
mul r0.xyz, r1.xyww, c28.x
mul r0.y, r0, c25.x
mad r0.xy, r0.z, c26.zwzw, r0
mul o5.xyz, r0.w, r3
mov r0.zw, r1
mov o8, r0
mov o9.xy, r0
mov o0, r1
add r1.xyz, -r2, c24
dp3 r1.w, r1, r1
rsq r1.w, r1.w
mul o6.xyz, r1.w, r1
mov r1.xyz, c27
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r2
dp4 r0.w, v0, c11
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
dp4 r0.x, v0, c2
mov o1.xyz, r2
add o2.xyz, -c24, r1
mov o9.z, -r0.x
mov o9.w, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Matrix 80 [_LightMatrix0] 4
Matrix 176 [_MainRotation] 4
Matrix 240 [_DetailRotation] 4
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityPerDraw" 2
// 48 instructions, 4 temp regs, 0 temp arrays:
// ALU 42 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhppaklinplcboldnoedlnopnabkjffjnabaaaaaamiaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaadamaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcamahaaaaeaaaabaa
mdabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaabaaaaaaafpaaaaadpcbabaaaaaaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaagfaaaaad
hccabaaaacaaaaaagfaaaaadpccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaaddccabaaa
ahaaaaaagfaaaaadpccabaaaaiaaaaaagfaaaaadpccabaaaajaaaaaagiaaaaac
aeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaa
abaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaacaaaaaa
acaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaacaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadgaaaaaf
pccabaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
acaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
abaaaaaaegiccaaaacaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaacaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egacbaaaabaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaabaaaaaaaaaaaaak
hccabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaadiaaaaaipcaabaaaacaaaaaafgbfbaaaaaaaaaaaegiocaaaaaaaaaaa
amaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaaagbabaaa
aaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
anaaaaaakgbkbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaaoaaaaaapgbpbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaaj
pcaabaaaadaaaaaafgafbaiaebaaaaaaacaaaaaaegiocaaaaaaaaaaabaaaaaaa
dcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaaapaaaaaaagaabaiaebaaaaaa
acaaaaaaegaobaaaadaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaaaaaaaaaa
bbaaaaaakgakbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaalpccabaaa
adaaaaaaegiocaaaaaaaaaaabcaaaaaapgapbaiaebaaaaaaacaaaaaaegaobaaa
adaaaaaadgaaaaagpccabaaaaeaaaaaaegaobaiaebaaaaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaaapaaaaaa
aaaaaaajhcaabaaaabaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhccabaaaafaaaaaa
pgapbaaaabaaaaaaegacbaaaacaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
abaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahhccabaaaagaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiocaaaacaaaaaaanaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaacaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaacaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaidcaabaaaacaaaaaa
fgafbaaaabaaaaaaegiacaaaaaaaaaaaagaaaaaadcaaaaakdcaabaaaabaaaaaa
egiacaaaaaaaaaaaafaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaadcaaaaak
dcaabaaaabaaaaaaegiacaaaaaaaaaaaahaaaaaakgakbaaaabaaaaaaegaabaaa
abaaaaaadcaaaaakdccabaaaahaaaaaaegiacaaaaaaaaaaaaiaaaaaapgapbaaa
abaaaaaaegaabaaaabaaaaaadiaaaaaibcaabaaaabaaaaaabkaabaaaaaaaaaaa
akiacaaaabaaaaaaafaaaaaadiaaaaahicaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaadpdiaaaaakfcaabaaaabaaaaaaagadbaaaaaaaaaaaaceaaaaa
aaaaaadpaaaaaaaaaaaaaadpaaaaaaaaaaaaaaahdcaabaaaaaaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadgaaaaafpccabaaaaiaaaaaaegaobaaaaaaaaaaa
dgaaaaaflccabaaaajaaaaaaegambaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaa
bkbabaaaaaaaaaaackiacaaaacaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaacaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaacaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaacaaaaaaahaaaaaadkbabaaa
aaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  highp vec4 o_8;
  highp vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_2.zw;
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = o_8;
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  lowp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 524
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 517
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 403
#line 407
#line 416
#line 424
#line 433
#line 441
#line 454
#line 466
#line 482
#line 494
uniform sampler2D _MainTex;
#line 502
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 506
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 510
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 514
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 538
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 538
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 542
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 546
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 550
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 554
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 524
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 517
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 403
#line 407
#line 416
#line 424
#line 433
#line 441
#line 454
#line 466
#line 482
#line 494
uniform sampler2D _MainTex;
#line 502
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 506
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 510
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 514
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 538
#line 466
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 470
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 407
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 411
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 416
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 420
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 454
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 458
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 462
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 433
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 437
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 557
lowp vec4 frag( in v2f IN ) {
    #line 559
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 563
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 567
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 571
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 575
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 579
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 583
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 587
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    #line 591
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 28 [_PlanetOrigin]
"vs_3_0
; 44 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 42 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 530
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 523
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 408
#line 412
#line 421
#line 429
#line 438
#line 446
#line 459
#line 471
#line 487
#line 500
uniform sampler2D _MainTex;
#line 508
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 512
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 516
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 520
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 544
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 544
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 548
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 552
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 556
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 560
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 530
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 523
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 408
#line 412
#line 421
#line 429
#line 438
#line 446
#line 459
#line 471
#line 487
#line 500
uniform sampler2D _MainTex;
#line 508
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 512
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 516
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 520
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 544
#line 471
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 475
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 412
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 416
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 421
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 425
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 459
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 463
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 467
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 438
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 442
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 563
lowp vec4 frag( in v2f IN ) {
    #line 565
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 569
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 573
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 577
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 581
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 585
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 589
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 593
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    #line 597
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 28 [_PlanetOrigin]
"vs_3_0
; 44 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 42 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 531
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 524
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 409
#line 413
#line 422
#line 430
#line 439
#line 447
#line 460
#line 472
#line 488
#line 501
uniform sampler2D _MainTex;
#line 509
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 513
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 517
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 521
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 545
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 545
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 549
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 553
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 557
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 561
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 531
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 524
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 409
#line 413
#line 422
#line 430
#line 439
#line 447
#line 460
#line 472
#line 488
#line 501
uniform sampler2D _MainTex;
#line 509
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 513
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 517
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 521
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 545
#line 472
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 476
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 413
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 417
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 422
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 426
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 460
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 464
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 468
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 439
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 443
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 564
lowp vec4 frag( in v2f IN ) {
    #line 566
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 570
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 574
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 578
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 582
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 586
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 590
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 594
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    #line 598
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 31 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Matrix 80 [_LightMatrix0] 4
Matrix 176 [_MainRotation] 4
Matrix 240 [_DetailRotation] 4
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 45 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddgpdagppppmnijeogcoekeodlnkpnihbabaaaaaaeaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcieahaaaaeaaaabaa
obabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaalaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaabaaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaapaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaa
agaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaa
egiocaaaaaaaaaaaaiaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaaacaaaaaa
alaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 554
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 558
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 562
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 566
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 570
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 481
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 485
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 422
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 426
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 431
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 435
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 469
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 473
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 477
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 448
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 452
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 573
lowp vec4 frag( in v2f IN ) {
    #line 575
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 579
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 583
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 587
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 591
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 595
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 599
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 603
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    #line 607
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform mat4 unity_World2Shadow[4];
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 28 [_WorldSpaceCameraPos]
Vector 29 [_ProjectionParams]
Vector 30 [_ScreenParams]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [_LightMatrix0]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Vector 31 [_PlanetOrigin]
"vs_3_0
; 48 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c32, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c14
dp4 r1.y, v0, c13
dp4 r1.x, v0, c12
mov r0.w, r1
mov r0.z, c14.w
mov r0.x, c12.w
mov r0.y, c13.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c32.x
mul r2.y, r2, c29.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c30.zwzw, r2
add r2.xyz, -r1, c28
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c23
dp4 r0.z, v0, c22
dp4 r0.x, v0, c20
dp4 r0.y, v0, c21
dp4 o3.w, -r0, c27
dp4 o3.z, -r0, c26
dp4 o3.y, -r0, c25
dp4 o3.x, -r0, c24
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c15
mov o1.xyz, r1
mov r1.xyz, c31
dp4 o7.w, r0, c19
dp4 o7.z, r0, c18
dp4 o7.y, r0, c17
dp4 o7.x, r0, c16
dp4 o8.w, r0, c11
dp4 o8.z, r0, c10
dp4 o8.y, r0, c9
dp4 o8.x, r0, c8
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
add o2.xyz, -c28, r1
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Matrix 80 [_LightMatrix0] 4
Matrix 176 [_MainRotation] 4
Matrix 240 [_DetailRotation] 4
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
// 50 instructions, 4 temp regs, 0 temp arrays:
// ALU 45 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddgpdagppppmnijeogcoekeodlnkpnihbabaaaaaaeaajaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apaaaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcieahaaaaeaaaabaa
obabaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaamaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaalaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaaoaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaabaaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaapaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaabbaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaabcaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaaaaaaaaajhcaabaaaabaaaaaaegacbaia
ebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaaaaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaakgakbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaaaaaaaaaa
egiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
amaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaaaaaaaaa
agaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaafaaaaaaagaabaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaa
ahaaaaaakgakbaaaabaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaahaaaaaa
egiocaaaaaaaaaaaaiaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaai
pcaabaaaacaaaaaafgafbaaaabaaaaaaegiocaaaacaaaaaaajaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaacaaaaaaakaaaaaakgakbaaa
abaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaaacaaaaaa
alaaaaaapgapbaaaabaaaaaaegaobaaaacaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaakncaabaaaabaaaaaa
agahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaadpdgaaaaaf
iccabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
abaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 554
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 558
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 562
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 566
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 570
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 540
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 533
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 418
#line 422
#line 431
#line 439
#line 448
#line 456
#line 469
#line 481
#line 497
#line 510
uniform sampler2D _MainTex;
#line 518
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 522
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 526
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 530
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 554
#line 481
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 485
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 422
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 426
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 431
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 435
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 469
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 473
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 477
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 448
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 452
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 573
lowp vec4 frag( in v2f IN ) {
    #line 575
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 579
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 583
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 587
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 591
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 595
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 599
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 603
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    #line 607
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 28 [_PlanetOrigin]
"vs_3_0
; 44 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 42 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 536
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 529
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 414
#line 418
#line 427
#line 435
#line 444
#line 452
#line 465
#line 477
#line 493
#line 506
uniform sampler2D _MainTex;
#line 514
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 518
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 522
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 526
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 550
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 550
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 554
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 558
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 562
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 566
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 536
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 529
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 414
#line 418
#line 427
#line 435
#line 444
#line 452
#line 465
#line 477
#line 493
#line 506
uniform sampler2D _MainTex;
#line 514
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 518
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 522
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 526
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 550
#line 477
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 481
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 418
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 422
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 427
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 431
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 465
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 469
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 473
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 444
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 448
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 569
lowp vec4 frag( in v2f IN ) {
    #line 571
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 575
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 579
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 583
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 587
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 591
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 595
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 599
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    #line 603
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform vec3 _PlanetOrigin;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;


uniform vec4 _LightPositionRange;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  vec4 tmpvar_2;
  tmpvar_2 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * gl_Vertex);
  vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * gl_Vertex));
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform vec3 _PlanetOrigin;
uniform float _InvFade;
uniform float _OceanRadius;
uniform float _RimDistSub;
uniform float _RimDist;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailScale;
uniform float _FalloffScale;
uniform float _FalloffPow;
uniform vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ZBufferParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 main_1;
  vec4 color_2;
  vec3 tmpvar_3;
  tmpvar_3 = normalize(xlv_TEXCOORD3.xyz);
  vec2 uv_4;
  float r_5;
  if ((abs(tmpvar_3.z) > (1e-08 * abs(tmpvar_3.x)))) {
    float y_over_x_6;
    y_over_x_6 = (tmpvar_3.x / tmpvar_3.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((tmpvar_3.z < 0.0)) {
      if ((tmpvar_3.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(tmpvar_3.x) * 1.5708);
  };
  uv_4.x = (0.5 + (0.159155 * r_5));
  uv_4.y = (0.31831 * (1.5708 - (sign(tmpvar_3.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_3.y))) * (1.5708 + (abs(tmpvar_3.y) * (-0.214602 + (abs(tmpvar_3.y) * (0.0865667 + (abs(tmpvar_3.y) * -0.0310296)))))))))));
  vec2 tmpvar_9;
  tmpvar_9 = dFdx(tmpvar_3.xz);
  vec2 tmpvar_10;
  tmpvar_10 = dFdy(tmpvar_3.xz);
  vec4 tmpvar_11;
  tmpvar_11.x = (0.159155 * sqrt(dot (tmpvar_9, tmpvar_9)));
  tmpvar_11.y = dFdx(uv_4.y);
  tmpvar_11.z = (0.159155 * sqrt(dot (tmpvar_10, tmpvar_10)));
  tmpvar_11.w = dFdy(uv_4.y);
  main_1 = texture2DGradARB (_MainTex, uv_4, tmpvar_11.xy, tmpvar_11.zw);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(xlv_TEXCOORD2.xyz);
  vec2 uv_13;
  float r_14;
  if ((abs(tmpvar_12.z) > (1e-08 * abs(tmpvar_12.x)))) {
    float y_over_x_15;
    y_over_x_15 = (tmpvar_12.x / tmpvar_12.z);
    float s_16;
    float x_17;
    x_17 = (y_over_x_15 * inversesqrt(((y_over_x_15 * y_over_x_15) + 1.0)));
    s_16 = (sign(x_17) * (1.5708 - (sqrt((1.0 - abs(x_17))) * (1.5708 + (abs(x_17) * (-0.214602 + (abs(x_17) * (0.0865667 + (abs(x_17) * -0.0310296)))))))));
    r_14 = s_16;
    if ((tmpvar_12.z < 0.0)) {
      if ((tmpvar_12.x >= 0.0)) {
        r_14 = (s_16 + 3.14159);
      } else {
        r_14 = (r_14 - 3.14159);
      };
    };
  } else {
    r_14 = (sign(tmpvar_12.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_14));
  uv_13.y = (0.31831 * (1.5708 - (sign(tmpvar_12.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_12.y))) * (1.5708 + (abs(tmpvar_12.y) * (-0.214602 + (abs(tmpvar_12.y) * (0.0865667 + (abs(tmpvar_12.y) * -0.0310296)))))))))));
  vec2 tmpvar_18;
  tmpvar_18 = ((uv_13 * 4.0) * _DetailScale);
  vec2 tmpvar_19;
  tmpvar_19 = dFdx(tmpvar_12.xz);
  vec2 tmpvar_20;
  tmpvar_20 = dFdy(tmpvar_12.xz);
  vec4 tmpvar_21;
  tmpvar_21.x = (0.159155 * sqrt(dot (tmpvar_19, tmpvar_19)));
  tmpvar_21.y = dFdx(tmpvar_18.y);
  tmpvar_21.z = (0.159155 * sqrt(dot (tmpvar_20, tmpvar_20)));
  tmpvar_21.w = dFdy(tmpvar_18.y);
  vec3 tmpvar_22;
  tmpvar_22 = abs(tmpvar_12);
  float tmpvar_23;
  tmpvar_23 = float((tmpvar_22.z >= tmpvar_22.x));
  vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_22.yxz, mix (tmpvar_22, tmpvar_22.zxy, vec3(tmpvar_23)), vec3(float((mix (tmpvar_22.x, tmpvar_22.z, tmpvar_23) >= tmpvar_22.y))));
  vec3 p_25;
  p_25 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  vec4 tmpvar_26;
  tmpvar_26 = ((_Color * main_1) * mix (texture2DGradARB (_DetailTex, (((0.5 * tmpvar_24.zy) / abs(tmpvar_24.x)) * _DetailScale), tmpvar_21.xy, tmpvar_21.zw), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * sqrt(dot (p_25, p_25))), 0.0, 1.0))));
  color_2.xyz = tmpvar_26.xyz;
  float tmpvar_27;
  vec3 p_28;
  p_28 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_27 = sqrt(dot (p_28, p_28));
  vec3 p_29;
  p_29 = (_PlanetOrigin - _WorldSpaceCameraPos);
  vec3 p_30;
  p_30 = (xlv_TEXCOORD0 - _PlanetOrigin);
  color_2.w = mix (0.0, tmpvar_26.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_27), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_27)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_29, p_29)) - (_RimDistSub * sqrt(dot (p_30, p_30))))), 0.0, 1.0)));
  float tmpvar_31;
  tmpvar_31 = dot (xlv_TEXCOORD1, normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos)));
  float tmpvar_32;
  tmpvar_32 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_31 * tmpvar_31)));
  float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_33));
  color_2.w = (color_2.w * (1.0 - ((float((_OceanRadius >= tmpvar_32)) * float((tmpvar_31 >= 0.0))) * float((tmpvar_27 >= mix ((tmpvar_34 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_33))), (tmpvar_31 - tmpvar_34), float((tmpvar_31 >= 0.0))))))));
  color_2.xyz = (tmpvar_26.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD4, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = (color_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Vector 24 [_WorldSpaceCameraPos]
Vector 25 [_ProjectionParams]
Vector 26 [_ScreenParams]
Vector 27 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 28 [_PlanetOrigin]
"vs_3_0
; 44 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
dcl_texcoord8 o9
def c29, 0.50000000, 0, 0, 0
dcl_position0 v0
dp4 r1.w, v0, c7
dp4 r1.z, v0, c10
dp4 r1.y, v0, c9
dp4 r1.x, v0, c8
mov r0.w, r1
mov r0.z, c10.w
mov r0.x, c8.w
mov r0.y, c9.w
add r3.xyz, r1, -r0
dp3 r0.x, r3, r3
rsq r0.z, r0.x
mul o5.xyz, r0.z, r3
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mul r2.xyz, r0.xyww, c29.x
mul r2.y, r2, c25.x
dp4 r0.z, v0, c6
mov o0, r0
mad o9.xy, r2.z, c26.zwzw, r2
add r2.xyz, -r1, c24
dp3 r2.w, r2, r2
rsq r2.w, r2.w
dp4 r0.w, v0, c19
dp4 r0.z, v0, c18
dp4 r0.x, v0, c16
dp4 r0.y, v0, c17
dp4 o3.w, -r0, c23
dp4 o3.z, -r0, c22
dp4 o3.y, -r0, c21
dp4 o3.x, -r0, c20
mov o4, -r0
mov r0.xyz, r1
dp4 r0.w, v0, c11
dp4 o7.z, r0, c14
dp4 o7.y, r0, c13
dp4 o7.x, r0, c12
mov r0.xyz, c28
add o2.xyz, -c24, r0
dp4 r0.x, v0, c2
mul o6.xyz, r2.w, r2
mov o1.xyz, r1
add o8.xyz, r1, -c27
mov o9.z, -r0.x
mov o9.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Matrix 16 [_LightMatrix0] 4
Matrix 112 [_MainRotation] 4
Matrix 176 [_DetailRotation] 4
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
// 47 instructions, 4 temp regs, 0 temp arrays:
// ALU 42 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojdgjjiepojphjodgigikoodhbcolkfcabaaaaaammaiaaaaadaaaaaa
cmaaaaaajmaaaaaaleabaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaafpaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaafaepfdejfeejepeoaaedepemepfcaaeoepfcenebemaaklklepfdeheo
baabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaaaeabaaaa
abaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaaeabaaaaacaaaaaaaaaaaaaa
adaaaaaaadaaaaaaapaaaaaaaeabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
apaaaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahaiaaaaaeabaaaaagaaaaaaaaaaaaaa
adaaaaaaahaaaaaaahaiaaaaaeabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
ahaiaaaaaeabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcbaahaaaaeaaaabaa
meabaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaa
agaaaaaafjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaa
baaaaaaafpaaaaadpcbabaaaaaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaa
gfaaaaadhccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadpccabaaa
adaaaaaagfaaaaadpccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaad
hccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaadhccabaaaaiaaaaaa
gfaaaaadpccabaaaajaaaaaagiaaaaacaeaaaaaadiaaaaaipcaabaaaaaaaaaaa
fgbfbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaaaaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaacaaaaaakgbkbaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaapgbpbaaa
aaaaaaaaegaobaaaaaaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaafgbfbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegacbaaaabaaaaaadgaaaaafhccabaaa
abaaaaaaegacbaaaabaaaaaaaaaaaaakhccabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaadiaaaaaipcaabaaaacaaaaaa
fgbfbaaaaaaaaaaaegiocaaaaaaaaaaaaiaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaahaaaaaaagbabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaakgbkbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaakaaaaaapgbpbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaajpcaabaaaadaaaaaafgafbaiaebaaaaaa
acaaaaaaegiocaaaaaaaaaaaamaaaaaadcaaaaalpcaabaaaadaaaaaaegiocaaa
aaaaaaaaalaaaaaaagaabaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadcaaaaal
pcaabaaaadaaaaaaegiocaaaaaaaaaaaanaaaaaakgakbaiaebaaaaaaacaaaaaa
egaobaaaadaaaaaadcaaaaalpccabaaaadaaaaaaegiocaaaaaaaaaaaaoaaaaaa
pgapbaiaebaaaaaaacaaaaaaegaobaaaadaaaaaadgaaaaagpccabaaaaeaaaaaa
egaobaiaebaaaaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegacbaaaabaaaaaa
egiccaiaebaaaaaaadaaaaaaapaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaaj
hcaabaaaacaaaaaaegacbaiaebaaaaaaabaaaaaaegiccaaaabaaaaaaaeaaaaaa
aaaaaaajhccabaaaaiaaaaaaegacbaaaabaaaaaaegiccaiaebaaaaaaacaaaaaa
abaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhccabaaaagaaaaaa
kgakbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaipcaabaaaabaaaaaafgbfbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaabaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
aaaaaaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaa
aaaaaaaaadaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
ahaaaaaaegiccaaaaaaaaaaaaeaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaaiccaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaakncaabaaaabaaaaaaagahbaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaaaa
aaaaaadpaaaaaadpdgaaaaaficcabaaaajaaaaaadkaabaaaaaaaaaaaaaaaaaah
dccabaaaajaaaaaakgakbaaaabaaaaaamgaabaaaabaaaaaadiaaaaaibcaabaaa
aaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaa
dkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaia
ebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec3 _PlanetOrigin;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_2 = (glstate_matrix_mvp * _glesVertex);
  highp vec4 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_4;
  tmpvar_4 = -((_MainRotation * _glesVertex));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_2 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_2.zw;
  tmpvar_1.xyw = o_5.xyw;
  tmpvar_1.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3.xyz;
  xlv_TEXCOORD1 = (_PlanetOrigin - _WorldSpaceCameraPos);
  xlv_TEXCOORD2 = (_DetailRotation * tmpvar_4);
  xlv_TEXCOORD3 = tmpvar_4;
  xlv_TEXCOORD4 = normalize((tmpvar_3.xyz - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD5 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform sampler2D _CameraDepthTexture;
uniform highp vec3 _PlanetOrigin;
uniform highp float _InvFade;
uniform highp float _OceanRadius;
uniform highp float _RimDistSub;
uniform highp float _RimDist;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailScale;
uniform highp float _FalloffScale;
uniform highp float _FalloffPow;
uniform lowp vec4 _Color;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ZBufferParams;
uniform highp vec3 _WorldSpaceCameraPos;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump float NdotL_3;
  mediump vec3 lightDirection_4;
  mediump vec3 ambientLighting_5;
  mediump float sphereCheck_6;
  mediump vec3 worldDir_7;
  mediump float detailLevel_8;
  mediump vec4 color_9;
  mediump vec4 tex_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(xlv_TEXCOORD3.xyz);
  highp vec2 uv_12;
  highp float r_13;
  if ((abs(tmpvar_11.z) > (1e-08 * abs(tmpvar_11.x)))) {
    highp float y_over_x_14;
    y_over_x_14 = (tmpvar_11.x / tmpvar_11.z);
    highp float s_15;
    highp float x_16;
    x_16 = (y_over_x_14 * inversesqrt(((y_over_x_14 * y_over_x_14) + 1.0)));
    s_15 = (sign(x_16) * (1.5708 - (sqrt((1.0 - abs(x_16))) * (1.5708 + (abs(x_16) * (-0.214602 + (abs(x_16) * (0.0865667 + (abs(x_16) * -0.0310296)))))))));
    r_13 = s_15;
    if ((tmpvar_11.z < 0.0)) {
      if ((tmpvar_11.x >= 0.0)) {
        r_13 = (s_15 + 3.14159);
      } else {
        r_13 = (r_13 - 3.14159);
      };
    };
  } else {
    r_13 = (sign(tmpvar_11.x) * 1.5708);
  };
  uv_12.x = (0.5 + (0.159155 * r_13));
  uv_12.y = (0.31831 * (1.5708 - (sign(tmpvar_11.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_11.y))) * (1.5708 + (abs(tmpvar_11.y) * (-0.214602 + (abs(tmpvar_11.y) * (0.0865667 + (abs(tmpvar_11.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_17;
  tmpvar_17 = dFdx(tmpvar_11.xz);
  highp vec2 tmpvar_18;
  tmpvar_18 = dFdy(tmpvar_11.xz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = (0.159155 * sqrt(dot (tmpvar_17, tmpvar_17)));
  tmpvar_19.y = dFdx(uv_12.y);
  tmpvar_19.z = (0.159155 * sqrt(dot (tmpvar_18, tmpvar_18)));
  tmpvar_19.w = dFdy(uv_12.y);
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DGradEXT (_MainTex, uv_12, tmpvar_19.xy, tmpvar_19.zw);
  tex_10 = tmpvar_20;
  mediump vec4 tmpvar_21;
  mediump vec3 detailCoords_22;
  mediump float nylerp_23;
  mediump float zxlerp_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(xlv_TEXCOORD2.xyz);
  highp vec2 uv_26;
  highp float r_27;
  if ((abs(tmpvar_25.z) > (1e-08 * abs(tmpvar_25.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (tmpvar_25.x / tmpvar_25.z);
    highp float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((tmpvar_25.z < 0.0)) {
      if ((tmpvar_25.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(tmpvar_25.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_27));
  uv_26.y = (0.31831 * (1.5708 - (sign(tmpvar_25.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_25.y))) * (1.5708 + (abs(tmpvar_25.y) * (-0.214602 + (abs(tmpvar_25.y) * (0.0865667 + (abs(tmpvar_25.y) * -0.0310296)))))))))));
  highp vec2 tmpvar_31;
  tmpvar_31 = ((uv_26 * 4.0) * _DetailScale);
  highp vec2 tmpvar_32;
  tmpvar_32 = dFdx(tmpvar_25.xz);
  highp vec2 tmpvar_33;
  tmpvar_33 = dFdy(tmpvar_25.xz);
  highp vec4 tmpvar_34;
  tmpvar_34.x = (0.159155 * sqrt(dot (tmpvar_32, tmpvar_32)));
  tmpvar_34.y = dFdx(tmpvar_31.y);
  tmpvar_34.z = (0.159155 * sqrt(dot (tmpvar_33, tmpvar_33)));
  tmpvar_34.w = dFdy(tmpvar_31.y);
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(tmpvar_25);
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_24 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_24) >= tmpvar_35.y));
  nylerp_23 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_24));
  detailCoords_22 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_22, vec3(nylerp_23));
  detailCoords_22 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_22.x);
  highp vec2 coord_41;
  coord_41 = (((0.5 * detailCoords_22.zy) / tmpvar_40) * _DetailScale);
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_DetailTex, coord_41, tmpvar_34.xy, tmpvar_34.zw);
  tmpvar_21 = tmpvar_42;
  highp vec3 p_43;
  p_43 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  highp float tmpvar_44;
  tmpvar_44 = clamp (((2.0 * _DetailDist) * sqrt(dot (p_43, p_43))), 0.0, 1.0);
  detailLevel_8 = tmpvar_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = ((_Color * tex_10) * mix (tmpvar_21, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  color_9.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  highp vec3 p_47;
  p_47 = (xlv_TEXCOORD0 - _WorldSpaceCameraPos);
  tmpvar_46 = sqrt(dot (p_47, p_47));
  highp vec3 p_48;
  p_48 = (_PlanetOrigin - _WorldSpaceCameraPos);
  highp vec3 p_49;
  p_49 = (xlv_TEXCOORD0 - _PlanetOrigin);
  highp float tmpvar_50;
  tmpvar_50 = mix (0.0, tmpvar_45.w, mix ((1.0 - (clamp ((_DistFade * tmpvar_46), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_46)), 0.0, 1.0))), clamp (pow ((_FalloffScale * clamp (dot (xlv_TEXCOORD5, xlv_TEXCOORD4), 0.0, 1.0)), _FalloffPow), 0.0, 1.0), clamp ((_RimDist * (sqrt(dot (p_48, p_48)) - (_RimDistSub * sqrt(dot (p_49, p_49))))), 0.0, 1.0)));
  color_9.w = tmpvar_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((xlv_TEXCOORD0 - _WorldSpaceCameraPos));
  worldDir_7 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = dot (xlv_TEXCOORD1, worldDir_7);
  highp float tmpvar_53;
  tmpvar_53 = sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - (tmpvar_52 * tmpvar_52)));
  highp float tmpvar_54;
  tmpvar_54 = pow (tmpvar_53, 2.0);
  highp float tmpvar_55;
  tmpvar_55 = sqrt(((_OceanRadius * _OceanRadius) - tmpvar_54));
  highp float tmpvar_56;
  tmpvar_56 = (float((_OceanRadius >= tmpvar_53)) * float((tmpvar_52 >= 0.0)));
  sphereCheck_6 = tmpvar_56;
  highp float tmpvar_57;
  tmpvar_57 = (sphereCheck_6 * float((tmpvar_46 >= mix ((tmpvar_55 + sqrt((dot (xlv_TEXCOORD1, xlv_TEXCOORD1) - tmpvar_54))), (tmpvar_52 - tmpvar_55), float((tmpvar_52 >= 0.0))))));
  sphereCheck_6 = tmpvar_57;
  color_9.w = (color_9.w * (1.0 - sphereCheck_6));
  highp vec3 tmpvar_58;
  tmpvar_58 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_4 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = clamp (dot (xlv_TEXCOORD4, lightDirection_4), 0.0, 1.0);
  NdotL_3 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp (((_LightColor0.w * ((NdotL_3 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  color_9.xyz = (tmpvar_45.xyz * tmpvar_62);
  lowp float tmpvar_63;
  tmpvar_63 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (color_9.w * clamp ((_InvFade * (tmpvar_64 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_9.w = tmpvar_65;
  tmpvar_1 = color_9;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 537
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 530
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 415
#line 419
#line 428
#line 436
#line 445
#line 453
#line 466
#line 478
#line 494
#line 507
uniform sampler2D _MainTex;
#line 515
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 519
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 523
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 527
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 551
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 551
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 555
    highp vec4 vertexPos = (_Object2World * v.vertex);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.worldVert = vec3( vertexPos);
    o.worldNormal = normalize((vec3( vertexPos) - origin));
    #line 559
    o.objMain = (-(_MainRotation * v.vertex));
    o.objDetail = (_DetailRotation * o.objMain);
    o.viewDir = normalize(WorldSpaceViewDir( v.vertex));
    o.projPos = ComputeScreenPos( o.pos);
    #line 563
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    #line 567
    o.L = (_PlanetOrigin - _WorldSpaceCameraPos.xyz);
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.worldVert);
    xlv_TEXCOORD1 = vec3(xl_retval.L);
    xlv_TEXCOORD2 = vec4(xl_retval.objDetail);
    xlv_TEXCOORD3 = vec4(xl_retval.objMain);
    xlv_TEXCOORD4 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 537
struct v2f {
    highp vec4 pos;
    highp vec3 worldVert;
    highp vec3 L;
    highp vec4 objDetail;
    highp vec4 objMain;
    highp vec3 worldNormal;
    highp vec3 viewDir;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 530
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 415
#line 419
#line 428
#line 436
#line 445
#line 453
#line 466
#line 478
#line 494
#line 507
uniform sampler2D _MainTex;
#line 515
uniform sampler2D _DetailTex;
uniform lowp vec4 _Color;
uniform highp float _FalloffPow;
uniform highp float _FalloffScale;
#line 519
uniform highp float _DetailScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform highp float _DistFade;
#line 523
uniform highp float _DistFadeVert;
uniform highp float _RimDist;
uniform highp float _RimDistSub;
uniform highp float _OceanRadius;
#line 527
uniform highp float _InvFade;
uniform highp vec3 _PlanetOrigin;
uniform sampler2D _CameraDepthTexture;
#line 551
#line 478
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    #line 482
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 419
highp vec4 Derivatives( in highp float lat, in highp float lon, in highp vec3 pos ) {
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xz)));
    #line 423
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xz)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 428
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    #line 432
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    return uv;
}
#line 466
mediump vec4 GetShereDetailMap( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = ((GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0)) * 4.0) * detailScale);
    #line 470
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 474
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    return xll_tex2Dgrad( texSampler, (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale), uvdd.xy, uvdd.zw);
}
#line 445
mediump vec4 GetSphereMap( in sampler2D texSampler, in highp vec3 sphereVect ) {
    highp vec3 sphereVectNorm = normalize(sphereVect);
    highp vec2 uv = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    #line 449
    highp vec4 uvdd = Derivatives( (uv.x - 0.5), uv.y, sphereVectNorm);
    mediump vec4 tex = xll_tex2Dgrad( texSampler, uv, uvdd.xy, uvdd.zw);
    return tex;
}
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 570
lowp vec4 frag( in v2f IN ) {
    #line 572
    mediump vec4 color;
    mediump vec4 main = GetSphereMap( _MainTex, vec3( IN.objMain));
    mediump vec4 detail = GetShereDetailMap( _DetailTex, vec3( IN.objDetail), _DetailScale);
    highp float viewDist = distance( IN.worldVert, _WorldSpaceCameraPos);
    #line 576
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * viewDist));
    color = ((_Color * main.xyzw) * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    highp float rim = xll_saturate_f(dot( IN.viewDir, IN.worldNormal));
    rim = xll_saturate_f(pow( (_FalloffScale * rim), _FalloffPow));
    #line 580
    highp float dist = distance( IN.worldVert, _WorldSpaceCameraPos);
    highp float distLerp = xll_saturate_f((_RimDist * (distance( _PlanetOrigin, _WorldSpaceCameraPos) - (_RimDistSub * distance( IN.worldVert, _PlanetOrigin)))));
    highp float distFade = (1.0 - GetDistanceFade( dist, _DistFade, _DistFadeVert));
    highp float distAlpha = mix( distFade, rim, distLerp);
    #line 584
    color.w = mix( 0.0, color.w, distAlpha);
    mediump vec3 worldDir = normalize((IN.worldVert - _WorldSpaceCameraPos.xyz));
    highp float tc = dot( IN.L, worldDir);
    highp float d = sqrt((dot( IN.L, IN.L) - (tc * tc)));
    #line 588
    highp vec3 norm = normalize((-IN.L));
    highp float d2 = pow( d, 2.0);
    highp float td = sqrt((dot( IN.L, IN.L) - d2));
    highp float tlc = sqrt(((_OceanRadius * _OceanRadius) - d2));
    #line 592
    mediump float sphereCheck = (step( d, _OceanRadius) * step( 0.0, tc));
    highp float sphereDist = mix( (tlc + td), (tc - tlc), step( 0.0, tc));
    sphereCheck *= step( sphereDist, dist);
    color.w *= (1.0 - sphereCheck);
    #line 596
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( IN.worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 600
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    color.xyz *= xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    #line 604
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.worldVert = vec3(xlv_TEXCOORD0);
    xlt_IN.L = vec3(xlv_TEXCOORD1);
    xlt_IN.objDetail = vec4(xlv_TEXCOORD2);
    xlt_IN.objMain = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD4);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 60
//   d3d9 - ALU: 150 to 179, TEX: 6 to 7
//   d3d11 - ALU: 123 to 153, TEX: 0 to 1, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 150 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 129 instructions, 5 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedodhfakccdbjecjkgehmkbcnagifkhmblabaaaaaaimbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccebaaaaaeaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
bbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 150 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4_pp r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq_pp r0.x, r0.x
mul_pp r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 256 // 252 used size, 18 vars
Vector 16 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_FalloffPow]
Float 196 [_FalloffScale]
Float 200 [_DetailScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_DistFade]
Float 216 [_DistFadeVert]
Float 220 [_RimDist]
Float 224 [_RimDistSub]
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 129 instructions, 5 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedeealjpdfiadfaanfknimefaadpdabhgkabaaaaaahebbaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaneaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefccebaaaaaeaaaaaaaajaeaaaafjaaaaaeegiocaaa
aaaaaaaabaaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaa
acaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaia
ebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaah
ecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaa
aaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaa
abeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaaf
ccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaa
aaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaa
aaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaa
acaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaa
alaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaa
adaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaai
hcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaaj
icaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaa
abaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaa
aaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaaj
bcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaia
ibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaia
ibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
ggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
bcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
bcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaaamaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaa
alaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaa
ngafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaa
aeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaa
agaabaaaadaaaaaapgipcaaaaaaaaaaaamaaaaaadcaaaaajpcaabaaaabaaaaaa
fgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaadaaaaaabkiacaaaaaaaaaaaanaaaaaadccaaaalccaabaaaabaaaaaa
ckiacaiaebaaaaaaaaaaaaaaanaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadp
dgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaah
ccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaamaaaaaacpaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
akiacaaaaaaaaaaaamaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaaapaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
apaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaaaoaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaaanaaaaaa
dcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaabaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaa
agiacaaaaaaaaaaaanaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 150 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 129 instructions, 5 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpjmgddhfndgneamapoljmkkechcpehlhabaaaaaaimbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccebaaaaaeaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
bbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 150 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 129 instructions, 5 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedodhfakccdbjecjkgehmkbcnagifkhmblabaaaaaaimbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccebaaaaaeaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
bbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 150 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4_pp r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq_pp r0.x, r0.x
mul_pp r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 129 instructions, 5 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgpomnoikmehpjahnpdhegionfoeicggoabaaaaaaimbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccebaaaaaeaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
bbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 150 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 129 instructions, 5 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedklhlalbooadodmncbfjdjgmcaabnkcmgabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 150 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 129 instructions, 5 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedklhlalbooadodmncbfjdjgmcaabnkcmgabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 150 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4_pp r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq_pp r0.x, r0.x
mul_pp r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 129 instructions, 5 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpjmgddhfndgneamapoljmkkechcpehlhabaaaaaaimbbaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefccebaaaaaeaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
afaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaa
bbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 150 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4_pp r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq_pp r0.x, r0.x
mul_pp r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Vector 144 [_LightColor0] 4
Vector 304 [_Color] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 129 instructions, 5 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfoabdeabjikimcopindiokalkceajlomabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaabdaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabeaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
beaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bfaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabfaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabhaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabgaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 150 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 129 instructions, 5 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjffhhnpgcgnlgaghhhelimhkkjniahefabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 150 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 129 instructions, 5 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjffhhnpgcgnlgaghhhelimhkkjniahefabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 150 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Vector 144 [_LightColor0] 4
Vector 304 [_Color] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 129 instructions, 5 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfekciligicncmkehfdeeblaoifhckhdmabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaabdaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabeaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
beaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bfaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabfaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabhaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabgaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 150 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Vector 144 [_LightColor0] 4
Vector 304 [_Color] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 129 instructions, 5 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfekciligicncmkehfdeeblaoifhckhdmabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaabdaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabeaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
beaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bfaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabfaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabhaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabgaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 150 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 129 instructions, 5 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjffhhnpgcgnlgaghhhelimhkkjniahefabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Vector 14 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 150 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c20, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r1.xyz, r0.x, v1
abs r0.xyz, r1
dsy r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c15.y, c15.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c15.y, c15.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mul_pp r0.xy, r0, c19.y
abs r0.z, r1.y
mul r2.xy, r0, c7.x
add r0.y, -r0.z, c15
mad r0.x, r0.z, c15.z, c15.w
mad r0.x, r0, r0.z, c16
rsq r0.y, r0.y
mad r0.x, r0, r0.z, c16.y
rcp r0.y, r0.y
mul r0.z, r0.x, r0.y
cmp r0.y, r1, c15.x, c15
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c16, r0
mad r0.w, r0.y, c16, r0.z
mul r1.w, r0, c7.x
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r3.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r3.w
mul r2.z, r1.w, c19
rcp r1.w, r1.y
min r1.y, r0.w, r3.w
mul r4.x, r1.y, r1.w
mul r4.y, r4.x, r4.x
mad r4.z, r4.y, c17.y, c17
add r0.w, r0, -r3
dsx r1.w, r2.z
dsy r1.y, r2.z
dsx r2.zw, r1.xyxz
mul r2.zw, r2, r2
add r1.x, r2.z, r2.w
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
add r3.xyz, -v0, c1
dp3 r3.y, r3, r3
rsq r1.z, r1.z
rsq r1.x, r1.x
mad r4.z, r4, r4.y, c17.w
rcp r2.z, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c19.x
mul r1.x, r2.z, c19
texldd r1, r2, s1, r1.zwzw, r1
add_pp r2, -r1, c15.y
rsq r3.z, r3.y
mad r3.x, r4.z, r4.y, c18
mad r3.y, r3.x, r4, c18
rcp r3.x, r3.z
mul r3.z, r3.x, c8.x
mul_sat r3.z, r3, c16
mad_pp r2, r3.z, r2, r1
abs r1.x, r0.y
add r1.z, -r1.x, c15.y
mad r3.y, r3, r4, c18.z
mul r3.y, r3, r4.x
add r1.y, -r3, c18.w
cmp r0.w, -r0, r3.y, r1.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mad r1.x, r1.y, r1, c16.y
mul r1.x, r1, r1.z
add r1.z, -r0.w, c16.w
cmp r0.y, r0, c15.x, c15
mul r1.y, r0, r1.x
mad r1.x, -r1.y, c16.z, r1
cmp r0.w, r0.z, r0, r1.z
mad r0.y, r0, c16.w, r1.x
cmp r1.x, r0, r0.w, -r0.w
mul r0.w, r0.y, c17.x
mad r3.z, r1.x, c19.x, c19.y
mov r1.xyz, v3
dp3_sat r1.x, v4, r1
dsy r1.zw, r0.xyxz
mul r3.y, r1.x, c6.x
dsx r1.xy, r0.xzzw
mul r1.xy, r1, r1
mul r1.zw, r1, r1
add r0.x, r1, r1.y
add r0.z, r1, r1.w
rsq r0.x, r0.x
rsq r0.z, r0.z
rcp r0.x, r0.x
rcp r0.z, r0.z
dsx r0.y, r0.w
mov r3.w, r0
dsy r0.w, r0
mul r0.x, r0, c19
mul r0.z, r0, c19.x
texldd r1, r3.zwzw, s0, r0, r0.zwzw
pow_sat r0, r3.y, c5.x
mul r0.z, -r3.x, c11.x
mul_pp r1, r1, c4
mul_pp r1, r1, r2
mov r2.x, r0
dp4 r0.x, c2, c2
mul_sat r0.y, r3.x, c10.x
add_sat r0.z, r0, c15.y
mad r0.w, -r0.y, r0.z, c15.y
rsq r0.x, r0.x
mul r0.xyz, r0.x, c2
add r2.w, r2.x, -r0
dp3_sat r2.x, v3, r0
mov r0.xyz, c1
add_pp r3.x, r2, c19.w
add r2.xyz, -c14, r0
add r0.xyz, -v0, c14
dp3 r0.x, r0, r0
dp3 r2.x, r2, r2
rsq r0.y, r2.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r2.y, -r0.x, c13.x, r0
mul_pp r0.y, r3.x, c3.w
mul_pp_sat r2.x, r0.y, c20
mov r0.x, c9
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r2.x, c0
mul_sat r2.x, r2.y, c12
mad r0.w, r2.x, r2, r0
mul_pp oC0.xyz, r1, r0
mul_pp oC0.w, r1, r0
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 129 instructions, 5 temp regs, 0 temp arrays:
// ALU 116 float, 0 int, 7 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjffhhnpgcgnlgaghhhelimhkkjniahefabaaaaaakebbaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefccebaaaaa
eaaaaaaaajaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaa
aeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaaj
icaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
aoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaa
abaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
bcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
ccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaa
abaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaa
alaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaa
egaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
adaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaa
ogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaa
aaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaa
adaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaa
acaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaa
jgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaa
acaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaa
acaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaa
dkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaa
aeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaa
abaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaa
acaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaa
abaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaa
pgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaak
gcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadp
aaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaa
dcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaa
abaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaa
ckaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaa
akaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
kgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaaf
ccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaa
acaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaa
acaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaa
akaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaa
idpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaa
aeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaa
bbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaa
akaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 175 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r0.y, -r2.z, c14.x
add r1.x, r3.w, -r1
cmp r0.y, r0, c16, c16.x
cmp r1.x, r1, c16.y, c16
mul r0.y, r0, r0.z
mad_pp r0.y, -r0, r1.x, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 153 instructions, 5 temp regs, 0 temp arrays:
// ALU 137 float, 0 int, 10 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedekcdbkdhaegjhciaeakjmnppkfhkkjcjabaaaaaagebeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcpmbcaaaaeaaaaaaalpaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 175 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4_pp r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq_pp r1.x, r1.x
mul_pp r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r0.y, -r2.z, c14.x
add r1.x, r3.w, -r1
cmp r0.y, r0, c16, c16.x
cmp r1.x, r1, c16.y, c16
mul r0.y, r0, r0.z
mad_pp r0.y, -r0, r1.x, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 256 // 252 used size, 18 vars
Vector 16 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_FalloffPow]
Float 196 [_FalloffScale]
Float 200 [_DetailScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_DistFade]
Float 216 [_DistFadeVert]
Float 220 [_RimDist]
Float 224 [_RimDistSub]
Float 228 [_OceanRadius]
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 153 instructions, 5 temp regs, 0 temp arrays:
// ALU 137 float, 0 int, 10 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmjbnihgejkilmjoomfjhclinmagfmkkmabaaaaaaembeaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaneaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcpmbcaaaaeaaaaaaalpaeaaaafjaaaaaeegiocaaa
aaaaaaaabaaaaaaafjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaa
acaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaaalaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaa
aaaaaaaaamaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaa
eeaaaaaficaabaaaadaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaa
acaaaaaaegacbaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaa
pgipcaaaaaaaaaaaamaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaa
bkiacaaaaaaaaaaaanaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaaanaaaaaaakaabaaa
aeaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaaamaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
amaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaaapaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaaapaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaaaoaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaaanaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaadaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaa
aoaaaaaabkiacaaaaaaaaaaaaoaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaa
aaaaaaaaaoaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaah
bcaabaaaabaaaaaaakaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
abaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaaaaaaaaa
anaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 175 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r0.y, -r2.z, c14.x
add r1.x, r3.w, -r1
cmp r0.y, r0, c16, c16.x
cmp r1.x, r1, c16.y, c16
mul r0.y, r0, r0.z
mad_pp r0.y, -r0, r1.x, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 153 instructions, 5 temp regs, 0 temp arrays:
// ALU 137 float, 0 int, 10 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedipajfhalfejfmndppfmejihaajcjdomfabaaaaaagebeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcpmbcaaaaeaaaaaaalpaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 175 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r0.y, -r2.z, c14.x
add r1.x, r3.w, -r1
cmp r0.y, r0, c16, c16.x
cmp r1.x, r1, c16.y, c16
mul r0.y, r0, r0.z
mad_pp r0.y, -r0, r1.x, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 153 instructions, 5 temp regs, 0 temp arrays:
// ALU 137 float, 0 int, 10 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedekcdbkdhaegjhciaeakjmnppkfhkkjcjabaaaaaagebeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcpmbcaaaaeaaaaaaalpaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 175 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4_pp r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq_pp r1.x, r1.x
mul_pp r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r0.y, -r2.z, c14.x
add r1.x, r3.w, -r1
cmp r0.y, r0, c16, c16.x
cmp r1.x, r1, c16.y, c16
mul r0.y, r0, r0.z
mad_pp r0.y, -r0, r1.x, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 153 instructions, 5 temp regs, 0 temp arrays:
// ALU 137 float, 0 int, 10 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgfnikcneamhinklnnjloiflfccnfmiababaaaaaagebeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcpmbcaaaaeaaaaaaalpaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 175 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r0.y, -r2.z, c14.x
add r1.x, r3.w, -r1
cmp r0.y, r0, c16, c16.x
cmp r1.x, r1, c16.y, c16
mul r0.y, r0, r0.z
mad_pp r0.y, -r0, r1.x, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 153 instructions, 5 temp regs, 0 temp arrays:
// ALU 137 float, 0 int, 10 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfmcaejcdabbkfgniandbmpaoielfcfhcabaaaaaahmbeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcpmbcaaaa
eaaaaaaalpaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabbaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaaaaaaaaaabcaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkaabaaaabaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
ccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaaakaabaaaaeaaaaaa
akaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 175 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r0.y, -r2.z, c14.x
add r1.x, r3.w, -r1
cmp r0.y, r0, c16, c16.x
cmp r1.x, r1, c16.y, c16
mul r0.y, r0, r0.z
mad_pp r0.y, -r0, r1.x, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 153 instructions, 5 temp regs, 0 temp arrays:
// ALU 137 float, 0 int, 10 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfmcaejcdabbkfgniandbmpaoielfcfhcabaaaaaahmbeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcpmbcaaaa
eaaaaaaalpaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabbaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaaaaaaaaaabcaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkaabaaaabaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
ccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaaakaabaaaaeaaaaaa
akaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 175 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4_pp r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq_pp r1.x, r1.x
mul_pp r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r0.y, -r2.z, c14.x
add r1.x, r3.w, -r1
cmp r0.y, r0, c16, c16.x
cmp r1.x, r1, c16.y, c16
mul r0.y, r0, r0.z
mad_pp r0.y, -r0, r1.x, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 153 instructions, 5 temp regs, 0 temp arrays:
// ALU 137 float, 0 int, 10 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedipajfhalfejfmndppfmejihaajcjdomfabaaaaaagebeaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcpmbcaaaaeaaaaaaalpaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaa
afaaaaaagcbaaaadhcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 175 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4_pp r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq_pp r1.x, r1.x
mul_pp r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r0.y, -r2.z, c14.x
add r1.x, r3.w, -r1
cmp r0.y, r0, c16, c16.x
cmp r1.x, r1, c16.y, c16
mul r0.y, r0, r0.z
mad_pp r0.y, -r0, r1.x, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Vector 144 [_LightColor0] 4
Vector 304 [_Color] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_OceanRadius]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 153 instructions, 5 temp regs, 0 temp arrays:
// ALU 137 float, 0 int, 10 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddaigaloliedldifjkjjkdcjkjmkcnpebabaaaaaahmbeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcpmbcaaaa
eaaaaaaalpaeaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabdaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabeaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabfaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabfaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabhaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabgaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaabkiacaaaaaaaaaaabgaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaabkaabaaaabaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
ccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaaakaabaaaaeaaaaaa
akaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 175 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r0.y, -r2.z, c14.x
add r1.x, r3.w, -r1
cmp r0.y, r0, c16, c16.x
cmp r1.x, r1, c16.y, c16
mul r0.y, r0, r0.z
mad_pp r0.y, -r0, r1.x, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 153 instructions, 5 temp regs, 0 temp arrays:
// ALU 137 float, 0 int, 10 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcnfnifcfobipjmoijapmbdaildkkidkpabaaaaaahmbeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcpmbcaaaa
eaaaaaaalpaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabbaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaaaaaaaaaabcaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkaabaaaabaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
ccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaaakaabaaaaeaaaaaa
akaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 175 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r0.y, -r2.z, c14.x
add r1.x, r3.w, -r1
cmp r0.y, r0, c16, c16.x
cmp r1.x, r1, c16.y, c16
mul r0.y, r0, r0.z
mad_pp r0.y, -r0, r1.x, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 153 instructions, 5 temp regs, 0 temp arrays:
// ALU 137 float, 0 int, 10 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcnfnifcfobipjmoijapmbdaildkkidkpabaaaaaahmbeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcpmbcaaaa
eaaaaaaalpaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabbaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaaaaaaaaaabcaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkaabaaaabaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
ccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaaakaabaaaaeaaaaaa
akaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 175 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r0.y, -r2.z, c14.x
add r1.x, r3.w, -r1
cmp r0.y, r0, c16, c16.x
cmp r1.x, r1, c16.y, c16
mul r0.y, r0, r0.z
mad_pp r0.y, -r0, r1.x, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Vector 144 [_LightColor0] 4
Vector 304 [_Color] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_OceanRadius]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 153 instructions, 5 temp regs, 0 temp arrays:
// ALU 137 float, 0 int, 10 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedadecdcilpibjlphdmadkffkjoegfnilaabaaaaaahmbeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcpmbcaaaa
eaaaaaaalpaeaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabdaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabeaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabfaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabfaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabhaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabgaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaabkiacaaaaaaaaaaabgaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaabkaabaaaabaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
ccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaaakaabaaaaeaaaaaa
akaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 175 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r0.y, -r2.z, c14.x
add r1.x, r3.w, -r1
cmp r0.y, r0, c16, c16.x
cmp r1.x, r1, c16.y, c16
mul r0.y, r0, r0.z
mad_pp r0.y, -r0, r1.x, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Vector 144 [_LightColor0] 4
Vector 304 [_Color] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_OceanRadius]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 153 instructions, 5 temp regs, 0 temp arrays:
// ALU 137 float, 0 int, 10 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedadecdcilpibjlphdmadkffkjoegfnilaabaaaaaahmbeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcpmbcaaaa
eaaaaaaalpaeaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabdaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabeaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabfaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabfaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabeaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabhaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabgaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaabkiacaaaaaaaaaaabgaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaabkaabaaaabaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
ccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaaakaabaaaaeaaaaaa
akaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 175 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r0.y, -r2.z, c14.x
add r1.x, r3.w, -r1
cmp r0.y, r0, c16, c16.x
cmp r1.x, r1, c16.y, c16
mul r0.y, r0, r0.z
mad_pp r0.y, -r0, r1.x, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 153 instructions, 5 temp regs, 0 temp arrays:
// ALU 137 float, 0 int, 10 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcnfnifcfobipjmoijapmbdaildkkidkpabaaaaaahmbeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcpmbcaaaa
eaaaaaaalpaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabbaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaaaaaaaaaabcaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkaabaaaabaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
ccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaaakaabaaaaeaaaaaa
akaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_WorldSpaceLightPos0]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_FalloffPow]
Float 6 [_FalloffScale]
Float 7 [_DetailScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_DistFade]
Float 11 [_DistFadeVert]
Float 12 [_RimDist]
Float 13 [_RimDistSub]
Float 14 [_OceanRadius]
Vector 15 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"ps_3_0
; 175 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c21, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
dsx r3.xy, r1.xzzw
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c16.y, c16.x
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c16.y, c16.x
mad r0.xyz, r0.w, r2, r0.yxzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c16.y
mad r0.w, r0.z, c16.z, c16
mad r0.w, r0, r0.z, c17.x
mad r0.z, r0.w, r0, c17.y
mul_pp r0.xy, r0, c20.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c16.x, c16.y
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c17.z, r1.w
mad r0.w, r0, c17, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c7.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r2.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r2.z
abs r4.x, r2
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c20.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
dsx r0.w, r1.y
mul r3.xy, r3, r3
add r0.z, r3.x, r3.y
mad r2.w, r4, c18.y, c18.z
mad r2.w, r2, r4, c18
add r3.xyz, -v0, c1
rsq r0.z, r0.z
rcp r0.z, r0.z
mad r3.w, r2, r4, c19.x
dp3 r5.x, r3, r3
rsq r2.w, r5.x
mad r5.x, r3.w, r4.w, c19.y
mad r4.w, r5.x, r4, c19.z
rcp r3.w, r2.w
mul r4.z, r4.w, r4
mul r5.x, r3.w, c8
mul_sat r4.w, r5.x, c17.z
dsy r1.y, r1
mul r1.x, r1, c20
mul r0.xy, r0, c7.x
mul r0.z, r0, c20.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c16.y
mad_pp r0, r4.w, r1, r0
add r1.x, r4, -r4.y
add r1.y, -r4.z, c19.w
cmp r1.w, -r1.x, r4.z, r1.y
abs r1.x, r2.y
add r4.x, -r1.w, c17.w
dsy r4.zw, r2.xyxz
add r1.z, -r1.x, c16.y
mad r1.y, r1.x, c16.z, c16.w
mad r1.y, r1, r1.x, c17.x
rsq r1.z, r1.z
cmp r1.w, r2.z, r1, r4.x
mad r1.x, r1.y, r1, c17.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, r2.y, c16, c16.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c17.z, r1
cmp r1.z, r2.x, r1.w, -r1.w
mad r1.x, r1, c17.w, r1.y
mul r1.w, r1.x, c18.x
dp4 r1.x, c2, c2
mad r4.x, r1.z, c20, c20.y
rsq r1.x, r1.x
mul r1.xyz, r1.x, c2
dp3_sat r5.x, v4, r1
dsx r1.xy, r2.xzzw
mul r1.xy, r1, r1
add r1.x, r1, r1.y
mul r4.zw, r4, r4
add r1.y, r4.z, r4.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
dsx r2.y, r1.w
mov r4.y, r1.w
mul r2.x, r1, c20
dsy r1.w, r1
mul r1.z, r1.y, c20.x
texldd r1, r4, s0, r2, r1.zwzw
mul_pp r1, r1, c4
mul_pp r0, r1, r0
add_pp r2.x, r5, c20.w
mul_pp r2.y, r2.x, c3.w
mul r1.xyz, r2.w, -r3
mul_pp_sat r4.x, r2.y, c21
mov r2.x, c9
add r2.xyz, c3, r2.x
mad_sat r2.xyz, r2, r4.x, c0
mul_pp oC0.xyz, r0, r2
mov r0.xyz, v4
dp3_sat r0.x, v5, r0
dp3 r2.x, v1, r1
dp3 r2.y, v1, v1
mul r0.x, r0, c6
pow_sat r1, r0.x, c5.x
mul r0.x, -r3.w, c11
add_sat r0.y, r0.x, c16
mul_sat r0.x, r3.w, c10
mad r1.w, -r0.x, r0.y, c16.y
mov r0.x, r1
mad r0.z, -r2.x, r2.x, r2.y
rsq r1.x, r0.z
add r2.w, r0.x, -r1
rcp r2.z, r1.x
mov r0.xyz, c1
add r1.xyz, -c15, r0
add r0.xyz, -v0, c15
dp3 r0.x, r0, r0
dp3 r1.x, r1, r1
rsq r0.y, r1.x
rsq r0.x, r0.x
rcp r0.y, r0.y
rcp r0.x, r0.x
mad r0.x, -r0, c13, r0.y
mul r0.y, r2.z, r2.z
add r0.z, r2.y, -r0.y
mul_sat r0.x, r0, c12
mad r0.x, r0, r2.w, r1.w
mad r0.y, c14.x, c14.x, -r0
rsq r0.z, r0.z
rsq r0.y, r0.y
rcp r0.z, r0.z
rcp r0.y, r0.y
add r1.x, r0.y, r0.z
add r0.y, r2.x, -r0
add r0.y, r0, -r1.x
cmp r0.z, r2.x, c16.y, c16.x
mad r1.x, r0.z, r0.y, r1
add r0.y, -r2.z, c14.x
add r1.x, r3.w, -r1
cmp r0.y, r0, c16, c16.x
cmp r1.x, r1, c16.y, c16
mul r0.y, r0, r0.z
mad_pp r0.y, -r0, r1.x, c16
mul_pp r0.x, r0.w, r0
mul_pp oC0.w, r0.x, r0.y
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 153 instructions, 5 temp regs, 0 temp arrays:
// ALU 137 float, 0 int, 10 uint
// TEX 0 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcnfnifcfobipjmoijapmbdaildkkidkpabaaaaaahmbeaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcpmbcaaaa
eaaaaaaalpaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
gcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaah
bcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaa
igbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaa
dkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdp
diaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaaj
ccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdp
dbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaa
aaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejma
aaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaah
bcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaa
abaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaak
icaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaa
ckaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaa
akaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaa
idpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaa
adaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaa
amaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaa
egaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdo
apaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaa
diaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaa
egbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaa
dgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaa
aeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaa
abaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaa
adaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaa
pgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaa
adaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaak
icaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaa
acaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaia
ibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaa
aaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaa
abaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaa
acaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaa
acaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaa
acaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaa
abaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaa
ckaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaaf
mcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaa
acaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaa
elaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaa
akaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaa
abaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaaj
hcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
baaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaa
adaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaabbaaaaaadgcaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaia
ebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaa
adaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaam
ecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaaaaaaaaaabcaaaaaa
ckaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaa
bnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaah
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaa
abaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
bnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkaabaaaabaaaaaa
abaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
ccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
dkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaaakaabaaaaeaaaaaa
akaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_OFF" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 154 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 136 instructions, 5 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedncncplmhbjbmhlkdmcbkhkgbigahgbigabaaaaaakebcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdmbbaaaaeaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaa
gcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaia
ebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaah
ecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaa
aaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaa
abeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaaf
ccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaa
aaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaa
aaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaa
acaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaa
apaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaa
adaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaai
hcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaaj
icaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaa
abaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaa
aaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaaj
bcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaia
ibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaia
ibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
ggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
bcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
bcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaa
alaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaa
ngafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaa
aeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaa
agaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaa
fgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaa
ckiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadp
dgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaah
ccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
akiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaa
dcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 154 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4_pp r1.y, c3, c3
rsq_pp r1.w, r1.y
mul_pp r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 256 // 252 used size, 18 vars
Vector 16 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_FalloffPow]
Float 196 [_FalloffScale]
Float 200 [_DetailScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_DistFade]
Float 216 [_DistFadeVert]
Float 220 [_RimDist]
Float 224 [_RimDistSub]
Float 232 [_InvFade]
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 136 instructions, 5 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhbmednkgdimknhkdcmjbejlahaednafbabaaaaaaimbcaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaneaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcdmbbaaaaeaaaaaaaepaeaaaafjaaaaaeegiocaaa
aaaaaaaabaaaaaaafjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaa
acaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaa
adaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaad
hcbabaaaagaaaaaagcbaaaadpcbabaaaahaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaa
aeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaa
bkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaa
ddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkoln
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
ochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaa
aaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
bnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
abaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaak
icaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdo
abeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaa
aaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdp
aaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaa
ckaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaa
ckaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaa
acaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaa
aaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
apaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaa
aaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaa
ogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
bcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
aaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaa
abaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaa
egiocaaaaaaaaaaaalaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaa
baaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaa
abaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaa
acaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaa
adaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaia
ibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaa
dcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaia
ibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaa
adaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaia
ibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
adaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaa
abaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaa
kgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaah
dcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaia
mbaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaa
acaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaa
dcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaa
acaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaa
amaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdp
alaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaa
ckaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaaf
dcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaa
acaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
diaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaah
ecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaal
pcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaa
egacbaaaadaaaaaaelaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaai
ccaabaaaadaaaaaaagaabaaaadaaaaaapgipcaaaaaaaaaaaamaaaaaadcaaaaaj
pcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaa
diaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
bcaabaaaabaaaaaaakaabaaaadaaaaaabkiacaaaaaaaaaaaanaaaaaadccaaaal
ccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaaanaaaaaaakaabaaaadaaaaaa
abeaaaaaaaaaiadpdgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaak
bcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaa
diaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaamaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaa
bkaabaaaabaaaaaaakiacaaaaaaaaaaaamaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaapaaaaaaegiccaia
ebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaia
ebaaaaaaaaaaaaaaapaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaal
ecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaaaoaaaaaadkaabaaaabaaaaaa
ckaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaa
aaaaaaaaanaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaaahaaaaaapgbpbaaa
ahaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaa
akaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaaahaaaaaadicaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaackiacaaaaaaaaaaaaoaaaaaadiaaaaah
iccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaa
afaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaa
abaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaaaaaaaaa
anaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 154 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 136 instructions, 5 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddhbiheiioemaobmheaklbecpdgpoljaiabaaaaaakebcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdmbbaaaaeaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaa
gcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaia
ebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaah
ecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaa
aaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaa
abeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaaf
ccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaa
aaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaa
aaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaa
acaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaa
apaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaa
adaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaai
hcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaaj
icaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaa
abaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaa
aaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaaj
bcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaia
ibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaia
ibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
ggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
bcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
bcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaa
alaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaa
ngafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaa
aeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaa
agaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaa
fgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaa
ckiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadp
dgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaah
ccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
akiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaa
dcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 154 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 136 instructions, 5 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedncncplmhbjbmhlkdmcbkhkgbigahgbigabaaaaaakebcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdmbbaaaaeaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaa
gcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaia
ebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaah
ecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaa
aaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaa
abeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaaf
ccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaa
aaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaa
aaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaa
acaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaa
apaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaa
adaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaai
hcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaaj
icaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaa
abaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaa
aaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaaj
bcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaia
ibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaia
ibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
ggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
bcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
bcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaa
alaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaa
ngafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaa
aeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaa
agaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaa
fgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaa
ckiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadp
dgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaah
ccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
akiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaa
dcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 154 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4_pp r1.y, c3, c3
rsq_pp r1.w, r1.y
mul_pp r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 136 instructions, 5 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpdiophneplejfijpppebknnomkbmedfgabaaaaaakebcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdmbbaaaaeaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaa
gcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaia
ebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaah
ecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaa
aaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaa
abeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaaf
ccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaa
aaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaa
aaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaa
acaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaa
apaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaa
adaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaai
hcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaaj
icaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaa
abaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaa
aaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaaj
bcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaia
ibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaia
ibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
ggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
bcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
bcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaa
alaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaa
ngafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaa
aeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaa
agaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaa
fgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaa
ckiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadp
dgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaah
ccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
akiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaa
dcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 154 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 136 instructions, 5 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedncghalfhnpjehpoamiffdoppaabgkdioabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 154 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 136 instructions, 5 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedncghalfhnpjehpoamiffdoppaabgkdioabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 154 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4_pp r1.y, c3, c3
rsq_pp r1.w, r1.y
mul_pp r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 136 instructions, 5 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddhbiheiioemaobmheaklbecpdgpoljaiabaaaaaakebcaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdmbbaaaaeaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaad
hcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaa
gcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaa
baaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaa
aaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaa
abaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlo
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
diphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
dcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaia
ebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
nlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
ddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaah
ecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaa
akaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadp
dcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlm
abeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaa
aaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaa
abeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaaf
ccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaa
aaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaa
aaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaa
acaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaa
adaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaa
apaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaa
abaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaa
adaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaai
hcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaaj
icaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaa
abaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaa
aaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaaj
bcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaa
dcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaia
ibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaia
ibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
ggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaa
aceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaa
jgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaia
ibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
bcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaai
ecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaah
bcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaa
adaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaa
alaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaa
ngafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaa
acaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaa
aeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaa
ogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdo
ejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
abaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaa
egaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaa
elaaaaafbcaabaaaadaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaa
agaabaaaadaaaaaapgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaa
fgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaadaaaaaabkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaa
ckiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadp
dgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaah
ccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
akiacaaaaaaaaaaabaaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
bdaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaa
dcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 154 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4_pp r1.y, c3, c3
rsq_pp r1.w, r1.y
mul_pp r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Vector 144 [_LightColor0] 4
Vector 304 [_Color] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 360 [_InvFade]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 136 instructions, 5 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedfbpplnhaolhjkbhppedacpfpfkaaonljabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabdaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabeaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabfaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabfaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
beaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabhaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabgaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 154 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 136 instructions, 5 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedeeohnheninanebmeeefjkijcolfhpnjfabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 154 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 136 instructions, 5 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedeeohnheninanebmeeefjkijcolfhpnjfabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 154 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Vector 144 [_LightColor0] 4
Vector 304 [_Color] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 360 [_InvFade]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 136 instructions, 5 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpjibnomdmjdiibkogbknadalajkflkpnabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabdaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabeaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabfaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabfaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
beaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabhaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabgaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 154 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Vector 144 [_LightColor0] 4
Vector 304 [_Color] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 360 [_InvFade]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 136 instructions, 5 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpjibnomdmjdiibkogbknadalajkflkpnabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaabdaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabeaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabfaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabfaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
beaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabhaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabgaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaaagiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 154 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 136 instructions, 5 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedeeohnheninanebmeeefjkijcolfhpnjfabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_InvFade]
Vector 16 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 154 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c17, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c18, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c19, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c20, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c21, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c22, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord2 v1.xyz
dcl_texcoord3 v2.xyz
dcl_texcoord4 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord8 v5
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r0.xyz, r0.x, v2
abs r1.w, r0.z
abs r0.w, r0.x
max r1.y, r0.w, r1.w
min r1.x, r0.w, r1.w
add r0.w, r0, -r1
abs r1.w, r0.y
rcp r1.y, r1.y
mul r2.w, r1.x, r1.y
mul r4.x, r2.w, r2.w
mad r3.x, r4, c19.y, c19.z
mad r3.w, r3.x, r4.x, c19
dp3 r1.z, v1, v1
rsq r1.x, r1.z
mul r1.xyz, r1.x, v1
abs r2.xyz, r1
add r4.y, r2.z, -r2.x
mad r3.w, r3, r4.x, c20.x
add r3.xyz, r2.zxyw, -r2
cmp r4.y, r4, c17.x, c17
mad r3.xyz, r4.y, r3, r2
mad r4.y, r3.w, r4.x, c20
add r4.z, r3.x, -r2.y
mad r4.x, r4.y, r4, c20.z
mul r2.w, r4.x, r2
dsy r4.xy, r0.xzzw
add r3.xyz, r3, -r2.yxzw
cmp r3.w, r4.z, c17.x, c17.y
mad r2.xyz, r3.w, r3, r2.yxzw
add r3.x, -r2.w, c20.w
cmp r0.w, -r0, r2, r3.x
dsx r3.zw, r0.xyxz
add r3.x, -r1.w, c17
mad r2.w, r1, c17.z, c17
mad r2.w, r2, r1, c18.x
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r1.w, r2, r1, c18.y
mul r1.w, r1, r3.x
add r3.x, -r0.w, c18.w
cmp r0.w, r0.z, r0, r3.x
cmp r0.w, r0.x, r0, -r0
cmp r0.y, r0, c17, c17.x
mul r2.w, r0.y, r1
mad r1.w, -r2, c18.z, r1
mad r0.y, r0, c18.w, r1.w
mul r0.y, r0, c19.x
mad r3.x, r0.w, c21, c21.y
mul r3.zw, r3, r3
add r0.x, r3.z, r3.w
mul r4.xy, r4, r4
add r0.z, r4.x, r4.y
rsq r0.z, r0.z
rsq r0.x, r0.x
mov r3.y, r0
dsx r0.w, r0.y
rcp r1.w, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c21.x
mul r0.x, r1.w, c21
abs_pp r1.w, r2.x
abs r2.x, r1.y
mad r2.w, r2.x, c17.z, c17
dsy r0.y, r0
texldd r0, r3, s0, r0.zwzw, r0
add r3.x, -r2, c17
mad r2.w, r2, r2.x, c18.x
rsq r3.x, r3.x
mad r2.x, r2.w, r2, c18.y
rcp r3.x, r3.x
mul r2.w, r2.x, r3.x
rcp_pp r1.w, r1.w
mul_pp r2.xy, r2.zyzw, r1.w
cmp r1.y, r1, c17, c17.x
mul r3.x, r1.y, r2.w
mad r1.w, -r3.x, c18.z, r2
mad r1.y, r1, c18.w, r1.w
mul_pp r2.xy, r2, c21.y
mul r3.zw, r2.xyxy, c8.x
mul r1.y, r1, c8.x
mul r2.w, r1.y, c21.z
add r2.xyz, -v0, c1
dp3 r1.y, r2, r2
rsq r2.x, r1.y
rcp r3.x, r2.x
dsx r2.xy, r1.xzzw
mul r3.y, r3.x, c9.x
mul r2.xy, r2, r2
dsx r1.w, r2
dsy r1.y, r2.w
dsy r2.zw, r1.xyxz
add r1.x, r2, r2.y
mul r2.zw, r2, r2
add r1.z, r2, r2.w
rsq r1.z, r1.z
rsq r1.x, r1.x
rcp r2.x, r1.z
rcp r1.x, r1.x
mul r1.z, r1.x, c21.x
mul r1.x, r2, c21
texldd r1, r3.zwzw, s1, r1.zwzw, r1
add_pp r2, -r1, c17.x
mul_sat r3.y, r3, c18.z
mad_pp r1, r3.y, r2, r1
mul_pp r0, r0, c5
mul_pp r0, r0, r1
mov r2.xyz, v3
dp3_sat r1.w, v4, r2
mov r1.xyz, c1
add r2.xyz, -c16, r1
add r1.xyz, -v0, c16
dp3 r1.x, r1, r1
mul r2.w, r1, c7.x
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r2.w, c6.x
mul r1.y, -r3.x, c12.x
add_sat r1.z, r1.y, c17.x
mul_sat r1.y, r3.x, c11.x
mad r1.y, -r1, r1.z, c17.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
dp4 r1.y, c3, c3
rsq r1.w, r1.y
mul r2.xyz, r1.w, c3
mov r1.x, c10
texldp r3.x, v5, s2
dp3_sat r2.x, v3, r2
mad r1.w, r3.x, c2.z, c2
add_pp r2.x, r2, c21.w
rcp r1.w, r1.w
mul_pp r2.x, r2, c4.w
add r1.w, r1, -v5.z
mul_sat r1.w, r1, c15.x
add r1.xyz, c4, r1.x
mul_pp_sat r2.x, r2, c22
mad_sat r1.xyz, r1, r2.x, c0
mul_pp oC0.w, r0, r1
mul_pp oC0.xyz, r0, r1
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 136 instructions, 5 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 7 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedeeohnheninanebmeeefjkijcolfhpnjfabaaaaaalmbcaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaaaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdmbbaaaa
eaaaaaaaepaeaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaa
ajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaa
aeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaa
abaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaah
ccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
abaaaaahccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaaj
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
dbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaa
abaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaa
dkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaa
dkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaa
aaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidn
dcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaa
abeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaia
ibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaia
mbaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaa
aaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaa
nlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdo
alaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaa
bkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaa
aaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaah
bcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaaf
ecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaa
adaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaag
hcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
hgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaa
dkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaa
ckaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaa
abaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaa
abaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaa
bkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaa
bnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaa
abaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
hcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaa
acaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaa
agaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaa
abeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdp
aaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadp
elaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaa
acaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaa
ckaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaa
ckaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaa
abaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaa
abaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaa
apaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaa
acaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaa
ogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
bcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaa
abaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaa
adaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaa
abaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
bcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaa
adaaaaaaakaabaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaadaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaadaaaaaa
bkiacaaaaaaaaaaabbaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaa
aaaaaaaabbaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaiadpdgcaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 179 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.x, -r2, c15
add r1.z, r2.w, -r1
cmp r1.x, r1, c18, c18.y
cmp r2.x, r1.z, c18, c18.y
mul r1.w, r1.x, r1.y
mad_pp r3.x, -r1.w, r2, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 160 instructions, 5 temp regs, 0 temp arrays:
// ALU 143 float, 0 int, 10 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedagnlaonglfepnnieaieihcobafjaimjlabaaaaaahmbfaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcbebeaaaaeaaaaaaaafafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaa
aaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaa
eeaaaaaficaabaaaadaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaa
acaaaaaaegacbaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaa
bkiacaaaaaaaaaaabbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaa
aeaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaadaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaa
bcaaaaaabkiacaaaaaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaa
aaaaaaaabcaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaah
bcaabaaaabaaaaaaakaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 179 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.x, -r2, c15
add r1.z, r2.w, -r1
cmp r1.x, r1, c18, c18.y
cmp r2.x, r1.z, c18, c18.y
mul r1.w, r1.x, r1.y
mad_pp r3.x, -r1.w, r2, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4_pp r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq_pp r1.y, r1.y
mul_pp r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 256 // 252 used size, 18 vars
Vector 16 [_LightColor0] 4
Vector 176 [_Color] 4
Float 192 [_FalloffPow]
Float 196 [_FalloffScale]
Float 200 [_DetailScale]
Float 204 [_DetailDist]
Float 208 [_MinLight]
Float 212 [_DistFade]
Float 216 [_DistFadeVert]
Float 220 [_RimDist]
Float 224 [_RimDistSub]
Float 228 [_OceanRadius]
Float 232 [_InvFade]
Vector 240 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 160 instructions, 5 temp regs, 0 temp arrays:
// ALU 143 float, 0 int, 10 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedpjiengkmgffcooogncdjfjkfhklbhnpkabaaaaaagebfaaaaadaaaaaa
cmaaaaaabeabaaaaeiabaaaaejfdeheooaaaaaaaaiaaaaaaaiaaaaaamiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaneaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaneaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaneaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaneaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaneaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaneaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaneaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapapaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcbebeaaaaeaaaaaaaafafaaaafjaaaaaeegiocaaa
aaaaaaaabaaaaaaafjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaa
acaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaad
hcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaahaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaa
deaaaaajicaabaaaaaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaa
aaaaaaaaaoaaaaakicaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaaaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaa
aaaaaaaaakaabaiaibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaa
abaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaa
abaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaah
ccaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaai
dcaabaaaabaaaaaajgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaa
bkaabaaaaaaaaaaaakaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaa
aaaaaaaaakaabaaaaaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaiaebaaaaaaabaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaa
akaabaaaabaaaaaadhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaia
ebaaaaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
iedefjlodcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaa
aaaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaaj
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahbcaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaaj
ecaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaa
diaaaaahccaabaaaacaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaaf
ccaabaaaabaaaaaabkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaa
acaaaaaaalaaaaafmcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaa
aaaaaaaaegaabaaaaaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaa
egaabaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
bcaabaaaadaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaa
aaaaaaaaogakbaaaaaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaegaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegiocaaaaaaaaaaaalaaaaaadgaaaaafecaabaaa
abaaaaaaabeaaaaaaaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaa
egbcbaaaadaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaah
pcaabaaaacaaaaaapgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaa
adaaaaaajgahbaiambaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaia
ibaaaaaaacaaaaaaegacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaia
ibaaaaaaacaaaaaabkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaa
aeaaaaaadkaabaaaabaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaa
egaabaaaaeaaaaaajgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaa
egacbaaaabaaaaaabgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaia
mbaaaaaaacaaaaaadkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaa
abaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaa
diaaaaakgcaabaaaabaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadp
aaaaaadpaaaaaaaaaoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaa
abaaaaaadcaaaaakecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaai
icaabaaaabaaaaaaakaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaa
acaaaaaackaabaiaebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaa
acaaaaaaakaabaaaacaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaakgikcaaaaaaaaaaaamaaaaaadiaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaidpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaa
amaaaaafccaabaaaaeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaa
fganbaaaacaaaaaaamaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaah
bcaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaa
abeaaaaaidpjccdoapaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaa
adaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaa
egaabaaaaeaaaaaaaaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaa
egbcbaaaabaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaaeaaaaaa
dkaabaaaadaaaaaaeeaaaaaficaabaaaadaaaaaadkaabaaaadaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahbcaabaaa
adaaaaaaegbcbaaaacaaaaaaegacbaaaadaaaaaaapcaaaaiccaabaaaadaaaaaa
agaabaaaaeaaaaaapgipcaaaaaaaaaaaamaaaaaadcaaaaajpcaabaaaabaaaaaa
fgafbaaaadaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaa
akaabaaaaeaaaaaabkiacaaaaaaaaaaaanaaaaaadgcaaaafbcaabaaaabaaaaaa
akaabaaaabaaaaaadccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaa
anaaaaaaakaabaaaaeaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaah
ccaabaaaabaaaaaaegbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaa
abaaaaaabkaabaaaabaaaaaabkiacaaaaaaaaaaaamaaaaaacpaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaa
akiacaaaaaaaaaaaamaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
ddaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
ccaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaak
hcaabaaaacaaaaaaegiccaaaaaaaaaaaapaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
aaaaaaajhcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaa
apaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
elaaaaafmcaabaaaabaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaa
akiacaiaebaaaaaaaaaaaaaaaoaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaa
dicaaaaiecaabaaaabaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaaanaaaaaa
dcaaaaajbcaabaaaabaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaadcaaaaak
ccaabaaaabaaaaaaakaabaiaebaaaaaaadaaaaaaakaabaaaadaaaaaaakaabaaa
abaaaaaaelaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaa
abaaaaaabkaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaamecaabaaaabaaaaaa
bkiacaaaaaaaaaaaaoaaaaaabkiacaaaaaaaaaaaaoaaaaaackaabaiaebaaaaaa
abaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiicaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaadaaaaaabnaaaaahbcaabaaa
acaaaaaaakaabaaaadaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaa
akaabaaaacaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaia
ebaaaaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaiccaabaaa
abaaaaaabkiacaaaaaaaaaaaaoaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahccaabaaaabaaaaaa
akaabaaaacaaaaaabkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaaaaaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaa
aaaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaa
dcaaaaajbcaabaaaabaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaaakaabaaa
abaaaaaabnaaaaahbcaabaaaabaaaaaaakaabaaaaeaaaaaaakaabaaaabaaaaaa
abaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaak
bcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
aoaaaaahdcaabaaaabaaaaaaegbabaaaahaaaaaapgbpbaaaahaaaaaaefaaaaaj
pcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
dcaaaaalbcaabaaaabaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaa
dkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackbabaiaebaaaaaaahaaaaaadicaaaaibcaabaaaabaaaaaa
akaabaaaabaaaaaackiacaaaaaaaaaaaaoaaaaaadiaaaaahiccabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaa
acaaaaaaaaaaaaaabacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaa
abaaaaaaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlm
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaaaaaaaaabaaaaaadicaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaa
abaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaaaaaaaaaanaaaaaadccaaaak
hcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaa
aeaaaaaadiaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 179 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.x, -r2, c15
add r1.z, r2.w, -r1
cmp r1.x, r1, c18, c18.y
cmp r2.x, r1.z, c18, c18.y
mul r1.w, r1.x, r1.y
mad_pp r3.x, -r1.w, r2, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 160 instructions, 5 temp regs, 0 temp arrays:
// ALU 143 float, 0 int, 10 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbkhnklcdoefbpppkiiapocmimpkbcdeiabaaaaaahmbfaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcbebeaaaaeaaaaaaaafafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaa
aaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaa
eeaaaaaficaabaaaadaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaa
acaaaaaaegacbaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaa
bkiacaaaaaaaaaaabbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaa
aeaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaadaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaa
bcaaaaaabkiacaaaaaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaa
aaaaaaaabcaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaah
bcaabaaaabaaaaaaakaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 179 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.x, -r2, c15
add r1.z, r2.w, -r1
cmp r1.x, r1, c18, c18.y
cmp r2.x, r1.z, c18, c18.y
mul r1.w, r1.x, r1.y
mad_pp r3.x, -r1.w, r2, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 160 instructions, 5 temp regs, 0 temp arrays:
// ALU 143 float, 0 int, 10 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedagnlaonglfepnnieaieihcobafjaimjlabaaaaaahmbfaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcbebeaaaaeaaaaaaaafafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaa
aaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaa
eeaaaaaficaabaaaadaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaa
acaaaaaaegacbaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaa
bkiacaaaaaaaaaaabbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaa
aeaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaadaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaa
bcaaaaaabkiacaaaaaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaa
aaaaaaaabcaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaah
bcaabaaaabaaaaaaakaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 179 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.x, -r2, c15
add r1.z, r2.w, -r1
cmp r1.x, r1, c18, c18.y
cmp r2.x, r1.z, c18, c18.y
mul r1.w, r1.x, r1.y
mad_pp r3.x, -r1.w, r2, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4_pp r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq_pp r1.y, r1.y
mul_pp r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 160 instructions, 5 temp regs, 0 temp arrays:
// ALU 143 float, 0 int, 10 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednlbdpmgmjpafhddpemiampmhpcpiefiiabaaaaaahmbfaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcbebeaaaaeaaaaaaaafafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaa
aaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaa
eeaaaaaficaabaaaadaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaa
acaaaaaaegacbaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaa
bkiacaaaaaaaaaaabbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaa
aeaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaadaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaa
bcaaaaaabkiacaaaaaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaa
aaaaaaaabcaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaah
bcaabaaaabaaaaaaakaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 179 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.x, -r2, c15
add r1.z, r2.w, -r1
cmp r1.x, r1, c18, c18.y
cmp r2.x, r1.z, c18, c18.y
mul r1.w, r1.x, r1.y
mad_pp r3.x, -r1.w, r2, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 160 instructions, 5 temp regs, 0 temp arrays:
// ALU 143 float, 0 int, 10 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedghlhmnopmgffjamdckandkgnpmgchnkhabaaaaaajebfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcbebeaaaa
eaaaaaaaafafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
ajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaa
abaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaak
bcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaa
abaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaa
ajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackiacaaaaaaaaaaa
bcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
agiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 179 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.x, -r2, c15
add r1.z, r2.w, -r1
cmp r1.x, r1, c18, c18.y
cmp r2.x, r1.z, c18, c18.y
mul r1.w, r1.x, r1.y
mad_pp r3.x, -r1.w, r2, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 160 instructions, 5 temp regs, 0 temp arrays:
// ALU 143 float, 0 int, 10 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedghlhmnopmgffjamdckandkgnpmgchnkhabaaaaaajebfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcbebeaaaa
eaaaaaaaafafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
ajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaa
abaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaak
bcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaa
abaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaa
ajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackiacaaaaaaaaaaa
bcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
agiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 179 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.x, -r2, c15
add r1.z, r2.w, -r1
cmp r1.x, r1, c18, c18.y
cmp r2.x, r1.z, c18, c18.y
mul r1.w, r1.x, r1.y
mad_pp r3.x, -r1.w, r2, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4_pp r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq_pp r1.y, r1.y
mul_pp r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 160 instructions, 5 temp regs, 0 temp arrays:
// ALU 143 float, 0 int, 10 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbkhnklcdoefbpppkiiapocmimpkbcdeiabaaaaaahmbfaaaaadaaaaaa
cmaaaaaacmabaaaagaabaaaaejfdeheopiaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaomaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcbebeaaaaeaaaaaaaafafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaa
fjaaaaaeegiocaaaabaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaaagaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaa
aaaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaak
icaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaa
aaaaaaaaddaaaaajbcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaia
ibaaaaaaaaaaaaaadiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadiaaaaahbcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaochgdidodcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
bkaabaaaabaaaaaaabeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaa
ckaabaaaabaaaaaabkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaa
jgafbaaaaaaaaaaajgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaakaabaaaabaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadeaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaa
aaaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaa
dhaaaaakicaabaaaaaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaa
aaaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaak
icaabaaaaaaaaaaadkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
keanmjdpaaaaaaaiecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaa
aaaaiadpelaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaackaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaa
acaaaaaackaabaaaaaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaa
bkaabaaaacaaaaaaamaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaaf
mcaabaaaaaaaaaaaagaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaa
aaaaaaaaapaaaaahbcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaa
akaabaaaaaaaaaaaabeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaa
aaaaaaaaogakbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaabaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaan
pcaabaaaaaaaaaaaegaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
egaabaaaabaaaaaaegaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegiocaaaaaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaa
eeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaa
pgapbaaaabaaaaaabgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaia
mbaaaaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaa
egacbaaaadaaaaaabnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaa
bkaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdiaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaa
abaaaaaadcaaaaakdcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaa
jgafbaiaibaaaaaaacaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
bgahbaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaa
dkaabaiaibaaaaaaacaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaadaaaaaabkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaackaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaa
abaaaaaaegacbaaaabaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaa
abaaaaaakgajbaaaabaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaa
aoaaaaahdcaabaaaabaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaak
ecaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaa
chbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaa
akaabaiambaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaama
abeaaaaanlapejeadbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaia
ebaaaaaaacaaaaaaabaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaa
acaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaa
aaaaaaaabaaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaa
idpjkcdpalaaaaafccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaa
aeaaaaaackaabaaaabaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaa
amaaaaafdcaabaaaacaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaa
egaabaaaacaaaaaaegaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahbcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdo
apaaaaahecaabaaaabaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaa
aaaaaaalpcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaa
egiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaa
adaaaaaaegacbaaaadaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaa
eeaaaaaficaabaaaadaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaa
acaaaaaaegacbaaaadaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaa
pgipcaaaaaaaaaaabaaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaa
egaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaegaobaaaabaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaa
bkiacaaaaaaaaaaabbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
dccaaaalccaabaaaabaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaa
aeaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaa
egbcbaaaagaaaaaaegbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaa
abaaaaaabkiacaaaaaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaa
baaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaa
akaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaa
acaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaa
abaaaaaakgaobaaaabaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaa
aaaaaaaabcaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaa
abaaaaaackaabaaaabaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaa
abaaaaaaegbcbaaaacaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaa
akaabaiaebaaaaaaadaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaa
abaaaaaabkaabaaaabaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaa
bcaaaaaabkiacaaaaaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaaakaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaa
adaaaaaaabeaaaaaaaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
abeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaa
bkaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaa
aaaaaaaabcaaaaaabkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaa
bkaabaaaabaaaaaaelaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaa
abaaaaaaakaabaiaebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
abaaaaaaakaabaaaacaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaah
bcaabaaaabaaaaaaakaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaa
bkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaa
abaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaa
abaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaa
ahaaaaaaaoaaaaakbcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpakaabaaaabaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaa
ckiacaaaaaaaaaaabcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaa
akaabaaaabaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahicaabaaaaaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaa
dkaabaaaaaaaaaaadkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaa
aaaaaaaaafaaaaaaagiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaah
hccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 179 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.x, -r2, c15
add r1.z, r2.w, -r1
cmp r1.x, r1, c18, c18.y
cmp r2.x, r1.z, c18, c18.y
mul r1.w, r1.x, r1.y
mad_pp r3.x, -r1.w, r2, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4_pp r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq_pp r1.y, r1.y
mul_pp r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Vector 144 [_LightColor0] 4
Vector 304 [_Color] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_OceanRadius]
Float 360 [_InvFade]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 160 instructions, 5 temp regs, 0 temp arrays:
// ALU 143 float, 0 int, 10 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbeifnibakfpnkemmhopckcnjedcemndkabaaaaaajebfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaadaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcbebeaaaa
eaaaaaaaafafaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaabdaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
beaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bfaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabfaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabhaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabgaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaabkiacaaa
aaaaaaaabgaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaa
bkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
ajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaa
abaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaak
bcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaa
abaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaa
ajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackiacaaaaaaaaaaa
bgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
agiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 179 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.x, -r2, c15
add r1.z, r2.w, -r1
cmp r1.x, r1, c18, c18.y
cmp r2.x, r1.z, c18, c18.y
mul r1.w, r1.x, r1.y
mad_pp r3.x, -r1.w, r2, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 160 instructions, 5 temp regs, 0 temp arrays:
// ALU 143 float, 0 int, 10 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedikcmopoffplmbhmfjmbppngenafapolaabaaaaaajebfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcbebeaaaa
eaaaaaaaafafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
ajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaa
abaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaak
bcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaa
abaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaa
ajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackiacaaaaaaaaaaa
bcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
agiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 179 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.x, -r2, c15
add r1.z, r2.w, -r1
cmp r1.x, r1, c18, c18.y
cmp r2.x, r1.z, c18, c18.y
mul r1.w, r1.x, r1.y
mad_pp r3.x, -r1.w, r2, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 160 instructions, 5 temp regs, 0 temp arrays:
// ALU 143 float, 0 int, 10 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedikcmopoffplmbhmfjmbppngenafapolaabaaaaaajebfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcbebeaaaa
eaaaaaaaafafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
ajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaa
abaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaak
bcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaa
abaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaa
ajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackiacaaaaaaaaaaa
bcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
agiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 179 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.x, -r2, c15
add r1.z, r2.w, -r1
cmp r1.x, r1, c18, c18.y
cmp r2.x, r1.z, c18, c18.y
mul r1.w, r1.x, r1.y
mad_pp r3.x, -r1.w, r2, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Vector 144 [_LightColor0] 4
Vector 304 [_Color] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_OceanRadius]
Float 360 [_InvFade]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 160 instructions, 5 temp regs, 0 temp arrays:
// ALU 143 float, 0 int, 10 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedncoklgededmabiihjbcdifmokjnaoffoabaaaaaajebfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcbebeaaaa
eaaaaaaaafafaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaabdaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
beaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bfaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabfaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabhaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabgaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaabkiacaaa
aaaaaaaabgaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaa
bkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
ajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaa
abaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaak
bcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaa
abaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaa
ajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackiacaaaaaaaaaaa
bgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
agiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 179 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.x, -r2, c15
add r1.z, r2.w, -r1
cmp r1.x, r1, c18, c18.y
cmp r2.x, r1.z, c18, c18.y
mul r1.w, r1.x, r1.y
mad_pp r3.x, -r1.w, r2, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 384 // 380 used size, 20 vars
Vector 144 [_LightColor0] 4
Vector 304 [_Color] 4
Float 320 [_FalloffPow]
Float 324 [_FalloffScale]
Float 328 [_DetailScale]
Float 332 [_DetailDist]
Float 336 [_MinLight]
Float 340 [_DistFade]
Float 344 [_DistFadeVert]
Float 348 [_RimDist]
Float 352 [_RimDistSub]
Float 356 [_OceanRadius]
Float 360 [_InvFade]
Vector 368 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 160 instructions, 5 temp regs, 0 temp arrays:
// ALU 143 float, 0 int, 10 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedncoklgededmabiihjbcdifmokjnaoffoabaaaaaajebfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcbebeaaaa
eaaaaaaaafafaaaafjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaabdaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabeaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
beaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bfaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabfaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabeaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabeaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bhaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabhaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabgaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabfaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaabkiacaaa
aaaaaaaabgaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabgaaaaaa
bkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
ajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaa
abaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaak
bcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaa
abaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaa
ajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackiacaaaaaaaaaaa
bgaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaajaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
agiacaaaaaaaaaaabfaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 179 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.x, -r2, c15
add r1.z, r2.w, -r1
cmp r1.x, r1, c18, c18.y
cmp r2.x, r1.z, c18, c18.y
mul r1.w, r1.x, r1.y
mad_pp r3.x, -r1.w, r2, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 160 instructions, 5 temp regs, 0 temp arrays:
// ALU 143 float, 0 int, 10 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedikcmopoffplmbhmfjmbppngenafapolaabaaaaaajebfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcbebeaaaa
eaaaaaaaafafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
ajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaa
abaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaak
bcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaa
abaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaa
ajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackiacaaaaaaaaaaa
bcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
agiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceCameraPos]
Vector 2 [_ZBufferParams]
Vector 3 [_WorldSpaceLightPos0]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_FalloffPow]
Float 7 [_FalloffScale]
Float 8 [_DetailScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_DistFade]
Float 12 [_DistFadeVert]
Float 13 [_RimDist]
Float 14 [_RimDistSub]
Float 15 [_OceanRadius]
Float 16 [_InvFade]
Vector 17 [_PlanetOrigin]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
SetTexture 2 [_CameraDepthTexture] 2D
"ps_3_0
; 179 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c18, 1.00000000, 0.00000000, -0.01872930, 0.07426100
def c19, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c20, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c21, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c22, 0.15915494, 0.50000000, 1.27323949, -0.01000214
def c23, 4.03944778, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r1.xyz, r0.x, v2
abs r0.xyz, r1
add r0.w, r0.z, -r0.x
add r2.xyz, r0.zxyw, -r0
cmp r0.w, r0, c18.x, c18.y
mad r2.xyz, r0.w, r2, r0
add r0.w, r2.x, -r0.y
add r2.xyz, r2, -r0.yxzw
cmp r0.w, r0, c18.x, c18.y
mad r0.xyz, r0.w, r2, r0.yxzw
dsx r2.xy, r1.xzzw
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
abs r0.z, r1.y
add r1.w, -r0.z, c18.x
mad r0.w, r0.z, c18.z, c18
mad r0.w, r0, r0.z, c19.x
mad r0.z, r0.w, r0, c19.y
mul_pp r0.xy, r0, c22.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r1.w, r0.z, r1
cmp r0.w, r1.y, c18.y, c18.x
mul r1.y, r0.w, r1.w
mad r1.y, -r1, c19.z, r1.w
mad r0.w, r0, c19, r1.y
dsy r1.zw, r1.xyxz
mul r0.w, r0, c8.x
mul r1.zw, r1, r1
add r1.x, r1.z, r1.w
dp3 r0.z, v3, v3
rsq r0.z, r0.z
mul r3.xyz, r0.z, v3
rsq r1.x, r1.x
rcp r1.x, r1.x
abs r4.y, r3.z
abs r4.x, r3
max r0.z, r4.x, r4.y
mul r1.y, r0.w, c22.z
rcp r0.w, r0.z
min r0.z, r4.x, r4.y
mul r4.z, r0, r0.w
mul r4.w, r4.z, r4.z
mad r2.w, r4, c20.y, c20.z
mad r3.w, r2, r4, c20
mad r5.x, r3.w, r4.w, c21
mad r5.x, r5, r4.w, c21.y
mad r4.w, r5.x, r4, c21.z
dsx r0.w, r1.y
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
add r2.xyz, -v0, c1
dp3 r2.w, r2, r2
rsq r3.w, r2.w
mul r2.xyz, r3.w, -r2
rcp r2.w, r3.w
rsq r0.z, r0.z
rcp r0.z, r0.z
dp3 r2.z, v1, r2
dp3 r3.w, v1, v1
mul r4.z, r4.w, r4
mul r5.x, r2.w, c9
mad r2.x, -r2.z, r2.z, r3.w
dsy r1.y, r1
mul r1.x, r1, c22
mul r0.xy, r0, c8.x
mul r0.z, r0, c22.x
texldd r0, r0, s1, r0.zwzw, r1
add_pp r1, -r0, c18.x
mul_sat r4.w, r5.x, c19.z
mad_pp r0, r4.w, r1, r0
abs r1.y, r3
add r1.x, r4, -r4.y
add r1.z, -r4, c21.w
cmp r1.x, -r1, r4.z, r1.z
dsx r4.xy, r3.xzzw
add r1.w, -r1.y, c18.x
mad r1.z, r1.y, c18, c18.w
mad r1.z, r1, r1.y, c19.x
rsq r1.w, r1.w
mad r1.y, r1.z, r1, c19
rcp r1.w, r1.w
mul r1.z, r1.y, r1.w
cmp r1.y, r3, c18, c18.x
mul r1.w, r1.y, r1.z
add r3.y, -r1.x, c19.w
mad r1.z, -r1.w, c19, r1
cmp r1.w, r3.z, r1.x, r3.y
mad r1.x, r1.y, c19.w, r1.z
mul r1.z, r1.x, c20.x
cmp r1.y, r3.x, r1.w, -r1.w
dsy r3.xy, r3.xzzw
mad r1.x, r1.y, c22, c22.y
mul r3.xy, r3, r3
rsq r4.z, r2.x
add r2.x, r3, r3.y
rsq r2.x, r2.x
rcp r2.x, r2.x
dsy r2.y, r1.z
mov r1.y, r1.z
dsx r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r2.x, r2, c22
mul r1.z, r1, c22.x
texldd r1, r1, s0, r1.zwzw, r2
mul_pp r1, r1, c5
rcp r2.x, r4.z
mul_pp r0, r1, r0
mul r2.y, r2.x, r2.x
add r1.y, r3.w, -r2
mad r1.x, c15, c15, -r2.y
rsq r1.y, r1.y
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
add r1.z, r1.x, r1.y
add r1.x, r2.z, -r1
add r1.x, r1, -r1.z
cmp r1.y, r2.z, c18.x, c18
mad r1.z, r1.y, r1.x, r1
add r1.x, -r2, c15
add r1.z, r2.w, -r1
cmp r1.x, r1, c18, c18.y
cmp r2.x, r1.z, c18, c18.y
mul r1.w, r1.x, r1.y
mad_pp r3.x, -r1.w, r2, c18
mov r1.xyz, v4
dp3_sat r1.w, v5, r1
mov r1.xyz, c1
add r2.xyz, -c17, r1
mul r3.y, r1.w, c7.x
add r1.xyz, -v0, c17
dp3 r1.x, r1, r1
dp3 r1.w, r2, r2
rsq r1.y, r1.w
rsq r1.x, r1.x
rcp r1.y, r1.y
rcp r1.x, r1.x
mad r2.x, -r1, c14, r1.y
pow_sat r1, r3.y, c6.x
mul r1.y, -r2.w, c12.x
add_sat r1.z, r1.y, c18.x
mul_sat r1.y, r2.w, c11.x
mad r1.y, -r1, r1.z, c18.x
add r1.z, r1.x, -r1.y
mul_sat r1.x, r2, c13
mad r1.x, r1, r1.z, r1.y
mul_pp r0.w, r1.x, r0
mov r1.x, c10
add r2.xyz, c4, r1.x
dp4 r1.y, c3, c3
texldp r1.x, v6, s2
mad r1.x, r1, c2.z, c2.w
rcp r1.x, r1.x
add r1.x, r1, -v6.z
mul_pp r0.w, r0, r3.x
rsq r1.y, r1.y
mul r3.xyz, r1.y, c3
dp3_sat r1.y, v4, r3
add_pp r1.y, r1, c22.w
mul_pp r1.y, r1, c4.w
mul_pp_sat r1.y, r1, c23.x
mul_sat r1.x, r1, c16
mad_sat r2.xyz, r2, r1.y, c0
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, r2
"
}

SubProgram "d3d11 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 320 // 316 used size, 19 vars
Vector 80 [_LightColor0] 4
Vector 240 [_Color] 4
Float 256 [_FalloffPow]
Float 260 [_FalloffScale]
Float 264 [_DetailScale]
Float 268 [_DetailDist]
Float 272 [_MinLight]
Float 276 [_DistFade]
Float 280 [_DistFadeVert]
Float 284 [_RimDist]
Float 288 [_RimDistSub]
Float 292 [_OceanRadius]
Float 296 [_InvFade]
Vector 304 [_PlanetOrigin] 3
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 112 [_ZBufferParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerFrame" 208 // 80 used size, 4 vars
Vector 64 [glstate_lightmodel_ambient] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerFrame" 3
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
SetTexture 2 [_CameraDepthTexture] 2D 2
// 160 instructions, 5 temp regs, 0 temp arrays:
// ALU 143 float, 0 int, 10 uint
// TEX 1 (0 load, 0 comp, 0 bias, 2 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedikcmopoffplmbhmfjmbppngenafapolaabaaaaaajebfaaaaadaaaaaa
cmaaaaaaeeabaaaahiabaaaaejfdeheobaabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapahaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaaaaaaaeabaaaaaiaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcbebeaaaa
eaaaaaaaafafaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaaiaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaaafaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaae
aahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaa
gcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaa
agaabaaaaaaaaaaaigbbbaaaaeaaaaaadeaaaaajicaabaaaaaaaaaaabkaabaia
ibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaaaoaaaaakicaabaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdkaabaaaaaaaaaaaddaaaaaj
bcaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaaakaabaiaibaaaaaaaaaaaaaa
diaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajccaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaochgdido
dcaaaaajccaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aebnkjlodcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaabkaabaaaabaaaaaa
abeaaaaadiphhpdpdiaaaaahccaabaaaabaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaadcaaaaajccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaaaaaaaaa
akaabaiaibaaaaaaaaaaaaaaabaaaaahccaabaaaabaaaaaackaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaabkaabaaaabaaaaaadbaaaaaidcaabaaaabaaaaaajgafbaaaaaaaaaaa
jgafbaiaebaaaaaaaaaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaanlapejmaaaaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaa
abaaaaaaddaaaaahbcaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaa
dbaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaa
deaaaaahecaabaaaabaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaabaaaaah
bcaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaadhaaaaakicaabaaa
aaaaaaaaakaabaaaabaaaaaadkaabaiaebaaaaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajbcaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakicaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakicaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaiaibaaaaaaaaaaaaaaabeaaaaaiedefjlodcaaaaakicaabaaaaaaaaaaa
dkaabaaaaaaaaaaackaabaiaibaaaaaaaaaaaaaaabeaaaaakeanmjdpaaaaaaai
ecaabaaaaaaaaaaackaabaiambaaaaaaaaaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahbcaabaaaabaaaaaabkaabaaa
abaaaaaaakaabaaaabaaaaaadcaaaaajecaabaaaaaaaaaaadkaabaaaaaaaaaaa
ckaabaaaaaaaaaaaakaabaaaabaaaaaadiaaaaahccaabaaaacaaaaaackaabaaa
aaaaaaaaabeaaaaaidpjkcdoalaaaaafccaabaaaabaaaaaabkaabaaaacaaaaaa
amaaaaafccaabaaaadaaaaaabkaabaaaacaaaaaaalaaaaafmcaabaaaaaaaaaaa
agaebaaaaaaaaaaaamaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaaapaaaaah
bcaabaaaaaaaaaaaegaabaaaaaaaaaaaegaabaaaaaaaaaaaelaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaadaaaaaaakaabaaaaaaaaaaa
abeaaaaaidpjccdoapaaaaahbcaabaaaaaaaaaaaogakbaaaaaaaaaaaogakbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
abaaaaaaakaabaaaaaaaaaaaabeaaaaaidpjccdoejaaaaanpcaabaaaaaaaaaaa
egaabaaaacaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaegaabaaaabaaaaaa
egaabaaaadaaaaaadiaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaa
aaaaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaah
icaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahpcaabaaaacaaaaaapgapbaaaabaaaaaa
bgbjbaaaadaaaaaadgaaaaaghcaabaaaadaaaaaajgahbaiambaaaaaaacaaaaaa
aaaaaaaihcaabaaaaeaaaaaahgaobaiaibaaaaaaacaaaaaaegacbaaaadaaaaaa
bnaaaaajicaabaaaabaaaaaadkaabaiaibaaaaaaacaaaaaabkaabaiaibaaaaaa
acaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
diaaaaahicaabaaaadaaaaaackaabaaaaeaaaaaadkaabaaaabaaaaaadcaaaaak
dcaabaaaabaaaaaapgapbaaaabaaaaaaegaabaaaaeaaaaaajgafbaiaibaaaaaa
acaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaabgahbaaaadaaaaaa
aaaaaaajbcaabaaaadaaaaaabkaabaiambaaaaaaacaaaaaadkaabaiaibaaaaaa
acaaaaaadcaaaaakicaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaadaaaaaa
bkaabaiaibaaaaaaacaaaaaabnaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaa
ckaabaiaibaaaaaaacaaaaaaabaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaakhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaa
abaaaaaaggalbaiaibaaaaaaacaaaaaadiaaaaakgcaabaaaabaaaaaakgajbaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaadpaaaaaadpaaaaaaaaaoaaaaahdcaabaaa
abaaaaaajgafbaaaabaaaaaaagaabaaaabaaaaaadcaaaaakecaabaaaabaaaaaa
akaabaiaibaaaaaaacaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaacaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaa
acaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaabaaaaaaakaabaiambaaaaaa
acaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
diaaaaahbcaabaaaacaaaaaadkaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
dbaaaaaiecaabaaaacaaaaaackaabaaaacaaaaaackaabaiaebaaaaaaacaaaaaa
abaaaaahbcaabaaaacaaaaaackaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaakgikcaaaaaaaaaaabaaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdpalaaaaaf
ccaabaaaadaaaaaackaabaaaabaaaaaaamaaaaafccaabaaaaeaaaaaackaabaaa
abaaaaaaalaaaaafmcaabaaaabaaaaaafganbaaaacaaaaaaamaaaaafdcaabaaa
acaaaaaangafbaaaacaaaaaaapaaaaahbcaabaaaacaaaaaaegaabaaaacaaaaaa
egaabaaaacaaaaaaelaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
bcaabaaaaeaaaaaaakaabaaaacaaaaaaabeaaaaaidpjccdoapaaaaahecaabaaa
abaaaaaaogakbaaaabaaaaaaogakbaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahbcaabaaaadaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoejaaaaanpcaabaaaabaaaaaaegaabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaaeaaaaaaaaaaaaalpcaabaaa
acaaaaaaegaobaiaebaaaaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaaaaaaajhcaabaaaadaaaaaaegbcbaaaabaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
adaaaaaaelaaaaafbcaabaaaaeaaaaaadkaabaaaadaaaaaaeeaaaaaficaabaaa
adaaaaaadkaabaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaadaaaaaabaaaaaahbcaabaaaadaaaaaaegbcbaaaacaaaaaaegacbaaa
adaaaaaaapcaaaaiccaabaaaadaaaaaaagaabaaaaeaaaaaapgipcaaaaaaaaaaa
baaaaaaadcaaaaajpcaabaaaabaaaaaafgafbaaaadaaaaaaegaobaaaacaaaaaa
egaobaaaabaaaaaadiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaibcaabaaaabaaaaaaakaabaaaaeaaaaaabkiacaaaaaaaaaaa
bbaaaaaadgcaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadccaaaalccaabaaa
abaaaaaackiacaiaebaaaaaaaaaaaaaabbaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaiadpdcaaaaakbcaabaaaabaaaaaaakaabaiaebaaaaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpbacaaaahccaabaaaabaaaaaaegbcbaaaagaaaaaa
egbcbaaaafaaaaaadiaaaaaiccaabaaaabaaaaaabkaabaaaabaaaaaabkiacaaa
aaaaaaaabaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ccaabaaaabaaaaaabkaabaaaabaaaaaaakiacaaaaaaaaaaabaaaaaaabjaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaaddaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiccaabaaaabaaaaaaakaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaaaaaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaa
bdaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaaaaaaaajhcaabaaaacaaaaaaegbcbaaa
abaaaaaaegiccaiaebaaaaaaaaaaaaaabdaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaelaaaaafmcaabaaaabaaaaaakgaobaaa
abaaaaaadcaaaaalecaabaaaabaaaaaaakiacaiaebaaaaaaaaaaaaaabcaaaaaa
dkaabaaaabaaaaaackaabaaaabaaaaaadicaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaadkiacaaaaaaaaaaabbaaaaaadcaaaaajbcaabaaaabaaaaaackaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaa
acaaaaaaegbcbaaaacaaaaaadcaaaaakccaabaaaabaaaaaaakaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaaakaabaaaabaaaaaaelaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaabkaabaaaabaaaaaabkaabaaa
abaaaaaadcaaaaamecaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaabkiacaaa
aaaaaaaabcaaaaaackaabaiaebaaaaaaabaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaaaaaaaaaiicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaa
akaabaaaadaaaaaabnaaaaahbcaabaaaacaaaaaaakaabaaaadaaaaaaabeaaaaa
aaaaaaaaabaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaiadp
dcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaaabaaaaaabkaabaaaabaaaaaa
akaabaaaabaaaaaabnaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaabcaaaaaa
bkaabaaaabaaaaaaabaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaa
aaaaiadpdiaaaaahccaabaaaabaaaaaaakaabaaaacaaaaaabkaabaaaabaaaaaa
elaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaaaaaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaackaabaaaabaaaaaaaaaaaaaiecaabaaaabaaaaaaakaabaia
ebaaaaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaabaaaaaaakaabaaa
acaaaaaackaabaaaabaaaaaaakaabaaaabaaaaaabnaaaaahbcaabaaaabaaaaaa
akaabaaaaeaaaaaaakaabaaaabaaaaaaabaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaabaaaaaabkaabaiaebaaaaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
ajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaadcaaaaalbcaabaaaabaaaaaackiacaaa
abaaaaaaahaaaaaaakaabaaaabaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaak
bcaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaa
abaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackbabaiaebaaaaaa
ajaaaaaadicaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaackiacaaaaaaaaaaa
bcaaaaaadiaaaaahiccabaaaaaaaaaaadkaabaaaaaaaaaaaakaabaaaabaaaaaa
bbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaa
abaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahicaabaaa
aaaaaaaaegbcbaaaafaaaaaaegacbaaaabaaaaaaaaaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaapnekibdpdiaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaaaaaaaaafaaaaaadicaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaaaaaiaeaaaaaaaajhcaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
agiacaaaaaaaaaaabbaaaaaadccaaaakhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegiccaaaadaaaaaaaeaaaaaadiaaaaahhccabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SOFT_DEPTH_ON" "WORLD_SPACE_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

}

#LINE 165

	
		}
		
	} 
	
}
}
