Shader "EVE/CloudParticle" {
Properties {
	_TopTex ("Particle Texture", 2D) = "white" {}
	_LeftTex ("Particle Texture", 2D) = "white" {}
	_FrontTex ("Particle Texture", 2D) = "white" {}
	_MainTex ("Main (RGB)", 2D) = "white" {}
	_DetailTex ("Detail (RGB)", 2D) = "white" {}
	_DetailScale ("Detail Scale", Range(0,1000)) = 100
	_DistFade ("Distance Fade Near", Range(0,1)) = 1.0
	_DistFadeVert ("Distance Fade Vertical", Range(0,1)) = 0.00004
	_LightScatter ("Light Scatter", Range(0,1)) = 0.55 
	_MinLight ("Minimum Light", Range(0,1)) = .5
	_Color ("Color Tint", Color) = (1,1,1,1)
	_InvFade ("Soft Particles Factor", Range(0.01,3.0)) = .01
	_Rotation ("Rotation", float) = 0
	_MaxScale ("Max Scale", float) = 1
	_MaxTrans ("Max Translation", Vector) = (0,0,0)
}

Category {
	
	Tags { "Queue"="Transparent" "IgnoreProjector"="True" "RenderType"="Transparent" }
	Blend SrcAlpha OneMinusSrcAlpha
	Fog { Mode Global}
	AlphaTest Greater 0
	ColorMask RGB
	Cull Off Lighting On ZWrite Off
	
	SubShader {
		Pass {
			
			Lighting On
			Tags { "LightMode"="ForwardBase"}
			
			Program "vp" {
// Vertex combos: 15
//   d3d9 - ALU: 347 to 359, TEX: 4 to 4
//   d3d11 - ALU: 222 to 234, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform vec3 _MaxTrans;
uniform float _MaxScale;
uniform float _Rotation;
uniform float _MinLight;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 unity_MatrixV;


uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 XYv_1;
  vec4 XZv_2;
  vec4 ZYv_3;
  vec3 detail_pos_4;
  float localScale_5;
  vec4 localOrigin_6;
  vec4 tmpvar_7;
  vec3 tmpvar_8;
  vec4 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_6.xyz = (((2.0 * tmpvar_10) - 1.0) * _MaxTrans);
  localOrigin_6.w = 1.0;
  localScale_5 = ((tmpvar_10.x * (_MaxScale - 1.0)) + 1.0);
  vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * localOrigin_6);
  vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = gl_Normal;
  tmpvar_8 = clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (normalize((_Object2World * tmpvar_12).xyz), normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0);
  vec4 tmpvar_13;
  tmpvar_13 = -((_MainRotation * tmpvar_11));
  detail_pos_4 = (_DetailRotation * tmpvar_13).xyz;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13.xyz);
  vec2 uv_15;
  float r_16;
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_14.x)))) {
    float y_over_x_17;
    y_over_x_17 = (tmpvar_14.x / tmpvar_14.z);
    float s_18;
    float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_14.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(tmpvar_14.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_16));
  uv_15.y = (0.31831 * (1.5708 - (sign(tmpvar_14.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_14.y))) * (1.5708 + (abs(tmpvar_14.y) * (-0.214602 + (abs(tmpvar_14.y) * (0.0865667 + (abs(tmpvar_14.y) * -0.0310296)))))))))));
  vec4 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(normalize(detail_pos_4));
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  uv_20.xy = (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale);
  uv_20.zw = vec2(0.0, 0.0);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DLod (_MainTex, uv_15, 0.0) * texture2DLod (_DetailTex, uv_20.xy, 0.0));
  tmpvar_7.xyz = tmpvar_24.xyz;
  vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = _WorldSpaceCameraPos;
  float tmpvar_26;
  vec4 p_27;
  p_27 = (tmpvar_11 - tmpvar_25);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  tmpvar_7.w = (tmpvar_24.w * (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0)));
  vec3 tmpvar_28;
  tmpvar_28.yz = vec2(0.0, 0.0);
  tmpvar_28.x = fract(_Rotation);
  vec3 x_29;
  x_29 = (tmpvar_28 + tmpvar_10);
  vec3 trans_30;
  trans_30 = localOrigin_6.xyz;
  float tmpvar_31;
  tmpvar_31 = (x_29.x * 6.28319);
  float tmpvar_32;
  tmpvar_32 = (x_29.y * 6.28319);
  float tmpvar_33;
  tmpvar_33 = (x_29.z * 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (sin(tmpvar_32) * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (cos(tmpvar_32) * tmpvar_34);
  float tmpvar_37;
  tmpvar_37 = sqrt((2.0 - tmpvar_33));
  float tmpvar_38;
  tmpvar_38 = sin(tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = cos(tmpvar_31);
  float tmpvar_40;
  tmpvar_40 = ((tmpvar_35 * tmpvar_39) - (tmpvar_36 * tmpvar_38));
  float tmpvar_41;
  tmpvar_41 = ((tmpvar_35 * tmpvar_38) + (tmpvar_36 * tmpvar_39));
  mat4 tmpvar_42;
  tmpvar_42[0].x = (localScale_5 * ((tmpvar_35 * tmpvar_40) - tmpvar_39));
  tmpvar_42[0].y = ((tmpvar_35 * tmpvar_41) - tmpvar_38);
  tmpvar_42[0].z = (tmpvar_35 * tmpvar_37);
  tmpvar_42[0].w = 0.0;
  tmpvar_42[1].x = ((tmpvar_36 * tmpvar_40) + tmpvar_38);
  tmpvar_42[1].y = (localScale_5 * ((tmpvar_36 * tmpvar_41) - tmpvar_39));
  tmpvar_42[1].z = (tmpvar_36 * tmpvar_37);
  tmpvar_42[1].w = 0.0;
  tmpvar_42[2].x = (tmpvar_37 * tmpvar_40);
  tmpvar_42[2].y = (tmpvar_37 * tmpvar_41);
  tmpvar_42[2].z = (localScale_5 * (1.0 - tmpvar_33));
  tmpvar_42[2].w = 0.0;
  tmpvar_42[3].x = trans_30.x;
  tmpvar_42[3].y = trans_30.y;
  tmpvar_42[3].z = trans_30.z;
  tmpvar_42[3].w = 1.0;
  mat4 tmpvar_43;
  tmpvar_43 = (((unity_MatrixV * _Object2World) * tmpvar_42));
  vec4 v_44;
  v_44.x = tmpvar_43[0].z;
  v_44.y = tmpvar_43[1].z;
  v_44.z = tmpvar_43[2].z;
  v_44.w = tmpvar_43[3].z;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(v_44.xyz);
  vec4 tmpvar_46;
  tmpvar_46 = (gl_ModelViewMatrix * localOrigin_6);
  vec4 tmpvar_47;
  tmpvar_47.xyz = (gl_Vertex.xyz * localScale_5);
  tmpvar_47.w = gl_Vertex.w;
  vec4 tmpvar_48;
  tmpvar_48 = (gl_ProjectionMatrix * (tmpvar_46 + tmpvar_47));
  vec2 tmpvar_49;
  tmpvar_49 = ((2.0 * gl_MultiTexCoord0.xy) - 1.0);
  vec4 tmpvar_50;
  tmpvar_50.z = 0.0;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = tmpvar_49.y;
  tmpvar_50.w = gl_Vertex.w;
  ZYv_3.xyw = tmpvar_50.zyw;
  XZv_2.yzw = tmpvar_50.zyw;
  XYv_1.yzw = tmpvar_50.yzw;
  ZYv_3.z = (tmpvar_49.x * sign(-(tmpvar_45.x)));
  XZv_2.x = (tmpvar_49.x * sign(-(tmpvar_45.y)));
  XYv_1.x = (tmpvar_49.x * sign(tmpvar_45.z));
  ZYv_3.x = ((sign(-(tmpvar_45.x)) * sign(ZYv_3.z)) * tmpvar_45.z);
  XZv_2.y = ((sign(-(tmpvar_45.y)) * sign(XZv_2.x)) * tmpvar_45.x);
  XYv_1.z = ((sign(-(tmpvar_45.z)) * sign(XYv_1.x)) * tmpvar_45.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_45.x)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_45.y)) * sign(tmpvar_49.y)) * tmpvar_45.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_45.z)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  vec4 o_51;
  vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_48 * 0.5);
  vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_48.zw;
  tmpvar_9.xyw = o_51.xyw;
  tmpvar_9.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_48;
  xlv_COLOR = tmpvar_7;
  xlv_TEXCOORD0 = abs(tmpvar_45);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * ZYv_3).xy - tmpvar_46.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XZv_2).xy - tmpvar_46.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XYv_1).xy - tmpvar_46.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_6).xyz));
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform vec4 _ZBufferParams;
void main ()
{
  vec4 color_1;
  vec4 tmpvar_2;
  tmpvar_2 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (texture2D (_LeftTex, xlv_TEXCOORD1), texture2D (_TopTex, xlv_TEXCOORD2), xlv_TEXCOORD0.yyyy), texture2D (_FrontTex, xlv_TEXCOORD3), xlv_TEXCOORD0.zzzz));
  color_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD5);
  color_1.w = (tmpvar_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 28 [glstate_lightmodel_ambient]
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_projection]
Vector 29 [_WorldSpaceCameraPos]
Vector 30 [_ProjectionParams]
Vector 31 [_ScreenParams]
Vector 32 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [unity_MatrixV]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
Vector 33 [_LightColor0]
Float 34 [_DetailScale]
Float 35 [_DistFade]
Float 36 [_DistFadeVert]
Float 37 [_MinLight]
Float 38 [_Rotation]
Float 39 [_MaxScale]
Vector 40 [_MaxTrans]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"vs_3_0
; 354 ALU, 4 TEX
dcl_position o0
dcl_color0 o1
dcl_texcoord0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord8 o9
def c41, 0.15915491, 0.50000000, 6.28318501, -3.14159298
def c42, 123.54530334, 2.00000000, -1.00000000, 1.00000000
def c43, 0.00000000, -0.01872930, 0.07426100, -0.21211439
def c44, 1.57072902, 3.14159298, 0.31830987, -0.12123910
def c45, -0.01348047, 0.05747731, 0.19563590, -0.33299461
def c46, 0.99999559, 1.57079601, 0.15915494, 0.50000000
def c47, 6.28318548, 0.00000000, 1.00000000, -0.01000214
def c48, 0.60000002, 0.50000000, 4.03944778, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_2d s0
dcl_2d s1
mad r10.xy, v2, c42.y, c42.z
mov r1.w, c11
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
dp4 r0.z, r1, c18
dp4 r0.x, r1, c16
dp4 r0.y, r1, c17
frc r1.xyz, -r0
add r0.xyz, -r0, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mad r0.x, r1, c41, c41.y
frc r0.x, r0
mad r1.x, r0, c41.z, c41.w
sincos r0.xy, r1.x
mad r0.x, r1.z, c41, c41.y
mov r1.x, r0.y
frc r0.y, r0.x
mad r0.x, r1.y, c41, c41.y
mad r1.y, r0, c41.z, c41.w
frc r1.x, r0
sincos r0.xy, r1.y
mad r0.x, r1, c41.z, c41.w
sincos r1.xy, r0.x
mov r1.z, r0.y
mul r0.xyz, r1, c42.x
frc r0.xyz, r0
abs r6.xyz, r0
mad r0.xyz, r6, c42.y, c42.z
mul r0.xyz, r0, c40
mov r0.w, c42
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
dp4 r2.w, r0, c11
dp4 r1.z, r2, c18
dp4 r1.x, r2, c16
dp4 r1.y, r2, c17
dp4 r1.w, r2, c19
add r7.xyz, -r2, c29
dp3 r2.x, r7, r7
rsq r8.w, r2.x
dp4 r3.z, -r1, c22
dp4 r3.x, -r1, c20
dp4 r3.y, -r1, c21
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mul r3.xyz, r1.w, r3
abs r3.xyz, r3
sge r1.w, r3.z, r3.x
add r4.xyz, r3.zxyw, -r3
mad r4.xyz, r1.w, r4, r3
sge r2.w, r4.x, r3.y
add r4.xyz, r4, -r3.yxzw
mad r3.xyz, r2.w, r4, r3.yxzw
dp3 r1.w, -r1, -r1
rsq r1.w, r1.w
mul r1.xyz, r1.w, -r1
abs r2.w, r1.x
abs r1.w, r1.z
mul r3.zw, r3.xyzy, c41.y
max r3.y, r1.w, r2.w
abs r4.y, r3.x
min r3.x, r1.w, r2.w
slt r1.w, r1, r2
rcp r3.y, r3.y
mul r4.x, r3, r3.y
rcp r3.x, r4.y
mul r3.xy, r3.zwzw, r3.x
mul r4.y, r4.x, r4.x
mad r3.z, r4.y, c45.x, c45.y
mad r3.z, r3, r4.y, c44.w
mad r2.w, r3.z, r4.y, c45.z
mad r2.w, r2, r4.y, c45
mad r2.w, r2, r4.y, c46.x
mul r2.w, r2, r4.x
max r1.w, -r1, r1
slt r1.w, c43.x, r1
add r3.z, -r1.w, c42.w
mul r3.z, r2.w, r3
add r2.w, -r2, c46.y
mad r1.w, r1, r2, r3.z
slt r1.z, r1, c43.x
max r1.z, -r1, r1
slt r1.z, c43.x, r1
slt r1.x, r1, c43
max r1.x, -r1, r1
add r2.w, -r1, c44.y
add r3.z, -r1, c42.w
mul r1.w, r1, r3.z
slt r1.x, c43, r1
mad r1.z, r1, r2.w, r1.w
add r3.z, -r1.x, c42.w
mul r1.w, r1.z, r3.z
mad r1.x, r1, -r1.z, r1.w
abs r1.z, r1.y
add r2.w, -r1.z, c42
mad r1.w, r1.z, c43.y, c43.z
mad r1.w, r1, r1.z, c43
rsq r2.w, r2.w
rcp r2.w, r2.w
mad r1.z, r1.w, r1, c44.x
mul r1.z, r1, r2.w
slt r1.y, r1, c43.x
mul r1.w, r1.y, r1.z
mad r1.z, -r1.w, c42.y, r1
mad r1.y, r1, c44, r1.z
mul r3.xy, r3, c34.x
mov r3.z, c43.x
texldl r3, r3.xyzz, s1
mad r1.x, r1, c46.z, c46.w
mov r4.yz, c43.x
frc r4.x, c38
add r4.xyz, r6, r4
mul r1.w, r4.x, c47.x
mad r1.z, r1.w, c41.x, c41.y
frc r2.w, r1.z
mad r4.x, r2.w, c41.z, c41.w
sincos r5.xy, r4.x
mul r2.w, r4.y, c47.x
mad r2.w, r2, c41.x, c41.y
frc r4.x, r2.w
mul r2.w, r4.z, c42.y
mad r5.z, r4.x, c41, c41.w
sincos r4.xy, r5.z
rsq r5.w, r2.w
rcp r4.z, r5.w
mul r4.w, r4.x, r4.z
mul r5.z, r4.y, r4
mul r4.x, r4.w, r5
mad r4.y, r5.z, r5, r4.x
mov r5.w, c14.x
mul r1.y, r1, c44.z
mov r1.z, c43.x
texldl r1, r1.xyzz, s0
mul r3, r1, r3
add r1.z, -r2.w, c42.y
mov o1.xyz, r3
mov r1.y, c39.x
add r1.y, c42.z, r1
mad r1.x, r5.z, r4.y, -r5.y
mad r7.w, r6.x, r1.y, c42
mad r1.w, r4, r4.y, -r5.x
mul r1.y, r7.w, r1.w
rsq r1.z, r1.z
rcp r1.w, r1.z
mul r1.z, r1.w, r4.y
mov r4.x, c14.y
mul r4.xyz, c9, r4.x
mad r4.xyz, c8, r5.w, r4
mov r5.w, c14.z
mad r4.xyz, c10, r5.w, r4
mov r5.w, c14
mad r6.xyz, c11, r5.w, r4
mul r5.w, r4, r5.y
mad r2.z, r5, r5.x, -r5.w
mad r2.y, r5.z, r2.z, -r5.x
mul r2.x, r7.w, r2.y
mad r2.y, r4.w, r2.z, r5
mul r5.x, r5.z, r1.w
add r2.w, -r2, c42
mul r5.y, r1.w, r4.w
mul r2.z, r1.w, r2
mul r4.xyz, r6.y, r1
rcp r5.w, r8.w
mul r5.z, r7.w, r2.w
mad r4.xyz, r6.x, r2, r4
mad r4.xyz, r6.z, r5, r4
mul r1.w, -r5, c36.x
add_sat r2.w, r1, c42
mul_sat r1.w, r5, c35.x
mul r1.w, r1, r2
dp3 r4.w, r4, r4
rsq r2.w, r4.w
mul r8.xyz, r2.w, r4
mul o1.w, r3, r1
slt r2.w, -r8.x, r8.x
slt r1.w, r8.x, -r8.x
sub r1.w, r1, r2
slt r3.x, r10.y, -r10.y
slt r2.w, -r10.y, r10.y
sub r10.z, r2.w, r3.x
mul r2.w, r10.x, r1
mul r3.z, r1.w, r10
slt r3.y, r2.w, -r2.w
slt r3.x, -r2.w, r2.w
sub r3.x, r3, r3.y
mov r9.z, r2.w
mov r2.w, r0.x
mul r1.w, r3.x, r1
mul r3.y, r8, r3.z
mad r9.x, r8.z, r1.w, r3.y
mov r1.w, c12.y
mul r3, c9, r1.w
mov r1.w, c12.x
mad r3, c8, r1.w, r3
mov r1.w, c12.z
mad r3, c10, r1.w, r3
mov r1.w, c12
mad r6, c11, r1.w, r3
mov r1.w, r0.y
mul r4, r1, r6.y
mov r3.x, c13.y
mov r5.w, c13.x
mul r3, c9, r3.x
mad r3, c8, r5.w, r3
mov r5.w, c13.z
mad r3, c10, r5.w, r3
mov r5.w, c13
mad r3, c11, r5.w, r3
mul r1, r3.y, r1
mov r5.w, r0.z
mad r1, r3.x, r2, r1
mad r1, r3.z, r5, r1
mad r1, r3.w, c47.yyyz, r1
mad r4, r2, r6.x, r4
mad r4, r5, r6.z, r4
mad r2, r6.w, c47.yyyz, r4
dp4 r5.y, r0, c1
dp4 r5.x, r0, c0
mov r4.w, v0
mov r4.y, r10
mov r9.yw, r4
dp4 r3.y, r1, r9
dp4 r3.x, r9, r2
slt r3.w, -r8.y, r8.y
slt r3.z, r8.y, -r8.y
sub r4.x, r3.z, r3.w
add r3.zw, -r5.xyxy, r3.xyxy
mul r3.x, r10, r4
mad o3.xy, r3.zwzw, c48.x, c48.y
slt r3.z, r3.x, -r3.x
slt r3.y, -r3.x, r3.x
sub r3.y, r3, r3.z
mul r3.z, r10, r4.x
mul r3.y, r3, r4.x
mul r4.x, r8.z, r3.z
mad r3.y, r8.x, r3, r4.x
mov r3.zw, r4.xyyw
dp4 r5.w, r1, r3
dp4 r5.z, r2, r3
add r3.xy, -r5, r5.zwzw
slt r3.w, -r8.z, r8.z
slt r3.z, r8, -r8
sub r4.x, r3.w, r3.z
sub r3.z, r3, r3.w
mul r4.x, r10, r4
mul r5.z, r10, r3
dp4 r5.w, r0, c3
slt r4.z, r4.x, -r4.x
slt r3.w, -r4.x, r4.x
sub r3.w, r3, r4.z
mul r4.z, r8.y, r5
dp4 r5.z, r0, c2
mul r3.z, r3, r3.w
mad r4.z, r8.x, r3, r4
dp4 r1.y, r1, r4
dp4 r1.x, r2, r4
mad o4.xy, r3, c48.x, c48.y
add r3.xy, -r5, r1
mov r0.w, v0
mul r0.xyz, v0, r7.w
add r0, r5, r0
dp4 r2.w, r0, c7
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
mov r1.w, r2
dp4 r1.z, r0, c6
mul r2.xyz, r1.xyww, c41.y
mov o0, r1
mul r2.y, r2, c30.x
mov r1.xyz, v1
mov r1.w, c43.x
dp4 r0.z, r1, c10
dp4 r0.y, r1, c9
dp4 r0.x, r1, c8
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c32, c32
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c32
dp3_sat r0.x, r0, r1
add r0.x, r0, c47.w
mul r0.y, r0.x, c33.w
dp4 r1.x, v0, c2
mul_sat r0.w, r0.y, c48.z
mov r0.x, c37
add r0.xyz, c33, r0.x
mad_sat o7.xyz, r0, r0.w, c28
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mad o5.xy, r3, c48.x, c48.y
mad o9.xy, r2.z, c31.zwzw, r2
abs o2.xyz, r8
mov o9.w, r2
mul o6.xyz, r8.w, r7
dp4 o8.z, r0, c26
dp4 o8.y, r0, c25
dp4 o8.x, r0, c24
mov o9.z, -r1.x
"
}

SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
ConstBuffer "$Globals" 320 // 316 used size, 16 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
Vector 208 [_LightColor0] 4
Float 240 [_DetailScale]
Float 272 [_DistFade]
Float 276 [_DistFadeVert]
Float 284 [_MinLight]
Float 292 [_Rotation]
Float 296 [_MaxScale]
Vector 304 [_MaxTrans] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityPerFrame" 208 // 144 used size, 4 vars
Matrix 0 [glstate_matrix_projection] 4
Vector 64 [glstate_lightmodel_ambient] 4
Matrix 80 [unity_MatrixV] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityPerFrame" 4
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 253 instructions, 12 temp regs, 0 temp arrays:
// ALU 216 float, 8 int, 6 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedadpikehbjcbflflalgnokldmjcibfekoabaaaaaapicdaaaaadaaaaaa
cmaaaaaanmaaaaaapiabaaaaejfdeheokiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaijaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaipaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaajgaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaajoaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaafaepfdejfeejepeoaaedepem
epfcaaeoepfcenebemaafeebeoehefeofeaafeeffiedepepfceeaaklepfdeheo
beabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaakabaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaakabaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaaakabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
amadaaaaakabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaaakabaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaakabaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaakabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaakabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaaedepemepfcaafeeffiedepepfceeaaklfdeieefcpicbaaaa
eaaaabaahoaiaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaaajaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
dccabaaaadaaaaaagfaaaaadmccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaa
ahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacamaaaaaadiaaaaajhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaacaaaaaafgifcaaaadaaaaaaapaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaadaaaaaaapaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgikcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaaaaaaaaaaeaaaaaapgipcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaa
ebaaaaaghcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaenaaaaaghcaabaaaaaaaaaaaaanaaaaaegacbaaaaaaaaaaadiaaaaak
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaadcbhphecdcbhphecdcbhphec
aaaaaaaabkaaaaafhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaa
aaaaaaaackiacaaaaaaaaaaabcaaaaaaabeaaaaaaaaaialpdcaaaaajicaabaaa
aaaaaaaaakaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaficaabaaa
abaaaaaadkbabaaaaaaaaaaadcaaaaaphcaabaaaacaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaa
aaaaaaaabdaaaaaadiaaaaaipcaabaaaadaaaaaafgafbaaaacaaaaaaegiocaaa
adaaaaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaadaaaaaaaeaaaaaa
agaabaaaacaaaaaaegaobaaaadaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaa
adaaaaaaagaaaaaakgakbaaaacaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegiocaaaadaaaaaaahaaaaaaaaaaaaahpcaabaaa
abaaaaaaegaobaaaabaaaaaaegaobaaaadaaaaaadiaaaaaipcaabaaaaeaaaaaa
fgafbaaaabaaaaaaegiocaaaaeaaaaaaabaaaaaadcaaaaakpcaabaaaaeaaaaaa
egiocaaaaeaaaaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaeaaaaaadcaaaaak
pcaabaaaaeaaaaaaegiocaaaaeaaaaaaacaaaaaakgakbaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaeaaaaaaadaaaaaapgapbaaa
abaaaaaaegaobaaaaeaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaaeaaaaaafgafbaaaacaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaamaaaaaaagaabaaaacaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgakbaaaacaaaaaaegaobaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaaa
aeaaaaaaegiocaaaadaaaaaaapaaaaaadiaaaaaipcaabaaaafaaaaaafgafbaaa
aeaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaa
aaaaaaaaabaaaaaaagaabaaaaeaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaa
afaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaeaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaeaaaaaa
egaobaaaafaaaaaadiaaaaajhcaabaaaagaaaaaafgafbaiaebaaaaaaafaaaaaa
bgigcaaaaaaaaaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaa
afaaaaaaagaabaiaebaaaaaaafaaaaaaegacbaaaagaaaaaadcaaaaalhcaabaaa
agaaaaaabgigcaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaafaaaaaaegacbaaa
agaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaaiaaaaaapgapbaia
ebaaaaaaafaaaaaaegacbaaaagaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaa
agaaaaaaegacbaaaagaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahhcaabaaaagaaaaaakgakbaaaabaaaaaaegacbaaaagaaaaaadgaaaaag
ecaabaaaahaaaaaackaabaiambaaaaaaagaaaaaabnaaaaajecaabaaaabaaaaaa
ckaabaiaibaaaaaaagaaaaaabkaabaiaibaaaaaaagaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaaaiaaaaaa
fgaibaiambaaaaaaagaaaaaakgabbaiaibaaaaaaagaaaaaadiaaaaahlcaabaaa
ahaaaaaakgakbaaaabaaaaaajganbaaaaiaaaaaadcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaaiaaaaaabkaabaiaibaaaaaaagaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaihcaabaaa
aiaaaaaabgagbaiaibaaaaaaagaaaaaaegacbaaaahaaaaaadgaaaaagfcaabaaa
ahaaaaaafgaebaiambaaaaaaagaaaaaaaaaaaaahhcaabaaaahaaaaaacgalbaaa
ahaaaaaaegacbaaaaiaaaaaadcaaaaakhcaabaaaagaaaaaakgakbaaaabaaaaaa
egacbaaaahaaaaaaegacbaiaibaaaaaaagaaaaaadiaaaaakmcaabaaaadaaaaaa
kgagbaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaah
mcaabaaaadaaaaaakgaobaaaadaaaaaaagaabaaaagaaaaaadiaaaaaimcaabaaa
adaaaaaakgaobaaaadaaaaaaagiacaaaaaaaaaaaapaaaaaaeiaaaaalpcaabaaa
agaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaajecaabaaaabaaaaaaegacbaiaebaaaaaaafaaaaaaegacbaia
ebaaaaaaafaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaai
hcaabaaaafaaaaaakgakbaaaabaaaaaaigabbaiaebaaaaaaafaaaaaadeaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaa
aoaaaaakecaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
ckaabaaaabaaaaaaddaaaaajicaabaaaacaaaaaabkaabaiaibaaaaaaafaaaaaa
akaabaiaibaaaaaaafaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaackaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaackaabaaa
adaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaa
ckaabaaaadaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaacaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaadaaaaaa
ckaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaaadaaaaaackaabaaa
adaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaadaaaaaa
bkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaabaaaaahecaabaaa
adaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadbaaaaaimcaabaaa
adaaaaaafgajbaaaafaaaaaafgajbaiaebaaaaaaafaaaaaaabaaaaahicaabaaa
acaaaaaackaabaaaadaaaaaaabeaaaaanlapejmaaaaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaacaaaaaaddaaaaahicaabaaaacaaaaaabkaabaaa
afaaaaaaakaabaaaafaaaaaadbaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
dkaabaiaebaaaaaaacaaaaaadeaaaaahecaabaaaadaaaaaabkaabaaaafaaaaaa
akaabaaaafaaaaaabnaaaaaiecaabaaaadaaaaaackaabaaaadaaaaaackaabaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaackaabaaa
adaaaaaadhaaaaakecaabaaaabaaaaaadkaabaaaacaaaaaackaabaiaebaaaaaa
abaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaafaaaaaackaabaaaabaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakecaabaaaabaaaaaackaabaia
ibaaaaaaafaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaacaaaaaackaabaiambaaaaaaafaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaah
ecaabaaaadaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaa
adaaaaaackaabaaaadaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
ecaabaaaadaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaah
ccaabaaaafaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoeiaaaaalpcaabaaa
afaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaabeaaaaa
aaaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaagaaaaaaegaobaaaafaaaaaa
aaaaaaajhcaabaaaagaaaaaaegacbaaaaeaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhcaabaaaaeaaaaaaegacbaiaebaaaaaaaeaaaaaaegiccaaa
abaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaagaaaaaaegacbaaa
agaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaiicaabaaa
acaaaaaackaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaadccaaaalecaabaaa
abaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaackaabaaaabaaaaaaabeaaaaa
aaaaiadpdgcaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahiccabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaafaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
afaaaaaabkaaaaagbcaabaaaafaaaaaabkiacaaaaaaaaaaabcaaaaaadgaaaaai
gcaabaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaafaaaaaaaaaaaaahecaabaaa
abaaaaaackaabaaaaaaaaaaackaabaaaaaaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaa
nlapmjeanlapmjeaaaaaaaaaaaaaaaaadcaaaabamcaabaaaadaaaaaakgakbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaeaaaaaiadpenaaaaahbcaabaaaafaaaaaabcaabaaa
agaaaaaabkaabaaaaaaaaaaaenaaaaahbcaabaaaaaaaaaaabcaabaaaahaaaaaa
akaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaa
agaaaaaadiaaaaahecaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaa
diaaaaahecaabaaaabaaaaaaakaabaaaahaaaaaabkaabaaaaaaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaaaaaaaaaakaabaaaaaaaaaaackaabaaaabaaaaaa
dcaaaaakicaabaaaacaaaaaabkaabaaaaaaaaaaackaabaaaabaaaaaaakaabaia
ebaaaaaaahaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaa
acaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaadaaaaaaanaaaaaaegiccaaa
aeaaaaaaagaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaafaaaaaa
agiacaaaadaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaa
egiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaanaaaaaaegacbaaaafaaaaaa
dcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaa
anaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaagaaaaaapgapbaaaacaaaaaa
egacbaaaafaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaadcaaaaakicaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaaahaaaaaa
dkaabaiaebaaaaaaacaaaaaadcaaaaajicaabaaaaeaaaaaabkaabaaaaaaaaaaa
dkaabaaaacaaaaaaakaabaaaaaaaaaaadiaaaaajocaabaaaahaaaaaafgifcaaa
adaaaaaaamaaaaaaagijcaaaaeaaaaaaagaaaaaadcaaaaalocaabaaaahaaaaaa
agijcaaaaeaaaaaaafaaaaaaagiacaaaadaaaaaaamaaaaaafgaobaaaahaaaaaa
dcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaa
amaaaaaafgaobaaaahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaa
aiaaaaaapgipcaaaadaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaajhcaabaaa
agaaaaaajgahbaaaahaaaaaapgapbaaaaeaaaaaaegacbaaaagaaaaaaelaaaaaf
ecaabaaaadaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaadaaaaaadkaabaaa
aaaaaaaadkaabaaaadaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaadaaaaaadiaaaaajhcaabaaaaiaaaaaafgifcaaaadaaaaaaaoaaaaaa
egiccaaaaeaaaaaaagaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaa
afaaaaaaagiacaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaalhcaabaaa
aiaaaaaaegiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaaoaaaaaaegacbaaa
aiaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaa
adaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaajhcaabaaaagaaaaaaegacbaaa
aiaaaaaafgafbaaaaaaaaaaaegacbaaaagaaaaaadgaaaaafccaabaaaajaaaaaa
ckaabaaaagaaaaaadcaaaaakccaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaa
acaaaaaaakaabaiaebaaaaaaahaaaaaadcaaaaakbcaabaaaaaaaaaaackaabaaa
aaaaaaaackaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaadiaaaaahecaabaaa
aaaaaaaackaabaaaaaaaaaaackaabaaaadaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaadiaaaaahhcaabaaaakaaaaaakgakbaaaabaaaaaa
egacbaaaafaaaaaadcaaaaajhcaabaaaakaaaaaajgahbaaaahaaaaaapgapbaaa
acaaaaaaegacbaaaakaaaaaadcaaaaajhcaabaaaakaaaaaaegacbaaaaiaaaaaa
pgapbaaaadaaaaaaegacbaaaakaaaaaadiaaaaahhcaabaaaalaaaaaaagaabaaa
aaaaaaaaegacbaaaafaaaaaadiaaaaahkcaabaaaacaaaaaafgafbaaaacaaaaaa
agaebaaaafaaaaaadcaaaaajdcaabaaaacaaaaaajgafbaaaahaaaaaaagaabaaa
acaaaaaangafbaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaaaiaaaaaa
kgakbaaaacaaaaaaegaabaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaabkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajlcaabaaaaaaaaaaajganbaaaahaaaaaa
agaabaaaaaaaaaaaegaibaaaalaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaa
aiaaaaaakgakbaaaaaaaaaaaegadbaaaaaaaaaaadgaaaaafbcaabaaaajaaaaaa
ckaabaaaaaaaaaaadgaaaaafecaabaaaajaaaaaackaabaaaakaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaajaaaaaaegacbaaaajaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaakgakbaaaaaaaaaaa
egacbaaaajaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaibaaaaaaafaaaaaa
diaaaaajmcaabaaaaaaaaaaafgifcaaaadaaaaaaapaaaaaaagiecaaaaeaaaaaa
agaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaafaaaaaaagiacaaa
adaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaa
aeaaaaaaahaaaaaakgikcaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaal
mcaabaaaaaaaaaaaagiecaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaaapaaaaaa
kgaobaaaaaaaaaaaaaaaaaahmcaabaaaaaaaaaaakgaobaaaaaaaaaaaagaebaaa
acaaaaaadbaaaaalhcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaegacbaiaebaaaaaaafaaaaaadbaaaaalhcaabaaaahaaaaaaegacbaia
ebaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaboaaaaai
hcaabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaahaaaaaadcaaaaap
mcaabaaaadaaaaaaagbebaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaea
aaaaaaeaaceaaaaaaaaaaaaaaaaaaaaaaaaaialpaaaaialpdbaaaaahecaabaaa
abaaaaaaabeaaaaaaaaaaaaadkaabaaaadaaaaaadbaaaaahicaabaaaacaaaaaa
dkaabaaaadaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaadkaabaaaacaaaaaacgaaaaaiaanaaaaahcaabaaaahaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaaclaaaaafhcaabaaaahaaaaaaegacbaaa
ahaaaaaadiaaaaahhcaabaaaahaaaaaajgafbaaaafaaaaaaegacbaaaahaaaaaa
claaaaafkcaabaaaafaaaaaaagaebaaaacaaaaaadiaaaaahkcaabaaaafaaaaaa
kgakbaaaadaaaaaafganbaaaafaaaaaadbaaaaakmcaabaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafganbaaaafaaaaaadbaaaaakdcaabaaa
aiaaaaaangafbaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
boaaaaaimcaabaaaagaaaaaakgaobaiaebaaaaaaagaaaaaaagaebaaaaiaaaaaa
cgaaaaaiaanaaaaadcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaaagaaaaaa
claaaaafdcaabaaaacaaaaaaegaabaaaacaaaaaadcaaaaajdcaabaaaacaaaaaa
egaabaaaacaaaaaacgakbaaaafaaaaaaegaabaaaahaaaaaadiaaaaahkcaabaaa
acaaaaaafgafbaaaacaaaaaaagaebaaaagaaaaaadiaaaaahdcaabaaaagaaaaaa
pgapbaaaadaaaaaaegaabaaaagaaaaaadcaaaaajmcaabaaaagaaaaaaagaebaaa
aaaaaaaaagaabaaaacaaaaaaagaebaaaagaaaaaadcaaaaajmcaabaaaagaaaaaa
agaebaaaakaaaaaafgafbaaaafaaaaaakgaobaaaagaaaaaadcaaaaajdcaabaaa
acaaaaaaegaabaaaaaaaaaaapgapbaaaafaaaaaangafbaaaacaaaaaadcaaaaaj
dcaabaaaacaaaaaaegaabaaaakaaaaaapgapbaaaadaaaaaaegaabaaaacaaaaaa
dcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaa
acaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaa
acaaaaaadcaaaaapmccabaaaadaaaaaaagaebaaaacaaaaaaaceaaaaaaaaaaaaa
aaaaaaaajkjjbjdpjkjjbjdpaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
dcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaogakbaaa
agaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaa
acaaaaaadcaaaaapdccabaaaadaaaaaaegaabaaaacaaaaaaaceaaaaajkjjbjdp
jkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
dbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaackaabaaaafaaaaaadbaaaaah
bcaabaaaacaaaaaackaabaaaafaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaacaaaaaaclaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaaaadaaaaaadbaaaaahbcaabaaaacaaaaaaabeaaaaaaaaaaaaackaabaaa
abaaaaaadbaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaa
dcaaaaajdcaabaaaaaaaaaaaegaabaaaaaaaaaaakgakbaaaabaaaaaaegaabaaa
agaaaaaaboaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaabkaabaaa
acaaaaaacgaaaaaiaanaaaaaecaabaaaabaaaaaackaabaaaabaaaaaackaabaaa
acaaaaaaclaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaackaabaaaahaaaaaadcaaaaaj
dcaabaaaaaaaaaaaegaabaaaakaaaaaakgakbaaaabaaaaaaegaabaaaaaaaaaaa
dcaaaaajdcaabaaaaaaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaa
aaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaa
aaaaaaaadcaaaaapdccabaaaaeaaaaaaegaabaaaaaaaaaaaaceaaaaajkjjbjdp
jkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaaagaabaaa
aaaaaaaaegacbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaacaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaibcaabaaaaaaaaaaa
akaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaaaaaaaaaagijcaaa
aaaaaaaaanaaaaaapgipcaaaaaaaaaaabbaaaaaadccaaaakhccabaaaagaaaaaa
jgahbaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaaeaaaaaaaeaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaacaaaaaa
fgafbaaaaaaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaakgakbaaaaaaaaaaaegacbaaa
acaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaamaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadiaaaaakhcaabaaaaaaaaaaaegadbaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaadgaaaaaficcabaaaaiaaaaaa
dkaabaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaaaaaaaaamgaabaaa
aaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaa
afaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
agaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaag
eccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 388
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 489
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 480
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 398
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 411
#line 419
#line 433
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 466
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 470
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 474
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 478
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 503
#line 519
#line 575
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 380
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 382
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 355
mediump vec4 GetShereDetailMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 357
    highp vec3 sphereVectNorm = normalize(sphereVect);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 361
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    highp vec4 uv;
    uv.xy = (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale);
    #line 365
    uv.zw = vec2( 0.0, 0.0);
    return xll_tex2Dlod( texSampler, uv);
}
#line 330
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 332
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 336
    return uv;
}
#line 338
mediump vec4 GetSphereMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 340
    highp vec4 uv;
    highp vec3 sphereVectNorm = normalize(sphereVect);
    uv.xy = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    uv.zw = vec2( 0.0, 0.0);
    #line 344
    mediump vec4 tex = xll_tex2Dlod( texSampler, uv);
    return tex;
}
#line 317
highp vec3 hash( in highp vec3 val ) {
    #line 319
    return fract((sin(val) * 123.545));
}
#line 503
highp mat4 rand_rotation( in highp vec3 x, in highp float scale, in highp vec3 trans ) {
    highp float theta = (x.x * 6.28319);
    highp float phi = (x.y * 6.28319);
    #line 507
    highp float z = (x.z * 2.0);
    highp float r = sqrt(z);
    highp float Vx = (sin(phi) * r);
    highp float Vy = (cos(phi) * r);
    #line 511
    highp float Vz = sqrt((2.0 - z));
    highp float st = sin(theta);
    highp float ct = cos(theta);
    highp float Sx = ((Vx * ct) - (Vy * st));
    #line 515
    highp float Sy = ((Vx * st) + (Vy * ct));
    highp mat4 M = mat4( (scale * ((Vx * Sx) - ct)), ((Vx * Sy) - st), (Vx * Vz), 0.0, ((Vy * Sx) + st), (scale * ((Vy * Sy) - ct)), (Vy * Vz), 0.0, (Vz * Sx), (Vz * Sy), (scale * (1.0 - z)), 0.0, trans.x, trans.y, trans.z, 1.0);
    return M;
}
#line 519
v2f vert( in appdata_t v ) {
    v2f o;
    highp vec4 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0));
    #line 523
    highp vec4 planet_pos = (-(_MainRotation * origin));
    highp vec3 hashVect = abs(hash( normalize(floor(planet_pos.xyz))));
    highp vec4 localOrigin;
    localOrigin.xyz = (((2.0 * hashVect) - 1.0) * _MaxTrans);
    #line 527
    localOrigin.w = 1.0;
    highp float localScale = ((hashVect.x * (_MaxScale - 1.0)) + 1.0);
    origin = (_Object2World * localOrigin);
    highp vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 531
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 535
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    o.baseLight = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    planet_pos = (-(_MainRotation * origin));
    highp vec3 detail_pos = (_DetailRotation * planet_pos).xyz;
    #line 539
    o.color = GetSphereMapNoLOD( _MainTex, planet_pos.xyz);
    o.color *= GetShereDetailMapNoLOD( _DetailTex, detail_pos, _DetailScale);
    o.color.w *= GetDistanceFade( distance( origin, vec4( _WorldSpaceCameraPos, 0.0)), _DistFade, _DistFadeVert);
    highp mat4 M = rand_rotation( (vec3( fract(_Rotation), 0.0, 0.0) + hashVect), localScale, localOrigin.xyz);
    #line 543
    highp mat4 mvMatrix = ((unity_MatrixV * _Object2World) * M);
    highp vec3 viewDir = normalize(xll_matrixindex_mf4x4_i (mvMatrix, 2).xyz);
    o.viewDir = abs(viewDir);
    highp vec4 mvCenter = (glstate_matrix_modelview0 * localOrigin);
    #line 547
    o.pos = (glstate_matrix_projection * (mvCenter + vec4( (v.vertex.xyz * localScale), v.vertex.w)));
    o.camPos = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * localOrigin).xyz));
    highp vec2 texcoodOffsetxy = ((2.0 * v.texcoord) - 1.0);
    highp vec4 texcoordOffset = vec4( texcoodOffsetxy.x, texcoodOffsetxy.y, 0.0, v.vertex.w);
    #line 551
    highp vec4 ZYv = texcoordOffset.zyxw;
    highp vec4 XZv = texcoordOffset.xzyw;
    highp vec4 XYv = texcoordOffset.xyzw;
    ZYv.z *= sign((-viewDir.x));
    #line 555
    XZv.x *= sign((-viewDir.y));
    XYv.x *= sign(viewDir.z);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.z)) * viewDir.z);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.x)) * viewDir.x);
    #line 559
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.x)) * viewDir.x);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.y)) * viewDir.y);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.z)) * viewDir.z);
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.y)) * viewDir.y);
    #line 563
    highp vec2 ZY = ((mvMatrix * ZYv).xy - mvCenter.xy);
    highp vec2 XZ = ((mvMatrix * XZv).xy - mvCenter.xy);
    highp vec2 XY = ((mvMatrix * XYv).xy - mvCenter.xy);
    o.texcoordZY = (vec2( 0.5, 0.5) + (0.6 * ZY));
    #line 567
    o.texcoordXZ = (vec2( 0.5, 0.5) + (0.6 * XZ));
    o.texcoordXY = (vec2( 0.5, 0.5) + (0.6 * XY));
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    #line 571
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out lowp vec4 xlv_COLOR;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.texcoord = vec2(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_COLOR = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD1 = vec2(xl_retval.texcoordZY);
    xlv_TEXCOORD2 = vec2(xl_retval.texcoordXZ);
    xlv_TEXCOORD3 = vec2(xl_retval.texcoordXY);
    xlv_TEXCOORD4 = vec3(xl_retval.camPos);
    xlv_TEXCOORD5 = vec3(xl_retval.baseLight);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 388
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 489
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 480
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 398
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 411
#line 419
#line 433
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 466
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 470
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 474
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 478
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 503
#line 519
#line 575
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 575
lowp vec4 frag( in v2f IN ) {
    mediump float xval = IN.viewDir.x;
    mediump vec4 xtex = texture( _LeftTex, IN.texcoordZY);
    #line 579
    mediump float yval = IN.viewDir.y;
    mediump vec4 ytex = texture( _TopTex, IN.texcoordXZ);
    mediump float zval = IN.viewDir.z;
    mediump vec4 ztex = texture( _FrontTex, IN.texcoordXY);
    #line 583
    mediump vec4 tex = mix( mix( xtex, ytex, vec4( yval)), ztex, vec4( zval));
    mediump vec4 prev = (((0.94 * _Color) * IN.color) * tex);
    mediump vec4 color;
    color.xyz = (prev.xyz * IN.baseLight);
    #line 587
    color.w = prev.w;
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 591
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in lowp vec4 xlv_COLOR;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_COLOR);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD0);
    xlt_IN.texcoordZY = vec2(xlv_TEXCOORD1);
    xlt_IN.texcoordXZ = vec2(xlv_TEXCOORD2);
    xlt_IN.texcoordXY = vec2(xlv_TEXCOORD3);
    xlt_IN.camPos = vec3(xlv_TEXCOORD4);
    xlt_IN.baseLight = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform vec3 _MaxTrans;
uniform float _MaxScale;
uniform float _Rotation;
uniform float _MinLight;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 unity_MatrixV;


uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 XYv_1;
  vec4 XZv_2;
  vec4 ZYv_3;
  vec3 detail_pos_4;
  float localScale_5;
  vec4 localOrigin_6;
  vec4 tmpvar_7;
  vec3 tmpvar_8;
  vec4 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_6.xyz = (((2.0 * tmpvar_10) - 1.0) * _MaxTrans);
  localOrigin_6.w = 1.0;
  localScale_5 = ((tmpvar_10.x * (_MaxScale - 1.0)) + 1.0);
  vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * localOrigin_6);
  vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = gl_Normal;
  tmpvar_8 = clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (normalize((_Object2World * tmpvar_12).xyz), normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0);
  vec4 tmpvar_13;
  tmpvar_13 = -((_MainRotation * tmpvar_11));
  detail_pos_4 = (_DetailRotation * tmpvar_13).xyz;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13.xyz);
  vec2 uv_15;
  float r_16;
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_14.x)))) {
    float y_over_x_17;
    y_over_x_17 = (tmpvar_14.x / tmpvar_14.z);
    float s_18;
    float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_14.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(tmpvar_14.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_16));
  uv_15.y = (0.31831 * (1.5708 - (sign(tmpvar_14.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_14.y))) * (1.5708 + (abs(tmpvar_14.y) * (-0.214602 + (abs(tmpvar_14.y) * (0.0865667 + (abs(tmpvar_14.y) * -0.0310296)))))))))));
  vec4 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(normalize(detail_pos_4));
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  uv_20.xy = (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale);
  uv_20.zw = vec2(0.0, 0.0);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DLod (_MainTex, uv_15, 0.0) * texture2DLod (_DetailTex, uv_20.xy, 0.0));
  tmpvar_7.xyz = tmpvar_24.xyz;
  vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = _WorldSpaceCameraPos;
  float tmpvar_26;
  vec4 p_27;
  p_27 = (tmpvar_11 - tmpvar_25);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  tmpvar_7.w = (tmpvar_24.w * (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0)));
  vec3 tmpvar_28;
  tmpvar_28.yz = vec2(0.0, 0.0);
  tmpvar_28.x = fract(_Rotation);
  vec3 x_29;
  x_29 = (tmpvar_28 + tmpvar_10);
  vec3 trans_30;
  trans_30 = localOrigin_6.xyz;
  float tmpvar_31;
  tmpvar_31 = (x_29.x * 6.28319);
  float tmpvar_32;
  tmpvar_32 = (x_29.y * 6.28319);
  float tmpvar_33;
  tmpvar_33 = (x_29.z * 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (sin(tmpvar_32) * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (cos(tmpvar_32) * tmpvar_34);
  float tmpvar_37;
  tmpvar_37 = sqrt((2.0 - tmpvar_33));
  float tmpvar_38;
  tmpvar_38 = sin(tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = cos(tmpvar_31);
  float tmpvar_40;
  tmpvar_40 = ((tmpvar_35 * tmpvar_39) - (tmpvar_36 * tmpvar_38));
  float tmpvar_41;
  tmpvar_41 = ((tmpvar_35 * tmpvar_38) + (tmpvar_36 * tmpvar_39));
  mat4 tmpvar_42;
  tmpvar_42[0].x = (localScale_5 * ((tmpvar_35 * tmpvar_40) - tmpvar_39));
  tmpvar_42[0].y = ((tmpvar_35 * tmpvar_41) - tmpvar_38);
  tmpvar_42[0].z = (tmpvar_35 * tmpvar_37);
  tmpvar_42[0].w = 0.0;
  tmpvar_42[1].x = ((tmpvar_36 * tmpvar_40) + tmpvar_38);
  tmpvar_42[1].y = (localScale_5 * ((tmpvar_36 * tmpvar_41) - tmpvar_39));
  tmpvar_42[1].z = (tmpvar_36 * tmpvar_37);
  tmpvar_42[1].w = 0.0;
  tmpvar_42[2].x = (tmpvar_37 * tmpvar_40);
  tmpvar_42[2].y = (tmpvar_37 * tmpvar_41);
  tmpvar_42[2].z = (localScale_5 * (1.0 - tmpvar_33));
  tmpvar_42[2].w = 0.0;
  tmpvar_42[3].x = trans_30.x;
  tmpvar_42[3].y = trans_30.y;
  tmpvar_42[3].z = trans_30.z;
  tmpvar_42[3].w = 1.0;
  mat4 tmpvar_43;
  tmpvar_43 = (((unity_MatrixV * _Object2World) * tmpvar_42));
  vec4 v_44;
  v_44.x = tmpvar_43[0].z;
  v_44.y = tmpvar_43[1].z;
  v_44.z = tmpvar_43[2].z;
  v_44.w = tmpvar_43[3].z;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(v_44.xyz);
  vec4 tmpvar_46;
  tmpvar_46 = (gl_ModelViewMatrix * localOrigin_6);
  vec4 tmpvar_47;
  tmpvar_47.xyz = (gl_Vertex.xyz * localScale_5);
  tmpvar_47.w = gl_Vertex.w;
  vec4 tmpvar_48;
  tmpvar_48 = (gl_ProjectionMatrix * (tmpvar_46 + tmpvar_47));
  vec2 tmpvar_49;
  tmpvar_49 = ((2.0 * gl_MultiTexCoord0.xy) - 1.0);
  vec4 tmpvar_50;
  tmpvar_50.z = 0.0;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = tmpvar_49.y;
  tmpvar_50.w = gl_Vertex.w;
  ZYv_3.xyw = tmpvar_50.zyw;
  XZv_2.yzw = tmpvar_50.zyw;
  XYv_1.yzw = tmpvar_50.yzw;
  ZYv_3.z = (tmpvar_49.x * sign(-(tmpvar_45.x)));
  XZv_2.x = (tmpvar_49.x * sign(-(tmpvar_45.y)));
  XYv_1.x = (tmpvar_49.x * sign(tmpvar_45.z));
  ZYv_3.x = ((sign(-(tmpvar_45.x)) * sign(ZYv_3.z)) * tmpvar_45.z);
  XZv_2.y = ((sign(-(tmpvar_45.y)) * sign(XZv_2.x)) * tmpvar_45.x);
  XYv_1.z = ((sign(-(tmpvar_45.z)) * sign(XYv_1.x)) * tmpvar_45.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_45.x)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_45.y)) * sign(tmpvar_49.y)) * tmpvar_45.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_45.z)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  vec4 o_51;
  vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_48 * 0.5);
  vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_48.zw;
  tmpvar_9.xyw = o_51.xyw;
  tmpvar_9.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_48;
  xlv_COLOR = tmpvar_7;
  xlv_TEXCOORD0 = abs(tmpvar_45);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * ZYv_3).xy - tmpvar_46.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XZv_2).xy - tmpvar_46.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XYv_1).xy - tmpvar_46.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_6).xyz));
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform vec4 _ZBufferParams;
void main ()
{
  vec4 color_1;
  vec4 tmpvar_2;
  tmpvar_2 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (texture2D (_LeftTex, xlv_TEXCOORD1), texture2D (_TopTex, xlv_TEXCOORD2), xlv_TEXCOORD0.yyyy), texture2D (_FrontTex, xlv_TEXCOORD3), xlv_TEXCOORD0.zzzz));
  color_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD5);
  color_1.w = (tmpvar_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 24 [glstate_lightmodel_ambient]
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_projection]
Vector 25 [_WorldSpaceCameraPos]
Vector 26 [_ProjectionParams]
Vector 27 [_ScreenParams]
Vector 28 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [unity_MatrixV]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 29 [_LightColor0]
Float 30 [_DetailScale]
Float 31 [_DistFade]
Float 32 [_DistFadeVert]
Float 33 [_MinLight]
Float 34 [_Rotation]
Float 35 [_MaxScale]
Vector 36 [_MaxTrans]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"vs_3_0
; 347 ALU, 4 TEX
dcl_position o0
dcl_color0 o1
dcl_texcoord0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord8 o8
def c37, 0.15915491, 0.50000000, 6.28318501, -3.14159298
def c38, 123.54530334, 2.00000000, -1.00000000, 1.00000000
def c39, 0.00000000, -0.01872930, 0.07426100, -0.21211439
def c40, 1.57072902, 3.14159298, 0.31830987, -0.12123910
def c41, -0.01348047, 0.05747731, 0.19563590, -0.33299461
def c42, 0.99999559, 1.57079601, 0.15915494, 0.50000000
def c43, 6.28318548, 0.00000000, 1.00000000, -0.01000214
def c44, 0.60000002, 0.50000000, 4.03944778, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_2d s0
dcl_2d s1
mad r10.xy, v2, c38.y, c38.z
mov r1.w, c11
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
dp4 r0.z, r1, c18
dp4 r0.x, r1, c16
dp4 r0.y, r1, c17
frc r1.xyz, -r0
add r0.xyz, -r0, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mad r0.x, r1, c37, c37.y
frc r0.x, r0
mad r1.x, r0, c37.z, c37.w
sincos r0.xy, r1.x
mad r0.x, r1.z, c37, c37.y
mov r1.x, r0.y
frc r0.y, r0.x
mad r0.x, r1.y, c37, c37.y
mad r1.y, r0, c37.z, c37.w
frc r1.x, r0
sincos r0.xy, r1.y
mad r0.x, r1, c37.z, c37.w
sincos r1.xy, r0.x
mov r1.z, r0.y
mul r0.xyz, r1, c38.x
frc r0.xyz, r0
abs r6.xyz, r0
mad r0.xyz, r6, c38.y, c38.z
mul r0.xyz, r0, c36
mov r0.w, c38
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
dp4 r2.w, r0, c11
dp4 r1.z, r2, c18
dp4 r1.x, r2, c16
dp4 r1.y, r2, c17
dp4 r1.w, r2, c19
add r7.xyz, -r2, c25
dp3 r2.x, r7, r7
rsq r8.w, r2.x
dp4 r3.z, -r1, c22
dp4 r3.x, -r1, c20
dp4 r3.y, -r1, c21
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mul r3.xyz, r1.w, r3
abs r3.xyz, r3
sge r1.w, r3.z, r3.x
add r4.xyz, r3.zxyw, -r3
mad r4.xyz, r1.w, r4, r3
sge r2.w, r4.x, r3.y
add r4.xyz, r4, -r3.yxzw
mad r3.xyz, r2.w, r4, r3.yxzw
dp3 r1.w, -r1, -r1
rsq r1.w, r1.w
mul r1.xyz, r1.w, -r1
abs r2.w, r1.x
abs r1.w, r1.z
mul r3.zw, r3.xyzy, c37.y
max r3.y, r1.w, r2.w
abs r4.y, r3.x
min r3.x, r1.w, r2.w
slt r1.w, r1, r2
rcp r3.y, r3.y
mul r4.x, r3, r3.y
rcp r3.x, r4.y
mul r3.xy, r3.zwzw, r3.x
mul r4.y, r4.x, r4.x
mad r3.z, r4.y, c41.x, c41.y
mad r3.z, r3, r4.y, c40.w
mad r2.w, r3.z, r4.y, c41.z
mad r2.w, r2, r4.y, c41
mad r2.w, r2, r4.y, c42.x
mul r2.w, r2, r4.x
max r1.w, -r1, r1
slt r1.w, c39.x, r1
add r3.z, -r1.w, c38.w
mul r3.z, r2.w, r3
add r2.w, -r2, c42.y
mad r1.w, r1, r2, r3.z
slt r1.z, r1, c39.x
max r1.z, -r1, r1
slt r1.z, c39.x, r1
slt r1.x, r1, c39
max r1.x, -r1, r1
add r2.w, -r1, c40.y
add r3.z, -r1, c38.w
mul r1.w, r1, r3.z
slt r1.x, c39, r1
mad r1.z, r1, r2.w, r1.w
add r3.z, -r1.x, c38.w
mul r1.w, r1.z, r3.z
mad r1.x, r1, -r1.z, r1.w
abs r1.z, r1.y
add r2.w, -r1.z, c38
mad r1.w, r1.z, c39.y, c39.z
mad r1.w, r1, r1.z, c39
rsq r2.w, r2.w
rcp r2.w, r2.w
mad r1.z, r1.w, r1, c40.x
mul r1.z, r1, r2.w
slt r1.y, r1, c39.x
mul r1.w, r1.y, r1.z
mad r1.z, -r1.w, c38.y, r1
mad r1.y, r1, c40, r1.z
mul r3.xy, r3, c30.x
mov r3.z, c39.x
texldl r3, r3.xyzz, s1
mad r1.x, r1, c42.z, c42.w
mov r4.yz, c39.x
frc r4.x, c34
add r4.xyz, r6, r4
mul r1.w, r4.x, c43.x
mad r1.z, r1.w, c37.x, c37.y
frc r2.w, r1.z
mad r4.x, r2.w, c37.z, c37.w
sincos r5.xy, r4.x
mul r2.w, r4.y, c43.x
mad r2.w, r2, c37.x, c37.y
frc r4.x, r2.w
mul r2.w, r4.z, c38.y
mad r5.z, r4.x, c37, c37.w
sincos r4.xy, r5.z
rsq r5.w, r2.w
rcp r4.z, r5.w
mul r4.w, r4.x, r4.z
mul r5.z, r4.y, r4
mul r4.x, r4.w, r5
mad r4.y, r5.z, r5, r4.x
mov r5.w, c14.x
mul r1.y, r1, c40.z
mov r1.z, c39.x
texldl r1, r1.xyzz, s0
mul r3, r1, r3
add r1.z, -r2.w, c38.y
mov o1.xyz, r3
mov r1.y, c35.x
add r1.y, c38.z, r1
mad r1.x, r5.z, r4.y, -r5.y
mad r7.w, r6.x, r1.y, c38
mad r1.w, r4, r4.y, -r5.x
mul r1.y, r7.w, r1.w
rsq r1.z, r1.z
rcp r1.w, r1.z
mul r1.z, r1.w, r4.y
mov r4.x, c14.y
mul r4.xyz, c9, r4.x
mad r4.xyz, c8, r5.w, r4
mov r5.w, c14.z
mad r4.xyz, c10, r5.w, r4
mov r5.w, c14
mad r6.xyz, c11, r5.w, r4
mul r5.w, r4, r5.y
mad r2.z, r5, r5.x, -r5.w
mad r2.y, r5.z, r2.z, -r5.x
mul r2.x, r7.w, r2.y
mad r2.y, r4.w, r2.z, r5
mul r5.x, r5.z, r1.w
add r2.w, -r2, c38
mul r5.y, r1.w, r4.w
mul r2.z, r1.w, r2
mul r4.xyz, r6.y, r1
rcp r5.w, r8.w
mul r5.z, r7.w, r2.w
mad r4.xyz, r6.x, r2, r4
mad r4.xyz, r6.z, r5, r4
mul r1.w, -r5, c32.x
add_sat r2.w, r1, c38
mul_sat r1.w, r5, c31.x
mul r1.w, r1, r2
dp3 r4.w, r4, r4
rsq r2.w, r4.w
mul r8.xyz, r2.w, r4
mul o1.w, r3, r1
slt r2.w, -r8.x, r8.x
slt r1.w, r8.x, -r8.x
sub r1.w, r1, r2
slt r3.x, r10.y, -r10.y
slt r2.w, -r10.y, r10.y
sub r10.z, r2.w, r3.x
mul r2.w, r10.x, r1
mul r3.z, r1.w, r10
slt r3.y, r2.w, -r2.w
slt r3.x, -r2.w, r2.w
sub r3.x, r3, r3.y
mov r9.z, r2.w
mov r2.w, r0.x
mul r1.w, r3.x, r1
mul r3.y, r8, r3.z
mad r9.x, r8.z, r1.w, r3.y
mov r1.w, c12.y
mul r3, c9, r1.w
mov r1.w, c12.x
mad r3, c8, r1.w, r3
mov r1.w, c12.z
mad r3, c10, r1.w, r3
mov r1.w, c12
mad r6, c11, r1.w, r3
mov r1.w, r0.y
mul r4, r1, r6.y
mov r3.x, c13.y
mov r5.w, c13.x
mul r3, c9, r3.x
mad r3, c8, r5.w, r3
mov r5.w, c13.z
mad r3, c10, r5.w, r3
mov r5.w, c13
mad r3, c11, r5.w, r3
mul r1, r3.y, r1
mov r5.w, r0.z
mad r1, r3.x, r2, r1
mad r1, r3.z, r5, r1
mad r1, r3.w, c43.yyyz, r1
mad r4, r2, r6.x, r4
mad r4, r5, r6.z, r4
mad r2, r6.w, c43.yyyz, r4
dp4 r5.y, r0, c1
dp4 r5.x, r0, c0
mov r4.w, v0
mov r4.y, r10
mov r9.yw, r4
dp4 r3.y, r1, r9
dp4 r3.x, r9, r2
slt r3.w, -r8.y, r8.y
slt r3.z, r8.y, -r8.y
sub r4.x, r3.z, r3.w
add r3.zw, -r5.xyxy, r3.xyxy
mul r3.x, r10, r4
mad o3.xy, r3.zwzw, c44.x, c44.y
slt r3.z, r3.x, -r3.x
slt r3.y, -r3.x, r3.x
sub r3.y, r3, r3.z
mul r3.z, r10, r4.x
mul r3.y, r3, r4.x
mul r4.x, r8.z, r3.z
mad r3.y, r8.x, r3, r4.x
mov r3.zw, r4.xyyw
dp4 r5.w, r1, r3
dp4 r5.z, r2, r3
add r3.xy, -r5, r5.zwzw
slt r3.w, -r8.z, r8.z
slt r3.z, r8, -r8
sub r4.x, r3.w, r3.z
sub r3.z, r3, r3.w
mul r4.x, r10, r4
mul r5.z, r10, r3
dp4 r5.w, r0, c3
slt r4.z, r4.x, -r4.x
slt r3.w, -r4.x, r4.x
sub r3.w, r3, r4.z
mul r4.z, r8.y, r5
dp4 r5.z, r0, c2
mul r3.z, r3, r3.w
mad r4.z, r8.x, r3, r4
dp4 r1.y, r1, r4
dp4 r1.x, r2, r4
mad o4.xy, r3, c44.x, c44.y
add r3.xy, -r5, r1
mov r0.w, v0
mul r0.xyz, v0, r7.w
add r0, r5, r0
dp4 r2.w, r0, c7
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
mov r1.w, r2
dp4 r1.z, r0, c6
mul r2.xyz, r1.xyww, c37.y
mov o0, r1
mul r2.y, r2, c26.x
mov r1.xyz, v1
mov r1.w, c39.x
dp4 r0.z, r1, c10
dp4 r0.y, r1, c9
dp4 r0.x, r1, c8
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c28, c28
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c28
dp3_sat r0.x, r0, r1
add r0.x, r0, c43.w
mul r0.y, r0.x, c29.w
dp4 r1.x, v0, c2
mul_sat r0.w, r0.y, c44.z
mov r0.x, c33
add r0.xyz, c29, r0.x
mad o5.xy, r3, c44.x, c44.y
mad o8.xy, r2.z, c27.zwzw, r2
abs o2.xyz, r8
mov o8.w, r2
mul o6.xyz, r8.w, r7
mad_sat o7.xyz, r0, r0.w, c24
mov o8.z, -r1.x
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
ConstBuffer "$Globals" 256 // 252 used size, 15 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Vector 144 [_LightColor0] 4
Float 176 [_DetailScale]
Float 208 [_DistFade]
Float 212 [_DistFadeVert]
Float 220 [_MinLight]
Float 228 [_Rotation]
Float 232 [_MaxScale]
Vector 240 [_MaxTrans] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityPerFrame" 208 // 144 used size, 4 vars
Matrix 0 [glstate_matrix_projection] 4
Vector 64 [glstate_lightmodel_ambient] 4
Matrix 80 [unity_MatrixV] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityPerFrame" 4
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 245 instructions, 12 temp regs, 0 temp arrays:
// ALU 208 float, 8 int, 6 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddhicffdcekdchicdajlepdeomehanlpdabaaaaaakeccaaaaadaaaaaa
cmaaaaaanmaaaaaaoaabaaaaejfdeheokiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaijaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaipaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaajgaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaajoaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaafaepfdejfeejepeoaaedepem
epfcaaeoepfcenebemaafeebeoehefeofeaafeeffiedepepfceeaaklepfdeheo
pmaaaaaaajaaaaaaaiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaomaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaapcaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaapcaaaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaapcaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
amadaaaapcaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaapcaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaapcaaaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaapcaaaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaafdfgfpfaepfdejfeejepeoaaedepemepfcaafeeffiedepepfceeaakl
fdeieefclmcaaaaaeaaaabaacpaiaaaafjaaaaaeegiocaaaaaaaaaaabaaaaaaa
fjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaa
fjaaaaaeegiocaaaadaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaaajaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafpaaaaadpcbabaaa
aaaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaaeaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaadmccabaaaadaaaaaagfaaaaad
dccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagiaaaaacamaaaaaadiaaaaajhcaabaaaaaaaaaaa
egiccaaaaaaaaaaaacaaaaaafgifcaaaadaaaaaaapaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaadaaaaaaapaaaaaaegacbaaa
aaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgikcaaa
adaaaaaaapaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaapgipcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaaebaaaaag
hcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaa
enaaaaaghcaabaaaaaaaaaaaaanaaaaaegacbaaaaaaaaaaadiaaaaakhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaaceaaaaadcbhphecdcbhphecdcbhphecaaaaaaaa
bkaaaaafhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaa
ckiacaaaaaaaaaaaaoaaaaaaabeaaaaaaaaaialpdcaaaaajicaabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaa
abaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaficaabaaaabaaaaaa
dkbabaaaaaaaaaaadcaaaaaphcaabaaaacaaaaaaegacbaaaaaaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialp
aaaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaa
apaaaaaadiaaaaaipcaabaaaadaaaaaafgafbaaaacaaaaaaegiocaaaadaaaaaa
afaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaadaaaaaaaeaaaaaaagaabaaa
acaaaaaaegaobaaaadaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaadaaaaaa
agaaaaaakgakbaaaacaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaaadaaaaaa
egaobaaaadaaaaaaegiocaaaadaaaaaaahaaaaaaaaaaaaahpcaabaaaabaaaaaa
egaobaaaabaaaaaaegaobaaaadaaaaaadiaaaaaipcaabaaaaeaaaaaafgafbaaa
abaaaaaaegiocaaaaeaaaaaaabaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaa
aeaaaaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaa
aeaaaaaaegiocaaaaeaaaaaaacaaaaaakgakbaaaabaaaaaaegaobaaaaeaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaaeaaaaaaadaaaaaapgapbaaaabaaaaaa
egaobaaaaeaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaadiaaaaai
pcaabaaaaeaaaaaafgafbaaaacaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaeaaaaaaegiocaaaadaaaaaaamaaaaaaagaabaaaacaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaa
acaaaaaaegaobaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaaaaeaaaaaa
egiocaaaadaaaaaaapaaaaaadiaaaaaipcaabaaaafaaaaaafgafbaaaaeaaaaaa
egiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaa
abaaaaaaagaabaaaaeaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaafaaaaaa
egiocaaaaaaaaaaaadaaaaaakgakbaaaaeaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaafaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaeaaaaaaegaobaaa
afaaaaaadiaaaaajhcaabaaaagaaaaaafgafbaiaebaaaaaaafaaaaaabgigcaaa
aaaaaaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaafaaaaaa
agaabaiaebaaaaaaafaaaaaaegacbaaaagaaaaaadcaaaaalhcaabaaaagaaaaaa
bgigcaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaafaaaaaaegacbaaaagaaaaaa
dcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaa
afaaaaaaegacbaaaagaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaagaaaaaa
egacbaaaagaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaah
hcaabaaaagaaaaaakgakbaaaabaaaaaaegacbaaaagaaaaaadgaaaaagecaabaaa
ahaaaaaackaabaiambaaaaaaagaaaaaabnaaaaajecaabaaaabaaaaaackaabaia
ibaaaaaaagaaaaaabkaabaiaibaaaaaaagaaaaaaabaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaaaiaaaaaafgaibaia
mbaaaaaaagaaaaaakgabbaiaibaaaaaaagaaaaaadiaaaaahlcaabaaaahaaaaaa
kgakbaaaabaaaaaajganbaaaaiaaaaaadcaaaaakecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaaaaiaaaaaabkaabaiaibaaaaaaagaaaaaabnaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaagaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaihcaabaaaaiaaaaaa
bgagbaiaibaaaaaaagaaaaaaegacbaaaahaaaaaadgaaaaagfcaabaaaahaaaaaa
fgaebaiambaaaaaaagaaaaaaaaaaaaahhcaabaaaahaaaaaacgalbaaaahaaaaaa
egacbaaaaiaaaaaadcaaaaakhcaabaaaagaaaaaakgakbaaaabaaaaaaegacbaaa
ahaaaaaaegacbaiaibaaaaaaagaaaaaadiaaaaakmcaabaaaadaaaaaakgagbaaa
agaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaahmcaabaaa
adaaaaaakgaobaaaadaaaaaaagaabaaaagaaaaaadiaaaaaimcaabaaaadaaaaaa
kgaobaaaadaaaaaaagiacaaaaaaaaaaaalaaaaaaeiaaaaalpcaabaaaagaaaaaa
ogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
baaaaaajecaabaaaabaaaaaaegacbaiaebaaaaaaafaaaaaaegacbaiaebaaaaaa
afaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaihcaabaaa
afaaaaaakgakbaaaabaaaaaaigabbaiaebaaaaaaafaaaaaadeaaaaajecaabaaa
abaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaaoaaaaak
ecaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpckaabaaa
abaaaaaaddaaaaajicaabaaaacaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaia
ibaaaaaaafaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
acaaaaaadiaaaaahicaabaaaacaaaaaackaabaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaaabeaaaaafpkokkdmabeaaaaa
dgfkkolndcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaa
abeaaaaaochgdidodcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaackaabaaa
adaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaa
ckaabaaaadaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaadaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaaadaaaaaackaabaaaadaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaadaaaaaabkaabaia
ibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaabaaaaahecaabaaaadaaaaaa
dkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadbaaaaaimcaabaaaadaaaaaa
fgajbaaaafaaaaaafgajbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaacaaaaaa
ckaabaaaadaaaaaaabeaaaaanlapejmaaaaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaaddaaaaahicaabaaaacaaaaaabkaabaaaafaaaaaa
akaabaaaafaaaaaadbaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaia
ebaaaaaaacaaaaaadeaaaaahecaabaaaadaaaaaabkaabaaaafaaaaaaakaabaaa
afaaaaaabnaaaaaiecaabaaaadaaaaaackaabaaaadaaaaaackaabaiaebaaaaaa
adaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaa
dhaaaaakecaabaaaabaaaaaadkaabaaaacaaaaaackaabaiaebaaaaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajbcaabaaaafaaaaaackaabaaaabaaaaaaabeaaaaa
idpjccdoabeaaaaaaaaaaadpdcaaaaakecaabaaaabaaaaaackaabaiaibaaaaaa
afaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaaiedefjlodcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaa
keanmjdpaaaaaaaiicaabaaaacaaaaaackaabaiambaaaaaaafaaaaaaabeaaaaa
aaaaiadpelaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaahecaabaaa
adaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaaadaaaaaa
ckaabaaaadaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahecaabaaa
adaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaahccaabaaa
afaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoeiaaaaalpcaabaaaafaaaaaa
egaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaa
diaaaaahpcaabaaaafaaaaaaegaobaaaagaaaaaaegaobaaaafaaaaaaaaaaaaaj
hcaabaaaagaaaaaaegacbaaaaeaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaa
aaaaaaajhcaabaaaaeaaaaaaegacbaiaebaaaaaaaeaaaaaaegiccaaaabaaaaaa
aeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaagaaaaaaegacbaaaagaaaaaa
elaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaiicaabaaaacaaaaaa
ckaabaaaabaaaaaaakiacaaaaaaaaaaaanaaaaaadccaaaalecaabaaaabaaaaaa
bkiacaiaebaaaaaaaaaaaaaaanaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadp
dgcaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahiccabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaafaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaafaaaaaa
bkaaaaagbcaabaaaafaaaaaabkiacaaaaaaaaaaaaoaaaaaadgaaaaaigcaabaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaafaaaaaaaaaaaaahecaabaaaabaaaaaa
ckaabaaaaaaaaaaackaabaaaaaaaaaaaelaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaanlapmjea
nlapmjeaaaaaaaaaaaaaaaaadcaaaabamcaabaaaadaaaaaakgakbaiaebaaaaaa
aaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaeaaaaaiadpenaaaaahbcaabaaaafaaaaaabcaabaaaagaaaaaa
bkaabaaaaaaaaaaaenaaaaahbcaabaaaaaaaaaaabcaabaaaahaaaaaaakaabaaa
aaaaaaaadiaaaaahccaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaaagaaaaaa
diaaaaahecaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaadiaaaaah
ecaabaaaabaaaaaaakaabaaaahaaaaaabkaabaaaaaaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaaaaaaaaaakaabaaaaaaaaaaackaabaaaabaaaaaadcaaaaak
icaabaaaacaaaaaabkaabaaaaaaaaaaackaabaaaabaaaaaaakaabaiaebaaaaaa
ahaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaa
diaaaaajhcaabaaaafaaaaaafgifcaaaadaaaaaaanaaaaaaegiccaaaaeaaaaaa
agaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaafaaaaaaagiacaaa
adaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaa
aeaaaaaaahaaaaaakgikcaaaadaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaal
hcaabaaaafaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaaanaaaaaa
egacbaaaafaaaaaadiaaaaahhcaabaaaagaaaaaapgapbaaaacaaaaaaegacbaaa
afaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaa
dcaaaaakicaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaaahaaaaaadkaabaia
ebaaaaaaacaaaaaadcaaaaajicaabaaaaeaaaaaabkaabaaaaaaaaaaadkaabaaa
acaaaaaaakaabaaaaaaaaaaadiaaaaajocaabaaaahaaaaaafgifcaaaadaaaaaa
amaaaaaaagijcaaaaeaaaaaaagaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaa
aeaaaaaaafaaaaaaagiacaaaadaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaal
ocaabaaaahaaaaaaagijcaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaamaaaaaa
fgaobaaaahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaaaiaaaaaa
pgipcaaaadaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaajhcaabaaaagaaaaaa
jgahbaaaahaaaaaapgapbaaaaeaaaaaaegacbaaaagaaaaaaelaaaaafecaabaaa
adaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaadaaaaaadkaabaaaaaaaaaaa
dkaabaaaadaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaa
adaaaaaadiaaaaajhcaabaaaaiaaaaaafgifcaaaadaaaaaaaoaaaaaaegiccaaa
aeaaaaaaagaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaaafaaaaaa
agiacaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaalhcaabaaaaiaaaaaa
egiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaa
dcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaa
aoaaaaaaegacbaaaaiaaaaaadcaaaaajhcaabaaaagaaaaaaegacbaaaaiaaaaaa
fgafbaaaaaaaaaaaegacbaaaagaaaaaadgaaaaafccaabaaaajaaaaaackaabaaa
agaaaaaadcaaaaakccaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaacaaaaaa
akaabaiaebaaaaaaahaaaaaadcaaaaakbcaabaaaaaaaaaaackaabaaaaaaaaaaa
ckaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaadiaaaaahecaabaaaaaaaaaaa
ckaabaaaaaaaaaaackaabaaaadaaaaaadiaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
ckaabaaaadaaaaaadiaaaaahhcaabaaaakaaaaaakgakbaaaabaaaaaaegacbaaa
afaaaaaadcaaaaajhcaabaaaakaaaaaajgahbaaaahaaaaaapgapbaaaacaaaaaa
egacbaaaakaaaaaadcaaaaajhcaabaaaakaaaaaaegacbaaaaiaaaaaapgapbaaa
adaaaaaaegacbaaaakaaaaaadiaaaaahhcaabaaaalaaaaaaagaabaaaaaaaaaaa
egacbaaaafaaaaaadiaaaaahkcaabaaaacaaaaaafgafbaaaacaaaaaaagaebaaa
afaaaaaadcaaaaajdcaabaaaacaaaaaajgafbaaaahaaaaaaagaabaaaacaaaaaa
ngafbaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaaaiaaaaaakgakbaaa
acaaaaaaegaabaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajlcaabaaaaaaaaaaajganbaaaahaaaaaaagaabaaa
aaaaaaaaegaibaaaalaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaiaaaaaa
kgakbaaaaaaaaaaaegadbaaaaaaaaaaadgaaaaafbcaabaaaajaaaaaackaabaaa
aaaaaaaadgaaaaafecaabaaaajaaaaaackaabaaaakaaaaaabaaaaaahecaabaaa
aaaaaaaaegacbaaaajaaaaaaegacbaaaajaaaaaaeeaaaaafecaabaaaaaaaaaaa
ckaabaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaa
ajaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaibaaaaaaafaaaaaadiaaaaaj
mcaabaaaaaaaaaaafgifcaaaadaaaaaaapaaaaaaagiecaaaaeaaaaaaagaaaaaa
dcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaafaaaaaaagiacaaaadaaaaaa
apaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaa
ahaaaaaakgikcaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaa
aaaaaaaaagiecaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaaapaaaaaakgaobaaa
aaaaaaaaaaaaaaahmcaabaaaaaaaaaaakgaobaaaaaaaaaaaagaebaaaacaaaaaa
dbaaaaalhcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
egacbaiaebaaaaaaafaaaaaadbaaaaalhcaabaaaahaaaaaaegacbaiaebaaaaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaboaaaaaihcaabaaa
acaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaahaaaaaadcaaaaapmcaabaaa
adaaaaaaagbebaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaea
aceaaaaaaaaaaaaaaaaaaaaaaaaaialpaaaaialpdbaaaaahecaabaaaabaaaaaa
abeaaaaaaaaaaaaadkaabaaaadaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaa
adaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaadkaabaaaacaaaaaacgaaaaaiaanaaaaahcaabaaaahaaaaaakgakbaaa
abaaaaaaegacbaaaacaaaaaaclaaaaafhcaabaaaahaaaaaaegacbaaaahaaaaaa
diaaaaahhcaabaaaahaaaaaajgafbaaaafaaaaaaegacbaaaahaaaaaaclaaaaaf
kcaabaaaafaaaaaaagaebaaaacaaaaaadiaaaaahkcaabaaaafaaaaaakgakbaaa
adaaaaaafganbaaaafaaaaaadbaaaaakmcaabaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaafganbaaaafaaaaaadbaaaaakdcaabaaaaiaaaaaa
ngafbaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaboaaaaai
mcaabaaaagaaaaaakgaobaiaebaaaaaaagaaaaaaagaebaaaaiaaaaaacgaaaaai
aanaaaaadcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaaagaaaaaaclaaaaaf
dcaabaaaacaaaaaaegaabaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaa
acaaaaaacgakbaaaafaaaaaaegaabaaaahaaaaaadiaaaaahkcaabaaaacaaaaaa
fgafbaaaacaaaaaaagaebaaaagaaaaaadiaaaaahdcaabaaaagaaaaaapgapbaaa
adaaaaaaegaabaaaagaaaaaadcaaaaajmcaabaaaagaaaaaaagaebaaaaaaaaaaa
agaabaaaacaaaaaaagaebaaaagaaaaaadcaaaaajmcaabaaaagaaaaaaagaebaaa
akaaaaaafgafbaaaafaaaaaakgaobaaaagaaaaaadcaaaaajdcaabaaaacaaaaaa
egaabaaaaaaaaaaapgapbaaaafaaaaaangafbaaaacaaaaaadcaaaaajdcaabaaa
acaaaaaaegaabaaaakaaaaaapgapbaaaadaaaaaaegaabaaaacaaaaaadcaaaaaj
dcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaaacaaaaaa
aaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaaacaaaaaa
dcaaaaapmccabaaaadaaaaaaagaebaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
jkjjbjdpjkjjbjdpaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpdcaaaaaj
dcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaogakbaaaagaaaaaa
aaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaaacaaaaaa
dcaaaaapdccabaaaadaaaaaaegaabaaaacaaaaaaaceaaaaajkjjbjdpjkjjbjdp
aaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadbaaaaah
ecaabaaaabaaaaaaabeaaaaaaaaaaaaackaabaaaafaaaaaadbaaaaahbcaabaaa
acaaaaaackaabaaaafaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaaabaaaaaa
ckaabaiaebaaaaaaabaaaaaaakaabaaaacaaaaaaclaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaackaabaaa
adaaaaaadbaaaaahbcaabaaaacaaaaaaabeaaaaaaaaaaaaackaabaaaabaaaaaa
dbaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaadcaaaaaj
dcaabaaaaaaaaaaaegaabaaaaaaaaaaakgakbaaaabaaaaaaegaabaaaagaaaaaa
boaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaa
cgaaaaaiaanaaaaaecaabaaaabaaaaaackaabaaaabaaaaaackaabaaaacaaaaaa
claaaaafecaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaafaaaaaackaabaaaahaaaaaadcaaaaajdcaabaaa
aaaaaaaaegaabaaaakaaaaaakgakbaaaabaaaaaaegaabaaaaaaaaaaadcaaaaaj
dcaabaaaaaaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaaaaaaaaaa
aaaaaaaidcaabaaaaaaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaaaaaaaaaa
dcaaaaapdccabaaaaeaaaaaaegaabaaaaaaaaaaaaceaaaaajkjjbjdpjkjjbjdp
aaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaabaaaaaah
bcaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaa
aaaaaaaaakaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaaagaabaaaaaaaaaaa
egacbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaa
agbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaa
acaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaai
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaah
bcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaadkiacaaaaaaaaaaaajaaaaaadicaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaaaaaaaaaagijcaaaaaaaaaaa
ajaaaaaapgipcaaaaaaaaaaaanaaaaaadccaaaakhccabaaaagaaaaaajgahbaaa
aaaaaaaaagaabaaaaaaaaaaaegiccaaaaeaaaaaaaeaaaaaadiaaaaakhcaabaaa
aaaaaaaaegadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaa
dgaaaaaficcabaaaahaaaaaadkaabaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaaaaaaaaahdccabaaaahaaaaaa
kgakbaaaaaaaaaaamgaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
adaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaahaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 386
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 487
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec4 projPos;
};
#line 478
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 396
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 409
#line 417
#line 431
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 464
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 468
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 472
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 476
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 500
#line 516
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 380
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 382
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 355
mediump vec4 GetShereDetailMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 357
    highp vec3 sphereVectNorm = normalize(sphereVect);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 361
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    highp vec4 uv;
    uv.xy = (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale);
    #line 365
    uv.zw = vec2( 0.0, 0.0);
    return xll_tex2Dlod( texSampler, uv);
}
#line 330
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 332
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 336
    return uv;
}
#line 338
mediump vec4 GetSphereMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 340
    highp vec4 uv;
    highp vec3 sphereVectNorm = normalize(sphereVect);
    uv.xy = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    uv.zw = vec2( 0.0, 0.0);
    #line 344
    mediump vec4 tex = xll_tex2Dlod( texSampler, uv);
    return tex;
}
#line 317
highp vec3 hash( in highp vec3 val ) {
    #line 319
    return fract((sin(val) * 123.545));
}
#line 500
highp mat4 rand_rotation( in highp vec3 x, in highp float scale, in highp vec3 trans ) {
    highp float theta = (x.x * 6.28319);
    highp float phi = (x.y * 6.28319);
    #line 504
    highp float z = (x.z * 2.0);
    highp float r = sqrt(z);
    highp float Vx = (sin(phi) * r);
    highp float Vy = (cos(phi) * r);
    #line 508
    highp float Vz = sqrt((2.0 - z));
    highp float st = sin(theta);
    highp float ct = cos(theta);
    highp float Sx = ((Vx * ct) - (Vy * st));
    #line 512
    highp float Sy = ((Vx * st) + (Vy * ct));
    highp mat4 M = mat4( (scale * ((Vx * Sx) - ct)), ((Vx * Sy) - st), (Vx * Vz), 0.0, ((Vy * Sx) + st), (scale * ((Vy * Sy) - ct)), (Vy * Vz), 0.0, (Vz * Sx), (Vz * Sy), (scale * (1.0 - z)), 0.0, trans.x, trans.y, trans.z, 1.0);
    return M;
}
#line 516
v2f vert( in appdata_t v ) {
    v2f o;
    highp vec4 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0));
    #line 520
    highp vec4 planet_pos = (-(_MainRotation * origin));
    highp vec3 hashVect = abs(hash( normalize(floor(planet_pos.xyz))));
    highp vec4 localOrigin;
    localOrigin.xyz = (((2.0 * hashVect) - 1.0) * _MaxTrans);
    #line 524
    localOrigin.w = 1.0;
    highp float localScale = ((hashVect.x * (_MaxScale - 1.0)) + 1.0);
    origin = (_Object2World * localOrigin);
    highp vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 528
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 532
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    o.baseLight = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    planet_pos = (-(_MainRotation * origin));
    highp vec3 detail_pos = (_DetailRotation * planet_pos).xyz;
    #line 536
    o.color = GetSphereMapNoLOD( _MainTex, planet_pos.xyz);
    o.color *= GetShereDetailMapNoLOD( _DetailTex, detail_pos, _DetailScale);
    o.color.w *= GetDistanceFade( distance( origin, vec4( _WorldSpaceCameraPos, 0.0)), _DistFade, _DistFadeVert);
    highp mat4 M = rand_rotation( (vec3( fract(_Rotation), 0.0, 0.0) + hashVect), localScale, localOrigin.xyz);
    #line 540
    highp mat4 mvMatrix = ((unity_MatrixV * _Object2World) * M);
    highp vec3 viewDir = normalize(xll_matrixindex_mf4x4_i (mvMatrix, 2).xyz);
    o.viewDir = abs(viewDir);
    highp vec4 mvCenter = (glstate_matrix_modelview0 * localOrigin);
    #line 544
    o.pos = (glstate_matrix_projection * (mvCenter + vec4( (v.vertex.xyz * localScale), v.vertex.w)));
    o.camPos = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * localOrigin).xyz));
    highp vec2 texcoodOffsetxy = ((2.0 * v.texcoord) - 1.0);
    highp vec4 texcoordOffset = vec4( texcoodOffsetxy.x, texcoodOffsetxy.y, 0.0, v.vertex.w);
    #line 548
    highp vec4 ZYv = texcoordOffset.zyxw;
    highp vec4 XZv = texcoordOffset.xzyw;
    highp vec4 XYv = texcoordOffset.xyzw;
    ZYv.z *= sign((-viewDir.x));
    #line 552
    XZv.x *= sign((-viewDir.y));
    XYv.x *= sign(viewDir.z);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.z)) * viewDir.z);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.x)) * viewDir.x);
    #line 556
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.x)) * viewDir.x);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.y)) * viewDir.y);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.z)) * viewDir.z);
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.y)) * viewDir.y);
    #line 560
    highp vec2 ZY = ((mvMatrix * ZYv).xy - mvCenter.xy);
    highp vec2 XZ = ((mvMatrix * XZv).xy - mvCenter.xy);
    highp vec2 XY = ((mvMatrix * XYv).xy - mvCenter.xy);
    o.texcoordZY = (vec2( 0.5, 0.5) + (0.6 * ZY));
    #line 564
    o.texcoordXZ = (vec2( 0.5, 0.5) + (0.6 * XZ));
    o.texcoordXY = (vec2( 0.5, 0.5) + (0.6 * XY));
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    #line 569
    return o;
}

out lowp vec4 xlv_COLOR;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.texcoord = vec2(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_COLOR = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD1 = vec2(xl_retval.texcoordZY);
    xlv_TEXCOORD2 = vec2(xl_retval.texcoordXZ);
    xlv_TEXCOORD3 = vec2(xl_retval.texcoordXY);
    xlv_TEXCOORD4 = vec3(xl_retval.camPos);
    xlv_TEXCOORD5 = vec3(xl_retval.baseLight);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 386
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 487
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec4 projPos;
};
#line 478
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 396
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 409
#line 417
#line 431
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 464
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 468
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 472
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 476
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 500
#line 516
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 571
lowp vec4 frag( in v2f IN ) {
    #line 573
    mediump float xval = IN.viewDir.x;
    mediump vec4 xtex = texture( _LeftTex, IN.texcoordZY);
    mediump float yval = IN.viewDir.y;
    mediump vec4 ytex = texture( _TopTex, IN.texcoordXZ);
    #line 577
    mediump float zval = IN.viewDir.z;
    mediump vec4 ztex = texture( _FrontTex, IN.texcoordXY);
    mediump vec4 tex = mix( mix( xtex, ytex, vec4( yval)), ztex, vec4( zval));
    mediump vec4 prev = (((0.94 * _Color) * IN.color) * tex);
    #line 581
    mediump vec4 color;
    color.xyz = (prev.xyz * IN.baseLight);
    color.w = prev.w;
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    #line 585
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    #line 589
    return color;
}
in lowp vec4 xlv_COLOR;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_COLOR);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD0);
    xlt_IN.texcoordZY = vec2(xlv_TEXCOORD1);
    xlt_IN.texcoordXZ = vec2(xlv_TEXCOORD2);
    xlt_IN.texcoordXY = vec2(xlv_TEXCOORD3);
    xlt_IN.camPos = vec3(xlv_TEXCOORD4);
    xlt_IN.baseLight = vec3(xlv_TEXCOORD5);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform vec3 _MaxTrans;
uniform float _MaxScale;
uniform float _Rotation;
uniform float _MinLight;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 unity_MatrixV;


uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 XYv_1;
  vec4 XZv_2;
  vec4 ZYv_3;
  vec3 detail_pos_4;
  float localScale_5;
  vec4 localOrigin_6;
  vec4 tmpvar_7;
  vec3 tmpvar_8;
  vec4 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_6.xyz = (((2.0 * tmpvar_10) - 1.0) * _MaxTrans);
  localOrigin_6.w = 1.0;
  localScale_5 = ((tmpvar_10.x * (_MaxScale - 1.0)) + 1.0);
  vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * localOrigin_6);
  vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = gl_Normal;
  tmpvar_8 = clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (normalize((_Object2World * tmpvar_12).xyz), normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0);
  vec4 tmpvar_13;
  tmpvar_13 = -((_MainRotation * tmpvar_11));
  detail_pos_4 = (_DetailRotation * tmpvar_13).xyz;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13.xyz);
  vec2 uv_15;
  float r_16;
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_14.x)))) {
    float y_over_x_17;
    y_over_x_17 = (tmpvar_14.x / tmpvar_14.z);
    float s_18;
    float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_14.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(tmpvar_14.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_16));
  uv_15.y = (0.31831 * (1.5708 - (sign(tmpvar_14.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_14.y))) * (1.5708 + (abs(tmpvar_14.y) * (-0.214602 + (abs(tmpvar_14.y) * (0.0865667 + (abs(tmpvar_14.y) * -0.0310296)))))))))));
  vec4 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(normalize(detail_pos_4));
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  uv_20.xy = (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale);
  uv_20.zw = vec2(0.0, 0.0);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DLod (_MainTex, uv_15, 0.0) * texture2DLod (_DetailTex, uv_20.xy, 0.0));
  tmpvar_7.xyz = tmpvar_24.xyz;
  vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = _WorldSpaceCameraPos;
  float tmpvar_26;
  vec4 p_27;
  p_27 = (tmpvar_11 - tmpvar_25);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  tmpvar_7.w = (tmpvar_24.w * (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0)));
  vec3 tmpvar_28;
  tmpvar_28.yz = vec2(0.0, 0.0);
  tmpvar_28.x = fract(_Rotation);
  vec3 x_29;
  x_29 = (tmpvar_28 + tmpvar_10);
  vec3 trans_30;
  trans_30 = localOrigin_6.xyz;
  float tmpvar_31;
  tmpvar_31 = (x_29.x * 6.28319);
  float tmpvar_32;
  tmpvar_32 = (x_29.y * 6.28319);
  float tmpvar_33;
  tmpvar_33 = (x_29.z * 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (sin(tmpvar_32) * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (cos(tmpvar_32) * tmpvar_34);
  float tmpvar_37;
  tmpvar_37 = sqrt((2.0 - tmpvar_33));
  float tmpvar_38;
  tmpvar_38 = sin(tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = cos(tmpvar_31);
  float tmpvar_40;
  tmpvar_40 = ((tmpvar_35 * tmpvar_39) - (tmpvar_36 * tmpvar_38));
  float tmpvar_41;
  tmpvar_41 = ((tmpvar_35 * tmpvar_38) + (tmpvar_36 * tmpvar_39));
  mat4 tmpvar_42;
  tmpvar_42[0].x = (localScale_5 * ((tmpvar_35 * tmpvar_40) - tmpvar_39));
  tmpvar_42[0].y = ((tmpvar_35 * tmpvar_41) - tmpvar_38);
  tmpvar_42[0].z = (tmpvar_35 * tmpvar_37);
  tmpvar_42[0].w = 0.0;
  tmpvar_42[1].x = ((tmpvar_36 * tmpvar_40) + tmpvar_38);
  tmpvar_42[1].y = (localScale_5 * ((tmpvar_36 * tmpvar_41) - tmpvar_39));
  tmpvar_42[1].z = (tmpvar_36 * tmpvar_37);
  tmpvar_42[1].w = 0.0;
  tmpvar_42[2].x = (tmpvar_37 * tmpvar_40);
  tmpvar_42[2].y = (tmpvar_37 * tmpvar_41);
  tmpvar_42[2].z = (localScale_5 * (1.0 - tmpvar_33));
  tmpvar_42[2].w = 0.0;
  tmpvar_42[3].x = trans_30.x;
  tmpvar_42[3].y = trans_30.y;
  tmpvar_42[3].z = trans_30.z;
  tmpvar_42[3].w = 1.0;
  mat4 tmpvar_43;
  tmpvar_43 = (((unity_MatrixV * _Object2World) * tmpvar_42));
  vec4 v_44;
  v_44.x = tmpvar_43[0].z;
  v_44.y = tmpvar_43[1].z;
  v_44.z = tmpvar_43[2].z;
  v_44.w = tmpvar_43[3].z;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(v_44.xyz);
  vec4 tmpvar_46;
  tmpvar_46 = (gl_ModelViewMatrix * localOrigin_6);
  vec4 tmpvar_47;
  tmpvar_47.xyz = (gl_Vertex.xyz * localScale_5);
  tmpvar_47.w = gl_Vertex.w;
  vec4 tmpvar_48;
  tmpvar_48 = (gl_ProjectionMatrix * (tmpvar_46 + tmpvar_47));
  vec2 tmpvar_49;
  tmpvar_49 = ((2.0 * gl_MultiTexCoord0.xy) - 1.0);
  vec4 tmpvar_50;
  tmpvar_50.z = 0.0;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = tmpvar_49.y;
  tmpvar_50.w = gl_Vertex.w;
  ZYv_3.xyw = tmpvar_50.zyw;
  XZv_2.yzw = tmpvar_50.zyw;
  XYv_1.yzw = tmpvar_50.yzw;
  ZYv_3.z = (tmpvar_49.x * sign(-(tmpvar_45.x)));
  XZv_2.x = (tmpvar_49.x * sign(-(tmpvar_45.y)));
  XYv_1.x = (tmpvar_49.x * sign(tmpvar_45.z));
  ZYv_3.x = ((sign(-(tmpvar_45.x)) * sign(ZYv_3.z)) * tmpvar_45.z);
  XZv_2.y = ((sign(-(tmpvar_45.y)) * sign(XZv_2.x)) * tmpvar_45.x);
  XYv_1.z = ((sign(-(tmpvar_45.z)) * sign(XYv_1.x)) * tmpvar_45.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_45.x)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_45.y)) * sign(tmpvar_49.y)) * tmpvar_45.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_45.z)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  vec4 o_51;
  vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_48 * 0.5);
  vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_48.zw;
  tmpvar_9.xyw = o_51.xyw;
  tmpvar_9.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_48;
  xlv_COLOR = tmpvar_7;
  xlv_TEXCOORD0 = abs(tmpvar_45);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * ZYv_3).xy - tmpvar_46.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XZv_2).xy - tmpvar_46.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XYv_1).xy - tmpvar_46.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_6).xyz));
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform vec4 _ZBufferParams;
void main ()
{
  vec4 color_1;
  vec4 tmpvar_2;
  tmpvar_2 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (texture2D (_LeftTex, xlv_TEXCOORD1), texture2D (_TopTex, xlv_TEXCOORD2), xlv_TEXCOORD0.yyyy), texture2D (_FrontTex, xlv_TEXCOORD3), xlv_TEXCOORD0.zzzz));
  color_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD5);
  color_1.w = (tmpvar_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 28 [glstate_lightmodel_ambient]
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_projection]
Vector 29 [_WorldSpaceCameraPos]
Vector 30 [_ProjectionParams]
Vector 31 [_ScreenParams]
Vector 32 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [unity_MatrixV]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
Vector 33 [_LightColor0]
Float 34 [_DetailScale]
Float 35 [_DistFade]
Float 36 [_DistFadeVert]
Float 37 [_MinLight]
Float 38 [_Rotation]
Float 39 [_MaxScale]
Vector 40 [_MaxTrans]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"vs_3_0
; 355 ALU, 4 TEX
dcl_position o0
dcl_color0 o1
dcl_texcoord0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord8 o9
def c41, 0.15915491, 0.50000000, 6.28318501, -3.14159298
def c42, 123.54530334, 2.00000000, -1.00000000, 1.00000000
def c43, 0.00000000, -0.01872930, 0.07426100, -0.21211439
def c44, 1.57072902, 3.14159298, 0.31830987, -0.12123910
def c45, -0.01348047, 0.05747731, 0.19563590, -0.33299461
def c46, 0.99999559, 1.57079601, 0.15915494, 0.50000000
def c47, 6.28318548, 0.00000000, 1.00000000, -0.01000214
def c48, 0.60000002, 0.50000000, 4.03944778, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_2d s0
dcl_2d s1
mad r10.xy, v2, c42.y, c42.z
mov r1.w, c11
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
dp4 r0.z, r1, c18
dp4 r0.x, r1, c16
dp4 r0.y, r1, c17
frc r1.xyz, -r0
add r0.xyz, -r0, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mad r0.x, r1, c41, c41.y
frc r0.x, r0
mad r1.x, r0, c41.z, c41.w
sincos r0.xy, r1.x
mad r0.x, r1.z, c41, c41.y
mov r1.x, r0.y
frc r0.y, r0.x
mad r0.x, r1.y, c41, c41.y
mad r1.y, r0, c41.z, c41.w
frc r1.x, r0
sincos r0.xy, r1.y
mad r0.x, r1, c41.z, c41.w
sincos r1.xy, r0.x
mov r1.z, r0.y
mul r0.xyz, r1, c42.x
frc r0.xyz, r0
abs r6.xyz, r0
mad r0.xyz, r6, c42.y, c42.z
mul r0.xyz, r0, c40
mov r0.w, c42
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
dp4 r2.w, r0, c11
dp4 r1.z, r2, c18
dp4 r1.x, r2, c16
dp4 r1.y, r2, c17
dp4 r1.w, r2, c19
add r7.xyz, -r2, c29
dp3 r2.x, r7, r7
rsq r8.w, r2.x
dp4 r3.z, -r1, c22
dp4 r3.x, -r1, c20
dp4 r3.y, -r1, c21
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mul r3.xyz, r1.w, r3
abs r3.xyz, r3
sge r1.w, r3.z, r3.x
add r4.xyz, r3.zxyw, -r3
mad r4.xyz, r1.w, r4, r3
sge r2.w, r4.x, r3.y
add r4.xyz, r4, -r3.yxzw
mad r3.xyz, r2.w, r4, r3.yxzw
dp3 r1.w, -r1, -r1
rsq r1.w, r1.w
mul r1.xyz, r1.w, -r1
abs r2.w, r1.x
abs r1.w, r1.z
mul r3.zw, r3.xyzy, c41.y
max r3.y, r1.w, r2.w
abs r4.y, r3.x
min r3.x, r1.w, r2.w
slt r1.w, r1, r2
rcp r3.y, r3.y
mul r4.x, r3, r3.y
rcp r3.x, r4.y
mul r3.xy, r3.zwzw, r3.x
mul r4.y, r4.x, r4.x
mad r3.z, r4.y, c45.x, c45.y
mad r3.z, r3, r4.y, c44.w
mad r2.w, r3.z, r4.y, c45.z
mad r2.w, r2, r4.y, c45
mad r2.w, r2, r4.y, c46.x
mul r2.w, r2, r4.x
max r1.w, -r1, r1
slt r1.w, c43.x, r1
add r3.z, -r1.w, c42.w
mul r3.z, r2.w, r3
add r2.w, -r2, c46.y
mad r1.w, r1, r2, r3.z
slt r1.z, r1, c43.x
max r1.z, -r1, r1
slt r1.z, c43.x, r1
slt r1.x, r1, c43
max r1.x, -r1, r1
add r2.w, -r1, c44.y
add r3.z, -r1, c42.w
mul r1.w, r1, r3.z
slt r1.x, c43, r1
mad r1.z, r1, r2.w, r1.w
add r3.z, -r1.x, c42.w
mul r1.w, r1.z, r3.z
mad r1.x, r1, -r1.z, r1.w
abs r1.z, r1.y
add r2.w, -r1.z, c42
mad r1.w, r1.z, c43.y, c43.z
mad r1.w, r1, r1.z, c43
rsq r2.w, r2.w
rcp r2.w, r2.w
mad r1.z, r1.w, r1, c44.x
mul r1.z, r1, r2.w
slt r1.y, r1, c43.x
mul r1.w, r1.y, r1.z
mad r1.z, -r1.w, c42.y, r1
mad r1.y, r1, c44, r1.z
mul r3.xy, r3, c34.x
mov r3.z, c43.x
texldl r3, r3.xyzz, s1
mad r1.x, r1, c46.z, c46.w
mov r4.yz, c43.x
frc r4.x, c38
add r4.xyz, r6, r4
mul r1.w, r4.x, c47.x
mad r1.z, r1.w, c41.x, c41.y
frc r2.w, r1.z
mad r4.x, r2.w, c41.z, c41.w
sincos r5.xy, r4.x
mul r2.w, r4.y, c47.x
mad r2.w, r2, c41.x, c41.y
frc r4.x, r2.w
mul r2.w, r4.z, c42.y
mad r5.z, r4.x, c41, c41.w
sincos r4.xy, r5.z
rsq r5.w, r2.w
rcp r4.z, r5.w
mul r4.w, r4.x, r4.z
mul r5.z, r4.y, r4
mul r4.x, r4.w, r5
mad r4.y, r5.z, r5, r4.x
mov r5.w, c14.x
mul r1.y, r1, c44.z
mov r1.z, c43.x
texldl r1, r1.xyzz, s0
mul r3, r1, r3
add r1.z, -r2.w, c42.y
mov o1.xyz, r3
mov r1.y, c39.x
add r1.y, c42.z, r1
mad r1.x, r5.z, r4.y, -r5.y
mad r7.w, r6.x, r1.y, c42
mad r1.w, r4, r4.y, -r5.x
mul r1.y, r7.w, r1.w
rsq r1.z, r1.z
rcp r1.w, r1.z
mul r1.z, r1.w, r4.y
mov r4.x, c14.y
mul r4.xyz, c9, r4.x
mad r4.xyz, c8, r5.w, r4
mov r5.w, c14.z
mad r4.xyz, c10, r5.w, r4
mov r5.w, c14
mad r6.xyz, c11, r5.w, r4
mul r5.w, r4, r5.y
mad r2.z, r5, r5.x, -r5.w
mad r2.y, r5.z, r2.z, -r5.x
mul r2.x, r7.w, r2.y
mad r2.y, r4.w, r2.z, r5
mul r5.x, r5.z, r1.w
add r2.w, -r2, c42
mul r5.y, r1.w, r4.w
mul r2.z, r1.w, r2
mul r4.xyz, r6.y, r1
rcp r5.w, r8.w
mul r5.z, r7.w, r2.w
mad r4.xyz, r6.x, r2, r4
mad r4.xyz, r6.z, r5, r4
mul r1.w, -r5, c36.x
add_sat r2.w, r1, c42
mul_sat r1.w, r5, c35.x
mul r1.w, r1, r2
dp3 r4.w, r4, r4
rsq r2.w, r4.w
mul r8.xyz, r2.w, r4
mul o1.w, r3, r1
slt r2.w, -r8.x, r8.x
slt r1.w, r8.x, -r8.x
sub r1.w, r1, r2
slt r3.x, r10.y, -r10.y
slt r2.w, -r10.y, r10.y
sub r10.z, r2.w, r3.x
mul r2.w, r10.x, r1
mul r3.z, r1.w, r10
slt r3.y, r2.w, -r2.w
slt r3.x, -r2.w, r2.w
sub r3.x, r3, r3.y
mov r9.z, r2.w
mov r2.w, r0.x
mul r1.w, r3.x, r1
mul r3.y, r8, r3.z
mad r9.x, r8.z, r1.w, r3.y
mov r1.w, c12.y
mul r3, c9, r1.w
mov r1.w, c12.x
mad r3, c8, r1.w, r3
mov r1.w, c12.z
mad r3, c10, r1.w, r3
mov r1.w, c12
mad r6, c11, r1.w, r3
mov r1.w, r0.y
mul r4, r1, r6.y
mov r3.x, c13.y
mov r5.w, c13.x
mul r3, c9, r3.x
mad r3, c8, r5.w, r3
mov r5.w, c13.z
mad r3, c10, r5.w, r3
mov r5.w, c13
mad r3, c11, r5.w, r3
mul r1, r3.y, r1
mov r5.w, r0.z
mad r1, r3.x, r2, r1
mad r1, r3.z, r5, r1
mad r1, r3.w, c47.yyyz, r1
mad r4, r2, r6.x, r4
mad r4, r5, r6.z, r4
mad r2, r6.w, c47.yyyz, r4
dp4 r5.y, r0, c1
dp4 r5.x, r0, c0
mov r4.w, v0
mov r4.y, r10
mov r9.yw, r4
dp4 r3.y, r1, r9
dp4 r3.x, r9, r2
slt r3.w, -r8.y, r8.y
slt r3.z, r8.y, -r8.y
sub r4.x, r3.z, r3.w
add r3.zw, -r5.xyxy, r3.xyxy
mul r3.x, r10, r4
mad o3.xy, r3.zwzw, c48.x, c48.y
slt r3.z, r3.x, -r3.x
slt r3.y, -r3.x, r3.x
sub r3.y, r3, r3.z
mul r3.z, r10, r4.x
mul r3.y, r3, r4.x
mul r4.x, r8.z, r3.z
mad r3.y, r8.x, r3, r4.x
mov r3.zw, r4.xyyw
dp4 r5.w, r1, r3
dp4 r5.z, r2, r3
add r3.xy, -r5, r5.zwzw
slt r3.w, -r8.z, r8.z
slt r3.z, r8, -r8
sub r4.x, r3.w, r3.z
sub r3.z, r3, r3.w
mul r4.x, r10, r4
mul r5.z, r10, r3
dp4 r5.w, r0, c3
slt r4.z, r4.x, -r4.x
slt r3.w, -r4.x, r4.x
sub r3.w, r3, r4.z
mul r4.z, r8.y, r5
dp4 r5.z, r0, c2
mul r3.z, r3, r3.w
mad r4.z, r8.x, r3, r4
dp4 r1.y, r1, r4
dp4 r1.x, r2, r4
mad o4.xy, r3, c48.x, c48.y
add r3.xy, -r5, r1
mov r0.w, v0
mul r0.xyz, v0, r7.w
add r0, r5, r0
dp4 r2.w, r0, c7
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
mov r1.w, r2
dp4 r1.z, r0, c6
mul r2.xyz, r1.xyww, c41.y
mov o0, r1
mul r2.y, r2, c30.x
mov r1.xyz, v1
mov r1.w, c43.x
dp4 r0.z, r1, c10
dp4 r0.y, r1, c9
dp4 r0.x, r1, c8
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c32, c32
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c32
dp3_sat r0.x, r0, r1
add r0.x, r0, c47.w
mul r0.y, r0.x, c33.w
dp4 r1.x, v0, c2
mul_sat r0.w, r0.y, c48.z
mov r0.x, c37
add r0.xyz, c33, r0.x
mad_sat o7.xyz, r0, r0.w, c28
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mad o5.xy, r3, c48.x, c48.y
mad o9.xy, r2.z, c31.zwzw, r2
abs o2.xyz, r8
mov o9.w, r2
mul o6.xyz, r8.w, r7
dp4 o8.w, r0, c27
dp4 o8.z, r0, c26
dp4 o8.y, r0, c25
dp4 o8.x, r0, c24
mov o9.z, -r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
ConstBuffer "$Globals" 320 // 316 used size, 16 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
Vector 208 [_LightColor0] 4
Float 240 [_DetailScale]
Float 272 [_DistFade]
Float 276 [_DistFadeVert]
Float 284 [_MinLight]
Float 292 [_Rotation]
Float 296 [_MaxScale]
Vector 304 [_MaxTrans] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityPerFrame" 208 // 144 used size, 4 vars
Matrix 0 [glstate_matrix_projection] 4
Vector 64 [glstate_lightmodel_ambient] 4
Matrix 80 [unity_MatrixV] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityPerFrame" 4
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 253 instructions, 12 temp regs, 0 temp arrays:
// ALU 216 float, 8 int, 6 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddilcihphcpdcpngmnhoggplppappjgkpabaaaaaapicdaaaaadaaaaaa
cmaaaaaanmaaaaaapiabaaaaejfdeheokiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaijaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaipaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaajgaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaajoaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaafaepfdejfeejepeoaaedepem
epfcaaeoepfcenebemaafeebeoehefeofeaafeeffiedepepfceeaaklepfdeheo
beabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaakabaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaakabaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaaakabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
amadaaaaakabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaaakabaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaakabaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaakabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaaakabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaaedepemepfcaafeeffiedepepfceeaaklfdeieefcpicbaaaa
eaaaabaahoaiaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaaajaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
dccabaaaadaaaaaagfaaaaadmccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadpccabaaa
ahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacamaaaaaadiaaaaajhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaacaaaaaafgifcaaaadaaaaaaapaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaadaaaaaaapaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgikcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaaaaaaaaaaeaaaaaapgipcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaa
ebaaaaaghcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaenaaaaaghcaabaaaaaaaaaaaaanaaaaaegacbaaaaaaaaaaadiaaaaak
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaadcbhphecdcbhphecdcbhphec
aaaaaaaabkaaaaafhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaa
aaaaaaaackiacaaaaaaaaaaabcaaaaaaabeaaaaaaaaaialpdcaaaaajicaabaaa
aaaaaaaaakaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaficaabaaa
abaaaaaadkbabaaaaaaaaaaadcaaaaaphcaabaaaacaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaa
aaaaaaaabdaaaaaadiaaaaaipcaabaaaadaaaaaafgafbaaaacaaaaaaegiocaaa
adaaaaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaadaaaaaaaeaaaaaa
agaabaaaacaaaaaaegaobaaaadaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaa
adaaaaaaagaaaaaakgakbaaaacaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegiocaaaadaaaaaaahaaaaaaaaaaaaahpcaabaaa
abaaaaaaegaobaaaabaaaaaaegaobaaaadaaaaaadiaaaaaipcaabaaaaeaaaaaa
fgafbaaaabaaaaaaegiocaaaaeaaaaaaabaaaaaadcaaaaakpcaabaaaaeaaaaaa
egiocaaaaeaaaaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaeaaaaaadcaaaaak
pcaabaaaaeaaaaaaegiocaaaaeaaaaaaacaaaaaakgakbaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaeaaaaaaadaaaaaapgapbaaa
abaaaaaaegaobaaaaeaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaaeaaaaaafgafbaaaacaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaamaaaaaaagaabaaaacaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgakbaaaacaaaaaaegaobaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaaa
aeaaaaaaegiocaaaadaaaaaaapaaaaaadiaaaaaipcaabaaaafaaaaaafgafbaaa
aeaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaa
aaaaaaaaabaaaaaaagaabaaaaeaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaa
afaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaeaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaeaaaaaa
egaobaaaafaaaaaadiaaaaajhcaabaaaagaaaaaafgafbaiaebaaaaaaafaaaaaa
bgigcaaaaaaaaaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaa
afaaaaaaagaabaiaebaaaaaaafaaaaaaegacbaaaagaaaaaadcaaaaalhcaabaaa
agaaaaaabgigcaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaafaaaaaaegacbaaa
agaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaaiaaaaaapgapbaia
ebaaaaaaafaaaaaaegacbaaaagaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaa
agaaaaaaegacbaaaagaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahhcaabaaaagaaaaaakgakbaaaabaaaaaaegacbaaaagaaaaaadgaaaaag
ecaabaaaahaaaaaackaabaiambaaaaaaagaaaaaabnaaaaajecaabaaaabaaaaaa
ckaabaiaibaaaaaaagaaaaaabkaabaiaibaaaaaaagaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaaaiaaaaaa
fgaibaiambaaaaaaagaaaaaakgabbaiaibaaaaaaagaaaaaadiaaaaahlcaabaaa
ahaaaaaakgakbaaaabaaaaaajganbaaaaiaaaaaadcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaaiaaaaaabkaabaiaibaaaaaaagaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaihcaabaaa
aiaaaaaabgagbaiaibaaaaaaagaaaaaaegacbaaaahaaaaaadgaaaaagfcaabaaa
ahaaaaaafgaebaiambaaaaaaagaaaaaaaaaaaaahhcaabaaaahaaaaaacgalbaaa
ahaaaaaaegacbaaaaiaaaaaadcaaaaakhcaabaaaagaaaaaakgakbaaaabaaaaaa
egacbaaaahaaaaaaegacbaiaibaaaaaaagaaaaaadiaaaaakmcaabaaaadaaaaaa
kgagbaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaah
mcaabaaaadaaaaaakgaobaaaadaaaaaaagaabaaaagaaaaaadiaaaaaimcaabaaa
adaaaaaakgaobaaaadaaaaaaagiacaaaaaaaaaaaapaaaaaaeiaaaaalpcaabaaa
agaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaajecaabaaaabaaaaaaegacbaiaebaaaaaaafaaaaaaegacbaia
ebaaaaaaafaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaai
hcaabaaaafaaaaaakgakbaaaabaaaaaaigabbaiaebaaaaaaafaaaaaadeaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaa
aoaaaaakecaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
ckaabaaaabaaaaaaddaaaaajicaabaaaacaaaaaabkaabaiaibaaaaaaafaaaaaa
akaabaiaibaaaaaaafaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaackaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaackaabaaa
adaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaa
ckaabaaaadaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaacaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaadaaaaaa
ckaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaaadaaaaaackaabaaa
adaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaadaaaaaa
bkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaabaaaaahecaabaaa
adaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadbaaaaaimcaabaaa
adaaaaaafgajbaaaafaaaaaafgajbaiaebaaaaaaafaaaaaaabaaaaahicaabaaa
acaaaaaackaabaaaadaaaaaaabeaaaaanlapejmaaaaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaacaaaaaaddaaaaahicaabaaaacaaaaaabkaabaaa
afaaaaaaakaabaaaafaaaaaadbaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
dkaabaiaebaaaaaaacaaaaaadeaaaaahecaabaaaadaaaaaabkaabaaaafaaaaaa
akaabaaaafaaaaaabnaaaaaiecaabaaaadaaaaaackaabaaaadaaaaaackaabaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaackaabaaa
adaaaaaadhaaaaakecaabaaaabaaaaaadkaabaaaacaaaaaackaabaiaebaaaaaa
abaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaafaaaaaackaabaaaabaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakecaabaaaabaaaaaackaabaia
ibaaaaaaafaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaacaaaaaackaabaiambaaaaaaafaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaah
ecaabaaaadaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaa
adaaaaaackaabaaaadaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
ecaabaaaadaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaah
ccaabaaaafaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoeiaaaaalpcaabaaa
afaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaabeaaaaa
aaaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaagaaaaaaegaobaaaafaaaaaa
aaaaaaajhcaabaaaagaaaaaaegacbaaaaeaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhcaabaaaaeaaaaaaegacbaiaebaaaaaaaeaaaaaaegiccaaa
abaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaagaaaaaaegacbaaa
agaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaiicaabaaa
acaaaaaackaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaadccaaaalecaabaaa
abaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaackaabaaaabaaaaaaabeaaaaa
aaaaiadpdgcaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahiccabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaafaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
afaaaaaabkaaaaagbcaabaaaafaaaaaabkiacaaaaaaaaaaabcaaaaaadgaaaaai
gcaabaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaafaaaaaaaaaaaaahecaabaaa
abaaaaaackaabaaaaaaaaaaackaabaaaaaaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaa
nlapmjeanlapmjeaaaaaaaaaaaaaaaaadcaaaabamcaabaaaadaaaaaakgakbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaeaaaaaiadpenaaaaahbcaabaaaafaaaaaabcaabaaa
agaaaaaabkaabaaaaaaaaaaaenaaaaahbcaabaaaaaaaaaaabcaabaaaahaaaaaa
akaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaa
agaaaaaadiaaaaahecaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaa
diaaaaahecaabaaaabaaaaaaakaabaaaahaaaaaabkaabaaaaaaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaaaaaaaaaakaabaaaaaaaaaaackaabaaaabaaaaaa
dcaaaaakicaabaaaacaaaaaabkaabaaaaaaaaaaackaabaaaabaaaaaaakaabaia
ebaaaaaaahaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaa
acaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaadaaaaaaanaaaaaaegiccaaa
aeaaaaaaagaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaafaaaaaa
agiacaaaadaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaa
egiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaanaaaaaaegacbaaaafaaaaaa
dcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaa
anaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaagaaaaaapgapbaaaacaaaaaa
egacbaaaafaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaadcaaaaakicaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaaahaaaaaa
dkaabaiaebaaaaaaacaaaaaadcaaaaajicaabaaaaeaaaaaabkaabaaaaaaaaaaa
dkaabaaaacaaaaaaakaabaaaaaaaaaaadiaaaaajocaabaaaahaaaaaafgifcaaa
adaaaaaaamaaaaaaagijcaaaaeaaaaaaagaaaaaadcaaaaalocaabaaaahaaaaaa
agijcaaaaeaaaaaaafaaaaaaagiacaaaadaaaaaaamaaaaaafgaobaaaahaaaaaa
dcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaa
amaaaaaafgaobaaaahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaa
aiaaaaaapgipcaaaadaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaajhcaabaaa
agaaaaaajgahbaaaahaaaaaapgapbaaaaeaaaaaaegacbaaaagaaaaaaelaaaaaf
ecaabaaaadaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaadaaaaaadkaabaaa
aaaaaaaadkaabaaaadaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaadaaaaaadiaaaaajhcaabaaaaiaaaaaafgifcaaaadaaaaaaaoaaaaaa
egiccaaaaeaaaaaaagaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaa
afaaaaaaagiacaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaalhcaabaaa
aiaaaaaaegiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaaoaaaaaaegacbaaa
aiaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaa
adaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaajhcaabaaaagaaaaaaegacbaaa
aiaaaaaafgafbaaaaaaaaaaaegacbaaaagaaaaaadgaaaaafccaabaaaajaaaaaa
ckaabaaaagaaaaaadcaaaaakccaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaa
acaaaaaaakaabaiaebaaaaaaahaaaaaadcaaaaakbcaabaaaaaaaaaaackaabaaa
aaaaaaaackaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaadiaaaaahecaabaaa
aaaaaaaackaabaaaaaaaaaaackaabaaaadaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaadiaaaaahhcaabaaaakaaaaaakgakbaaaabaaaaaa
egacbaaaafaaaaaadcaaaaajhcaabaaaakaaaaaajgahbaaaahaaaaaapgapbaaa
acaaaaaaegacbaaaakaaaaaadcaaaaajhcaabaaaakaaaaaaegacbaaaaiaaaaaa
pgapbaaaadaaaaaaegacbaaaakaaaaaadiaaaaahhcaabaaaalaaaaaaagaabaaa
aaaaaaaaegacbaaaafaaaaaadiaaaaahkcaabaaaacaaaaaafgafbaaaacaaaaaa
agaebaaaafaaaaaadcaaaaajdcaabaaaacaaaaaajgafbaaaahaaaaaaagaabaaa
acaaaaaangafbaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaaaiaaaaaa
kgakbaaaacaaaaaaegaabaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaabkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajlcaabaaaaaaaaaaajganbaaaahaaaaaa
agaabaaaaaaaaaaaegaibaaaalaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaa
aiaaaaaakgakbaaaaaaaaaaaegadbaaaaaaaaaaadgaaaaafbcaabaaaajaaaaaa
ckaabaaaaaaaaaaadgaaaaafecaabaaaajaaaaaackaabaaaakaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaajaaaaaaegacbaaaajaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaakgakbaaaaaaaaaaa
egacbaaaajaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaibaaaaaaafaaaaaa
diaaaaajmcaabaaaaaaaaaaafgifcaaaadaaaaaaapaaaaaaagiecaaaaeaaaaaa
agaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaafaaaaaaagiacaaa
adaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaa
aeaaaaaaahaaaaaakgikcaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaal
mcaabaaaaaaaaaaaagiecaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaaapaaaaaa
kgaobaaaaaaaaaaaaaaaaaahmcaabaaaaaaaaaaakgaobaaaaaaaaaaaagaebaaa
acaaaaaadbaaaaalhcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaegacbaiaebaaaaaaafaaaaaadbaaaaalhcaabaaaahaaaaaaegacbaia
ebaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaboaaaaai
hcaabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaahaaaaaadcaaaaap
mcaabaaaadaaaaaaagbebaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaea
aaaaaaeaaceaaaaaaaaaaaaaaaaaaaaaaaaaialpaaaaialpdbaaaaahecaabaaa
abaaaaaaabeaaaaaaaaaaaaadkaabaaaadaaaaaadbaaaaahicaabaaaacaaaaaa
dkaabaaaadaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaadkaabaaaacaaaaaacgaaaaaiaanaaaaahcaabaaaahaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaaclaaaaafhcaabaaaahaaaaaaegacbaaa
ahaaaaaadiaaaaahhcaabaaaahaaaaaajgafbaaaafaaaaaaegacbaaaahaaaaaa
claaaaafkcaabaaaafaaaaaaagaebaaaacaaaaaadiaaaaahkcaabaaaafaaaaaa
kgakbaaaadaaaaaafganbaaaafaaaaaadbaaaaakmcaabaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafganbaaaafaaaaaadbaaaaakdcaabaaa
aiaaaaaangafbaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
boaaaaaimcaabaaaagaaaaaakgaobaiaebaaaaaaagaaaaaaagaebaaaaiaaaaaa
cgaaaaaiaanaaaaadcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaaagaaaaaa
claaaaafdcaabaaaacaaaaaaegaabaaaacaaaaaadcaaaaajdcaabaaaacaaaaaa
egaabaaaacaaaaaacgakbaaaafaaaaaaegaabaaaahaaaaaadiaaaaahkcaabaaa
acaaaaaafgafbaaaacaaaaaaagaebaaaagaaaaaadiaaaaahdcaabaaaagaaaaaa
pgapbaaaadaaaaaaegaabaaaagaaaaaadcaaaaajmcaabaaaagaaaaaaagaebaaa
aaaaaaaaagaabaaaacaaaaaaagaebaaaagaaaaaadcaaaaajmcaabaaaagaaaaaa
agaebaaaakaaaaaafgafbaaaafaaaaaakgaobaaaagaaaaaadcaaaaajdcaabaaa
acaaaaaaegaabaaaaaaaaaaapgapbaaaafaaaaaangafbaaaacaaaaaadcaaaaaj
dcaabaaaacaaaaaaegaabaaaakaaaaaapgapbaaaadaaaaaaegaabaaaacaaaaaa
dcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaa
acaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaa
acaaaaaadcaaaaapmccabaaaadaaaaaaagaebaaaacaaaaaaaceaaaaaaaaaaaaa
aaaaaaaajkjjbjdpjkjjbjdpaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
dcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaogakbaaa
agaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaa
acaaaaaadcaaaaapdccabaaaadaaaaaaegaabaaaacaaaaaaaceaaaaajkjjbjdp
jkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
dbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaackaabaaaafaaaaaadbaaaaah
bcaabaaaacaaaaaackaabaaaafaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaacaaaaaaclaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaaaadaaaaaadbaaaaahbcaabaaaacaaaaaaabeaaaaaaaaaaaaackaabaaa
abaaaaaadbaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaa
dcaaaaajdcaabaaaaaaaaaaaegaabaaaaaaaaaaakgakbaaaabaaaaaaegaabaaa
agaaaaaaboaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaabkaabaaa
acaaaaaacgaaaaaiaanaaaaaecaabaaaabaaaaaackaabaaaabaaaaaackaabaaa
acaaaaaaclaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaackaabaaaahaaaaaadcaaaaaj
dcaabaaaaaaaaaaaegaabaaaakaaaaaakgakbaaaabaaaaaaegaabaaaaaaaaaaa
dcaaaaajdcaabaaaaaaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaa
aaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaa
aaaaaaaadcaaaaapdccabaaaaeaaaaaaegaabaaaaaaaaaaaaceaaaaajkjjbjdp
jkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaaagaabaaa
aaaaaaaaegacbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaacaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaibcaabaaaaaaaaaaa
akaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaaaaaaaaaagijcaaa
aaaaaaaaanaaaaaapgipcaaaaaaaaaaabbaaaaaadccaaaakhccabaaaagaaaaaa
jgahbaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaaeaaaaaaaeaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaipcaabaaaacaaaaaa
fgafbaaaaaaaaaaaegiocaaaaaaaaaaaakaaaaaadcaaaaakpcaabaaaacaaaaaa
egiocaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaak
pcaabaaaacaaaaaaegiocaaaaaaaaaaaalaaaaaakgakbaaaaaaaaaaaegaobaaa
acaaaaaadcaaaaakpccabaaaahaaaaaaegiocaaaaaaaaaaaamaaaaaapgapbaaa
aaaaaaaaegaobaaaacaaaaaadiaaaaakhcaabaaaaaaaaaaaegadbaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaadgaaaaaficcabaaaaiaaaaaa
dkaabaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaaaaaaaaamgaabaaa
aaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaa
afaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
agaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaag
eccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 397
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 498
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 489
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 407
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 420
#line 428
#line 442
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 475
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 479
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 483
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 487
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 512
#line 528
#line 584
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 380
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 382
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 355
mediump vec4 GetShereDetailMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 357
    highp vec3 sphereVectNorm = normalize(sphereVect);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 361
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    highp vec4 uv;
    uv.xy = (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale);
    #line 365
    uv.zw = vec2( 0.0, 0.0);
    return xll_tex2Dlod( texSampler, uv);
}
#line 330
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 332
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 336
    return uv;
}
#line 338
mediump vec4 GetSphereMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 340
    highp vec4 uv;
    highp vec3 sphereVectNorm = normalize(sphereVect);
    uv.xy = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    uv.zw = vec2( 0.0, 0.0);
    #line 344
    mediump vec4 tex = xll_tex2Dlod( texSampler, uv);
    return tex;
}
#line 317
highp vec3 hash( in highp vec3 val ) {
    #line 319
    return fract((sin(val) * 123.545));
}
#line 512
highp mat4 rand_rotation( in highp vec3 x, in highp float scale, in highp vec3 trans ) {
    highp float theta = (x.x * 6.28319);
    highp float phi = (x.y * 6.28319);
    #line 516
    highp float z = (x.z * 2.0);
    highp float r = sqrt(z);
    highp float Vx = (sin(phi) * r);
    highp float Vy = (cos(phi) * r);
    #line 520
    highp float Vz = sqrt((2.0 - z));
    highp float st = sin(theta);
    highp float ct = cos(theta);
    highp float Sx = ((Vx * ct) - (Vy * st));
    #line 524
    highp float Sy = ((Vx * st) + (Vy * ct));
    highp mat4 M = mat4( (scale * ((Vx * Sx) - ct)), ((Vx * Sy) - st), (Vx * Vz), 0.0, ((Vy * Sx) + st), (scale * ((Vy * Sy) - ct)), (Vy * Vz), 0.0, (Vz * Sx), (Vz * Sy), (scale * (1.0 - z)), 0.0, trans.x, trans.y, trans.z, 1.0);
    return M;
}
#line 528
v2f vert( in appdata_t v ) {
    v2f o;
    highp vec4 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0));
    #line 532
    highp vec4 planet_pos = (-(_MainRotation * origin));
    highp vec3 hashVect = abs(hash( normalize(floor(planet_pos.xyz))));
    highp vec4 localOrigin;
    localOrigin.xyz = (((2.0 * hashVect) - 1.0) * _MaxTrans);
    #line 536
    localOrigin.w = 1.0;
    highp float localScale = ((hashVect.x * (_MaxScale - 1.0)) + 1.0);
    origin = (_Object2World * localOrigin);
    highp vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 540
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 544
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    o.baseLight = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    planet_pos = (-(_MainRotation * origin));
    highp vec3 detail_pos = (_DetailRotation * planet_pos).xyz;
    #line 548
    o.color = GetSphereMapNoLOD( _MainTex, planet_pos.xyz);
    o.color *= GetShereDetailMapNoLOD( _DetailTex, detail_pos, _DetailScale);
    o.color.w *= GetDistanceFade( distance( origin, vec4( _WorldSpaceCameraPos, 0.0)), _DistFade, _DistFadeVert);
    highp mat4 M = rand_rotation( (vec3( fract(_Rotation), 0.0, 0.0) + hashVect), localScale, localOrigin.xyz);
    #line 552
    highp mat4 mvMatrix = ((unity_MatrixV * _Object2World) * M);
    highp vec3 viewDir = normalize(xll_matrixindex_mf4x4_i (mvMatrix, 2).xyz);
    o.viewDir = abs(viewDir);
    highp vec4 mvCenter = (glstate_matrix_modelview0 * localOrigin);
    #line 556
    o.pos = (glstate_matrix_projection * (mvCenter + vec4( (v.vertex.xyz * localScale), v.vertex.w)));
    o.camPos = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * localOrigin).xyz));
    highp vec2 texcoodOffsetxy = ((2.0 * v.texcoord) - 1.0);
    highp vec4 texcoordOffset = vec4( texcoodOffsetxy.x, texcoodOffsetxy.y, 0.0, v.vertex.w);
    #line 560
    highp vec4 ZYv = texcoordOffset.zyxw;
    highp vec4 XZv = texcoordOffset.xzyw;
    highp vec4 XYv = texcoordOffset.xyzw;
    ZYv.z *= sign((-viewDir.x));
    #line 564
    XZv.x *= sign((-viewDir.y));
    XYv.x *= sign(viewDir.z);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.z)) * viewDir.z);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.x)) * viewDir.x);
    #line 568
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.x)) * viewDir.x);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.y)) * viewDir.y);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.z)) * viewDir.z);
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.y)) * viewDir.y);
    #line 572
    highp vec2 ZY = ((mvMatrix * ZYv).xy - mvCenter.xy);
    highp vec2 XZ = ((mvMatrix * XZv).xy - mvCenter.xy);
    highp vec2 XY = ((mvMatrix * XYv).xy - mvCenter.xy);
    o.texcoordZY = (vec2( 0.5, 0.5) + (0.6 * ZY));
    #line 576
    o.texcoordXZ = (vec2( 0.5, 0.5) + (0.6 * XZ));
    o.texcoordXY = (vec2( 0.5, 0.5) + (0.6 * XY));
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    #line 580
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}

out lowp vec4 xlv_COLOR;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.texcoord = vec2(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_COLOR = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD1 = vec2(xl_retval.texcoordZY);
    xlv_TEXCOORD2 = vec2(xl_retval.texcoordXZ);
    xlv_TEXCOORD3 = vec2(xl_retval.texcoordXY);
    xlv_TEXCOORD4 = vec3(xl_retval.camPos);
    xlv_TEXCOORD5 = vec3(xl_retval.baseLight);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 397
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 498
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec4 _LightCoord;
    highp vec4 projPos;
};
#line 489
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 407
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 420
#line 428
#line 442
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 475
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 479
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 483
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 487
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 512
#line 528
#line 584
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 584
lowp vec4 frag( in v2f IN ) {
    mediump float xval = IN.viewDir.x;
    mediump vec4 xtex = texture( _LeftTex, IN.texcoordZY);
    #line 588
    mediump float yval = IN.viewDir.y;
    mediump vec4 ytex = texture( _TopTex, IN.texcoordXZ);
    mediump float zval = IN.viewDir.z;
    mediump vec4 ztex = texture( _FrontTex, IN.texcoordXY);
    #line 592
    mediump vec4 tex = mix( mix( xtex, ytex, vec4( yval)), ztex, vec4( zval));
    mediump vec4 prev = (((0.94 * _Color) * IN.color) * tex);
    mediump vec4 color;
    color.xyz = (prev.xyz * IN.baseLight);
    #line 596
    color.w = prev.w;
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 600
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in lowp vec4 xlv_COLOR;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_COLOR);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD0);
    xlt_IN.texcoordZY = vec2(xlv_TEXCOORD1);
    xlt_IN.texcoordXZ = vec2(xlv_TEXCOORD2);
    xlt_IN.texcoordXY = vec2(xlv_TEXCOORD3);
    xlt_IN.camPos = vec3(xlv_TEXCOORD4);
    xlt_IN.baseLight = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform vec3 _MaxTrans;
uniform float _MaxScale;
uniform float _Rotation;
uniform float _MinLight;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 unity_MatrixV;


uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 XYv_1;
  vec4 XZv_2;
  vec4 ZYv_3;
  vec3 detail_pos_4;
  float localScale_5;
  vec4 localOrigin_6;
  vec4 tmpvar_7;
  vec3 tmpvar_8;
  vec4 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_6.xyz = (((2.0 * tmpvar_10) - 1.0) * _MaxTrans);
  localOrigin_6.w = 1.0;
  localScale_5 = ((tmpvar_10.x * (_MaxScale - 1.0)) + 1.0);
  vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * localOrigin_6);
  vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = gl_Normal;
  tmpvar_8 = clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (normalize((_Object2World * tmpvar_12).xyz), normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0);
  vec4 tmpvar_13;
  tmpvar_13 = -((_MainRotation * tmpvar_11));
  detail_pos_4 = (_DetailRotation * tmpvar_13).xyz;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13.xyz);
  vec2 uv_15;
  float r_16;
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_14.x)))) {
    float y_over_x_17;
    y_over_x_17 = (tmpvar_14.x / tmpvar_14.z);
    float s_18;
    float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_14.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(tmpvar_14.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_16));
  uv_15.y = (0.31831 * (1.5708 - (sign(tmpvar_14.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_14.y))) * (1.5708 + (abs(tmpvar_14.y) * (-0.214602 + (abs(tmpvar_14.y) * (0.0865667 + (abs(tmpvar_14.y) * -0.0310296)))))))))));
  vec4 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(normalize(detail_pos_4));
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  uv_20.xy = (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale);
  uv_20.zw = vec2(0.0, 0.0);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DLod (_MainTex, uv_15, 0.0) * texture2DLod (_DetailTex, uv_20.xy, 0.0));
  tmpvar_7.xyz = tmpvar_24.xyz;
  vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = _WorldSpaceCameraPos;
  float tmpvar_26;
  vec4 p_27;
  p_27 = (tmpvar_11 - tmpvar_25);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  tmpvar_7.w = (tmpvar_24.w * (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0)));
  vec3 tmpvar_28;
  tmpvar_28.yz = vec2(0.0, 0.0);
  tmpvar_28.x = fract(_Rotation);
  vec3 x_29;
  x_29 = (tmpvar_28 + tmpvar_10);
  vec3 trans_30;
  trans_30 = localOrigin_6.xyz;
  float tmpvar_31;
  tmpvar_31 = (x_29.x * 6.28319);
  float tmpvar_32;
  tmpvar_32 = (x_29.y * 6.28319);
  float tmpvar_33;
  tmpvar_33 = (x_29.z * 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (sin(tmpvar_32) * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (cos(tmpvar_32) * tmpvar_34);
  float tmpvar_37;
  tmpvar_37 = sqrt((2.0 - tmpvar_33));
  float tmpvar_38;
  tmpvar_38 = sin(tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = cos(tmpvar_31);
  float tmpvar_40;
  tmpvar_40 = ((tmpvar_35 * tmpvar_39) - (tmpvar_36 * tmpvar_38));
  float tmpvar_41;
  tmpvar_41 = ((tmpvar_35 * tmpvar_38) + (tmpvar_36 * tmpvar_39));
  mat4 tmpvar_42;
  tmpvar_42[0].x = (localScale_5 * ((tmpvar_35 * tmpvar_40) - tmpvar_39));
  tmpvar_42[0].y = ((tmpvar_35 * tmpvar_41) - tmpvar_38);
  tmpvar_42[0].z = (tmpvar_35 * tmpvar_37);
  tmpvar_42[0].w = 0.0;
  tmpvar_42[1].x = ((tmpvar_36 * tmpvar_40) + tmpvar_38);
  tmpvar_42[1].y = (localScale_5 * ((tmpvar_36 * tmpvar_41) - tmpvar_39));
  tmpvar_42[1].z = (tmpvar_36 * tmpvar_37);
  tmpvar_42[1].w = 0.0;
  tmpvar_42[2].x = (tmpvar_37 * tmpvar_40);
  tmpvar_42[2].y = (tmpvar_37 * tmpvar_41);
  tmpvar_42[2].z = (localScale_5 * (1.0 - tmpvar_33));
  tmpvar_42[2].w = 0.0;
  tmpvar_42[3].x = trans_30.x;
  tmpvar_42[3].y = trans_30.y;
  tmpvar_42[3].z = trans_30.z;
  tmpvar_42[3].w = 1.0;
  mat4 tmpvar_43;
  tmpvar_43 = (((unity_MatrixV * _Object2World) * tmpvar_42));
  vec4 v_44;
  v_44.x = tmpvar_43[0].z;
  v_44.y = tmpvar_43[1].z;
  v_44.z = tmpvar_43[2].z;
  v_44.w = tmpvar_43[3].z;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(v_44.xyz);
  vec4 tmpvar_46;
  tmpvar_46 = (gl_ModelViewMatrix * localOrigin_6);
  vec4 tmpvar_47;
  tmpvar_47.xyz = (gl_Vertex.xyz * localScale_5);
  tmpvar_47.w = gl_Vertex.w;
  vec4 tmpvar_48;
  tmpvar_48 = (gl_ProjectionMatrix * (tmpvar_46 + tmpvar_47));
  vec2 tmpvar_49;
  tmpvar_49 = ((2.0 * gl_MultiTexCoord0.xy) - 1.0);
  vec4 tmpvar_50;
  tmpvar_50.z = 0.0;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = tmpvar_49.y;
  tmpvar_50.w = gl_Vertex.w;
  ZYv_3.xyw = tmpvar_50.zyw;
  XZv_2.yzw = tmpvar_50.zyw;
  XYv_1.yzw = tmpvar_50.yzw;
  ZYv_3.z = (tmpvar_49.x * sign(-(tmpvar_45.x)));
  XZv_2.x = (tmpvar_49.x * sign(-(tmpvar_45.y)));
  XYv_1.x = (tmpvar_49.x * sign(tmpvar_45.z));
  ZYv_3.x = ((sign(-(tmpvar_45.x)) * sign(ZYv_3.z)) * tmpvar_45.z);
  XZv_2.y = ((sign(-(tmpvar_45.y)) * sign(XZv_2.x)) * tmpvar_45.x);
  XYv_1.z = ((sign(-(tmpvar_45.z)) * sign(XYv_1.x)) * tmpvar_45.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_45.x)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_45.y)) * sign(tmpvar_49.y)) * tmpvar_45.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_45.z)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  vec4 o_51;
  vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_48 * 0.5);
  vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_48.zw;
  tmpvar_9.xyw = o_51.xyw;
  tmpvar_9.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_48;
  xlv_COLOR = tmpvar_7;
  xlv_TEXCOORD0 = abs(tmpvar_45);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * ZYv_3).xy - tmpvar_46.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XZv_2).xy - tmpvar_46.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XYv_1).xy - tmpvar_46.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_6).xyz));
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform vec4 _ZBufferParams;
void main ()
{
  vec4 color_1;
  vec4 tmpvar_2;
  tmpvar_2 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (texture2D (_LeftTex, xlv_TEXCOORD1), texture2D (_TopTex, xlv_TEXCOORD2), xlv_TEXCOORD0.yyyy), texture2D (_FrontTex, xlv_TEXCOORD3), xlv_TEXCOORD0.zzzz));
  color_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD5);
  color_1.w = (tmpvar_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 28 [glstate_lightmodel_ambient]
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_projection]
Vector 29 [_WorldSpaceCameraPos]
Vector 30 [_ProjectionParams]
Vector 31 [_ScreenParams]
Vector 32 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [unity_MatrixV]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
Vector 33 [_LightColor0]
Float 34 [_DetailScale]
Float 35 [_DistFade]
Float 36 [_DistFadeVert]
Float 37 [_MinLight]
Float 38 [_Rotation]
Float 39 [_MaxScale]
Vector 40 [_MaxTrans]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"vs_3_0
; 354 ALU, 4 TEX
dcl_position o0
dcl_color0 o1
dcl_texcoord0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord8 o9
def c41, 0.15915491, 0.50000000, 6.28318501, -3.14159298
def c42, 123.54530334, 2.00000000, -1.00000000, 1.00000000
def c43, 0.00000000, -0.01872930, 0.07426100, -0.21211439
def c44, 1.57072902, 3.14159298, 0.31830987, -0.12123910
def c45, -0.01348047, 0.05747731, 0.19563590, -0.33299461
def c46, 0.99999559, 1.57079601, 0.15915494, 0.50000000
def c47, 6.28318548, 0.00000000, 1.00000000, -0.01000214
def c48, 0.60000002, 0.50000000, 4.03944778, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_2d s0
dcl_2d s1
mad r10.xy, v2, c42.y, c42.z
mov r1.w, c11
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
dp4 r0.z, r1, c18
dp4 r0.x, r1, c16
dp4 r0.y, r1, c17
frc r1.xyz, -r0
add r0.xyz, -r0, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mad r0.x, r1, c41, c41.y
frc r0.x, r0
mad r1.x, r0, c41.z, c41.w
sincos r0.xy, r1.x
mad r0.x, r1.z, c41, c41.y
mov r1.x, r0.y
frc r0.y, r0.x
mad r0.x, r1.y, c41, c41.y
mad r1.y, r0, c41.z, c41.w
frc r1.x, r0
sincos r0.xy, r1.y
mad r0.x, r1, c41.z, c41.w
sincos r1.xy, r0.x
mov r1.z, r0.y
mul r0.xyz, r1, c42.x
frc r0.xyz, r0
abs r6.xyz, r0
mad r0.xyz, r6, c42.y, c42.z
mul r0.xyz, r0, c40
mov r0.w, c42
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
dp4 r2.w, r0, c11
dp4 r1.z, r2, c18
dp4 r1.x, r2, c16
dp4 r1.y, r2, c17
dp4 r1.w, r2, c19
add r7.xyz, -r2, c29
dp3 r2.x, r7, r7
rsq r8.w, r2.x
dp4 r3.z, -r1, c22
dp4 r3.x, -r1, c20
dp4 r3.y, -r1, c21
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mul r3.xyz, r1.w, r3
abs r3.xyz, r3
sge r1.w, r3.z, r3.x
add r4.xyz, r3.zxyw, -r3
mad r4.xyz, r1.w, r4, r3
sge r2.w, r4.x, r3.y
add r4.xyz, r4, -r3.yxzw
mad r3.xyz, r2.w, r4, r3.yxzw
dp3 r1.w, -r1, -r1
rsq r1.w, r1.w
mul r1.xyz, r1.w, -r1
abs r2.w, r1.x
abs r1.w, r1.z
mul r3.zw, r3.xyzy, c41.y
max r3.y, r1.w, r2.w
abs r4.y, r3.x
min r3.x, r1.w, r2.w
slt r1.w, r1, r2
rcp r3.y, r3.y
mul r4.x, r3, r3.y
rcp r3.x, r4.y
mul r3.xy, r3.zwzw, r3.x
mul r4.y, r4.x, r4.x
mad r3.z, r4.y, c45.x, c45.y
mad r3.z, r3, r4.y, c44.w
mad r2.w, r3.z, r4.y, c45.z
mad r2.w, r2, r4.y, c45
mad r2.w, r2, r4.y, c46.x
mul r2.w, r2, r4.x
max r1.w, -r1, r1
slt r1.w, c43.x, r1
add r3.z, -r1.w, c42.w
mul r3.z, r2.w, r3
add r2.w, -r2, c46.y
mad r1.w, r1, r2, r3.z
slt r1.z, r1, c43.x
max r1.z, -r1, r1
slt r1.z, c43.x, r1
slt r1.x, r1, c43
max r1.x, -r1, r1
add r2.w, -r1, c44.y
add r3.z, -r1, c42.w
mul r1.w, r1, r3.z
slt r1.x, c43, r1
mad r1.z, r1, r2.w, r1.w
add r3.z, -r1.x, c42.w
mul r1.w, r1.z, r3.z
mad r1.x, r1, -r1.z, r1.w
abs r1.z, r1.y
add r2.w, -r1.z, c42
mad r1.w, r1.z, c43.y, c43.z
mad r1.w, r1, r1.z, c43
rsq r2.w, r2.w
rcp r2.w, r2.w
mad r1.z, r1.w, r1, c44.x
mul r1.z, r1, r2.w
slt r1.y, r1, c43.x
mul r1.w, r1.y, r1.z
mad r1.z, -r1.w, c42.y, r1
mad r1.y, r1, c44, r1.z
mul r3.xy, r3, c34.x
mov r3.z, c43.x
texldl r3, r3.xyzz, s1
mad r1.x, r1, c46.z, c46.w
mov r4.yz, c43.x
frc r4.x, c38
add r4.xyz, r6, r4
mul r1.w, r4.x, c47.x
mad r1.z, r1.w, c41.x, c41.y
frc r2.w, r1.z
mad r4.x, r2.w, c41.z, c41.w
sincos r5.xy, r4.x
mul r2.w, r4.y, c47.x
mad r2.w, r2, c41.x, c41.y
frc r4.x, r2.w
mul r2.w, r4.z, c42.y
mad r5.z, r4.x, c41, c41.w
sincos r4.xy, r5.z
rsq r5.w, r2.w
rcp r4.z, r5.w
mul r4.w, r4.x, r4.z
mul r5.z, r4.y, r4
mul r4.x, r4.w, r5
mad r4.y, r5.z, r5, r4.x
mov r5.w, c14.x
mul r1.y, r1, c44.z
mov r1.z, c43.x
texldl r1, r1.xyzz, s0
mul r3, r1, r3
add r1.z, -r2.w, c42.y
mov o1.xyz, r3
mov r1.y, c39.x
add r1.y, c42.z, r1
mad r1.x, r5.z, r4.y, -r5.y
mad r7.w, r6.x, r1.y, c42
mad r1.w, r4, r4.y, -r5.x
mul r1.y, r7.w, r1.w
rsq r1.z, r1.z
rcp r1.w, r1.z
mul r1.z, r1.w, r4.y
mov r4.x, c14.y
mul r4.xyz, c9, r4.x
mad r4.xyz, c8, r5.w, r4
mov r5.w, c14.z
mad r4.xyz, c10, r5.w, r4
mov r5.w, c14
mad r6.xyz, c11, r5.w, r4
mul r5.w, r4, r5.y
mad r2.z, r5, r5.x, -r5.w
mad r2.y, r5.z, r2.z, -r5.x
mul r2.x, r7.w, r2.y
mad r2.y, r4.w, r2.z, r5
mul r5.x, r5.z, r1.w
add r2.w, -r2, c42
mul r5.y, r1.w, r4.w
mul r2.z, r1.w, r2
mul r4.xyz, r6.y, r1
rcp r5.w, r8.w
mul r5.z, r7.w, r2.w
mad r4.xyz, r6.x, r2, r4
mad r4.xyz, r6.z, r5, r4
mul r1.w, -r5, c36.x
add_sat r2.w, r1, c42
mul_sat r1.w, r5, c35.x
mul r1.w, r1, r2
dp3 r4.w, r4, r4
rsq r2.w, r4.w
mul r8.xyz, r2.w, r4
mul o1.w, r3, r1
slt r2.w, -r8.x, r8.x
slt r1.w, r8.x, -r8.x
sub r1.w, r1, r2
slt r3.x, r10.y, -r10.y
slt r2.w, -r10.y, r10.y
sub r10.z, r2.w, r3.x
mul r2.w, r10.x, r1
mul r3.z, r1.w, r10
slt r3.y, r2.w, -r2.w
slt r3.x, -r2.w, r2.w
sub r3.x, r3, r3.y
mov r9.z, r2.w
mov r2.w, r0.x
mul r1.w, r3.x, r1
mul r3.y, r8, r3.z
mad r9.x, r8.z, r1.w, r3.y
mov r1.w, c12.y
mul r3, c9, r1.w
mov r1.w, c12.x
mad r3, c8, r1.w, r3
mov r1.w, c12.z
mad r3, c10, r1.w, r3
mov r1.w, c12
mad r6, c11, r1.w, r3
mov r1.w, r0.y
mul r4, r1, r6.y
mov r3.x, c13.y
mov r5.w, c13.x
mul r3, c9, r3.x
mad r3, c8, r5.w, r3
mov r5.w, c13.z
mad r3, c10, r5.w, r3
mov r5.w, c13
mad r3, c11, r5.w, r3
mul r1, r3.y, r1
mov r5.w, r0.z
mad r1, r3.x, r2, r1
mad r1, r3.z, r5, r1
mad r1, r3.w, c47.yyyz, r1
mad r4, r2, r6.x, r4
mad r4, r5, r6.z, r4
mad r2, r6.w, c47.yyyz, r4
dp4 r5.y, r0, c1
dp4 r5.x, r0, c0
mov r4.w, v0
mov r4.y, r10
mov r9.yw, r4
dp4 r3.y, r1, r9
dp4 r3.x, r9, r2
slt r3.w, -r8.y, r8.y
slt r3.z, r8.y, -r8.y
sub r4.x, r3.z, r3.w
add r3.zw, -r5.xyxy, r3.xyxy
mul r3.x, r10, r4
mad o3.xy, r3.zwzw, c48.x, c48.y
slt r3.z, r3.x, -r3.x
slt r3.y, -r3.x, r3.x
sub r3.y, r3, r3.z
mul r3.z, r10, r4.x
mul r3.y, r3, r4.x
mul r4.x, r8.z, r3.z
mad r3.y, r8.x, r3, r4.x
mov r3.zw, r4.xyyw
dp4 r5.w, r1, r3
dp4 r5.z, r2, r3
add r3.xy, -r5, r5.zwzw
slt r3.w, -r8.z, r8.z
slt r3.z, r8, -r8
sub r4.x, r3.w, r3.z
sub r3.z, r3, r3.w
mul r4.x, r10, r4
mul r5.z, r10, r3
dp4 r5.w, r0, c3
slt r4.z, r4.x, -r4.x
slt r3.w, -r4.x, r4.x
sub r3.w, r3, r4.z
mul r4.z, r8.y, r5
dp4 r5.z, r0, c2
mul r3.z, r3, r3.w
mad r4.z, r8.x, r3, r4
dp4 r1.y, r1, r4
dp4 r1.x, r2, r4
mad o4.xy, r3, c48.x, c48.y
add r3.xy, -r5, r1
mov r0.w, v0
mul r0.xyz, v0, r7.w
add r0, r5, r0
dp4 r2.w, r0, c7
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
mov r1.w, r2
dp4 r1.z, r0, c6
mul r2.xyz, r1.xyww, c41.y
mov o0, r1
mul r2.y, r2, c30.x
mov r1.xyz, v1
mov r1.w, c43.x
dp4 r0.z, r1, c10
dp4 r0.y, r1, c9
dp4 r0.x, r1, c8
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c32, c32
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c32
dp3_sat r0.x, r0, r1
add r0.x, r0, c47.w
mul r0.y, r0.x, c33.w
dp4 r1.x, v0, c2
mul_sat r0.w, r0.y, c48.z
mov r0.x, c37
add r0.xyz, c33, r0.x
mad_sat o7.xyz, r0, r0.w, c28
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mad o5.xy, r3, c48.x, c48.y
mad o9.xy, r2.z, c31.zwzw, r2
abs o2.xyz, r8
mov o9.w, r2
mul o6.xyz, r8.w, r7
dp4 o8.z, r0, c26
dp4 o8.y, r0, c25
dp4 o8.x, r0, c24
mov o9.z, -r1.x
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
ConstBuffer "$Globals" 320 // 316 used size, 16 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
Vector 208 [_LightColor0] 4
Float 240 [_DetailScale]
Float 272 [_DistFade]
Float 276 [_DistFadeVert]
Float 284 [_MinLight]
Float 292 [_Rotation]
Float 296 [_MaxScale]
Vector 304 [_MaxTrans] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityPerFrame" 208 // 144 used size, 4 vars
Matrix 0 [glstate_matrix_projection] 4
Vector 64 [glstate_lightmodel_ambient] 4
Matrix 80 [unity_MatrixV] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityPerFrame" 4
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 253 instructions, 12 temp regs, 0 temp arrays:
// ALU 216 float, 8 int, 6 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedadpikehbjcbflflalgnokldmjcibfekoabaaaaaapicdaaaaadaaaaaa
cmaaaaaanmaaaaaapiabaaaaejfdeheokiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaijaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaipaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaajgaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaajoaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaafaepfdejfeejepeoaaedepem
epfcaaeoepfcenebemaafeebeoehefeofeaafeeffiedepepfceeaaklepfdeheo
beabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaakabaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaakabaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaaakabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
amadaaaaakabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaaakabaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaakabaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaakabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaakabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaaedepemepfcaafeeffiedepepfceeaaklfdeieefcpicbaaaa
eaaaabaahoaiaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaaajaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
dccabaaaadaaaaaagfaaaaadmccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaa
ahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacamaaaaaadiaaaaajhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaacaaaaaafgifcaaaadaaaaaaapaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaadaaaaaaapaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgikcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaaaaaaaaaaeaaaaaapgipcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaa
ebaaaaaghcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaenaaaaaghcaabaaaaaaaaaaaaanaaaaaegacbaaaaaaaaaaadiaaaaak
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaadcbhphecdcbhphecdcbhphec
aaaaaaaabkaaaaafhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaa
aaaaaaaackiacaaaaaaaaaaabcaaaaaaabeaaaaaaaaaialpdcaaaaajicaabaaa
aaaaaaaaakaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaficaabaaa
abaaaaaadkbabaaaaaaaaaaadcaaaaaphcaabaaaacaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaa
aaaaaaaabdaaaaaadiaaaaaipcaabaaaadaaaaaafgafbaaaacaaaaaaegiocaaa
adaaaaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaadaaaaaaaeaaaaaa
agaabaaaacaaaaaaegaobaaaadaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaa
adaaaaaaagaaaaaakgakbaaaacaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegiocaaaadaaaaaaahaaaaaaaaaaaaahpcaabaaa
abaaaaaaegaobaaaabaaaaaaegaobaaaadaaaaaadiaaaaaipcaabaaaaeaaaaaa
fgafbaaaabaaaaaaegiocaaaaeaaaaaaabaaaaaadcaaaaakpcaabaaaaeaaaaaa
egiocaaaaeaaaaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaeaaaaaadcaaaaak
pcaabaaaaeaaaaaaegiocaaaaeaaaaaaacaaaaaakgakbaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaeaaaaaaadaaaaaapgapbaaa
abaaaaaaegaobaaaaeaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaaeaaaaaafgafbaaaacaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaamaaaaaaagaabaaaacaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgakbaaaacaaaaaaegaobaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaaa
aeaaaaaaegiocaaaadaaaaaaapaaaaaadiaaaaaipcaabaaaafaaaaaafgafbaaa
aeaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaa
aaaaaaaaabaaaaaaagaabaaaaeaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaa
afaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaeaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaeaaaaaa
egaobaaaafaaaaaadiaaaaajhcaabaaaagaaaaaafgafbaiaebaaaaaaafaaaaaa
bgigcaaaaaaaaaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaa
afaaaaaaagaabaiaebaaaaaaafaaaaaaegacbaaaagaaaaaadcaaaaalhcaabaaa
agaaaaaabgigcaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaafaaaaaaegacbaaa
agaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaaiaaaaaapgapbaia
ebaaaaaaafaaaaaaegacbaaaagaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaa
agaaaaaaegacbaaaagaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahhcaabaaaagaaaaaakgakbaaaabaaaaaaegacbaaaagaaaaaadgaaaaag
ecaabaaaahaaaaaackaabaiambaaaaaaagaaaaaabnaaaaajecaabaaaabaaaaaa
ckaabaiaibaaaaaaagaaaaaabkaabaiaibaaaaaaagaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaaaiaaaaaa
fgaibaiambaaaaaaagaaaaaakgabbaiaibaaaaaaagaaaaaadiaaaaahlcaabaaa
ahaaaaaakgakbaaaabaaaaaajganbaaaaiaaaaaadcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaaiaaaaaabkaabaiaibaaaaaaagaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaihcaabaaa
aiaaaaaabgagbaiaibaaaaaaagaaaaaaegacbaaaahaaaaaadgaaaaagfcaabaaa
ahaaaaaafgaebaiambaaaaaaagaaaaaaaaaaaaahhcaabaaaahaaaaaacgalbaaa
ahaaaaaaegacbaaaaiaaaaaadcaaaaakhcaabaaaagaaaaaakgakbaaaabaaaaaa
egacbaaaahaaaaaaegacbaiaibaaaaaaagaaaaaadiaaaaakmcaabaaaadaaaaaa
kgagbaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaah
mcaabaaaadaaaaaakgaobaaaadaaaaaaagaabaaaagaaaaaadiaaaaaimcaabaaa
adaaaaaakgaobaaaadaaaaaaagiacaaaaaaaaaaaapaaaaaaeiaaaaalpcaabaaa
agaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaajecaabaaaabaaaaaaegacbaiaebaaaaaaafaaaaaaegacbaia
ebaaaaaaafaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaai
hcaabaaaafaaaaaakgakbaaaabaaaaaaigabbaiaebaaaaaaafaaaaaadeaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaa
aoaaaaakecaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
ckaabaaaabaaaaaaddaaaaajicaabaaaacaaaaaabkaabaiaibaaaaaaafaaaaaa
akaabaiaibaaaaaaafaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaackaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaackaabaaa
adaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaa
ckaabaaaadaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaacaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaadaaaaaa
ckaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaaadaaaaaackaabaaa
adaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaadaaaaaa
bkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaabaaaaahecaabaaa
adaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadbaaaaaimcaabaaa
adaaaaaafgajbaaaafaaaaaafgajbaiaebaaaaaaafaaaaaaabaaaaahicaabaaa
acaaaaaackaabaaaadaaaaaaabeaaaaanlapejmaaaaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaacaaaaaaddaaaaahicaabaaaacaaaaaabkaabaaa
afaaaaaaakaabaaaafaaaaaadbaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
dkaabaiaebaaaaaaacaaaaaadeaaaaahecaabaaaadaaaaaabkaabaaaafaaaaaa
akaabaaaafaaaaaabnaaaaaiecaabaaaadaaaaaackaabaaaadaaaaaackaabaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaackaabaaa
adaaaaaadhaaaaakecaabaaaabaaaaaadkaabaaaacaaaaaackaabaiaebaaaaaa
abaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaafaaaaaackaabaaaabaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakecaabaaaabaaaaaackaabaia
ibaaaaaaafaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaacaaaaaackaabaiambaaaaaaafaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaah
ecaabaaaadaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaa
adaaaaaackaabaaaadaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
ecaabaaaadaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaah
ccaabaaaafaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoeiaaaaalpcaabaaa
afaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaabeaaaaa
aaaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaagaaaaaaegaobaaaafaaaaaa
aaaaaaajhcaabaaaagaaaaaaegacbaaaaeaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhcaabaaaaeaaaaaaegacbaiaebaaaaaaaeaaaaaaegiccaaa
abaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaagaaaaaaegacbaaa
agaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaiicaabaaa
acaaaaaackaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaadccaaaalecaabaaa
abaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaackaabaaaabaaaaaaabeaaaaa
aaaaiadpdgcaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahiccabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaafaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
afaaaaaabkaaaaagbcaabaaaafaaaaaabkiacaaaaaaaaaaabcaaaaaadgaaaaai
gcaabaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaafaaaaaaaaaaaaahecaabaaa
abaaaaaackaabaaaaaaaaaaackaabaaaaaaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaa
nlapmjeanlapmjeaaaaaaaaaaaaaaaaadcaaaabamcaabaaaadaaaaaakgakbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaeaaaaaiadpenaaaaahbcaabaaaafaaaaaabcaabaaa
agaaaaaabkaabaaaaaaaaaaaenaaaaahbcaabaaaaaaaaaaabcaabaaaahaaaaaa
akaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaa
agaaaaaadiaaaaahecaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaa
diaaaaahecaabaaaabaaaaaaakaabaaaahaaaaaabkaabaaaaaaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaaaaaaaaaakaabaaaaaaaaaaackaabaaaabaaaaaa
dcaaaaakicaabaaaacaaaaaabkaabaaaaaaaaaaackaabaaaabaaaaaaakaabaia
ebaaaaaaahaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaa
acaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaadaaaaaaanaaaaaaegiccaaa
aeaaaaaaagaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaafaaaaaa
agiacaaaadaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaa
egiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaanaaaaaaegacbaaaafaaaaaa
dcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaa
anaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaagaaaaaapgapbaaaacaaaaaa
egacbaaaafaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaadcaaaaakicaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaaahaaaaaa
dkaabaiaebaaaaaaacaaaaaadcaaaaajicaabaaaaeaaaaaabkaabaaaaaaaaaaa
dkaabaaaacaaaaaaakaabaaaaaaaaaaadiaaaaajocaabaaaahaaaaaafgifcaaa
adaaaaaaamaaaaaaagijcaaaaeaaaaaaagaaaaaadcaaaaalocaabaaaahaaaaaa
agijcaaaaeaaaaaaafaaaaaaagiacaaaadaaaaaaamaaaaaafgaobaaaahaaaaaa
dcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaa
amaaaaaafgaobaaaahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaa
aiaaaaaapgipcaaaadaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaajhcaabaaa
agaaaaaajgahbaaaahaaaaaapgapbaaaaeaaaaaaegacbaaaagaaaaaaelaaaaaf
ecaabaaaadaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaadaaaaaadkaabaaa
aaaaaaaadkaabaaaadaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaadaaaaaadiaaaaajhcaabaaaaiaaaaaafgifcaaaadaaaaaaaoaaaaaa
egiccaaaaeaaaaaaagaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaa
afaaaaaaagiacaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaalhcaabaaa
aiaaaaaaegiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaaoaaaaaaegacbaaa
aiaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaa
adaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaajhcaabaaaagaaaaaaegacbaaa
aiaaaaaafgafbaaaaaaaaaaaegacbaaaagaaaaaadgaaaaafccaabaaaajaaaaaa
ckaabaaaagaaaaaadcaaaaakccaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaa
acaaaaaaakaabaiaebaaaaaaahaaaaaadcaaaaakbcaabaaaaaaaaaaackaabaaa
aaaaaaaackaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaadiaaaaahecaabaaa
aaaaaaaackaabaaaaaaaaaaackaabaaaadaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaadiaaaaahhcaabaaaakaaaaaakgakbaaaabaaaaaa
egacbaaaafaaaaaadcaaaaajhcaabaaaakaaaaaajgahbaaaahaaaaaapgapbaaa
acaaaaaaegacbaaaakaaaaaadcaaaaajhcaabaaaakaaaaaaegacbaaaaiaaaaaa
pgapbaaaadaaaaaaegacbaaaakaaaaaadiaaaaahhcaabaaaalaaaaaaagaabaaa
aaaaaaaaegacbaaaafaaaaaadiaaaaahkcaabaaaacaaaaaafgafbaaaacaaaaaa
agaebaaaafaaaaaadcaaaaajdcaabaaaacaaaaaajgafbaaaahaaaaaaagaabaaa
acaaaaaangafbaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaaaiaaaaaa
kgakbaaaacaaaaaaegaabaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaabkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajlcaabaaaaaaaaaaajganbaaaahaaaaaa
agaabaaaaaaaaaaaegaibaaaalaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaa
aiaaaaaakgakbaaaaaaaaaaaegadbaaaaaaaaaaadgaaaaafbcaabaaaajaaaaaa
ckaabaaaaaaaaaaadgaaaaafecaabaaaajaaaaaackaabaaaakaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaajaaaaaaegacbaaaajaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaakgakbaaaaaaaaaaa
egacbaaaajaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaibaaaaaaafaaaaaa
diaaaaajmcaabaaaaaaaaaaafgifcaaaadaaaaaaapaaaaaaagiecaaaaeaaaaaa
agaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaafaaaaaaagiacaaa
adaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaa
aeaaaaaaahaaaaaakgikcaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaal
mcaabaaaaaaaaaaaagiecaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaaapaaaaaa
kgaobaaaaaaaaaaaaaaaaaahmcaabaaaaaaaaaaakgaobaaaaaaaaaaaagaebaaa
acaaaaaadbaaaaalhcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaegacbaiaebaaaaaaafaaaaaadbaaaaalhcaabaaaahaaaaaaegacbaia
ebaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaboaaaaai
hcaabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaahaaaaaadcaaaaap
mcaabaaaadaaaaaaagbebaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaea
aaaaaaeaaceaaaaaaaaaaaaaaaaaaaaaaaaaialpaaaaialpdbaaaaahecaabaaa
abaaaaaaabeaaaaaaaaaaaaadkaabaaaadaaaaaadbaaaaahicaabaaaacaaaaaa
dkaabaaaadaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaadkaabaaaacaaaaaacgaaaaaiaanaaaaahcaabaaaahaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaaclaaaaafhcaabaaaahaaaaaaegacbaaa
ahaaaaaadiaaaaahhcaabaaaahaaaaaajgafbaaaafaaaaaaegacbaaaahaaaaaa
claaaaafkcaabaaaafaaaaaaagaebaaaacaaaaaadiaaaaahkcaabaaaafaaaaaa
kgakbaaaadaaaaaafganbaaaafaaaaaadbaaaaakmcaabaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafganbaaaafaaaaaadbaaaaakdcaabaaa
aiaaaaaangafbaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
boaaaaaimcaabaaaagaaaaaakgaobaiaebaaaaaaagaaaaaaagaebaaaaiaaaaaa
cgaaaaaiaanaaaaadcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaaagaaaaaa
claaaaafdcaabaaaacaaaaaaegaabaaaacaaaaaadcaaaaajdcaabaaaacaaaaaa
egaabaaaacaaaaaacgakbaaaafaaaaaaegaabaaaahaaaaaadiaaaaahkcaabaaa
acaaaaaafgafbaaaacaaaaaaagaebaaaagaaaaaadiaaaaahdcaabaaaagaaaaaa
pgapbaaaadaaaaaaegaabaaaagaaaaaadcaaaaajmcaabaaaagaaaaaaagaebaaa
aaaaaaaaagaabaaaacaaaaaaagaebaaaagaaaaaadcaaaaajmcaabaaaagaaaaaa
agaebaaaakaaaaaafgafbaaaafaaaaaakgaobaaaagaaaaaadcaaaaajdcaabaaa
acaaaaaaegaabaaaaaaaaaaapgapbaaaafaaaaaangafbaaaacaaaaaadcaaaaaj
dcaabaaaacaaaaaaegaabaaaakaaaaaapgapbaaaadaaaaaaegaabaaaacaaaaaa
dcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaa
acaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaa
acaaaaaadcaaaaapmccabaaaadaaaaaaagaebaaaacaaaaaaaceaaaaaaaaaaaaa
aaaaaaaajkjjbjdpjkjjbjdpaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
dcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaogakbaaa
agaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaa
acaaaaaadcaaaaapdccabaaaadaaaaaaegaabaaaacaaaaaaaceaaaaajkjjbjdp
jkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
dbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaackaabaaaafaaaaaadbaaaaah
bcaabaaaacaaaaaackaabaaaafaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaacaaaaaaclaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaaaadaaaaaadbaaaaahbcaabaaaacaaaaaaabeaaaaaaaaaaaaackaabaaa
abaaaaaadbaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaa
dcaaaaajdcaabaaaaaaaaaaaegaabaaaaaaaaaaakgakbaaaabaaaaaaegaabaaa
agaaaaaaboaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaabkaabaaa
acaaaaaacgaaaaaiaanaaaaaecaabaaaabaaaaaackaabaaaabaaaaaackaabaaa
acaaaaaaclaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaackaabaaaahaaaaaadcaaaaaj
dcaabaaaaaaaaaaaegaabaaaakaaaaaakgakbaaaabaaaaaaegaabaaaaaaaaaaa
dcaaaaajdcaabaaaaaaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaa
aaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaa
aaaaaaaadcaaaaapdccabaaaaeaaaaaaegaabaaaaaaaaaaaaceaaaaajkjjbjdp
jkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaaagaabaaa
aaaaaaaaegacbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaacaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaibcaabaaaaaaaaaaa
akaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaaaaaaaaaagijcaaa
aaaaaaaaanaaaaaapgipcaaaaaaaaaaabbaaaaaadccaaaakhccabaaaagaaaaaa
jgahbaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaaeaaaaaaaeaaaaaadiaaaaai
pcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaa
aaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgbkbaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaaacaaaaaa
fgafbaaaaaaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaaacaaaaaa
egiccaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegacbaaaacaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaalaaaaaakgakbaaaaaaaaaaaegacbaaa
acaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaamaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadiaaaaakhcaabaaaaaaaaaaaegadbaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaadgaaaaaficcabaaaaiaaaaaa
dkaabaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaaaaaaaaahdccabaaaaiaaaaaakgakbaaaaaaaaaaamgaabaaa
aaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaa
afaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
agaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaag
eccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 389
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 490
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 481
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 399
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 412
#line 420
#line 434
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 467
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 471
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 475
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 479
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 504
#line 520
#line 576
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 380
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 382
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 355
mediump vec4 GetShereDetailMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 357
    highp vec3 sphereVectNorm = normalize(sphereVect);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 361
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    highp vec4 uv;
    uv.xy = (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale);
    #line 365
    uv.zw = vec2( 0.0, 0.0);
    return xll_tex2Dlod( texSampler, uv);
}
#line 330
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 332
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 336
    return uv;
}
#line 338
mediump vec4 GetSphereMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 340
    highp vec4 uv;
    highp vec3 sphereVectNorm = normalize(sphereVect);
    uv.xy = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    uv.zw = vec2( 0.0, 0.0);
    #line 344
    mediump vec4 tex = xll_tex2Dlod( texSampler, uv);
    return tex;
}
#line 317
highp vec3 hash( in highp vec3 val ) {
    #line 319
    return fract((sin(val) * 123.545));
}
#line 504
highp mat4 rand_rotation( in highp vec3 x, in highp float scale, in highp vec3 trans ) {
    highp float theta = (x.x * 6.28319);
    highp float phi = (x.y * 6.28319);
    #line 508
    highp float z = (x.z * 2.0);
    highp float r = sqrt(z);
    highp float Vx = (sin(phi) * r);
    highp float Vy = (cos(phi) * r);
    #line 512
    highp float Vz = sqrt((2.0 - z));
    highp float st = sin(theta);
    highp float ct = cos(theta);
    highp float Sx = ((Vx * ct) - (Vy * st));
    #line 516
    highp float Sy = ((Vx * st) + (Vy * ct));
    highp mat4 M = mat4( (scale * ((Vx * Sx) - ct)), ((Vx * Sy) - st), (Vx * Vz), 0.0, ((Vy * Sx) + st), (scale * ((Vy * Sy) - ct)), (Vy * Vz), 0.0, (Vz * Sx), (Vz * Sy), (scale * (1.0 - z)), 0.0, trans.x, trans.y, trans.z, 1.0);
    return M;
}
#line 520
v2f vert( in appdata_t v ) {
    v2f o;
    highp vec4 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0));
    #line 524
    highp vec4 planet_pos = (-(_MainRotation * origin));
    highp vec3 hashVect = abs(hash( normalize(floor(planet_pos.xyz))));
    highp vec4 localOrigin;
    localOrigin.xyz = (((2.0 * hashVect) - 1.0) * _MaxTrans);
    #line 528
    localOrigin.w = 1.0;
    highp float localScale = ((hashVect.x * (_MaxScale - 1.0)) + 1.0);
    origin = (_Object2World * localOrigin);
    highp vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 532
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 536
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    o.baseLight = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    planet_pos = (-(_MainRotation * origin));
    highp vec3 detail_pos = (_DetailRotation * planet_pos).xyz;
    #line 540
    o.color = GetSphereMapNoLOD( _MainTex, planet_pos.xyz);
    o.color *= GetShereDetailMapNoLOD( _DetailTex, detail_pos, _DetailScale);
    o.color.w *= GetDistanceFade( distance( origin, vec4( _WorldSpaceCameraPos, 0.0)), _DistFade, _DistFadeVert);
    highp mat4 M = rand_rotation( (vec3( fract(_Rotation), 0.0, 0.0) + hashVect), localScale, localOrigin.xyz);
    #line 544
    highp mat4 mvMatrix = ((unity_MatrixV * _Object2World) * M);
    highp vec3 viewDir = normalize(xll_matrixindex_mf4x4_i (mvMatrix, 2).xyz);
    o.viewDir = abs(viewDir);
    highp vec4 mvCenter = (glstate_matrix_modelview0 * localOrigin);
    #line 548
    o.pos = (glstate_matrix_projection * (mvCenter + vec4( (v.vertex.xyz * localScale), v.vertex.w)));
    o.camPos = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * localOrigin).xyz));
    highp vec2 texcoodOffsetxy = ((2.0 * v.texcoord) - 1.0);
    highp vec4 texcoordOffset = vec4( texcoodOffsetxy.x, texcoodOffsetxy.y, 0.0, v.vertex.w);
    #line 552
    highp vec4 ZYv = texcoordOffset.zyxw;
    highp vec4 XZv = texcoordOffset.xzyw;
    highp vec4 XYv = texcoordOffset.xyzw;
    ZYv.z *= sign((-viewDir.x));
    #line 556
    XZv.x *= sign((-viewDir.y));
    XYv.x *= sign(viewDir.z);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.z)) * viewDir.z);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.x)) * viewDir.x);
    #line 560
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.x)) * viewDir.x);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.y)) * viewDir.y);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.z)) * viewDir.z);
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.y)) * viewDir.y);
    #line 564
    highp vec2 ZY = ((mvMatrix * ZYv).xy - mvCenter.xy);
    highp vec2 XZ = ((mvMatrix * XZv).xy - mvCenter.xy);
    highp vec2 XY = ((mvMatrix * XYv).xy - mvCenter.xy);
    o.texcoordZY = (vec2( 0.5, 0.5) + (0.6 * ZY));
    #line 568
    o.texcoordXZ = (vec2( 0.5, 0.5) + (0.6 * XZ));
    o.texcoordXY = (vec2( 0.5, 0.5) + (0.6 * XY));
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    #line 572
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out lowp vec4 xlv_COLOR;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.texcoord = vec2(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_COLOR = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD1 = vec2(xl_retval.texcoordZY);
    xlv_TEXCOORD2 = vec2(xl_retval.texcoordXZ);
    xlv_TEXCOORD3 = vec2(xl_retval.texcoordXY);
    xlv_TEXCOORD4 = vec3(xl_retval.camPos);
    xlv_TEXCOORD5 = vec3(xl_retval.baseLight);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 389
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 490
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec3 _LightCoord;
    highp vec4 projPos;
};
#line 481
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 399
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 412
#line 420
#line 434
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 467
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 471
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 475
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 479
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 504
#line 520
#line 576
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 576
lowp vec4 frag( in v2f IN ) {
    mediump float xval = IN.viewDir.x;
    mediump vec4 xtex = texture( _LeftTex, IN.texcoordZY);
    #line 580
    mediump float yval = IN.viewDir.y;
    mediump vec4 ytex = texture( _TopTex, IN.texcoordXZ);
    mediump float zval = IN.viewDir.z;
    mediump vec4 ztex = texture( _FrontTex, IN.texcoordXY);
    #line 584
    mediump vec4 tex = mix( mix( xtex, ytex, vec4( yval)), ztex, vec4( zval));
    mediump vec4 prev = (((0.94 * _Color) * IN.color) * tex);
    mediump vec4 color;
    color.xyz = (prev.xyz * IN.baseLight);
    #line 588
    color.w = prev.w;
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 592
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in lowp vec4 xlv_COLOR;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_COLOR);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD0);
    xlt_IN.texcoordZY = vec2(xlv_TEXCOORD1);
    xlt_IN.texcoordXZ = vec2(xlv_TEXCOORD2);
    xlt_IN.texcoordXY = vec2(xlv_TEXCOORD3);
    xlt_IN.camPos = vec3(xlv_TEXCOORD4);
    xlt_IN.baseLight = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform vec3 _MaxTrans;
uniform float _MaxScale;
uniform float _Rotation;
uniform float _MinLight;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 unity_MatrixV;


uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 XYv_1;
  vec4 XZv_2;
  vec4 ZYv_3;
  vec3 detail_pos_4;
  float localScale_5;
  vec4 localOrigin_6;
  vec4 tmpvar_7;
  vec3 tmpvar_8;
  vec4 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_6.xyz = (((2.0 * tmpvar_10) - 1.0) * _MaxTrans);
  localOrigin_6.w = 1.0;
  localScale_5 = ((tmpvar_10.x * (_MaxScale - 1.0)) + 1.0);
  vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * localOrigin_6);
  vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = gl_Normal;
  tmpvar_8 = clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (normalize((_Object2World * tmpvar_12).xyz), normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0);
  vec4 tmpvar_13;
  tmpvar_13 = -((_MainRotation * tmpvar_11));
  detail_pos_4 = (_DetailRotation * tmpvar_13).xyz;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13.xyz);
  vec2 uv_15;
  float r_16;
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_14.x)))) {
    float y_over_x_17;
    y_over_x_17 = (tmpvar_14.x / tmpvar_14.z);
    float s_18;
    float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_14.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(tmpvar_14.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_16));
  uv_15.y = (0.31831 * (1.5708 - (sign(tmpvar_14.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_14.y))) * (1.5708 + (abs(tmpvar_14.y) * (-0.214602 + (abs(tmpvar_14.y) * (0.0865667 + (abs(tmpvar_14.y) * -0.0310296)))))))))));
  vec4 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(normalize(detail_pos_4));
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  uv_20.xy = (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale);
  uv_20.zw = vec2(0.0, 0.0);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DLod (_MainTex, uv_15, 0.0) * texture2DLod (_DetailTex, uv_20.xy, 0.0));
  tmpvar_7.xyz = tmpvar_24.xyz;
  vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = _WorldSpaceCameraPos;
  float tmpvar_26;
  vec4 p_27;
  p_27 = (tmpvar_11 - tmpvar_25);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  tmpvar_7.w = (tmpvar_24.w * (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0)));
  vec3 tmpvar_28;
  tmpvar_28.yz = vec2(0.0, 0.0);
  tmpvar_28.x = fract(_Rotation);
  vec3 x_29;
  x_29 = (tmpvar_28 + tmpvar_10);
  vec3 trans_30;
  trans_30 = localOrigin_6.xyz;
  float tmpvar_31;
  tmpvar_31 = (x_29.x * 6.28319);
  float tmpvar_32;
  tmpvar_32 = (x_29.y * 6.28319);
  float tmpvar_33;
  tmpvar_33 = (x_29.z * 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (sin(tmpvar_32) * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (cos(tmpvar_32) * tmpvar_34);
  float tmpvar_37;
  tmpvar_37 = sqrt((2.0 - tmpvar_33));
  float tmpvar_38;
  tmpvar_38 = sin(tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = cos(tmpvar_31);
  float tmpvar_40;
  tmpvar_40 = ((tmpvar_35 * tmpvar_39) - (tmpvar_36 * tmpvar_38));
  float tmpvar_41;
  tmpvar_41 = ((tmpvar_35 * tmpvar_38) + (tmpvar_36 * tmpvar_39));
  mat4 tmpvar_42;
  tmpvar_42[0].x = (localScale_5 * ((tmpvar_35 * tmpvar_40) - tmpvar_39));
  tmpvar_42[0].y = ((tmpvar_35 * tmpvar_41) - tmpvar_38);
  tmpvar_42[0].z = (tmpvar_35 * tmpvar_37);
  tmpvar_42[0].w = 0.0;
  tmpvar_42[1].x = ((tmpvar_36 * tmpvar_40) + tmpvar_38);
  tmpvar_42[1].y = (localScale_5 * ((tmpvar_36 * tmpvar_41) - tmpvar_39));
  tmpvar_42[1].z = (tmpvar_36 * tmpvar_37);
  tmpvar_42[1].w = 0.0;
  tmpvar_42[2].x = (tmpvar_37 * tmpvar_40);
  tmpvar_42[2].y = (tmpvar_37 * tmpvar_41);
  tmpvar_42[2].z = (localScale_5 * (1.0 - tmpvar_33));
  tmpvar_42[2].w = 0.0;
  tmpvar_42[3].x = trans_30.x;
  tmpvar_42[3].y = trans_30.y;
  tmpvar_42[3].z = trans_30.z;
  tmpvar_42[3].w = 1.0;
  mat4 tmpvar_43;
  tmpvar_43 = (((unity_MatrixV * _Object2World) * tmpvar_42));
  vec4 v_44;
  v_44.x = tmpvar_43[0].z;
  v_44.y = tmpvar_43[1].z;
  v_44.z = tmpvar_43[2].z;
  v_44.w = tmpvar_43[3].z;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(v_44.xyz);
  vec4 tmpvar_46;
  tmpvar_46 = (gl_ModelViewMatrix * localOrigin_6);
  vec4 tmpvar_47;
  tmpvar_47.xyz = (gl_Vertex.xyz * localScale_5);
  tmpvar_47.w = gl_Vertex.w;
  vec4 tmpvar_48;
  tmpvar_48 = (gl_ProjectionMatrix * (tmpvar_46 + tmpvar_47));
  vec2 tmpvar_49;
  tmpvar_49 = ((2.0 * gl_MultiTexCoord0.xy) - 1.0);
  vec4 tmpvar_50;
  tmpvar_50.z = 0.0;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = tmpvar_49.y;
  tmpvar_50.w = gl_Vertex.w;
  ZYv_3.xyw = tmpvar_50.zyw;
  XZv_2.yzw = tmpvar_50.zyw;
  XYv_1.yzw = tmpvar_50.yzw;
  ZYv_3.z = (tmpvar_49.x * sign(-(tmpvar_45.x)));
  XZv_2.x = (tmpvar_49.x * sign(-(tmpvar_45.y)));
  XYv_1.x = (tmpvar_49.x * sign(tmpvar_45.z));
  ZYv_3.x = ((sign(-(tmpvar_45.x)) * sign(ZYv_3.z)) * tmpvar_45.z);
  XZv_2.y = ((sign(-(tmpvar_45.y)) * sign(XZv_2.x)) * tmpvar_45.x);
  XYv_1.z = ((sign(-(tmpvar_45.z)) * sign(XYv_1.x)) * tmpvar_45.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_45.x)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_45.y)) * sign(tmpvar_49.y)) * tmpvar_45.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_45.z)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  vec4 o_51;
  vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_48 * 0.5);
  vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_48.zw;
  tmpvar_9.xyw = o_51.xyw;
  tmpvar_9.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_48;
  xlv_COLOR = tmpvar_7;
  xlv_TEXCOORD0 = abs(tmpvar_45);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * ZYv_3).xy - tmpvar_46.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XZv_2).xy - tmpvar_46.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XYv_1).xy - tmpvar_46.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_6).xyz));
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform vec4 _ZBufferParams;
void main ()
{
  vec4 color_1;
  vec4 tmpvar_2;
  tmpvar_2 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (texture2D (_LeftTex, xlv_TEXCOORD1), texture2D (_TopTex, xlv_TEXCOORD2), xlv_TEXCOORD0.yyyy), texture2D (_FrontTex, xlv_TEXCOORD3), xlv_TEXCOORD0.zzzz));
  color_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD5);
  color_1.w = (tmpvar_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 28 [glstate_lightmodel_ambient]
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_projection]
Vector 29 [_WorldSpaceCameraPos]
Vector 30 [_ProjectionParams]
Vector 31 [_ScreenParams]
Vector 32 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [unity_MatrixV]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
Vector 33 [_LightColor0]
Float 34 [_DetailScale]
Float 35 [_DistFade]
Float 36 [_DistFadeVert]
Float 37 [_MinLight]
Float 38 [_Rotation]
Float 39 [_MaxScale]
Vector 40 [_MaxTrans]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"vs_3_0
; 353 ALU, 4 TEX
dcl_position o0
dcl_color0 o1
dcl_texcoord0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord8 o9
def c41, 0.15915491, 0.50000000, 6.28318501, -3.14159298
def c42, 123.54530334, 2.00000000, -1.00000000, 1.00000000
def c43, 0.00000000, -0.01872930, 0.07426100, -0.21211439
def c44, 1.57072902, 3.14159298, 0.31830987, -0.12123910
def c45, -0.01348047, 0.05747731, 0.19563590, -0.33299461
def c46, 0.99999559, 1.57079601, 0.15915494, 0.50000000
def c47, 6.28318548, 0.00000000, 1.00000000, -0.01000214
def c48, 0.60000002, 0.50000000, 4.03944778, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_2d s0
dcl_2d s1
mad r10.xy, v2, c42.y, c42.z
mov r1.w, c11
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
dp4 r0.z, r1, c18
dp4 r0.x, r1, c16
dp4 r0.y, r1, c17
frc r1.xyz, -r0
add r0.xyz, -r0, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mad r0.x, r1, c41, c41.y
frc r0.x, r0
mad r1.x, r0, c41.z, c41.w
sincos r0.xy, r1.x
mad r0.x, r1.z, c41, c41.y
mov r1.x, r0.y
frc r0.y, r0.x
mad r0.x, r1.y, c41, c41.y
mad r1.y, r0, c41.z, c41.w
frc r1.x, r0
sincos r0.xy, r1.y
mad r0.x, r1, c41.z, c41.w
sincos r1.xy, r0.x
mov r1.z, r0.y
mul r0.xyz, r1, c42.x
frc r0.xyz, r0
abs r6.xyz, r0
mad r0.xyz, r6, c42.y, c42.z
mul r0.xyz, r0, c40
mov r0.w, c42
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
dp4 r2.w, r0, c11
dp4 r1.z, r2, c18
dp4 r1.x, r2, c16
dp4 r1.y, r2, c17
dp4 r1.w, r2, c19
add r7.xyz, -r2, c29
dp3 r2.x, r7, r7
rsq r8.w, r2.x
dp4 r3.z, -r1, c22
dp4 r3.x, -r1, c20
dp4 r3.y, -r1, c21
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mul r3.xyz, r1.w, r3
abs r3.xyz, r3
sge r1.w, r3.z, r3.x
add r4.xyz, r3.zxyw, -r3
mad r4.xyz, r1.w, r4, r3
sge r2.w, r4.x, r3.y
add r4.xyz, r4, -r3.yxzw
mad r3.xyz, r2.w, r4, r3.yxzw
dp3 r1.w, -r1, -r1
rsq r1.w, r1.w
mul r1.xyz, r1.w, -r1
abs r2.w, r1.x
abs r1.w, r1.z
mul r3.zw, r3.xyzy, c41.y
max r3.y, r1.w, r2.w
abs r4.y, r3.x
min r3.x, r1.w, r2.w
slt r1.w, r1, r2
rcp r3.y, r3.y
mul r4.x, r3, r3.y
rcp r3.x, r4.y
mul r3.xy, r3.zwzw, r3.x
mul r4.y, r4.x, r4.x
mad r3.z, r4.y, c45.x, c45.y
mad r3.z, r3, r4.y, c44.w
mad r2.w, r3.z, r4.y, c45.z
mad r2.w, r2, r4.y, c45
mad r2.w, r2, r4.y, c46.x
mul r2.w, r2, r4.x
max r1.w, -r1, r1
slt r1.w, c43.x, r1
add r3.z, -r1.w, c42.w
mul r3.z, r2.w, r3
add r2.w, -r2, c46.y
mad r1.w, r1, r2, r3.z
slt r1.z, r1, c43.x
max r1.z, -r1, r1
slt r1.z, c43.x, r1
slt r1.x, r1, c43
max r1.x, -r1, r1
add r2.w, -r1, c44.y
add r3.z, -r1, c42.w
mul r1.w, r1, r3.z
slt r1.x, c43, r1
mad r1.z, r1, r2.w, r1.w
add r3.z, -r1.x, c42.w
mul r1.w, r1.z, r3.z
mad r1.x, r1, -r1.z, r1.w
abs r1.z, r1.y
add r2.w, -r1.z, c42
mad r1.w, r1.z, c43.y, c43.z
mad r1.w, r1, r1.z, c43
rsq r2.w, r2.w
rcp r2.w, r2.w
mad r1.z, r1.w, r1, c44.x
mul r1.z, r1, r2.w
slt r1.y, r1, c43.x
mul r1.w, r1.y, r1.z
mad r1.z, -r1.w, c42.y, r1
mad r1.y, r1, c44, r1.z
mul r3.xy, r3, c34.x
mov r3.z, c43.x
texldl r3, r3.xyzz, s1
mad r1.x, r1, c46.z, c46.w
mov r4.yz, c43.x
frc r4.x, c38
add r4.xyz, r6, r4
mul r1.w, r4.x, c47.x
mad r1.z, r1.w, c41.x, c41.y
frc r2.w, r1.z
mad r4.x, r2.w, c41.z, c41.w
sincos r5.xy, r4.x
mul r2.w, r4.y, c47.x
mad r2.w, r2, c41.x, c41.y
frc r4.x, r2.w
mul r2.w, r4.z, c42.y
mad r5.z, r4.x, c41, c41.w
sincos r4.xy, r5.z
rsq r5.w, r2.w
rcp r4.z, r5.w
mul r4.w, r4.x, r4.z
mul r5.z, r4.y, r4
mul r4.x, r4.w, r5
mad r4.y, r5.z, r5, r4.x
mov r5.w, c14.x
mul r1.y, r1, c44.z
mov r1.z, c43.x
texldl r1, r1.xyzz, s0
mul r3, r1, r3
add r1.z, -r2.w, c42.y
mov o1.xyz, r3
mov r1.y, c39.x
add r1.y, c42.z, r1
mad r1.x, r5.z, r4.y, -r5.y
mad r7.w, r6.x, r1.y, c42
mad r1.w, r4, r4.y, -r5.x
mul r1.y, r7.w, r1.w
rsq r1.z, r1.z
rcp r1.w, r1.z
mul r1.z, r1.w, r4.y
mov r4.x, c14.y
mul r4.xyz, c9, r4.x
mad r4.xyz, c8, r5.w, r4
mov r5.w, c14.z
mad r4.xyz, c10, r5.w, r4
mov r5.w, c14
mad r6.xyz, c11, r5.w, r4
mul r5.w, r4, r5.y
mad r2.z, r5, r5.x, -r5.w
mad r2.y, r5.z, r2.z, -r5.x
mul r2.x, r7.w, r2.y
mad r2.y, r4.w, r2.z, r5
mul r5.x, r5.z, r1.w
add r2.w, -r2, c42
mul r5.y, r1.w, r4.w
mul r2.z, r1.w, r2
mul r4.xyz, r6.y, r1
rcp r5.w, r8.w
mul r5.z, r7.w, r2.w
mad r4.xyz, r6.x, r2, r4
mad r4.xyz, r6.z, r5, r4
mul r1.w, -r5, c36.x
add_sat r2.w, r1, c42
mul_sat r1.w, r5, c35.x
mul r1.w, r1, r2
dp3 r4.w, r4, r4
rsq r2.w, r4.w
mul r8.xyz, r2.w, r4
mul o1.w, r3, r1
slt r2.w, -r8.x, r8.x
slt r1.w, r8.x, -r8.x
sub r1.w, r1, r2
slt r3.x, r10.y, -r10.y
slt r2.w, -r10.y, r10.y
sub r10.z, r2.w, r3.x
mul r2.w, r10.x, r1
mul r3.z, r1.w, r10
slt r3.y, r2.w, -r2.w
slt r3.x, -r2.w, r2.w
sub r3.x, r3, r3.y
mov r9.z, r2.w
mov r2.w, r0.x
mul r1.w, r3.x, r1
mul r3.y, r8, r3.z
mad r9.x, r8.z, r1.w, r3.y
mov r1.w, c12.y
mul r3, c9, r1.w
mov r1.w, c12.x
mad r3, c8, r1.w, r3
mov r1.w, c12.z
mad r3, c10, r1.w, r3
mov r1.w, c12
mad r6, c11, r1.w, r3
mov r1.w, r0.y
mul r4, r1, r6.y
mov r3.x, c13.y
mov r5.w, c13.x
mul r3, c9, r3.x
mad r3, c8, r5.w, r3
mov r5.w, c13.z
mad r3, c10, r5.w, r3
mov r5.w, c13
mad r3, c11, r5.w, r3
mul r1, r3.y, r1
mov r5.w, r0.z
mad r1, r3.x, r2, r1
mad r1, r3.z, r5, r1
mad r1, r3.w, c47.yyyz, r1
mad r4, r2, r6.x, r4
mad r4, r5, r6.z, r4
mad r2, r6.w, c47.yyyz, r4
dp4 r5.y, r0, c1
dp4 r5.x, r0, c0
mov r4.w, v0
mov r4.y, r10
mov r9.yw, r4
dp4 r3.y, r1, r9
dp4 r3.x, r9, r2
slt r3.w, -r8.y, r8.y
slt r3.z, r8.y, -r8.y
sub r4.x, r3.z, r3.w
add r3.zw, -r5.xyxy, r3.xyxy
mul r3.x, r10, r4
mad o3.xy, r3.zwzw, c48.x, c48.y
slt r3.z, r3.x, -r3.x
slt r3.y, -r3.x, r3.x
sub r3.y, r3, r3.z
mul r3.z, r10, r4.x
mul r3.y, r3, r4.x
mul r4.x, r8.z, r3.z
mad r3.y, r8.x, r3, r4.x
mov r3.zw, r4.xyyw
dp4 r5.w, r1, r3
dp4 r5.z, r2, r3
add r3.xy, -r5, r5.zwzw
slt r3.w, -r8.z, r8.z
slt r3.z, r8, -r8
sub r4.x, r3.w, r3.z
sub r3.z, r3, r3.w
mul r4.x, r10, r4
mul r5.z, r10, r3
dp4 r5.w, r0, c3
slt r4.z, r4.x, -r4.x
slt r3.w, -r4.x, r4.x
sub r3.w, r3, r4.z
mul r4.z, r8.y, r5
dp4 r5.z, r0, c2
mul r3.z, r3, r3.w
mad r4.z, r8.x, r3, r4
dp4 r1.y, r1, r4
dp4 r1.x, r2, r4
mad o4.xy, r3, c48.x, c48.y
add r3.xy, -r5, r1
mov r0.w, v0
mul r0.xyz, v0, r7.w
add r0, r5, r0
dp4 r2.w, r0, c7
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
mov r1.w, r2
dp4 r1.z, r0, c6
mul r2.xyz, r1.xyww, c41.y
mov o0, r1
mul r2.y, r2, c30.x
mov r1.xyz, v1
mov r1.w, c43.x
dp4 r0.z, r1, c10
dp4 r0.y, r1, c9
dp4 r0.x, r1, c8
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c32, c32
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c32
dp3_sat r0.x, r0, r1
add r0.x, r0, c47.w
mul r0.y, r0.x, c33.w
dp4 r1.x, v0, c2
mul_sat r0.w, r0.y, c48.z
mov r0.x, c37
add r0.xyz, c33, r0.x
mad_sat o7.xyz, r0, r0.w, c28
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mad o5.xy, r3, c48.x, c48.y
mad o9.xy, r2.z, c31.zwzw, r2
abs o2.xyz, r8
mov o9.w, r2
mul o6.xyz, r8.w, r7
dp4 o8.y, r0, c25
dp4 o8.x, r0, c24
mov o9.z, -r1.x
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
ConstBuffer "$Globals" 320 // 316 used size, 16 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
Vector 208 [_LightColor0] 4
Float 240 [_DetailScale]
Float 272 [_DistFade]
Float 276 [_DistFadeVert]
Float 284 [_MinLight]
Float 292 [_Rotation]
Float 296 [_MaxScale]
Vector 304 [_MaxTrans] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityPerFrame" 208 // 144 used size, 4 vars
Matrix 0 [glstate_matrix_projection] 4
Vector 64 [glstate_lightmodel_ambient] 4
Matrix 80 [unity_MatrixV] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityPerFrame" 4
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 253 instructions, 12 temp regs, 0 temp arrays:
// ALU 216 float, 8 int, 6 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedplbeejkdflnpfkddljnkpmbgbbogjlidabaaaaaapicdaaaaadaaaaaa
cmaaaaaanmaaaaaapiabaaaaejfdeheokiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaijaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaipaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaajgaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaajoaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaafaepfdejfeejepeoaaedepem
epfcaaeoepfcenebemaafeebeoehefeofeaafeeffiedepepfceeaaklepfdeheo
beabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaakabaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaakabaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaaakabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
amadaaaaakabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaaakabaaaa
agaaaaaaaaaaaaaaadaaaaaaaeaaaaaaamadaaaaakabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaakabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaaakabaaaaaiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaaedepemepfcaafeeffiedepepfceeaaklfdeieefcpicbaaaa
eaaaabaahoaiaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaaajaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
dccabaaaadaaaaaagfaaaaadmccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaa
gfaaaaadmccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaa
agaaaaaagfaaaaadpccabaaaahaaaaaagiaaaaacamaaaaaadiaaaaajhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaacaaaaaafgifcaaaadaaaaaaapaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaadaaaaaaapaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgikcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaaaaaaaaaaeaaaaaapgipcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaa
ebaaaaaghcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaenaaaaaghcaabaaaaaaaaaaaaanaaaaaegacbaaaaaaaaaaadiaaaaak
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaadcbhphecdcbhphecdcbhphec
aaaaaaaabkaaaaafhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaa
aaaaaaaackiacaaaaaaaaaaabcaaaaaaabeaaaaaaaaaialpdcaaaaajicaabaaa
aaaaaaaaakaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaficaabaaa
abaaaaaadkbabaaaaaaaaaaadcaaaaaphcaabaaaacaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaa
aaaaaaaabdaaaaaadiaaaaaipcaabaaaadaaaaaafgafbaaaacaaaaaaegiocaaa
adaaaaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaadaaaaaaaeaaaaaa
agaabaaaacaaaaaaegaobaaaadaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaa
adaaaaaaagaaaaaakgakbaaaacaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegiocaaaadaaaaaaahaaaaaaaaaaaaahpcaabaaa
abaaaaaaegaobaaaabaaaaaaegaobaaaadaaaaaadiaaaaaipcaabaaaaeaaaaaa
fgafbaaaabaaaaaaegiocaaaaeaaaaaaabaaaaaadcaaaaakpcaabaaaaeaaaaaa
egiocaaaaeaaaaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaeaaaaaadcaaaaak
pcaabaaaaeaaaaaaegiocaaaaeaaaaaaacaaaaaakgakbaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaeaaaaaaadaaaaaapgapbaaa
abaaaaaaegaobaaaaeaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaaeaaaaaafgafbaaaacaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaamaaaaaaagaabaaaacaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgakbaaaacaaaaaaegaobaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaaa
aeaaaaaaegiocaaaadaaaaaaapaaaaaadiaaaaaipcaabaaaafaaaaaafgafbaaa
aeaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaa
aaaaaaaaabaaaaaaagaabaaaaeaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaa
afaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaeaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaeaaaaaa
egaobaaaafaaaaaadiaaaaajhcaabaaaagaaaaaafgafbaiaebaaaaaaafaaaaaa
bgigcaaaaaaaaaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaa
afaaaaaaagaabaiaebaaaaaaafaaaaaaegacbaaaagaaaaaadcaaaaalhcaabaaa
agaaaaaabgigcaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaafaaaaaaegacbaaa
agaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaaiaaaaaapgapbaia
ebaaaaaaafaaaaaaegacbaaaagaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaa
agaaaaaaegacbaaaagaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahhcaabaaaagaaaaaakgakbaaaabaaaaaaegacbaaaagaaaaaadgaaaaag
ecaabaaaahaaaaaackaabaiambaaaaaaagaaaaaabnaaaaajecaabaaaabaaaaaa
ckaabaiaibaaaaaaagaaaaaabkaabaiaibaaaaaaagaaaaaaabaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaaaiaaaaaa
fgaibaiambaaaaaaagaaaaaakgabbaiaibaaaaaaagaaaaaadiaaaaahlcaabaaa
ahaaaaaakgakbaaaabaaaaaajganbaaaaiaaaaaadcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaaakaabaaaaiaaaaaabkaabaiaibaaaaaaagaaaaaabnaaaaai
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaihcaabaaa
aiaaaaaabgagbaiaibaaaaaaagaaaaaaegacbaaaahaaaaaadgaaaaagfcaabaaa
ahaaaaaafgaebaiambaaaaaaagaaaaaaaaaaaaahhcaabaaaahaaaaaacgalbaaa
ahaaaaaaegacbaaaaiaaaaaadcaaaaakhcaabaaaagaaaaaakgakbaaaabaaaaaa
egacbaaaahaaaaaaegacbaiaibaaaaaaagaaaaaadiaaaaakmcaabaaaadaaaaaa
kgagbaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaah
mcaabaaaadaaaaaakgaobaaaadaaaaaaagaabaaaagaaaaaadiaaaaaimcaabaaa
adaaaaaakgaobaaaadaaaaaaagiacaaaaaaaaaaaapaaaaaaeiaaaaalpcaabaaa
agaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaajecaabaaaabaaaaaaegacbaiaebaaaaaaafaaaaaaegacbaia
ebaaaaaaafaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaai
hcaabaaaafaaaaaakgakbaaaabaaaaaaigabbaiaebaaaaaaafaaaaaadeaaaaaj
ecaabaaaabaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaa
aoaaaaakecaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
ckaabaaaabaaaaaaddaaaaajicaabaaaacaaaaaabkaabaiaibaaaaaaafaaaaaa
akaabaiaibaaaaaaafaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaackaabaaaabaaaaaackaabaaa
abaaaaaadcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaackaabaaa
adaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaa
ckaabaaaadaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaacaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaaadaaaaaa
ckaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaaadaaaaaackaabaaa
adaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaadaaaaaa
bkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaabaaaaahecaabaaa
adaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadbaaaaaimcaabaaa
adaaaaaafgajbaaaafaaaaaafgajbaiaebaaaaaaafaaaaaaabaaaaahicaabaaa
acaaaaaackaabaaaadaaaaaaabeaaaaanlapejmaaaaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaacaaaaaaddaaaaahicaabaaaacaaaaaabkaabaaa
afaaaaaaakaabaaaafaaaaaadbaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
dkaabaiaebaaaaaaacaaaaaadeaaaaahecaabaaaadaaaaaabkaabaaaafaaaaaa
akaabaaaafaaaaaabnaaaaaiecaabaaaadaaaaaackaabaaaadaaaaaackaabaia
ebaaaaaaadaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaackaabaaa
adaaaaaadhaaaaakecaabaaaabaaaaaadkaabaaaacaaaaaackaabaiaebaaaaaa
abaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaafaaaaaackaabaaaabaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakecaabaaaabaaaaaackaabaia
ibaaaaaaafaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaaiedefjlo
dcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaa
abeaaaaakeanmjdpaaaaaaaiicaabaaaacaaaaaackaabaiambaaaaaaafaaaaaa
abeaaaaaaaaaiadpelaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaah
ecaabaaaadaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaa
adaaaaaackaabaaaadaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
ecaabaaaadaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaah
ccaabaaaafaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoeiaaaaalpcaabaaa
afaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaabeaaaaa
aaaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaagaaaaaaegaobaaaafaaaaaa
aaaaaaajhcaabaaaagaaaaaaegacbaaaaeaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhcaabaaaaeaaaaaaegacbaiaebaaaaaaaeaaaaaaegiccaaa
abaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaagaaaaaaegacbaaa
agaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaiicaabaaa
acaaaaaackaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaadccaaaalecaabaaa
abaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaackaabaaaabaaaaaaabeaaaaa
aaaaiadpdgcaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahiccabaaaabaaaaaa
ckaabaaaabaaaaaadkaabaaaafaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
afaaaaaabkaaaaagbcaabaaaafaaaaaabkiacaaaaaaaaaaabcaaaaaadgaaaaai
gcaabaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaafaaaaaaaaaaaaahecaabaaa
abaaaaaackaabaaaaaaaaaaackaabaaaaaaaaaaaelaaaaafecaabaaaabaaaaaa
ckaabaaaabaaaaaadiaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaa
nlapmjeanlapmjeaaaaaaaaaaaaaaaaadcaaaabamcaabaaaadaaaaaakgakbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaeaaaaaiadpenaaaaahbcaabaaaafaaaaaabcaabaaa
agaaaaaabkaabaaaaaaaaaaaenaaaaahbcaabaaaaaaaaaaabcaabaaaahaaaaaa
akaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaa
agaaaaaadiaaaaahecaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaa
diaaaaahecaabaaaabaaaaaaakaabaaaahaaaaaabkaabaaaaaaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaaaaaaaaaakaabaaaaaaaaaaackaabaaaabaaaaaa
dcaaaaakicaabaaaacaaaaaabkaabaaaaaaaaaaackaabaaaabaaaaaaakaabaia
ebaaaaaaahaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaa
acaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaadaaaaaaanaaaaaaegiccaaa
aeaaaaaaagaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaafaaaaaa
agiacaaaadaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaa
egiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaanaaaaaaegacbaaaafaaaaaa
dcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaa
anaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaagaaaaaapgapbaaaacaaaaaa
egacbaaaafaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaadcaaaaakicaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaaahaaaaaa
dkaabaiaebaaaaaaacaaaaaadcaaaaajicaabaaaaeaaaaaabkaabaaaaaaaaaaa
dkaabaaaacaaaaaaakaabaaaaaaaaaaadiaaaaajocaabaaaahaaaaaafgifcaaa
adaaaaaaamaaaaaaagijcaaaaeaaaaaaagaaaaaadcaaaaalocaabaaaahaaaaaa
agijcaaaaeaaaaaaafaaaaaaagiacaaaadaaaaaaamaaaaaafgaobaaaahaaaaaa
dcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaa
amaaaaaafgaobaaaahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaa
aiaaaaaapgipcaaaadaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaajhcaabaaa
agaaaaaajgahbaaaahaaaaaapgapbaaaaeaaaaaaegacbaaaagaaaaaaelaaaaaf
ecaabaaaadaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaadaaaaaadkaabaaa
aaaaaaaadkaabaaaadaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaadaaaaaadiaaaaajhcaabaaaaiaaaaaafgifcaaaadaaaaaaaoaaaaaa
egiccaaaaeaaaaaaagaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaa
afaaaaaaagiacaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaalhcaabaaa
aiaaaaaaegiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaaoaaaaaaegacbaaa
aiaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaa
adaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaajhcaabaaaagaaaaaaegacbaaa
aiaaaaaafgafbaaaaaaaaaaaegacbaaaagaaaaaadgaaaaafccaabaaaajaaaaaa
ckaabaaaagaaaaaadcaaaaakccaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaa
acaaaaaaakaabaiaebaaaaaaahaaaaaadcaaaaakbcaabaaaaaaaaaaackaabaaa
aaaaaaaackaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaadiaaaaahecaabaaa
aaaaaaaackaabaaaaaaaaaaackaabaaaadaaaaaadiaaaaahecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaadiaaaaahhcaabaaaakaaaaaakgakbaaaabaaaaaa
egacbaaaafaaaaaadcaaaaajhcaabaaaakaaaaaajgahbaaaahaaaaaapgapbaaa
acaaaaaaegacbaaaakaaaaaadcaaaaajhcaabaaaakaaaaaaegacbaaaaiaaaaaa
pgapbaaaadaaaaaaegacbaaaakaaaaaadiaaaaahhcaabaaaalaaaaaaagaabaaa
aaaaaaaaegacbaaaafaaaaaadiaaaaahkcaabaaaacaaaaaafgafbaaaacaaaaaa
agaebaaaafaaaaaadcaaaaajdcaabaaaacaaaaaajgafbaaaahaaaaaaagaabaaa
acaaaaaangafbaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaaaiaaaaaa
kgakbaaaacaaaaaaegaabaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaabkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajlcaabaaaaaaaaaaajganbaaaahaaaaaa
agaabaaaaaaaaaaaegaibaaaalaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaa
aiaaaaaakgakbaaaaaaaaaaaegadbaaaaaaaaaaadgaaaaafbcaabaaaajaaaaaa
ckaabaaaaaaaaaaadgaaaaafecaabaaaajaaaaaackaabaaaakaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaajaaaaaaegacbaaaajaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaakgakbaaaaaaaaaaa
egacbaaaajaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaibaaaaaaafaaaaaa
diaaaaajmcaabaaaaaaaaaaafgifcaaaadaaaaaaapaaaaaaagiecaaaaeaaaaaa
agaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaafaaaaaaagiacaaa
adaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaa
aeaaaaaaahaaaaaakgikcaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaal
mcaabaaaaaaaaaaaagiecaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaaapaaaaaa
kgaobaaaaaaaaaaaaaaaaaahmcaabaaaaaaaaaaakgaobaaaaaaaaaaaagaebaaa
acaaaaaadbaaaaalhcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaegacbaiaebaaaaaaafaaaaaadbaaaaalhcaabaaaahaaaaaaegacbaia
ebaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaboaaaaai
hcaabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaahaaaaaadcaaaaap
mcaabaaaadaaaaaaagbebaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaea
aaaaaaeaaceaaaaaaaaaaaaaaaaaaaaaaaaaialpaaaaialpdbaaaaahecaabaaa
abaaaaaaabeaaaaaaaaaaaaadkaabaaaadaaaaaadbaaaaahicaabaaaacaaaaaa
dkaabaaaadaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaaabaaaaaackaabaia
ebaaaaaaabaaaaaadkaabaaaacaaaaaacgaaaaaiaanaaaaahcaabaaaahaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaaclaaaaafhcaabaaaahaaaaaaegacbaaa
ahaaaaaadiaaaaahhcaabaaaahaaaaaajgafbaaaafaaaaaaegacbaaaahaaaaaa
claaaaafkcaabaaaafaaaaaaagaebaaaacaaaaaadiaaaaahkcaabaaaafaaaaaa
kgakbaaaadaaaaaafganbaaaafaaaaaadbaaaaakmcaabaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafganbaaaafaaaaaadbaaaaakdcaabaaa
aiaaaaaangafbaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
boaaaaaimcaabaaaagaaaaaakgaobaiaebaaaaaaagaaaaaaagaebaaaaiaaaaaa
cgaaaaaiaanaaaaadcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaaagaaaaaa
claaaaafdcaabaaaacaaaaaaegaabaaaacaaaaaadcaaaaajdcaabaaaacaaaaaa
egaabaaaacaaaaaacgakbaaaafaaaaaaegaabaaaahaaaaaadiaaaaahkcaabaaa
acaaaaaafgafbaaaacaaaaaaagaebaaaagaaaaaadiaaaaahdcaabaaaagaaaaaa
pgapbaaaadaaaaaaegaabaaaagaaaaaadcaaaaajmcaabaaaagaaaaaaagaebaaa
aaaaaaaaagaabaaaacaaaaaaagaebaaaagaaaaaadcaaaaajmcaabaaaagaaaaaa
agaebaaaakaaaaaafgafbaaaafaaaaaakgaobaaaagaaaaaadcaaaaajdcaabaaa
acaaaaaaegaabaaaaaaaaaaapgapbaaaafaaaaaangafbaaaacaaaaaadcaaaaaj
dcaabaaaacaaaaaaegaabaaaakaaaaaapgapbaaaadaaaaaaegaabaaaacaaaaaa
dcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaa
acaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaa
acaaaaaadcaaaaapmccabaaaadaaaaaaagaebaaaacaaaaaaaceaaaaaaaaaaaaa
aaaaaaaajkjjbjdpjkjjbjdpaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
dcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaogakbaaa
agaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaa
acaaaaaadcaaaaapdccabaaaadaaaaaaegaabaaaacaaaaaaaceaaaaajkjjbjdp
jkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
dbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaackaabaaaafaaaaaadbaaaaah
bcaabaaaacaaaaaackaabaaaafaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaa
abaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaacaaaaaaclaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaaaadaaaaaadbaaaaahbcaabaaaacaaaaaaabeaaaaaaaaaaaaackaabaaa
abaaaaaadbaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaa
dcaaaaajdcaabaaaaaaaaaaaegaabaaaaaaaaaaakgakbaaaabaaaaaaegaabaaa
agaaaaaaboaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaabkaabaaa
acaaaaaacgaaaaaiaanaaaaaecaabaaaabaaaaaackaabaaaabaaaaaackaabaaa
acaaaaaaclaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaackaabaaaahaaaaaadcaaaaaj
dcaabaaaaaaaaaaaegaabaaaakaaaaaakgakbaaaabaaaaaaegaabaaaaaaaaaaa
dcaaaaajdcaabaaaaaaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaa
aaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaa
aaaaaaaadcaaaaapdccabaaaaeaaaaaaegaabaaaaaaaaaaaaceaaaaajkjjbjdp
jkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaidcaabaaa
acaaaaaafgafbaaaaaaaaaaaegiacaaaaaaaaaaaakaaaaaadcaaaaakdcaabaaa
aaaaaaaaegiacaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegaabaaaacaaaaaa
dcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaalaaaaaakgakbaaaaaaaaaaa
egaabaaaaaaaaaaadcaaaaakmccabaaaaeaaaaaaagiecaaaaaaaaaaaamaaaaaa
pgapbaaaaaaaaaaaagaebaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahhccabaaaafaaaaaaagaabaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaai
hcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaak
hcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaa
acaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaajicaabaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaacaaaaaapgapbaaa
aaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaacaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaknhcdlmdiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
pnekibdpdiaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaadkiacaaaaaaaaaaa
anaaaaaadicaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaiaea
aaaaaaajocaabaaaaaaaaaaaagijcaaaaaaaaaaaanaaaaaapgipcaaaaaaaaaaa
bbaaaaaadccaaaakhccabaaaagaaaaaajgahbaaaaaaaaaaaagaabaaaaaaaaaaa
egiccaaaaeaaaaaaaeaaaaaadiaaaaakhcaabaaaaaaaaaaaegadbaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaadgaaaaaficcabaaaahaaaaaa
dkaabaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaa
abaaaaaaafaaaaaaaaaaaaahdccabaaaahaaaaaakgakbaaaaaaaaaaamgaabaaa
aaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaa
afaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
agaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaag
eccabaaaahaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 388
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 489
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 480
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 398
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 411
#line 419
#line 433
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 466
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 470
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 474
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 478
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 503
#line 519
#line 575
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 380
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 382
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 355
mediump vec4 GetShereDetailMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 357
    highp vec3 sphereVectNorm = normalize(sphereVect);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 361
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    highp vec4 uv;
    uv.xy = (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale);
    #line 365
    uv.zw = vec2( 0.0, 0.0);
    return xll_tex2Dlod( texSampler, uv);
}
#line 330
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 332
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 336
    return uv;
}
#line 338
mediump vec4 GetSphereMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 340
    highp vec4 uv;
    highp vec3 sphereVectNorm = normalize(sphereVect);
    uv.xy = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    uv.zw = vec2( 0.0, 0.0);
    #line 344
    mediump vec4 tex = xll_tex2Dlod( texSampler, uv);
    return tex;
}
#line 317
highp vec3 hash( in highp vec3 val ) {
    #line 319
    return fract((sin(val) * 123.545));
}
#line 503
highp mat4 rand_rotation( in highp vec3 x, in highp float scale, in highp vec3 trans ) {
    highp float theta = (x.x * 6.28319);
    highp float phi = (x.y * 6.28319);
    #line 507
    highp float z = (x.z * 2.0);
    highp float r = sqrt(z);
    highp float Vx = (sin(phi) * r);
    highp float Vy = (cos(phi) * r);
    #line 511
    highp float Vz = sqrt((2.0 - z));
    highp float st = sin(theta);
    highp float ct = cos(theta);
    highp float Sx = ((Vx * ct) - (Vy * st));
    #line 515
    highp float Sy = ((Vx * st) + (Vy * ct));
    highp mat4 M = mat4( (scale * ((Vx * Sx) - ct)), ((Vx * Sy) - st), (Vx * Vz), 0.0, ((Vy * Sx) + st), (scale * ((Vy * Sy) - ct)), (Vy * Vz), 0.0, (Vz * Sx), (Vz * Sy), (scale * (1.0 - z)), 0.0, trans.x, trans.y, trans.z, 1.0);
    return M;
}
#line 519
v2f vert( in appdata_t v ) {
    v2f o;
    highp vec4 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0));
    #line 523
    highp vec4 planet_pos = (-(_MainRotation * origin));
    highp vec3 hashVect = abs(hash( normalize(floor(planet_pos.xyz))));
    highp vec4 localOrigin;
    localOrigin.xyz = (((2.0 * hashVect) - 1.0) * _MaxTrans);
    #line 527
    localOrigin.w = 1.0;
    highp float localScale = ((hashVect.x * (_MaxScale - 1.0)) + 1.0);
    origin = (_Object2World * localOrigin);
    highp vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 531
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 535
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    o.baseLight = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    planet_pos = (-(_MainRotation * origin));
    highp vec3 detail_pos = (_DetailRotation * planet_pos).xyz;
    #line 539
    o.color = GetSphereMapNoLOD( _MainTex, planet_pos.xyz);
    o.color *= GetShereDetailMapNoLOD( _DetailTex, detail_pos, _DetailScale);
    o.color.w *= GetDistanceFade( distance( origin, vec4( _WorldSpaceCameraPos, 0.0)), _DistFade, _DistFadeVert);
    highp mat4 M = rand_rotation( (vec3( fract(_Rotation), 0.0, 0.0) + hashVect), localScale, localOrigin.xyz);
    #line 543
    highp mat4 mvMatrix = ((unity_MatrixV * _Object2World) * M);
    highp vec3 viewDir = normalize(xll_matrixindex_mf4x4_i (mvMatrix, 2).xyz);
    o.viewDir = abs(viewDir);
    highp vec4 mvCenter = (glstate_matrix_modelview0 * localOrigin);
    #line 547
    o.pos = (glstate_matrix_projection * (mvCenter + vec4( (v.vertex.xyz * localScale), v.vertex.w)));
    o.camPos = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * localOrigin).xyz));
    highp vec2 texcoodOffsetxy = ((2.0 * v.texcoord) - 1.0);
    highp vec4 texcoordOffset = vec4( texcoodOffsetxy.x, texcoodOffsetxy.y, 0.0, v.vertex.w);
    #line 551
    highp vec4 ZYv = texcoordOffset.zyxw;
    highp vec4 XZv = texcoordOffset.xzyw;
    highp vec4 XYv = texcoordOffset.xyzw;
    ZYv.z *= sign((-viewDir.x));
    #line 555
    XZv.x *= sign((-viewDir.y));
    XYv.x *= sign(viewDir.z);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.z)) * viewDir.z);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.x)) * viewDir.x);
    #line 559
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.x)) * viewDir.x);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.y)) * viewDir.y);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.z)) * viewDir.z);
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.y)) * viewDir.y);
    #line 563
    highp vec2 ZY = ((mvMatrix * ZYv).xy - mvCenter.xy);
    highp vec2 XZ = ((mvMatrix * XZv).xy - mvCenter.xy);
    highp vec2 XY = ((mvMatrix * XYv).xy - mvCenter.xy);
    o.texcoordZY = (vec2( 0.5, 0.5) + (0.6 * ZY));
    #line 567
    o.texcoordXZ = (vec2( 0.5, 0.5) + (0.6 * XZ));
    o.texcoordXY = (vec2( 0.5, 0.5) + (0.6 * XY));
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    #line 571
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}

out lowp vec4 xlv_COLOR;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.texcoord = vec2(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_COLOR = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD1 = vec2(xl_retval.texcoordZY);
    xlv_TEXCOORD2 = vec2(xl_retval.texcoordXZ);
    xlv_TEXCOORD3 = vec2(xl_retval.texcoordXY);
    xlv_TEXCOORD4 = vec3(xl_retval.camPos);
    xlv_TEXCOORD5 = vec3(xl_retval.baseLight);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 388
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 489
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec2 _LightCoord;
    highp vec4 projPos;
};
#line 480
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 398
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 411
#line 419
#line 433
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 466
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 470
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 474
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 478
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 503
#line 519
#line 575
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 575
lowp vec4 frag( in v2f IN ) {
    mediump float xval = IN.viewDir.x;
    mediump vec4 xtex = texture( _LeftTex, IN.texcoordZY);
    #line 579
    mediump float yval = IN.viewDir.y;
    mediump vec4 ytex = texture( _TopTex, IN.texcoordXZ);
    mediump float zval = IN.viewDir.z;
    mediump vec4 ztex = texture( _FrontTex, IN.texcoordXY);
    #line 583
    mediump vec4 tex = mix( mix( xtex, ytex, vec4( yval)), ztex, vec4( zval));
    mediump vec4 prev = (((0.94 * _Color) * IN.color) * tex);
    mediump vec4 color;
    color.xyz = (prev.xyz * IN.baseLight);
    #line 587
    color.w = prev.w;
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 591
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in lowp vec4 xlv_COLOR;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_COLOR);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD0);
    xlt_IN.texcoordZY = vec2(xlv_TEXCOORD1);
    xlt_IN.texcoordXZ = vec2(xlv_TEXCOORD2);
    xlt_IN.texcoordXY = vec2(xlv_TEXCOORD3);
    xlt_IN.camPos = vec3(xlv_TEXCOORD4);
    xlt_IN.baseLight = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform vec3 _MaxTrans;
uniform float _MaxScale;
uniform float _Rotation;
uniform float _MinLight;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 unity_MatrixV;


uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 XYv_1;
  vec4 XZv_2;
  vec4 ZYv_3;
  vec3 detail_pos_4;
  float localScale_5;
  vec4 localOrigin_6;
  vec4 tmpvar_7;
  vec3 tmpvar_8;
  vec4 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_6.xyz = (((2.0 * tmpvar_10) - 1.0) * _MaxTrans);
  localOrigin_6.w = 1.0;
  localScale_5 = ((tmpvar_10.x * (_MaxScale - 1.0)) + 1.0);
  vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * localOrigin_6);
  vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = gl_Normal;
  tmpvar_8 = clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (normalize((_Object2World * tmpvar_12).xyz), normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0);
  vec4 tmpvar_13;
  tmpvar_13 = -((_MainRotation * tmpvar_11));
  detail_pos_4 = (_DetailRotation * tmpvar_13).xyz;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13.xyz);
  vec2 uv_15;
  float r_16;
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_14.x)))) {
    float y_over_x_17;
    y_over_x_17 = (tmpvar_14.x / tmpvar_14.z);
    float s_18;
    float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_14.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(tmpvar_14.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_16));
  uv_15.y = (0.31831 * (1.5708 - (sign(tmpvar_14.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_14.y))) * (1.5708 + (abs(tmpvar_14.y) * (-0.214602 + (abs(tmpvar_14.y) * (0.0865667 + (abs(tmpvar_14.y) * -0.0310296)))))))))));
  vec4 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(normalize(detail_pos_4));
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  uv_20.xy = (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale);
  uv_20.zw = vec2(0.0, 0.0);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DLod (_MainTex, uv_15, 0.0) * texture2DLod (_DetailTex, uv_20.xy, 0.0));
  tmpvar_7.xyz = tmpvar_24.xyz;
  vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = _WorldSpaceCameraPos;
  float tmpvar_26;
  vec4 p_27;
  p_27 = (tmpvar_11 - tmpvar_25);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  tmpvar_7.w = (tmpvar_24.w * (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0)));
  vec3 tmpvar_28;
  tmpvar_28.yz = vec2(0.0, 0.0);
  tmpvar_28.x = fract(_Rotation);
  vec3 x_29;
  x_29 = (tmpvar_28 + tmpvar_10);
  vec3 trans_30;
  trans_30 = localOrigin_6.xyz;
  float tmpvar_31;
  tmpvar_31 = (x_29.x * 6.28319);
  float tmpvar_32;
  tmpvar_32 = (x_29.y * 6.28319);
  float tmpvar_33;
  tmpvar_33 = (x_29.z * 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (sin(tmpvar_32) * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (cos(tmpvar_32) * tmpvar_34);
  float tmpvar_37;
  tmpvar_37 = sqrt((2.0 - tmpvar_33));
  float tmpvar_38;
  tmpvar_38 = sin(tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = cos(tmpvar_31);
  float tmpvar_40;
  tmpvar_40 = ((tmpvar_35 * tmpvar_39) - (tmpvar_36 * tmpvar_38));
  float tmpvar_41;
  tmpvar_41 = ((tmpvar_35 * tmpvar_38) + (tmpvar_36 * tmpvar_39));
  mat4 tmpvar_42;
  tmpvar_42[0].x = (localScale_5 * ((tmpvar_35 * tmpvar_40) - tmpvar_39));
  tmpvar_42[0].y = ((tmpvar_35 * tmpvar_41) - tmpvar_38);
  tmpvar_42[0].z = (tmpvar_35 * tmpvar_37);
  tmpvar_42[0].w = 0.0;
  tmpvar_42[1].x = ((tmpvar_36 * tmpvar_40) + tmpvar_38);
  tmpvar_42[1].y = (localScale_5 * ((tmpvar_36 * tmpvar_41) - tmpvar_39));
  tmpvar_42[1].z = (tmpvar_36 * tmpvar_37);
  tmpvar_42[1].w = 0.0;
  tmpvar_42[2].x = (tmpvar_37 * tmpvar_40);
  tmpvar_42[2].y = (tmpvar_37 * tmpvar_41);
  tmpvar_42[2].z = (localScale_5 * (1.0 - tmpvar_33));
  tmpvar_42[2].w = 0.0;
  tmpvar_42[3].x = trans_30.x;
  tmpvar_42[3].y = trans_30.y;
  tmpvar_42[3].z = trans_30.z;
  tmpvar_42[3].w = 1.0;
  mat4 tmpvar_43;
  tmpvar_43 = (((unity_MatrixV * _Object2World) * tmpvar_42));
  vec4 v_44;
  v_44.x = tmpvar_43[0].z;
  v_44.y = tmpvar_43[1].z;
  v_44.z = tmpvar_43[2].z;
  v_44.w = tmpvar_43[3].z;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(v_44.xyz);
  vec4 tmpvar_46;
  tmpvar_46 = (gl_ModelViewMatrix * localOrigin_6);
  vec4 tmpvar_47;
  tmpvar_47.xyz = (gl_Vertex.xyz * localScale_5);
  tmpvar_47.w = gl_Vertex.w;
  vec4 tmpvar_48;
  tmpvar_48 = (gl_ProjectionMatrix * (tmpvar_46 + tmpvar_47));
  vec2 tmpvar_49;
  tmpvar_49 = ((2.0 * gl_MultiTexCoord0.xy) - 1.0);
  vec4 tmpvar_50;
  tmpvar_50.z = 0.0;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = tmpvar_49.y;
  tmpvar_50.w = gl_Vertex.w;
  ZYv_3.xyw = tmpvar_50.zyw;
  XZv_2.yzw = tmpvar_50.zyw;
  XYv_1.yzw = tmpvar_50.yzw;
  ZYv_3.z = (tmpvar_49.x * sign(-(tmpvar_45.x)));
  XZv_2.x = (tmpvar_49.x * sign(-(tmpvar_45.y)));
  XYv_1.x = (tmpvar_49.x * sign(tmpvar_45.z));
  ZYv_3.x = ((sign(-(tmpvar_45.x)) * sign(ZYv_3.z)) * tmpvar_45.z);
  XZv_2.y = ((sign(-(tmpvar_45.y)) * sign(XZv_2.x)) * tmpvar_45.x);
  XYv_1.z = ((sign(-(tmpvar_45.z)) * sign(XYv_1.x)) * tmpvar_45.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_45.x)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_45.y)) * sign(tmpvar_49.y)) * tmpvar_45.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_45.z)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  vec4 o_51;
  vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_48 * 0.5);
  vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_48.zw;
  tmpvar_9.xyw = o_51.xyw;
  tmpvar_9.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_48;
  xlv_COLOR = tmpvar_7;
  xlv_TEXCOORD0 = abs(tmpvar_45);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * ZYv_3).xy - tmpvar_46.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XZv_2).xy - tmpvar_46.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XYv_1).xy - tmpvar_46.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_6).xyz));
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform vec4 _ZBufferParams;
void main ()
{
  vec4 color_1;
  vec4 tmpvar_2;
  tmpvar_2 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (texture2D (_LeftTex, xlv_TEXCOORD1), texture2D (_TopTex, xlv_TEXCOORD2), xlv_TEXCOORD0.yyyy), texture2D (_FrontTex, xlv_TEXCOORD3), xlv_TEXCOORD0.zzzz));
  color_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD5);
  color_1.w = (tmpvar_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 32 [glstate_lightmodel_ambient]
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_projection]
Vector 33 [_WorldSpaceCameraPos]
Vector 34 [_ProjectionParams]
Vector 35 [_ScreenParams]
Vector 36 [_WorldSpaceLightPos0]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [unity_MatrixV]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Matrix 28 [_LightMatrix0]
Vector 37 [_LightColor0]
Float 38 [_DetailScale]
Float 39 [_DistFade]
Float 40 [_DistFadeVert]
Float 41 [_MinLight]
Float 42 [_Rotation]
Float 43 [_MaxScale]
Vector 44 [_MaxTrans]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"vs_3_0
; 359 ALU, 4 TEX
dcl_position o0
dcl_color0 o1
dcl_texcoord0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord7 o9
dcl_texcoord8 o10
def c45, 0.15915491, 0.50000000, 6.28318501, -3.14159298
def c46, 123.54530334, 2.00000000, -1.00000000, 1.00000000
def c47, 0.00000000, -0.01872930, 0.07426100, -0.21211439
def c48, 1.57072902, 3.14159298, 0.31830987, -0.12123910
def c49, -0.01348047, 0.05747731, 0.19563590, -0.33299461
def c50, 0.99999559, 1.57079601, 0.15915494, 0.50000000
def c51, 6.28318548, 0.00000000, 1.00000000, -0.01000214
def c52, 0.60000002, 0.50000000, 4.03944778, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_2d s0
dcl_2d s1
mad r10.xy, v2, c46.y, c46.z
mov r1.w, c15
mov r1.z, c14.w
mov r1.x, c12.w
mov r1.y, c13.w
dp4 r0.z, r1, c22
dp4 r0.x, r1, c20
dp4 r0.y, r1, c21
frc r1.xyz, -r0
add r0.xyz, -r0, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mad r0.x, r1, c45, c45.y
frc r0.x, r0
mad r1.x, r0, c45.z, c45.w
sincos r0.xy, r1.x
mad r0.x, r1.z, c45, c45.y
mov r1.x, r0.y
frc r0.y, r0.x
mad r0.x, r1.y, c45, c45.y
mad r1.y, r0, c45.z, c45.w
frc r1.x, r0
sincos r0.xy, r1.y
mad r0.x, r1, c45.z, c45.w
sincos r1.xy, r0.x
mov r1.z, r0.y
mul r0.xyz, r1, c46.x
frc r0.xyz, r0
abs r6.xyz, r0
mad r0.xyz, r6, c46.y, c46.z
mul r0.xyz, r0, c44
mov r0.w, c46
dp4 r2.z, r0, c14
dp4 r2.x, r0, c12
dp4 r2.y, r0, c13
dp4 r2.w, r0, c15
dp4 r1.z, r2, c22
dp4 r1.x, r2, c20
dp4 r1.y, r2, c21
dp4 r1.w, r2, c23
add r7.xyz, -r2, c33
dp3 r2.x, r7, r7
rsq r8.w, r2.x
dp4 r3.z, -r1, c26
dp4 r3.x, -r1, c24
dp4 r3.y, -r1, c25
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mul r3.xyz, r1.w, r3
abs r3.xyz, r3
sge r1.w, r3.z, r3.x
add r4.xyz, r3.zxyw, -r3
mad r4.xyz, r1.w, r4, r3
sge r2.w, r4.x, r3.y
add r4.xyz, r4, -r3.yxzw
mad r3.xyz, r2.w, r4, r3.yxzw
dp3 r1.w, -r1, -r1
rsq r1.w, r1.w
mul r1.xyz, r1.w, -r1
abs r2.w, r1.x
abs r1.w, r1.z
mul r3.zw, r3.xyzy, c45.y
max r3.y, r1.w, r2.w
abs r4.y, r3.x
min r3.x, r1.w, r2.w
slt r1.w, r1, r2
rcp r3.y, r3.y
mul r4.x, r3, r3.y
rcp r3.x, r4.y
mul r3.xy, r3.zwzw, r3.x
mul r4.y, r4.x, r4.x
mad r3.z, r4.y, c49.x, c49.y
mad r3.z, r3, r4.y, c48.w
mad r2.w, r3.z, r4.y, c49.z
mad r2.w, r2, r4.y, c49
mad r2.w, r2, r4.y, c50.x
mul r2.w, r2, r4.x
max r1.w, -r1, r1
slt r1.w, c47.x, r1
add r3.z, -r1.w, c46.w
mul r3.z, r2.w, r3
add r2.w, -r2, c50.y
mad r1.w, r1, r2, r3.z
slt r1.z, r1, c47.x
max r1.z, -r1, r1
slt r1.z, c47.x, r1
slt r1.x, r1, c47
max r1.x, -r1, r1
add r2.w, -r1, c48.y
add r3.z, -r1, c46.w
mul r1.w, r1, r3.z
slt r1.x, c47, r1
mad r1.z, r1, r2.w, r1.w
add r3.z, -r1.x, c46.w
mul r1.w, r1.z, r3.z
mad r1.x, r1, -r1.z, r1.w
abs r1.z, r1.y
add r2.w, -r1.z, c46
mad r1.w, r1.z, c47.y, c47.z
mad r1.w, r1, r1.z, c47
rsq r2.w, r2.w
rcp r2.w, r2.w
mad r1.z, r1.w, r1, c48.x
mul r1.z, r1, r2.w
slt r1.y, r1, c47.x
mul r1.w, r1.y, r1.z
mad r1.z, -r1.w, c46.y, r1
mad r1.y, r1, c48, r1.z
mul r3.xy, r3, c38.x
mov r3.z, c47.x
texldl r3, r3.xyzz, s1
mad r1.x, r1, c50.z, c50.w
mov r4.yz, c47.x
frc r4.x, c42
add r4.xyz, r6, r4
mul r1.w, r4.x, c51.x
mad r1.z, r1.w, c45.x, c45.y
frc r2.w, r1.z
mad r4.x, r2.w, c45.z, c45.w
sincos r5.xy, r4.x
mul r2.w, r4.y, c51.x
mad r2.w, r2, c45.x, c45.y
frc r4.x, r2.w
mul r2.w, r4.z, c46.y
mad r5.z, r4.x, c45, c45.w
sincos r4.xy, r5.z
rsq r5.w, r2.w
rcp r4.z, r5.w
mul r4.w, r4.x, r4.z
mul r5.z, r4.y, r4
mul r4.x, r4.w, r5
mad r4.y, r5.z, r5, r4.x
mov r5.w, c18.x
mul r1.y, r1, c48.z
mov r1.z, c47.x
texldl r1, r1.xyzz, s0
mul r3, r1, r3
add r1.z, -r2.w, c46.y
mov o1.xyz, r3
mov r1.y, c43.x
add r1.y, c46.z, r1
mad r1.x, r5.z, r4.y, -r5.y
mad r7.w, r6.x, r1.y, c46
mad r1.w, r4, r4.y, -r5.x
mul r1.y, r7.w, r1.w
rsq r1.z, r1.z
rcp r1.w, r1.z
mul r1.z, r1.w, r4.y
mov r4.x, c18.y
mul r4.xyz, c13, r4.x
mad r4.xyz, c12, r5.w, r4
mov r5.w, c18.z
mad r4.xyz, c14, r5.w, r4
mov r5.w, c18
mad r6.xyz, c15, r5.w, r4
mul r5.w, r4, r5.y
mad r2.z, r5, r5.x, -r5.w
mad r2.y, r5.z, r2.z, -r5.x
mul r2.x, r7.w, r2.y
mad r2.y, r4.w, r2.z, r5
mul r5.x, r5.z, r1.w
add r2.w, -r2, c46
mul r5.y, r1.w, r4.w
mul r2.z, r1.w, r2
mul r4.xyz, r6.y, r1
rcp r5.w, r8.w
mul r5.z, r7.w, r2.w
mad r4.xyz, r6.x, r2, r4
mad r4.xyz, r6.z, r5, r4
mul r1.w, -r5, c40.x
add_sat r2.w, r1, c46
mul_sat r1.w, r5, c39.x
mul r1.w, r1, r2
dp3 r4.w, r4, r4
rsq r2.w, r4.w
mul r8.xyz, r2.w, r4
mul o1.w, r3, r1
slt r2.w, -r8.x, r8.x
slt r1.w, r8.x, -r8.x
sub r1.w, r1, r2
slt r3.x, r10.y, -r10.y
slt r2.w, -r10.y, r10.y
sub r10.z, r2.w, r3.x
mul r2.w, r10.x, r1
mul r3.z, r1.w, r10
slt r3.y, r2.w, -r2.w
slt r3.x, -r2.w, r2.w
sub r3.x, r3, r3.y
mov r9.z, r2.w
mov r2.w, r0.x
mul r1.w, r3.x, r1
mul r3.y, r8, r3.z
mad r9.x, r8.z, r1.w, r3.y
mov r1.w, c16.y
mul r3, c13, r1.w
mov r1.w, c16.x
mad r3, c12, r1.w, r3
mov r1.w, c16.z
mad r3, c14, r1.w, r3
mov r1.w, c16
mad r6, c15, r1.w, r3
mov r1.w, r0.y
mul r4, r1, r6.y
mov r3.x, c17.y
mov r5.w, c17.x
mul r3, c13, r3.x
mad r3, c12, r5.w, r3
mov r5.w, c17.z
mad r3, c14, r5.w, r3
mov r5.w, c17
mad r3, c15, r5.w, r3
mul r1, r3.y, r1
mov r5.w, r0.z
mad r1, r3.x, r2, r1
mad r1, r3.z, r5, r1
mad r1, r3.w, c51.yyyz, r1
mad r4, r2, r6.x, r4
mad r4, r5, r6.z, r4
mad r2, r6.w, c51.yyyz, r4
dp4 r5.y, r0, c1
dp4 r5.x, r0, c0
mov r4.w, v0
mov r4.y, r10
mov r9.yw, r4
dp4 r3.y, r1, r9
dp4 r3.x, r9, r2
slt r3.w, -r8.y, r8.y
slt r3.z, r8.y, -r8.y
sub r4.x, r3.z, r3.w
add r3.zw, -r5.xyxy, r3.xyxy
mul r3.x, r10, r4
mad o3.xy, r3.zwzw, c52.x, c52.y
slt r3.z, r3.x, -r3.x
slt r3.y, -r3.x, r3.x
sub r3.y, r3, r3.z
mul r3.z, r10, r4.x
mul r3.y, r3, r4.x
mul r4.x, r8.z, r3.z
mad r3.y, r8.x, r3, r4.x
mov r3.zw, r4.xyyw
dp4 r5.w, r1, r3
dp4 r5.z, r2, r3
add r3.xy, -r5, r5.zwzw
slt r3.w, -r8.z, r8.z
slt r3.z, r8, -r8
sub r4.x, r3.w, r3.z
sub r3.z, r3, r3.w
mul r4.x, r10, r4
mul r5.z, r10, r3
dp4 r5.w, r0, c3
slt r4.z, r4.x, -r4.x
slt r3.w, -r4.x, r4.x
sub r3.w, r3, r4.z
mul r4.z, r8.y, r5
dp4 r5.z, r0, c2
mul r3.z, r3, r3.w
mad r4.z, r8.x, r3, r4
dp4 r1.y, r1, r4
dp4 r1.x, r2, r4
mad o4.xy, r3, c52.x, c52.y
add r3.xy, -r5, r1
mov r0.w, v0
mul r0.xyz, v0, r7.w
add r0, r5, r0
dp4 r2.w, r0, c7
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
mov r1.w, r2
dp4 r1.z, r0, c6
mul r2.xyz, r1.xyww, c45.y
mov o0, r1
mul r2.y, r2, c34.x
mov r1.xyz, v1
mov r1.w, c47.x
dp4 r0.z, r1, c14
dp4 r0.y, r1, c13
dp4 r0.x, r1, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c36, c36
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c36
dp3_sat r0.x, r0, r1
add r0.x, r0, c51.w
mul r0.y, r0.x, c37.w
dp4 r1.x, v0, c2
mul_sat r0.w, r0.y, c52.z
mov r0.x, c41
add r0.xyz, c37, r0.x
mad_sat o7.xyz, r0, r0.w, c32
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.x, v0, c12
dp4 r0.y, v0, c13
mad o5.xy, r3, c52.x, c52.y
mad o10.xy, r2.z, c35.zwzw, r2
abs o2.xyz, r8
mov o10.w, r2
mul o6.xyz, r8.w, r7
dp4 o8.w, r0, c31
dp4 o8.z, r0, c30
dp4 o8.y, r0, c29
dp4 o8.x, r0, c28
dp4 o9.w, r0, c11
dp4 o9.z, r0, c10
dp4 o9.y, r0, c9
dp4 o9.x, r0, c8
mov o10.z, -r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
ConstBuffer "$Globals" 320 // 316 used size, 16 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
Vector 208 [_LightColor0] 4
Float 240 [_DetailScale]
Float 272 [_DistFade]
Float 276 [_DistFadeVert]
Float 284 [_MinLight]
Float 292 [_Rotation]
Float 296 [_MaxScale]
Vector 304 [_MaxTrans] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityPerFrame" 208 // 144 used size, 4 vars
Matrix 0 [glstate_matrix_projection] 4
Vector 64 [glstate_lightmodel_ambient] 4
Matrix 80 [unity_MatrixV] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
BindCB "UnityPerFrame" 5
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 257 instructions, 12 temp regs, 0 temp arrays:
// ALU 220 float, 8 int, 6 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhhkkiddeheamflgdngipchacbmbahhhmabaaaaaameceaaaaadaaaaaa
cmaaaaaanmaaaaaabaacaaaaejfdeheokiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaijaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaipaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaajgaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaajoaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaafaepfdejfeejepeoaaedepem
epfcaaeoepfcenebemaafeebeoehefeofeaafeeffiedepepfceeaaklepfdeheo
cmabaaaaalaaaaaaaiaaaaaabaabaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaabmabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaccabaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaccabaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaaccabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
amadaaaaccabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaaccabaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaccabaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaccabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaaccabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaccabaaaa
aiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
edepemepfcaafeeffiedepepfceeaaklfdeieefckmccaaaaeaaaabaaklaiaaaa
fjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaamaaaaaa
fjaaaaaeegiocaaaaeaaaaaabaaaaaaafjaaaaaeegiocaaaafaaaaaaajaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafpaaaaadpcbabaaa
aaaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaaeaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaadmccabaaaadaaaaaagfaaaaad
dccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagfaaaaadpccabaaa
ajaaaaaagiaaaaacamaaaaaadiaaaaajhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
acaaaaaafgifcaaaaeaaaaaaapaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaabaaaaaaagiacaaaaeaaaaaaapaaaaaaegacbaaaaaaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgikcaaaaeaaaaaaapaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgipcaaaaeaaaaaaapaaaaaaegacbaaaaaaaaaaaebaaaaaghcaabaaaaaaaaaaa
egacbaiaebaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaenaaaaaghcaabaaa
aaaaaaaaaanaaaaaegacbaaaaaaaaaaadiaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaaceaaaaadcbhphecdcbhphecdcbhphecaaaaaaaabkaaaaafhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaackiacaaaaaaaaaaa
bcaaaaaaabeaaaaaaaaaialpdcaaaaajicaabaaaaaaaaaaaakaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegbcbaaaaaaaaaaadgaaaaaficaabaaaabaaaaaadkbabaaaaaaaaaaa
dcaaaaaphcaabaaaacaaaaaaegacbaaaaaaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaadiaaaaai
pcaabaaaadaaaaaafgafbaaaacaaaaaaegiocaaaaeaaaaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaaegiocaaaaeaaaaaaaeaaaaaaagaabaaaacaaaaaaegaobaaa
adaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaaeaaaaaaagaaaaaakgakbaaa
acaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaa
egiocaaaaeaaaaaaahaaaaaaaaaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadiaaaaaipcaabaaaaeaaaaaafgafbaaaabaaaaaaegiocaaa
afaaaaaaabaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaafaaaaaaaaaaaaaa
agaabaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaa
afaaaaaaacaaaaaakgakbaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaafaaaaaaadaaaaaapgapbaaaabaaaaaaegaobaaaaeaaaaaa
dgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaeaaaaaa
egiocaaaaeaaaaaaamaaaaaaagaabaaaacaaaaaaegaobaaaaeaaaaaadcaaaaak
pcaabaaaaeaaaaaaegiocaaaaeaaaaaaaoaaaaaakgakbaaaacaaaaaaegaobaaa
aeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaaaaeaaaaaaegiocaaaaeaaaaaa
apaaaaaadiaaaaaipcaabaaaafaaaaaafgafbaaaaeaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaa
aeaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaa
adaaaaaakgakbaaaaeaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaafaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgapbaaaaeaaaaaaegaobaaaafaaaaaadiaaaaaj
hcaabaaaagaaaaaafgafbaiaebaaaaaaafaaaaaabgigcaaaaaaaaaaaagaaaaaa
dcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
afaaaaaaegacbaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaafaaaaaaegacbaaaagaaaaaadcaaaaalhcaabaaa
agaaaaaabgigcaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaafaaaaaaegacbaaa
agaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaagaaaaaaegacbaaaagaaaaaa
eeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahhcaabaaaagaaaaaa
kgakbaaaabaaaaaaegacbaaaagaaaaaadgaaaaagecaabaaaahaaaaaackaabaia
mbaaaaaaagaaaaaabnaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaagaaaaaa
bkaabaiaibaaaaaaagaaaaaaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaajpcaabaaaaiaaaaaafgaibaiambaaaaaaagaaaaaa
kgabbaiaibaaaaaaagaaaaaadiaaaaahlcaabaaaahaaaaaakgakbaaaabaaaaaa
jganbaaaaiaaaaaadcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
aiaaaaaabkaabaiaibaaaaaaagaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaagaaaaaaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaihcaabaaaaiaaaaaabgagbaiaibaaaaaa
agaaaaaaegacbaaaahaaaaaadgaaaaagfcaabaaaahaaaaaafgaebaiambaaaaaa
agaaaaaaaaaaaaahhcaabaaaahaaaaaacgalbaaaahaaaaaaegacbaaaaiaaaaaa
dcaaaaakhcaabaaaagaaaaaakgakbaaaabaaaaaaegacbaaaahaaaaaaegacbaia
ibaaaaaaagaaaaaadiaaaaakmcaabaaaadaaaaaakgagbaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaahmcaabaaaadaaaaaakgaobaaa
adaaaaaaagaabaaaagaaaaaadiaaaaaimcaabaaaadaaaaaakgaobaaaadaaaaaa
agiacaaaaaaaaaaaapaaaaaaeiaaaaalpcaabaaaagaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaajecaabaaa
abaaaaaaegacbaiaebaaaaaaafaaaaaaegacbaiaebaaaaaaafaaaaaaeeaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaihcaabaaaafaaaaaakgakbaaa
abaaaaaaigabbaiaebaaaaaaafaaaaaadeaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaaoaaaaakecaabaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpckaabaaaabaaaaaaddaaaaaj
icaabaaaacaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaah
icaabaaaacaaaaaackaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajecaabaaa
adaaaaaadkaabaaaacaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ecaabaaaadaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaaochgdido
dcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaa
aebnkjlodcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaa
abeaaaaadiphhpdpdiaaaaahecaabaaaadaaaaaackaabaaaabaaaaaadkaabaaa
acaaaaaadcaaaaajecaabaaaadaaaaaackaabaaaadaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajicaabaaaadaaaaaabkaabaiaibaaaaaaafaaaaaa
akaabaiaibaaaaaaafaaaaaaabaaaaahecaabaaaadaaaaaadkaabaaaadaaaaaa
ckaabaaaadaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaadbaaaaaimcaabaaaadaaaaaafgajbaaaafaaaaaa
fgajbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaacaaaaaackaabaaaadaaaaaa
abeaaaaanlapejmaaaaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
acaaaaaaddaaaaahicaabaaaacaaaaaabkaabaaaafaaaaaaakaabaaaafaaaaaa
dbaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaiaebaaaaaaacaaaaaa
deaaaaahecaabaaaadaaaaaabkaabaaaafaaaaaaakaabaaaafaaaaaabnaaaaai
ecaabaaaadaaaaaackaabaaaadaaaaaackaabaiaebaaaaaaadaaaaaaabaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadhaaaaakecaabaaa
abaaaaaadkaabaaaacaaaaaackaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaafaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakecaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaiaibaaaaaaafaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaakeanmjdpaaaaaaai
icaabaaaacaaaaaackaabaiambaaaaaaafaaaaaaabeaaaaaaaaaiadpelaaaaaf
icaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaahecaabaaaadaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaaadaaaaaackaabaaaadaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahecaabaaaadaaaaaadkaabaaa
adaaaaaackaabaaaadaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaahccaabaaaafaaaaaackaabaaa
abaaaaaaabeaaaaaidpjkcdoeiaaaaalpcaabaaaafaaaaaaegaabaaaafaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadiaaaaahpcaabaaa
afaaaaaaegaobaaaagaaaaaaegaobaaaafaaaaaaaaaaaaajhcaabaaaagaaaaaa
egacbaaaaeaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaaaaaaaaajhcaabaaa
aeaaaaaaegacbaiaebaaaaaaaeaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaagaaaaaaegacbaaaagaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaaiicaabaaaacaaaaaackaabaaaabaaaaaa
akiacaaaaaaaaaaabbaaaaaadccaaaalecaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaabbaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpdgcaaaaficaabaaa
acaaaaaadkaabaaaacaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaacaaaaaadiaaaaahiccabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
afaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaafaaaaaabkaaaaagbcaabaaa
afaaaaaabkiacaaaaaaaaaaabcaaaaaadgaaaaaigcaabaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaafaaaaaaaaaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaa
ckaabaaaaaaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaak
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaanlapmjeanlapmjeaaaaaaaaa
aaaaaaaadcaaaabamcaabaaaadaaaaaakgakbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaea
aaaaiadpenaaaaahbcaabaaaafaaaaaabcaabaaaagaaaaaabkaabaaaaaaaaaaa
enaaaaahbcaabaaaaaaaaaaabcaabaaaahaaaaaaakaabaaaaaaaaaaadiaaaaah
ccaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaaagaaaaaadiaaaaahecaabaaa
aaaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaadiaaaaahecaabaaaabaaaaaa
akaabaaaahaaaaaabkaabaaaaaaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
aaaaaaaaakaabaaaaaaaaaaackaabaaaabaaaaaadcaaaaakicaabaaaacaaaaaa
bkaabaaaaaaaaaaackaabaaaabaaaaaaakaabaiaebaaaaaaahaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaajhcaabaaa
afaaaaaafgifcaaaaeaaaaaaanaaaaaaegiccaaaafaaaaaaagaaaaaadcaaaaal
hcaabaaaafaaaaaaegiccaaaafaaaaaaafaaaaaaagiacaaaaeaaaaaaanaaaaaa
egacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaafaaaaaaahaaaaaa
kgikcaaaaeaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaa
egiccaaaafaaaaaaaiaaaaaapgipcaaaaeaaaaaaanaaaaaaegacbaaaafaaaaaa
diaaaaahhcaabaaaagaaaaaapgapbaaaacaaaaaaegacbaaaafaaaaaadiaaaaah
icaabaaaacaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakicaabaaa
acaaaaaackaabaaaaaaaaaaaakaabaaaahaaaaaadkaabaiaebaaaaaaacaaaaaa
dcaaaaajicaabaaaaeaaaaaabkaabaaaaaaaaaaadkaabaaaacaaaaaaakaabaaa
aaaaaaaadiaaaaajocaabaaaahaaaaaafgifcaaaaeaaaaaaamaaaaaaagijcaaa
afaaaaaaagaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaaafaaaaaaafaaaaaa
agiacaaaaeaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaalocaabaaaahaaaaaa
agijcaaaafaaaaaaahaaaaaakgikcaaaaeaaaaaaamaaaaaafgaobaaaahaaaaaa
dcaaaaalocaabaaaahaaaaaaagijcaaaafaaaaaaaiaaaaaapgipcaaaaeaaaaaa
amaaaaaafgaobaaaahaaaaaadcaaaaajhcaabaaaagaaaaaajgahbaaaahaaaaaa
pgapbaaaaeaaaaaaegacbaaaagaaaaaaelaaaaafecaabaaaadaaaaaackaabaaa
adaaaaaadiaaaaahicaabaaaadaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaa
diaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaadaaaaaadiaaaaaj
hcaabaaaaiaaaaaafgifcaaaaeaaaaaaaoaaaaaaegiccaaaafaaaaaaagaaaaaa
dcaaaaalhcaabaaaaiaaaaaaegiccaaaafaaaaaaafaaaaaaagiacaaaaeaaaaaa
aoaaaaaaegacbaaaaiaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaafaaaaaa
ahaaaaaakgikcaaaaeaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaalhcaabaaa
aiaaaaaaegiccaaaafaaaaaaaiaaaaaapgipcaaaaeaaaaaaaoaaaaaaegacbaaa
aiaaaaaadcaaaaajhcaabaaaagaaaaaaegacbaaaaiaaaaaafgafbaaaaaaaaaaa
egacbaaaagaaaaaadgaaaaafccaabaaaajaaaaaackaabaaaagaaaaaadcaaaaak
ccaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaa
ahaaaaaadcaaaaakbcaabaaaaaaaaaaackaabaaaaaaaaaaackaabaaaabaaaaaa
akaabaiaebaaaaaaaaaaaaaadiaaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaa
ckaabaaaadaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaackaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaa
diaaaaahhcaabaaaakaaaaaakgakbaaaabaaaaaaegacbaaaafaaaaaadcaaaaaj
hcaabaaaakaaaaaajgahbaaaahaaaaaapgapbaaaacaaaaaaegacbaaaakaaaaaa
dcaaaaajhcaabaaaakaaaaaaegacbaaaaiaaaaaapgapbaaaadaaaaaaegacbaaa
akaaaaaadiaaaaahhcaabaaaalaaaaaaagaabaaaaaaaaaaaegacbaaaafaaaaaa
diaaaaahkcaabaaaacaaaaaafgafbaaaacaaaaaaagaebaaaafaaaaaadcaaaaaj
dcaabaaaacaaaaaajgafbaaaahaaaaaaagaabaaaacaaaaaangafbaaaacaaaaaa
dcaaaaajdcaabaaaacaaaaaaegaabaaaaiaaaaaakgakbaaaacaaaaaaegaabaaa
acaaaaaadiaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajlcaabaaaaaaaaaaajganbaaaahaaaaaaagaabaaaaaaaaaaaegaibaaa
alaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaiaaaaaakgakbaaaaaaaaaaa
egadbaaaaaaaaaaadgaaaaafbcaabaaaajaaaaaackaabaaaaaaaaaaadgaaaaaf
ecaabaaaajaaaaaackaabaaaakaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
ajaaaaaaegacbaaaajaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhcaabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaajaaaaaadgaaaaag
hccabaaaacaaaaaaegacbaiaibaaaaaaafaaaaaadiaaaaajmcaabaaaaaaaaaaa
fgifcaaaaeaaaaaaapaaaaaaagiecaaaafaaaaaaagaaaaaadcaaaaalmcaabaaa
aaaaaaaaagiecaaaafaaaaaaafaaaaaaagiacaaaaeaaaaaaapaaaaaakgaobaaa
aaaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaaafaaaaaaahaaaaaakgikcaaa
aeaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaa
afaaaaaaaiaaaaaapgipcaaaaeaaaaaaapaaaaaakgaobaaaaaaaaaaaaaaaaaah
mcaabaaaaaaaaaaakgaobaaaaaaaaaaaagaebaaaacaaaaaadbaaaaalhcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaegacbaiaebaaaaaa
afaaaaaadbaaaaalhcaabaaaahaaaaaaegacbaiaebaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaboaaaaaihcaabaaaacaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaahaaaaaadcaaaaapmcaabaaaadaaaaaaagbebaaa
aeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaceaaaaaaaaaaaaa
aaaaaaaaaaaaialpaaaaialpdbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaa
dkaabaaaadaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaa
aaaaaaaaboaaaaaiecaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadkaabaaa
acaaaaaacgaaaaaiaanaaaaahcaabaaaahaaaaaakgakbaaaabaaaaaaegacbaaa
acaaaaaaclaaaaafhcaabaaaahaaaaaaegacbaaaahaaaaaadiaaaaahhcaabaaa
ahaaaaaajgafbaaaafaaaaaaegacbaaaahaaaaaaclaaaaafkcaabaaaafaaaaaa
agaebaaaacaaaaaadiaaaaahkcaabaaaafaaaaaakgakbaaaadaaaaaafganbaaa
afaaaaaadbaaaaakmcaabaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaafganbaaaafaaaaaadbaaaaakdcaabaaaaiaaaaaangafbaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaboaaaaaimcaabaaaagaaaaaa
kgaobaiaebaaaaaaagaaaaaaagaebaaaaiaaaaaacgaaaaaiaanaaaaadcaabaaa
acaaaaaaegaabaaaacaaaaaaogakbaaaagaaaaaaclaaaaafdcaabaaaacaaaaaa
egaabaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaaacaaaaaacgakbaaa
afaaaaaaegaabaaaahaaaaaadiaaaaahkcaabaaaacaaaaaafgafbaaaacaaaaaa
agaebaaaagaaaaaadiaaaaahdcaabaaaagaaaaaapgapbaaaadaaaaaaegaabaaa
agaaaaaadcaaaaajmcaabaaaagaaaaaaagaebaaaaaaaaaaaagaabaaaacaaaaaa
agaebaaaagaaaaaadcaaaaajmcaabaaaagaaaaaaagaebaaaakaaaaaafgafbaaa
afaaaaaakgaobaaaagaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaaaaaaaaaa
pgapbaaaafaaaaaangafbaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaa
akaaaaaapgapbaaaadaaaaaaegaabaaaacaaaaaadcaaaaajdcaabaaaacaaaaaa
ogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaaacaaaaaaaaaaaaaidcaabaaa
acaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaaacaaaaaadcaaaaapmccabaaa
adaaaaaaagaebaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaajkjjbjdpjkjjbjdp
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpdcaaaaajdcaabaaaacaaaaaa
ogakbaaaaaaaaaaapgbpbaaaaaaaaaaaogakbaaaagaaaaaaaaaaaaaidcaabaaa
acaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaaacaaaaaadcaaaaapdccabaaa
adaaaaaaegaabaaaacaaaaaaaceaaaaajkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadbaaaaahecaabaaaabaaaaaa
abeaaaaaaaaaaaaackaabaaaafaaaaaadbaaaaahbcaabaaaacaaaaaackaabaaa
afaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaakaabaaaacaaaaaaclaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaackaabaaaadaaaaaadbaaaaah
bcaabaaaacaaaaaaabeaaaaaaaaaaaaackaabaaaabaaaaaadbaaaaahccaabaaa
acaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaadcaaaaajdcaabaaaaaaaaaaa
egaabaaaaaaaaaaakgakbaaaabaaaaaaegaabaaaagaaaaaaboaaaaaiecaabaaa
abaaaaaaakaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaacgaaaaaiaanaaaaa
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaaaacaaaaaaclaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaaaafaaaaaackaabaaaahaaaaaadcaaaaajdcaabaaaaaaaaaaaegaabaaa
akaaaaaakgakbaaaabaaaaaaegaabaaaaaaaaaaadcaaaaajdcaabaaaaaaaaaaa
ogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaaaaaaaaaaaaaaaaaidcaabaaa
aaaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaaaaaaaaaadcaaaaapdccabaaa
aeaaaaaaegaabaaaaaaaaaaaaceaaaaajkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaaagaabaaaaaaaaaaaegacbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaadkiacaaa
aaaaaaaaanaaaaaadicaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajocaabaaaaaaaaaaaagijcaaaaaaaaaaaanaaaaaapgipcaaa
aaaaaaaabbaaaaaadccaaaakhccabaaaagaaaaaajgahbaaaaaaaaaaaagaabaaa
aaaaaaaaegiccaaaafaaaaaaaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaakaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
agaabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaakgakbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaa
ahaaaaaaegiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaa
diaaaaaipcaabaaaacaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaakhcaabaaa
aaaaaaaaegadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaa
dgaaaaaficcabaaaajaaaaaadkaabaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaaaaaaaaahdccabaaaajaaaaaa
kgakbaaaaaaaaaaamgaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaaeaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
aeaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaaeaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaaeaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 403
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 504
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 495
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 394
uniform sampler2D _LightTextureB0;
#line 399
#line 413
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 426
#line 434
#line 448
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 481
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 485
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 489
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 493
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 519
#line 535
#line 592
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 380
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 382
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 355
mediump vec4 GetShereDetailMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 357
    highp vec3 sphereVectNorm = normalize(sphereVect);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 361
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    highp vec4 uv;
    uv.xy = (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale);
    #line 365
    uv.zw = vec2( 0.0, 0.0);
    return xll_tex2Dlod( texSampler, uv);
}
#line 330
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 332
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 336
    return uv;
}
#line 338
mediump vec4 GetSphereMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 340
    highp vec4 uv;
    highp vec3 sphereVectNorm = normalize(sphereVect);
    uv.xy = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    uv.zw = vec2( 0.0, 0.0);
    #line 344
    mediump vec4 tex = xll_tex2Dlod( texSampler, uv);
    return tex;
}
#line 317
highp vec3 hash( in highp vec3 val ) {
    #line 319
    return fract((sin(val) * 123.545));
}
#line 519
highp mat4 rand_rotation( in highp vec3 x, in highp float scale, in highp vec3 trans ) {
    highp float theta = (x.x * 6.28319);
    highp float phi = (x.y * 6.28319);
    #line 523
    highp float z = (x.z * 2.0);
    highp float r = sqrt(z);
    highp float Vx = (sin(phi) * r);
    highp float Vy = (cos(phi) * r);
    #line 527
    highp float Vz = sqrt((2.0 - z));
    highp float st = sin(theta);
    highp float ct = cos(theta);
    highp float Sx = ((Vx * ct) - (Vy * st));
    #line 531
    highp float Sy = ((Vx * st) + (Vy * ct));
    highp mat4 M = mat4( (scale * ((Vx * Sx) - ct)), ((Vx * Sy) - st), (Vx * Vz), 0.0, ((Vy * Sx) + st), (scale * ((Vy * Sy) - ct)), (Vy * Vz), 0.0, (Vz * Sx), (Vz * Sy), (scale * (1.0 - z)), 0.0, trans.x, trans.y, trans.z, 1.0);
    return M;
}
#line 535
v2f vert( in appdata_t v ) {
    v2f o;
    highp vec4 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0));
    #line 539
    highp vec4 planet_pos = (-(_MainRotation * origin));
    highp vec3 hashVect = abs(hash( normalize(floor(planet_pos.xyz))));
    highp vec4 localOrigin;
    localOrigin.xyz = (((2.0 * hashVect) - 1.0) * _MaxTrans);
    #line 543
    localOrigin.w = 1.0;
    highp float localScale = ((hashVect.x * (_MaxScale - 1.0)) + 1.0);
    origin = (_Object2World * localOrigin);
    highp vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 547
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 551
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    o.baseLight = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    planet_pos = (-(_MainRotation * origin));
    highp vec3 detail_pos = (_DetailRotation * planet_pos).xyz;
    #line 555
    o.color = GetSphereMapNoLOD( _MainTex, planet_pos.xyz);
    o.color *= GetShereDetailMapNoLOD( _DetailTex, detail_pos, _DetailScale);
    o.color.w *= GetDistanceFade( distance( origin, vec4( _WorldSpaceCameraPos, 0.0)), _DistFade, _DistFadeVert);
    highp mat4 M = rand_rotation( (vec3( fract(_Rotation), 0.0, 0.0) + hashVect), localScale, localOrigin.xyz);
    #line 559
    highp mat4 mvMatrix = ((unity_MatrixV * _Object2World) * M);
    highp vec3 viewDir = normalize(xll_matrixindex_mf4x4_i (mvMatrix, 2).xyz);
    o.viewDir = abs(viewDir);
    highp vec4 mvCenter = (glstate_matrix_modelview0 * localOrigin);
    #line 563
    o.pos = (glstate_matrix_projection * (mvCenter + vec4( (v.vertex.xyz * localScale), v.vertex.w)));
    o.camPos = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * localOrigin).xyz));
    highp vec2 texcoodOffsetxy = ((2.0 * v.texcoord) - 1.0);
    highp vec4 texcoordOffset = vec4( texcoodOffsetxy.x, texcoodOffsetxy.y, 0.0, v.vertex.w);
    #line 567
    highp vec4 ZYv = texcoordOffset.zyxw;
    highp vec4 XZv = texcoordOffset.xzyw;
    highp vec4 XYv = texcoordOffset.xyzw;
    ZYv.z *= sign((-viewDir.x));
    #line 571
    XZv.x *= sign((-viewDir.y));
    XYv.x *= sign(viewDir.z);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.z)) * viewDir.z);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.x)) * viewDir.x);
    #line 575
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.x)) * viewDir.x);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.y)) * viewDir.y);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.z)) * viewDir.z);
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.y)) * viewDir.y);
    #line 579
    highp vec2 ZY = ((mvMatrix * ZYv).xy - mvCenter.xy);
    highp vec2 XZ = ((mvMatrix * XZv).xy - mvCenter.xy);
    highp vec2 XY = ((mvMatrix * XYv).xy - mvCenter.xy);
    o.texcoordZY = (vec2( 0.5, 0.5) + (0.6 * ZY));
    #line 583
    o.texcoordXZ = (vec2( 0.5, 0.5) + (0.6 * XZ));
    o.texcoordXY = (vec2( 0.5, 0.5) + (0.6 * XY));
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    #line 587
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out lowp vec4 xlv_COLOR;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.texcoord = vec2(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_COLOR = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD1 = vec2(xl_retval.texcoordZY);
    xlv_TEXCOORD2 = vec2(xl_retval.texcoordXZ);
    xlv_TEXCOORD3 = vec2(xl_retval.texcoordXY);
    xlv_TEXCOORD4 = vec3(xl_retval.camPos);
    xlv_TEXCOORD5 = vec3(xl_retval.baseLight);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 403
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 504
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 495
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 394
uniform sampler2D _LightTextureB0;
#line 399
#line 413
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 426
#line 434
#line 448
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 481
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 485
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 489
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 493
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 519
#line 535
#line 592
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 592
lowp vec4 frag( in v2f IN ) {
    mediump float xval = IN.viewDir.x;
    mediump vec4 xtex = texture( _LeftTex, IN.texcoordZY);
    #line 596
    mediump float yval = IN.viewDir.y;
    mediump vec4 ytex = texture( _TopTex, IN.texcoordXZ);
    mediump float zval = IN.viewDir.z;
    mediump vec4 ztex = texture( _FrontTex, IN.texcoordXY);
    #line 600
    mediump vec4 tex = mix( mix( xtex, ytex, vec4( yval)), ztex, vec4( zval));
    mediump vec4 prev = (((0.94 * _Color) * IN.color) * tex);
    mediump vec4 color;
    color.xyz = (prev.xyz * IN.baseLight);
    #line 604
    color.w = prev.w;
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 608
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in lowp vec4 xlv_COLOR;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_COLOR);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD0);
    xlt_IN.texcoordZY = vec2(xlv_TEXCOORD1);
    xlt_IN.texcoordXZ = vec2(xlv_TEXCOORD2);
    xlt_IN.texcoordXY = vec2(xlv_TEXCOORD3);
    xlt_IN.camPos = vec3(xlv_TEXCOORD4);
    xlt_IN.baseLight = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform vec3 _MaxTrans;
uniform float _MaxScale;
uniform float _Rotation;
uniform float _MinLight;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 unity_MatrixV;


uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 XYv_1;
  vec4 XZv_2;
  vec4 ZYv_3;
  vec3 detail_pos_4;
  float localScale_5;
  vec4 localOrigin_6;
  vec4 tmpvar_7;
  vec3 tmpvar_8;
  vec4 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_6.xyz = (((2.0 * tmpvar_10) - 1.0) * _MaxTrans);
  localOrigin_6.w = 1.0;
  localScale_5 = ((tmpvar_10.x * (_MaxScale - 1.0)) + 1.0);
  vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * localOrigin_6);
  vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = gl_Normal;
  tmpvar_8 = clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (normalize((_Object2World * tmpvar_12).xyz), normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0);
  vec4 tmpvar_13;
  tmpvar_13 = -((_MainRotation * tmpvar_11));
  detail_pos_4 = (_DetailRotation * tmpvar_13).xyz;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13.xyz);
  vec2 uv_15;
  float r_16;
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_14.x)))) {
    float y_over_x_17;
    y_over_x_17 = (tmpvar_14.x / tmpvar_14.z);
    float s_18;
    float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_14.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(tmpvar_14.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_16));
  uv_15.y = (0.31831 * (1.5708 - (sign(tmpvar_14.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_14.y))) * (1.5708 + (abs(tmpvar_14.y) * (-0.214602 + (abs(tmpvar_14.y) * (0.0865667 + (abs(tmpvar_14.y) * -0.0310296)))))))))));
  vec4 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(normalize(detail_pos_4));
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  uv_20.xy = (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale);
  uv_20.zw = vec2(0.0, 0.0);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DLod (_MainTex, uv_15, 0.0) * texture2DLod (_DetailTex, uv_20.xy, 0.0));
  tmpvar_7.xyz = tmpvar_24.xyz;
  vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = _WorldSpaceCameraPos;
  float tmpvar_26;
  vec4 p_27;
  p_27 = (tmpvar_11 - tmpvar_25);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  tmpvar_7.w = (tmpvar_24.w * (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0)));
  vec3 tmpvar_28;
  tmpvar_28.yz = vec2(0.0, 0.0);
  tmpvar_28.x = fract(_Rotation);
  vec3 x_29;
  x_29 = (tmpvar_28 + tmpvar_10);
  vec3 trans_30;
  trans_30 = localOrigin_6.xyz;
  float tmpvar_31;
  tmpvar_31 = (x_29.x * 6.28319);
  float tmpvar_32;
  tmpvar_32 = (x_29.y * 6.28319);
  float tmpvar_33;
  tmpvar_33 = (x_29.z * 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (sin(tmpvar_32) * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (cos(tmpvar_32) * tmpvar_34);
  float tmpvar_37;
  tmpvar_37 = sqrt((2.0 - tmpvar_33));
  float tmpvar_38;
  tmpvar_38 = sin(tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = cos(tmpvar_31);
  float tmpvar_40;
  tmpvar_40 = ((tmpvar_35 * tmpvar_39) - (tmpvar_36 * tmpvar_38));
  float tmpvar_41;
  tmpvar_41 = ((tmpvar_35 * tmpvar_38) + (tmpvar_36 * tmpvar_39));
  mat4 tmpvar_42;
  tmpvar_42[0].x = (localScale_5 * ((tmpvar_35 * tmpvar_40) - tmpvar_39));
  tmpvar_42[0].y = ((tmpvar_35 * tmpvar_41) - tmpvar_38);
  tmpvar_42[0].z = (tmpvar_35 * tmpvar_37);
  tmpvar_42[0].w = 0.0;
  tmpvar_42[1].x = ((tmpvar_36 * tmpvar_40) + tmpvar_38);
  tmpvar_42[1].y = (localScale_5 * ((tmpvar_36 * tmpvar_41) - tmpvar_39));
  tmpvar_42[1].z = (tmpvar_36 * tmpvar_37);
  tmpvar_42[1].w = 0.0;
  tmpvar_42[2].x = (tmpvar_37 * tmpvar_40);
  tmpvar_42[2].y = (tmpvar_37 * tmpvar_41);
  tmpvar_42[2].z = (localScale_5 * (1.0 - tmpvar_33));
  tmpvar_42[2].w = 0.0;
  tmpvar_42[3].x = trans_30.x;
  tmpvar_42[3].y = trans_30.y;
  tmpvar_42[3].z = trans_30.z;
  tmpvar_42[3].w = 1.0;
  mat4 tmpvar_43;
  tmpvar_43 = (((unity_MatrixV * _Object2World) * tmpvar_42));
  vec4 v_44;
  v_44.x = tmpvar_43[0].z;
  v_44.y = tmpvar_43[1].z;
  v_44.z = tmpvar_43[2].z;
  v_44.w = tmpvar_43[3].z;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(v_44.xyz);
  vec4 tmpvar_46;
  tmpvar_46 = (gl_ModelViewMatrix * localOrigin_6);
  vec4 tmpvar_47;
  tmpvar_47.xyz = (gl_Vertex.xyz * localScale_5);
  tmpvar_47.w = gl_Vertex.w;
  vec4 tmpvar_48;
  tmpvar_48 = (gl_ProjectionMatrix * (tmpvar_46 + tmpvar_47));
  vec2 tmpvar_49;
  tmpvar_49 = ((2.0 * gl_MultiTexCoord0.xy) - 1.0);
  vec4 tmpvar_50;
  tmpvar_50.z = 0.0;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = tmpvar_49.y;
  tmpvar_50.w = gl_Vertex.w;
  ZYv_3.xyw = tmpvar_50.zyw;
  XZv_2.yzw = tmpvar_50.zyw;
  XYv_1.yzw = tmpvar_50.yzw;
  ZYv_3.z = (tmpvar_49.x * sign(-(tmpvar_45.x)));
  XZv_2.x = (tmpvar_49.x * sign(-(tmpvar_45.y)));
  XYv_1.x = (tmpvar_49.x * sign(tmpvar_45.z));
  ZYv_3.x = ((sign(-(tmpvar_45.x)) * sign(ZYv_3.z)) * tmpvar_45.z);
  XZv_2.y = ((sign(-(tmpvar_45.y)) * sign(XZv_2.x)) * tmpvar_45.x);
  XYv_1.z = ((sign(-(tmpvar_45.z)) * sign(XYv_1.x)) * tmpvar_45.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_45.x)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_45.y)) * sign(tmpvar_49.y)) * tmpvar_45.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_45.z)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  vec4 o_51;
  vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_48 * 0.5);
  vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_48.zw;
  tmpvar_9.xyw = o_51.xyw;
  tmpvar_9.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_48;
  xlv_COLOR = tmpvar_7;
  xlv_TEXCOORD0 = abs(tmpvar_45);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * ZYv_3).xy - tmpvar_46.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XZv_2).xy - tmpvar_46.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XYv_1).xy - tmpvar_46.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_6).xyz));
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform vec4 _ZBufferParams;
void main ()
{
  vec4 color_1;
  vec4 tmpvar_2;
  tmpvar_2 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (texture2D (_LeftTex, xlv_TEXCOORD1), texture2D (_TopTex, xlv_TEXCOORD2), xlv_TEXCOORD0.yyyy), texture2D (_FrontTex, xlv_TEXCOORD3), xlv_TEXCOORD0.zzzz));
  color_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD5);
  color_1.w = (tmpvar_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 32 [glstate_lightmodel_ambient]
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_projection]
Vector 33 [_WorldSpaceCameraPos]
Vector 34 [_ProjectionParams]
Vector 35 [_ScreenParams]
Vector 36 [_WorldSpaceLightPos0]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [unity_MatrixV]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Matrix 28 [_LightMatrix0]
Vector 37 [_LightColor0]
Float 38 [_DetailScale]
Float 39 [_DistFade]
Float 40 [_DistFadeVert]
Float 41 [_MinLight]
Float 42 [_Rotation]
Float 43 [_MaxScale]
Vector 44 [_MaxTrans]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"vs_3_0
; 359 ALU, 4 TEX
dcl_position o0
dcl_color0 o1
dcl_texcoord0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord7 o9
dcl_texcoord8 o10
def c45, 0.15915491, 0.50000000, 6.28318501, -3.14159298
def c46, 123.54530334, 2.00000000, -1.00000000, 1.00000000
def c47, 0.00000000, -0.01872930, 0.07426100, -0.21211439
def c48, 1.57072902, 3.14159298, 0.31830987, -0.12123910
def c49, -0.01348047, 0.05747731, 0.19563590, -0.33299461
def c50, 0.99999559, 1.57079601, 0.15915494, 0.50000000
def c51, 6.28318548, 0.00000000, 1.00000000, -0.01000214
def c52, 0.60000002, 0.50000000, 4.03944778, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_2d s0
dcl_2d s1
mad r10.xy, v2, c46.y, c46.z
mov r1.w, c15
mov r1.z, c14.w
mov r1.x, c12.w
mov r1.y, c13.w
dp4 r0.z, r1, c22
dp4 r0.x, r1, c20
dp4 r0.y, r1, c21
frc r1.xyz, -r0
add r0.xyz, -r0, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mad r0.x, r1, c45, c45.y
frc r0.x, r0
mad r1.x, r0, c45.z, c45.w
sincos r0.xy, r1.x
mad r0.x, r1.z, c45, c45.y
mov r1.x, r0.y
frc r0.y, r0.x
mad r0.x, r1.y, c45, c45.y
mad r1.y, r0, c45.z, c45.w
frc r1.x, r0
sincos r0.xy, r1.y
mad r0.x, r1, c45.z, c45.w
sincos r1.xy, r0.x
mov r1.z, r0.y
mul r0.xyz, r1, c46.x
frc r0.xyz, r0
abs r6.xyz, r0
mad r0.xyz, r6, c46.y, c46.z
mul r0.xyz, r0, c44
mov r0.w, c46
dp4 r2.z, r0, c14
dp4 r2.x, r0, c12
dp4 r2.y, r0, c13
dp4 r2.w, r0, c15
dp4 r1.z, r2, c22
dp4 r1.x, r2, c20
dp4 r1.y, r2, c21
dp4 r1.w, r2, c23
add r7.xyz, -r2, c33
dp3 r2.x, r7, r7
rsq r8.w, r2.x
dp4 r3.z, -r1, c26
dp4 r3.x, -r1, c24
dp4 r3.y, -r1, c25
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mul r3.xyz, r1.w, r3
abs r3.xyz, r3
sge r1.w, r3.z, r3.x
add r4.xyz, r3.zxyw, -r3
mad r4.xyz, r1.w, r4, r3
sge r2.w, r4.x, r3.y
add r4.xyz, r4, -r3.yxzw
mad r3.xyz, r2.w, r4, r3.yxzw
dp3 r1.w, -r1, -r1
rsq r1.w, r1.w
mul r1.xyz, r1.w, -r1
abs r2.w, r1.x
abs r1.w, r1.z
mul r3.zw, r3.xyzy, c45.y
max r3.y, r1.w, r2.w
abs r4.y, r3.x
min r3.x, r1.w, r2.w
slt r1.w, r1, r2
rcp r3.y, r3.y
mul r4.x, r3, r3.y
rcp r3.x, r4.y
mul r3.xy, r3.zwzw, r3.x
mul r4.y, r4.x, r4.x
mad r3.z, r4.y, c49.x, c49.y
mad r3.z, r3, r4.y, c48.w
mad r2.w, r3.z, r4.y, c49.z
mad r2.w, r2, r4.y, c49
mad r2.w, r2, r4.y, c50.x
mul r2.w, r2, r4.x
max r1.w, -r1, r1
slt r1.w, c47.x, r1
add r3.z, -r1.w, c46.w
mul r3.z, r2.w, r3
add r2.w, -r2, c50.y
mad r1.w, r1, r2, r3.z
slt r1.z, r1, c47.x
max r1.z, -r1, r1
slt r1.z, c47.x, r1
slt r1.x, r1, c47
max r1.x, -r1, r1
add r2.w, -r1, c48.y
add r3.z, -r1, c46.w
mul r1.w, r1, r3.z
slt r1.x, c47, r1
mad r1.z, r1, r2.w, r1.w
add r3.z, -r1.x, c46.w
mul r1.w, r1.z, r3.z
mad r1.x, r1, -r1.z, r1.w
abs r1.z, r1.y
add r2.w, -r1.z, c46
mad r1.w, r1.z, c47.y, c47.z
mad r1.w, r1, r1.z, c47
rsq r2.w, r2.w
rcp r2.w, r2.w
mad r1.z, r1.w, r1, c48.x
mul r1.z, r1, r2.w
slt r1.y, r1, c47.x
mul r1.w, r1.y, r1.z
mad r1.z, -r1.w, c46.y, r1
mad r1.y, r1, c48, r1.z
mul r3.xy, r3, c38.x
mov r3.z, c47.x
texldl r3, r3.xyzz, s1
mad r1.x, r1, c50.z, c50.w
mov r4.yz, c47.x
frc r4.x, c42
add r4.xyz, r6, r4
mul r1.w, r4.x, c51.x
mad r1.z, r1.w, c45.x, c45.y
frc r2.w, r1.z
mad r4.x, r2.w, c45.z, c45.w
sincos r5.xy, r4.x
mul r2.w, r4.y, c51.x
mad r2.w, r2, c45.x, c45.y
frc r4.x, r2.w
mul r2.w, r4.z, c46.y
mad r5.z, r4.x, c45, c45.w
sincos r4.xy, r5.z
rsq r5.w, r2.w
rcp r4.z, r5.w
mul r4.w, r4.x, r4.z
mul r5.z, r4.y, r4
mul r4.x, r4.w, r5
mad r4.y, r5.z, r5, r4.x
mov r5.w, c18.x
mul r1.y, r1, c48.z
mov r1.z, c47.x
texldl r1, r1.xyzz, s0
mul r3, r1, r3
add r1.z, -r2.w, c46.y
mov o1.xyz, r3
mov r1.y, c43.x
add r1.y, c46.z, r1
mad r1.x, r5.z, r4.y, -r5.y
mad r7.w, r6.x, r1.y, c46
mad r1.w, r4, r4.y, -r5.x
mul r1.y, r7.w, r1.w
rsq r1.z, r1.z
rcp r1.w, r1.z
mul r1.z, r1.w, r4.y
mov r4.x, c18.y
mul r4.xyz, c13, r4.x
mad r4.xyz, c12, r5.w, r4
mov r5.w, c18.z
mad r4.xyz, c14, r5.w, r4
mov r5.w, c18
mad r6.xyz, c15, r5.w, r4
mul r5.w, r4, r5.y
mad r2.z, r5, r5.x, -r5.w
mad r2.y, r5.z, r2.z, -r5.x
mul r2.x, r7.w, r2.y
mad r2.y, r4.w, r2.z, r5
mul r5.x, r5.z, r1.w
add r2.w, -r2, c46
mul r5.y, r1.w, r4.w
mul r2.z, r1.w, r2
mul r4.xyz, r6.y, r1
rcp r5.w, r8.w
mul r5.z, r7.w, r2.w
mad r4.xyz, r6.x, r2, r4
mad r4.xyz, r6.z, r5, r4
mul r1.w, -r5, c40.x
add_sat r2.w, r1, c46
mul_sat r1.w, r5, c39.x
mul r1.w, r1, r2
dp3 r4.w, r4, r4
rsq r2.w, r4.w
mul r8.xyz, r2.w, r4
mul o1.w, r3, r1
slt r2.w, -r8.x, r8.x
slt r1.w, r8.x, -r8.x
sub r1.w, r1, r2
slt r3.x, r10.y, -r10.y
slt r2.w, -r10.y, r10.y
sub r10.z, r2.w, r3.x
mul r2.w, r10.x, r1
mul r3.z, r1.w, r10
slt r3.y, r2.w, -r2.w
slt r3.x, -r2.w, r2.w
sub r3.x, r3, r3.y
mov r9.z, r2.w
mov r2.w, r0.x
mul r1.w, r3.x, r1
mul r3.y, r8, r3.z
mad r9.x, r8.z, r1.w, r3.y
mov r1.w, c16.y
mul r3, c13, r1.w
mov r1.w, c16.x
mad r3, c12, r1.w, r3
mov r1.w, c16.z
mad r3, c14, r1.w, r3
mov r1.w, c16
mad r6, c15, r1.w, r3
mov r1.w, r0.y
mul r4, r1, r6.y
mov r3.x, c17.y
mov r5.w, c17.x
mul r3, c13, r3.x
mad r3, c12, r5.w, r3
mov r5.w, c17.z
mad r3, c14, r5.w, r3
mov r5.w, c17
mad r3, c15, r5.w, r3
mul r1, r3.y, r1
mov r5.w, r0.z
mad r1, r3.x, r2, r1
mad r1, r3.z, r5, r1
mad r1, r3.w, c51.yyyz, r1
mad r4, r2, r6.x, r4
mad r4, r5, r6.z, r4
mad r2, r6.w, c51.yyyz, r4
dp4 r5.y, r0, c1
dp4 r5.x, r0, c0
mov r4.w, v0
mov r4.y, r10
mov r9.yw, r4
dp4 r3.y, r1, r9
dp4 r3.x, r9, r2
slt r3.w, -r8.y, r8.y
slt r3.z, r8.y, -r8.y
sub r4.x, r3.z, r3.w
add r3.zw, -r5.xyxy, r3.xyxy
mul r3.x, r10, r4
mad o3.xy, r3.zwzw, c52.x, c52.y
slt r3.z, r3.x, -r3.x
slt r3.y, -r3.x, r3.x
sub r3.y, r3, r3.z
mul r3.z, r10, r4.x
mul r3.y, r3, r4.x
mul r4.x, r8.z, r3.z
mad r3.y, r8.x, r3, r4.x
mov r3.zw, r4.xyyw
dp4 r5.w, r1, r3
dp4 r5.z, r2, r3
add r3.xy, -r5, r5.zwzw
slt r3.w, -r8.z, r8.z
slt r3.z, r8, -r8
sub r4.x, r3.w, r3.z
sub r3.z, r3, r3.w
mul r4.x, r10, r4
mul r5.z, r10, r3
dp4 r5.w, r0, c3
slt r4.z, r4.x, -r4.x
slt r3.w, -r4.x, r4.x
sub r3.w, r3, r4.z
mul r4.z, r8.y, r5
dp4 r5.z, r0, c2
mul r3.z, r3, r3.w
mad r4.z, r8.x, r3, r4
dp4 r1.y, r1, r4
dp4 r1.x, r2, r4
mad o4.xy, r3, c52.x, c52.y
add r3.xy, -r5, r1
mov r0.w, v0
mul r0.xyz, v0, r7.w
add r0, r5, r0
dp4 r2.w, r0, c7
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
mov r1.w, r2
dp4 r1.z, r0, c6
mul r2.xyz, r1.xyww, c45.y
mov o0, r1
mul r2.y, r2, c34.x
mov r1.xyz, v1
mov r1.w, c47.x
dp4 r0.z, r1, c14
dp4 r0.y, r1, c13
dp4 r0.x, r1, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c36, c36
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c36
dp3_sat r0.x, r0, r1
add r0.x, r0, c51.w
mul r0.y, r0.x, c37.w
dp4 r1.x, v0, c2
mul_sat r0.w, r0.y, c52.z
mov r0.x, c41
add r0.xyz, c37, r0.x
mad_sat o7.xyz, r0, r0.w, c32
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.x, v0, c12
dp4 r0.y, v0, c13
mad o5.xy, r3, c52.x, c52.y
mad o10.xy, r2.z, c35.zwzw, r2
abs o2.xyz, r8
mov o10.w, r2
mul o6.xyz, r8.w, r7
dp4 o8.w, r0, c31
dp4 o8.z, r0, c30
dp4 o8.y, r0, c29
dp4 o8.x, r0, c28
dp4 o9.w, r0, c11
dp4 o9.z, r0, c10
dp4 o9.y, r0, c9
dp4 o9.x, r0, c8
mov o10.z, -r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
ConstBuffer "$Globals" 320 // 316 used size, 16 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
Vector 208 [_LightColor0] 4
Float 240 [_DetailScale]
Float 272 [_DistFade]
Float 276 [_DistFadeVert]
Float 284 [_MinLight]
Float 292 [_Rotation]
Float 296 [_MaxScale]
Vector 304 [_MaxTrans] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityPerFrame" 208 // 144 used size, 4 vars
Matrix 0 [glstate_matrix_projection] 4
Vector 64 [glstate_lightmodel_ambient] 4
Matrix 80 [unity_MatrixV] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
BindCB "UnityPerFrame" 5
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 257 instructions, 12 temp regs, 0 temp arrays:
// ALU 220 float, 8 int, 6 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhhkkiddeheamflgdngipchacbmbahhhmabaaaaaameceaaaaadaaaaaa
cmaaaaaanmaaaaaabaacaaaaejfdeheokiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaijaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaipaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaajgaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaajoaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaafaepfdejfeejepeoaaedepem
epfcaaeoepfcenebemaafeebeoehefeofeaafeeffiedepepfceeaaklepfdeheo
cmabaaaaalaaaaaaaiaaaaaabaabaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaabmabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaccabaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaccabaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaaccabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
amadaaaaccabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaaccabaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaccabaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaccabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaaccabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaccabaaaa
aiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
edepemepfcaafeeffiedepepfceeaaklfdeieefckmccaaaaeaaaabaaklaiaaaa
fjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaamaaaaaa
fjaaaaaeegiocaaaaeaaaaaabaaaaaaafjaaaaaeegiocaaaafaaaaaaajaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafpaaaaadpcbabaaa
aaaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaaeaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaadmccabaaaadaaaaaagfaaaaad
dccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagfaaaaadpccabaaa
ajaaaaaagiaaaaacamaaaaaadiaaaaajhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
acaaaaaafgifcaaaaeaaaaaaapaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaabaaaaaaagiacaaaaeaaaaaaapaaaaaaegacbaaaaaaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgikcaaaaeaaaaaaapaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgipcaaaaeaaaaaaapaaaaaaegacbaaaaaaaaaaaebaaaaaghcaabaaaaaaaaaaa
egacbaiaebaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaenaaaaaghcaabaaa
aaaaaaaaaanaaaaaegacbaaaaaaaaaaadiaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaaceaaaaadcbhphecdcbhphecdcbhphecaaaaaaaabkaaaaafhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaackiacaaaaaaaaaaa
bcaaaaaaabeaaaaaaaaaialpdcaaaaajicaabaaaaaaaaaaaakaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegbcbaaaaaaaaaaadgaaaaaficaabaaaabaaaaaadkbabaaaaaaaaaaa
dcaaaaaphcaabaaaacaaaaaaegacbaaaaaaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaabdaaaaaadiaaaaai
pcaabaaaadaaaaaafgafbaaaacaaaaaaegiocaaaaeaaaaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaaegiocaaaaeaaaaaaaeaaaaaaagaabaaaacaaaaaaegaobaaa
adaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaaeaaaaaaagaaaaaakgakbaaa
acaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaa
egiocaaaaeaaaaaaahaaaaaaaaaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadiaaaaaipcaabaaaaeaaaaaafgafbaaaabaaaaaaegiocaaa
afaaaaaaabaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaafaaaaaaaaaaaaaa
agaabaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaa
afaaaaaaacaaaaaakgakbaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaafaaaaaaadaaaaaapgapbaaaabaaaaaaegaobaaaaeaaaaaa
dgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaeaaaaaa
egiocaaaaeaaaaaaamaaaaaaagaabaaaacaaaaaaegaobaaaaeaaaaaadcaaaaak
pcaabaaaaeaaaaaaegiocaaaaeaaaaaaaoaaaaaakgakbaaaacaaaaaaegaobaaa
aeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaaaaeaaaaaaegiocaaaaeaaaaaa
apaaaaaadiaaaaaipcaabaaaafaaaaaafgafbaaaaeaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaa
aeaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaa
adaaaaaakgakbaaaaeaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaafaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgapbaaaaeaaaaaaegaobaaaafaaaaaadiaaaaaj
hcaabaaaagaaaaaafgafbaiaebaaaaaaafaaaaaabgigcaaaaaaaaaaaagaaaaaa
dcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
afaaaaaaegacbaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaafaaaaaaegacbaaaagaaaaaadcaaaaalhcaabaaa
agaaaaaabgigcaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaafaaaaaaegacbaaa
agaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaagaaaaaaegacbaaaagaaaaaa
eeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahhcaabaaaagaaaaaa
kgakbaaaabaaaaaaegacbaaaagaaaaaadgaaaaagecaabaaaahaaaaaackaabaia
mbaaaaaaagaaaaaabnaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaagaaaaaa
bkaabaiaibaaaaaaagaaaaaaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaajpcaabaaaaiaaaaaafgaibaiambaaaaaaagaaaaaa
kgabbaiaibaaaaaaagaaaaaadiaaaaahlcaabaaaahaaaaaakgakbaaaabaaaaaa
jganbaaaaiaaaaaadcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
aiaaaaaabkaabaiaibaaaaaaagaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaagaaaaaaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaihcaabaaaaiaaaaaabgagbaiaibaaaaaa
agaaaaaaegacbaaaahaaaaaadgaaaaagfcaabaaaahaaaaaafgaebaiambaaaaaa
agaaaaaaaaaaaaahhcaabaaaahaaaaaacgalbaaaahaaaaaaegacbaaaaiaaaaaa
dcaaaaakhcaabaaaagaaaaaakgakbaaaabaaaaaaegacbaaaahaaaaaaegacbaia
ibaaaaaaagaaaaaadiaaaaakmcaabaaaadaaaaaakgagbaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaahmcaabaaaadaaaaaakgaobaaa
adaaaaaaagaabaaaagaaaaaadiaaaaaimcaabaaaadaaaaaakgaobaaaadaaaaaa
agiacaaaaaaaaaaaapaaaaaaeiaaaaalpcaabaaaagaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaajecaabaaa
abaaaaaaegacbaiaebaaaaaaafaaaaaaegacbaiaebaaaaaaafaaaaaaeeaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaihcaabaaaafaaaaaakgakbaaa
abaaaaaaigabbaiaebaaaaaaafaaaaaadeaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaaoaaaaakecaabaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpckaabaaaabaaaaaaddaaaaaj
icaabaaaacaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaah
icaabaaaacaaaaaackaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajecaabaaa
adaaaaaadkaabaaaacaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ecaabaaaadaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaaochgdido
dcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaa
aebnkjlodcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaa
abeaaaaadiphhpdpdiaaaaahecaabaaaadaaaaaackaabaaaabaaaaaadkaabaaa
acaaaaaadcaaaaajecaabaaaadaaaaaackaabaaaadaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajicaabaaaadaaaaaabkaabaiaibaaaaaaafaaaaaa
akaabaiaibaaaaaaafaaaaaaabaaaaahecaabaaaadaaaaaadkaabaaaadaaaaaa
ckaabaaaadaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaadbaaaaaimcaabaaaadaaaaaafgajbaaaafaaaaaa
fgajbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaacaaaaaackaabaaaadaaaaaa
abeaaaaanlapejmaaaaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
acaaaaaaddaaaaahicaabaaaacaaaaaabkaabaaaafaaaaaaakaabaaaafaaaaaa
dbaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaiaebaaaaaaacaaaaaa
deaaaaahecaabaaaadaaaaaabkaabaaaafaaaaaaakaabaaaafaaaaaabnaaaaai
ecaabaaaadaaaaaackaabaaaadaaaaaackaabaiaebaaaaaaadaaaaaaabaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadhaaaaakecaabaaa
abaaaaaadkaabaaaacaaaaaackaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaafaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakecaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaiaibaaaaaaafaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaakeanmjdpaaaaaaai
icaabaaaacaaaaaackaabaiambaaaaaaafaaaaaaabeaaaaaaaaaiadpelaaaaaf
icaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaahecaabaaaadaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaaadaaaaaackaabaaaadaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahecaabaaaadaaaaaadkaabaaa
adaaaaaackaabaaaadaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaahccaabaaaafaaaaaackaabaaa
abaaaaaaabeaaaaaidpjkcdoeiaaaaalpcaabaaaafaaaaaaegaabaaaafaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadiaaaaahpcaabaaa
afaaaaaaegaobaaaagaaaaaaegaobaaaafaaaaaaaaaaaaajhcaabaaaagaaaaaa
egacbaaaaeaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaaaaaaaaajhcaabaaa
aeaaaaaaegacbaiaebaaaaaaaeaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaagaaaaaaegacbaaaagaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaaiicaabaaaacaaaaaackaabaaaabaaaaaa
akiacaaaaaaaaaaabbaaaaaadccaaaalecaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaabbaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpdgcaaaaficaabaaa
acaaaaaadkaabaaaacaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaacaaaaaadiaaaaahiccabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
afaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaafaaaaaabkaaaaagbcaabaaa
afaaaaaabkiacaaaaaaaaaaabcaaaaaadgaaaaaigcaabaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaafaaaaaaaaaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaa
ckaabaaaaaaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaak
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaanlapmjeanlapmjeaaaaaaaaa
aaaaaaaadcaaaabamcaabaaaadaaaaaakgakbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaea
aaaaiadpenaaaaahbcaabaaaafaaaaaabcaabaaaagaaaaaabkaabaaaaaaaaaaa
enaaaaahbcaabaaaaaaaaaaabcaabaaaahaaaaaaakaabaaaaaaaaaaadiaaaaah
ccaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaaagaaaaaadiaaaaahecaabaaa
aaaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaadiaaaaahecaabaaaabaaaaaa
akaabaaaahaaaaaabkaabaaaaaaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
aaaaaaaaakaabaaaaaaaaaaackaabaaaabaaaaaadcaaaaakicaabaaaacaaaaaa
bkaabaaaaaaaaaaackaabaaaabaaaaaaakaabaiaebaaaaaaahaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaajhcaabaaa
afaaaaaafgifcaaaaeaaaaaaanaaaaaaegiccaaaafaaaaaaagaaaaaadcaaaaal
hcaabaaaafaaaaaaegiccaaaafaaaaaaafaaaaaaagiacaaaaeaaaaaaanaaaaaa
egacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaafaaaaaaahaaaaaa
kgikcaaaaeaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaa
egiccaaaafaaaaaaaiaaaaaapgipcaaaaeaaaaaaanaaaaaaegacbaaaafaaaaaa
diaaaaahhcaabaaaagaaaaaapgapbaaaacaaaaaaegacbaaaafaaaaaadiaaaaah
icaabaaaacaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakicaabaaa
acaaaaaackaabaaaaaaaaaaaakaabaaaahaaaaaadkaabaiaebaaaaaaacaaaaaa
dcaaaaajicaabaaaaeaaaaaabkaabaaaaaaaaaaadkaabaaaacaaaaaaakaabaaa
aaaaaaaadiaaaaajocaabaaaahaaaaaafgifcaaaaeaaaaaaamaaaaaaagijcaaa
afaaaaaaagaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaaafaaaaaaafaaaaaa
agiacaaaaeaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaalocaabaaaahaaaaaa
agijcaaaafaaaaaaahaaaaaakgikcaaaaeaaaaaaamaaaaaafgaobaaaahaaaaaa
dcaaaaalocaabaaaahaaaaaaagijcaaaafaaaaaaaiaaaaaapgipcaaaaeaaaaaa
amaaaaaafgaobaaaahaaaaaadcaaaaajhcaabaaaagaaaaaajgahbaaaahaaaaaa
pgapbaaaaeaaaaaaegacbaaaagaaaaaaelaaaaafecaabaaaadaaaaaackaabaaa
adaaaaaadiaaaaahicaabaaaadaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaa
diaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaadaaaaaadiaaaaaj
hcaabaaaaiaaaaaafgifcaaaaeaaaaaaaoaaaaaaegiccaaaafaaaaaaagaaaaaa
dcaaaaalhcaabaaaaiaaaaaaegiccaaaafaaaaaaafaaaaaaagiacaaaaeaaaaaa
aoaaaaaaegacbaaaaiaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaafaaaaaa
ahaaaaaakgikcaaaaeaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaalhcaabaaa
aiaaaaaaegiccaaaafaaaaaaaiaaaaaapgipcaaaaeaaaaaaaoaaaaaaegacbaaa
aiaaaaaadcaaaaajhcaabaaaagaaaaaaegacbaaaaiaaaaaafgafbaaaaaaaaaaa
egacbaaaagaaaaaadgaaaaafccaabaaaajaaaaaackaabaaaagaaaaaadcaaaaak
ccaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaa
ahaaaaaadcaaaaakbcaabaaaaaaaaaaackaabaaaaaaaaaaackaabaaaabaaaaaa
akaabaiaebaaaaaaaaaaaaaadiaaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaa
ckaabaaaadaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaackaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaa
diaaaaahhcaabaaaakaaaaaakgakbaaaabaaaaaaegacbaaaafaaaaaadcaaaaaj
hcaabaaaakaaaaaajgahbaaaahaaaaaapgapbaaaacaaaaaaegacbaaaakaaaaaa
dcaaaaajhcaabaaaakaaaaaaegacbaaaaiaaaaaapgapbaaaadaaaaaaegacbaaa
akaaaaaadiaaaaahhcaabaaaalaaaaaaagaabaaaaaaaaaaaegacbaaaafaaaaaa
diaaaaahkcaabaaaacaaaaaafgafbaaaacaaaaaaagaebaaaafaaaaaadcaaaaaj
dcaabaaaacaaaaaajgafbaaaahaaaaaaagaabaaaacaaaaaangafbaaaacaaaaaa
dcaaaaajdcaabaaaacaaaaaaegaabaaaaiaaaaaakgakbaaaacaaaaaaegaabaaa
acaaaaaadiaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajlcaabaaaaaaaaaaajganbaaaahaaaaaaagaabaaaaaaaaaaaegaibaaa
alaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaiaaaaaakgakbaaaaaaaaaaa
egadbaaaaaaaaaaadgaaaaafbcaabaaaajaaaaaackaabaaaaaaaaaaadgaaaaaf
ecaabaaaajaaaaaackaabaaaakaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
ajaaaaaaegacbaaaajaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhcaabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaajaaaaaadgaaaaag
hccabaaaacaaaaaaegacbaiaibaaaaaaafaaaaaadiaaaaajmcaabaaaaaaaaaaa
fgifcaaaaeaaaaaaapaaaaaaagiecaaaafaaaaaaagaaaaaadcaaaaalmcaabaaa
aaaaaaaaagiecaaaafaaaaaaafaaaaaaagiacaaaaeaaaaaaapaaaaaakgaobaaa
aaaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaaafaaaaaaahaaaaaakgikcaaa
aeaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaa
afaaaaaaaiaaaaaapgipcaaaaeaaaaaaapaaaaaakgaobaaaaaaaaaaaaaaaaaah
mcaabaaaaaaaaaaakgaobaaaaaaaaaaaagaebaaaacaaaaaadbaaaaalhcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaegacbaiaebaaaaaa
afaaaaaadbaaaaalhcaabaaaahaaaaaaegacbaiaebaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaboaaaaaihcaabaaaacaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaahaaaaaadcaaaaapmcaabaaaadaaaaaaagbebaaa
aeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaceaaaaaaaaaaaaa
aaaaaaaaaaaaialpaaaaialpdbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaa
dkaabaaaadaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaa
aaaaaaaaboaaaaaiecaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadkaabaaa
acaaaaaacgaaaaaiaanaaaaahcaabaaaahaaaaaakgakbaaaabaaaaaaegacbaaa
acaaaaaaclaaaaafhcaabaaaahaaaaaaegacbaaaahaaaaaadiaaaaahhcaabaaa
ahaaaaaajgafbaaaafaaaaaaegacbaaaahaaaaaaclaaaaafkcaabaaaafaaaaaa
agaebaaaacaaaaaadiaaaaahkcaabaaaafaaaaaakgakbaaaadaaaaaafganbaaa
afaaaaaadbaaaaakmcaabaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaafganbaaaafaaaaaadbaaaaakdcaabaaaaiaaaaaangafbaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaboaaaaaimcaabaaaagaaaaaa
kgaobaiaebaaaaaaagaaaaaaagaebaaaaiaaaaaacgaaaaaiaanaaaaadcaabaaa
acaaaaaaegaabaaaacaaaaaaogakbaaaagaaaaaaclaaaaafdcaabaaaacaaaaaa
egaabaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaaacaaaaaacgakbaaa
afaaaaaaegaabaaaahaaaaaadiaaaaahkcaabaaaacaaaaaafgafbaaaacaaaaaa
agaebaaaagaaaaaadiaaaaahdcaabaaaagaaaaaapgapbaaaadaaaaaaegaabaaa
agaaaaaadcaaaaajmcaabaaaagaaaaaaagaebaaaaaaaaaaaagaabaaaacaaaaaa
agaebaaaagaaaaaadcaaaaajmcaabaaaagaaaaaaagaebaaaakaaaaaafgafbaaa
afaaaaaakgaobaaaagaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaaaaaaaaaa
pgapbaaaafaaaaaangafbaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaa
akaaaaaapgapbaaaadaaaaaaegaabaaaacaaaaaadcaaaaajdcaabaaaacaaaaaa
ogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaaacaaaaaaaaaaaaaidcaabaaa
acaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaaacaaaaaadcaaaaapmccabaaa
adaaaaaaagaebaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaajkjjbjdpjkjjbjdp
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpdcaaaaajdcaabaaaacaaaaaa
ogakbaaaaaaaaaaapgbpbaaaaaaaaaaaogakbaaaagaaaaaaaaaaaaaidcaabaaa
acaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaaacaaaaaadcaaaaapdccabaaa
adaaaaaaegaabaaaacaaaaaaaceaaaaajkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadbaaaaahecaabaaaabaaaaaa
abeaaaaaaaaaaaaackaabaaaafaaaaaadbaaaaahbcaabaaaacaaaaaackaabaaa
afaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaakaabaaaacaaaaaaclaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaackaabaaaadaaaaaadbaaaaah
bcaabaaaacaaaaaaabeaaaaaaaaaaaaackaabaaaabaaaaaadbaaaaahccaabaaa
acaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaadcaaaaajdcaabaaaaaaaaaaa
egaabaaaaaaaaaaakgakbaaaabaaaaaaegaabaaaagaaaaaaboaaaaaiecaabaaa
abaaaaaaakaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaacgaaaaaiaanaaaaa
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaaaacaaaaaaclaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaaaafaaaaaackaabaaaahaaaaaadcaaaaajdcaabaaaaaaaaaaaegaabaaa
akaaaaaakgakbaaaabaaaaaaegaabaaaaaaaaaaadcaaaaajdcaabaaaaaaaaaaa
ogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaaaaaaaaaaaaaaaaaidcaabaaa
aaaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaaaaaaaaaadcaaaaapdccabaaa
aeaaaaaaegaabaaaaaaaaaaaaceaaaaajkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaaagaabaaaaaaaaaaaegacbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaadkiacaaa
aaaaaaaaanaaaaaadicaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajocaabaaaaaaaaaaaagijcaaaaaaaaaaaanaaaaaapgipcaaa
aaaaaaaabbaaaaaadccaaaakhccabaaaagaaaaaajgahbaaaaaaaaaaaagaabaaa
aaaaaaaaegiccaaaafaaaaaaaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaakaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaajaaaaaa
agaabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaalaaaaaakgakbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaa
ahaaaaaaegiocaaaaaaaaaaaamaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaa
diaaaaaipcaabaaaacaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaakhcaabaaa
aaaaaaaaegadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaa
dgaaaaaficcabaaaajaaaaaadkaabaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaaaaaaaaahdccabaaaajaaaaaa
kgakbaaaaaaaaaaamgaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaaeaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
aeaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaaeaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaaeaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 404
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 505
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 496
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 394
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 414
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 427
#line 435
#line 449
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 482
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 486
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 490
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 494
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 520
#line 536
#line 593
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 380
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 382
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 355
mediump vec4 GetShereDetailMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 357
    highp vec3 sphereVectNorm = normalize(sphereVect);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 361
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    highp vec4 uv;
    uv.xy = (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale);
    #line 365
    uv.zw = vec2( 0.0, 0.0);
    return xll_tex2Dlod( texSampler, uv);
}
#line 330
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 332
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 336
    return uv;
}
#line 338
mediump vec4 GetSphereMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 340
    highp vec4 uv;
    highp vec3 sphereVectNorm = normalize(sphereVect);
    uv.xy = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    uv.zw = vec2( 0.0, 0.0);
    #line 344
    mediump vec4 tex = xll_tex2Dlod( texSampler, uv);
    return tex;
}
#line 317
highp vec3 hash( in highp vec3 val ) {
    #line 319
    return fract((sin(val) * 123.545));
}
#line 520
highp mat4 rand_rotation( in highp vec3 x, in highp float scale, in highp vec3 trans ) {
    highp float theta = (x.x * 6.28319);
    highp float phi = (x.y * 6.28319);
    #line 524
    highp float z = (x.z * 2.0);
    highp float r = sqrt(z);
    highp float Vx = (sin(phi) * r);
    highp float Vy = (cos(phi) * r);
    #line 528
    highp float Vz = sqrt((2.0 - z));
    highp float st = sin(theta);
    highp float ct = cos(theta);
    highp float Sx = ((Vx * ct) - (Vy * st));
    #line 532
    highp float Sy = ((Vx * st) + (Vy * ct));
    highp mat4 M = mat4( (scale * ((Vx * Sx) - ct)), ((Vx * Sy) - st), (Vx * Vz), 0.0, ((Vy * Sx) + st), (scale * ((Vy * Sy) - ct)), (Vy * Vz), 0.0, (Vz * Sx), (Vz * Sy), (scale * (1.0 - z)), 0.0, trans.x, trans.y, trans.z, 1.0);
    return M;
}
#line 536
v2f vert( in appdata_t v ) {
    v2f o;
    highp vec4 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0));
    #line 540
    highp vec4 planet_pos = (-(_MainRotation * origin));
    highp vec3 hashVect = abs(hash( normalize(floor(planet_pos.xyz))));
    highp vec4 localOrigin;
    localOrigin.xyz = (((2.0 * hashVect) - 1.0) * _MaxTrans);
    #line 544
    localOrigin.w = 1.0;
    highp float localScale = ((hashVect.x * (_MaxScale - 1.0)) + 1.0);
    origin = (_Object2World * localOrigin);
    highp vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 548
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 552
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    o.baseLight = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    planet_pos = (-(_MainRotation * origin));
    highp vec3 detail_pos = (_DetailRotation * planet_pos).xyz;
    #line 556
    o.color = GetSphereMapNoLOD( _MainTex, planet_pos.xyz);
    o.color *= GetShereDetailMapNoLOD( _DetailTex, detail_pos, _DetailScale);
    o.color.w *= GetDistanceFade( distance( origin, vec4( _WorldSpaceCameraPos, 0.0)), _DistFade, _DistFadeVert);
    highp mat4 M = rand_rotation( (vec3( fract(_Rotation), 0.0, 0.0) + hashVect), localScale, localOrigin.xyz);
    #line 560
    highp mat4 mvMatrix = ((unity_MatrixV * _Object2World) * M);
    highp vec3 viewDir = normalize(xll_matrixindex_mf4x4_i (mvMatrix, 2).xyz);
    o.viewDir = abs(viewDir);
    highp vec4 mvCenter = (glstate_matrix_modelview0 * localOrigin);
    #line 564
    o.pos = (glstate_matrix_projection * (mvCenter + vec4( (v.vertex.xyz * localScale), v.vertex.w)));
    o.camPos = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * localOrigin).xyz));
    highp vec2 texcoodOffsetxy = ((2.0 * v.texcoord) - 1.0);
    highp vec4 texcoordOffset = vec4( texcoodOffsetxy.x, texcoodOffsetxy.y, 0.0, v.vertex.w);
    #line 568
    highp vec4 ZYv = texcoordOffset.zyxw;
    highp vec4 XZv = texcoordOffset.xzyw;
    highp vec4 XYv = texcoordOffset.xyzw;
    ZYv.z *= sign((-viewDir.x));
    #line 572
    XZv.x *= sign((-viewDir.y));
    XYv.x *= sign(viewDir.z);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.z)) * viewDir.z);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.x)) * viewDir.x);
    #line 576
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.x)) * viewDir.x);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.y)) * viewDir.y);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.z)) * viewDir.z);
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.y)) * viewDir.y);
    #line 580
    highp vec2 ZY = ((mvMatrix * ZYv).xy - mvCenter.xy);
    highp vec2 XZ = ((mvMatrix * XZv).xy - mvCenter.xy);
    highp vec2 XY = ((mvMatrix * XYv).xy - mvCenter.xy);
    o.texcoordZY = (vec2( 0.5, 0.5) + (0.6 * ZY));
    #line 584
    o.texcoordXZ = (vec2( 0.5, 0.5) + (0.6 * XZ));
    o.texcoordXY = (vec2( 0.5, 0.5) + (0.6 * XY));
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    #line 588
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out lowp vec4 xlv_COLOR;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.texcoord = vec2(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_COLOR = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD1 = vec2(xl_retval.texcoordZY);
    xlv_TEXCOORD2 = vec2(xl_retval.texcoordXZ);
    xlv_TEXCOORD3 = vec2(xl_retval.texcoordXY);
    xlv_TEXCOORD4 = vec3(xl_retval.camPos);
    xlv_TEXCOORD5 = vec3(xl_retval.baseLight);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 404
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 505
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 496
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 394
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 414
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 427
#line 435
#line 449
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 482
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 486
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 490
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 494
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 520
#line 536
#line 593
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 593
lowp vec4 frag( in v2f IN ) {
    mediump float xval = IN.viewDir.x;
    mediump vec4 xtex = texture( _LeftTex, IN.texcoordZY);
    #line 597
    mediump float yval = IN.viewDir.y;
    mediump vec4 ytex = texture( _TopTex, IN.texcoordXZ);
    mediump float zval = IN.viewDir.z;
    mediump vec4 ztex = texture( _FrontTex, IN.texcoordXY);
    #line 601
    mediump vec4 tex = mix( mix( xtex, ytex, vec4( yval)), ztex, vec4( zval));
    mediump vec4 prev = (((0.94 * _Color) * IN.color) * tex);
    mediump vec4 color;
    color.xyz = (prev.xyz * IN.baseLight);
    #line 605
    color.w = prev.w;
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 609
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in lowp vec4 xlv_COLOR;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_COLOR);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD0);
    xlt_IN.texcoordZY = vec2(xlv_TEXCOORD1);
    xlt_IN.texcoordXZ = vec2(xlv_TEXCOORD2);
    xlt_IN.texcoordXY = vec2(xlv_TEXCOORD3);
    xlt_IN.camPos = vec3(xlv_TEXCOORD4);
    xlt_IN.baseLight = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform vec3 _MaxTrans;
uniform float _MaxScale;
uniform float _Rotation;
uniform float _MinLight;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 unity_MatrixV;


uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 XYv_1;
  vec4 XZv_2;
  vec4 ZYv_3;
  vec3 detail_pos_4;
  float localScale_5;
  vec4 localOrigin_6;
  vec4 tmpvar_7;
  vec3 tmpvar_8;
  vec4 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_6.xyz = (((2.0 * tmpvar_10) - 1.0) * _MaxTrans);
  localOrigin_6.w = 1.0;
  localScale_5 = ((tmpvar_10.x * (_MaxScale - 1.0)) + 1.0);
  vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * localOrigin_6);
  vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = gl_Normal;
  tmpvar_8 = clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (normalize((_Object2World * tmpvar_12).xyz), normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0);
  vec4 tmpvar_13;
  tmpvar_13 = -((_MainRotation * tmpvar_11));
  detail_pos_4 = (_DetailRotation * tmpvar_13).xyz;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13.xyz);
  vec2 uv_15;
  float r_16;
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_14.x)))) {
    float y_over_x_17;
    y_over_x_17 = (tmpvar_14.x / tmpvar_14.z);
    float s_18;
    float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_14.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(tmpvar_14.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_16));
  uv_15.y = (0.31831 * (1.5708 - (sign(tmpvar_14.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_14.y))) * (1.5708 + (abs(tmpvar_14.y) * (-0.214602 + (abs(tmpvar_14.y) * (0.0865667 + (abs(tmpvar_14.y) * -0.0310296)))))))))));
  vec4 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(normalize(detail_pos_4));
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  uv_20.xy = (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale);
  uv_20.zw = vec2(0.0, 0.0);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DLod (_MainTex, uv_15, 0.0) * texture2DLod (_DetailTex, uv_20.xy, 0.0));
  tmpvar_7.xyz = tmpvar_24.xyz;
  vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = _WorldSpaceCameraPos;
  float tmpvar_26;
  vec4 p_27;
  p_27 = (tmpvar_11 - tmpvar_25);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  tmpvar_7.w = (tmpvar_24.w * (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0)));
  vec3 tmpvar_28;
  tmpvar_28.yz = vec2(0.0, 0.0);
  tmpvar_28.x = fract(_Rotation);
  vec3 x_29;
  x_29 = (tmpvar_28 + tmpvar_10);
  vec3 trans_30;
  trans_30 = localOrigin_6.xyz;
  float tmpvar_31;
  tmpvar_31 = (x_29.x * 6.28319);
  float tmpvar_32;
  tmpvar_32 = (x_29.y * 6.28319);
  float tmpvar_33;
  tmpvar_33 = (x_29.z * 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (sin(tmpvar_32) * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (cos(tmpvar_32) * tmpvar_34);
  float tmpvar_37;
  tmpvar_37 = sqrt((2.0 - tmpvar_33));
  float tmpvar_38;
  tmpvar_38 = sin(tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = cos(tmpvar_31);
  float tmpvar_40;
  tmpvar_40 = ((tmpvar_35 * tmpvar_39) - (tmpvar_36 * tmpvar_38));
  float tmpvar_41;
  tmpvar_41 = ((tmpvar_35 * tmpvar_38) + (tmpvar_36 * tmpvar_39));
  mat4 tmpvar_42;
  tmpvar_42[0].x = (localScale_5 * ((tmpvar_35 * tmpvar_40) - tmpvar_39));
  tmpvar_42[0].y = ((tmpvar_35 * tmpvar_41) - tmpvar_38);
  tmpvar_42[0].z = (tmpvar_35 * tmpvar_37);
  tmpvar_42[0].w = 0.0;
  tmpvar_42[1].x = ((tmpvar_36 * tmpvar_40) + tmpvar_38);
  tmpvar_42[1].y = (localScale_5 * ((tmpvar_36 * tmpvar_41) - tmpvar_39));
  tmpvar_42[1].z = (tmpvar_36 * tmpvar_37);
  tmpvar_42[1].w = 0.0;
  tmpvar_42[2].x = (tmpvar_37 * tmpvar_40);
  tmpvar_42[2].y = (tmpvar_37 * tmpvar_41);
  tmpvar_42[2].z = (localScale_5 * (1.0 - tmpvar_33));
  tmpvar_42[2].w = 0.0;
  tmpvar_42[3].x = trans_30.x;
  tmpvar_42[3].y = trans_30.y;
  tmpvar_42[3].z = trans_30.z;
  tmpvar_42[3].w = 1.0;
  mat4 tmpvar_43;
  tmpvar_43 = (((unity_MatrixV * _Object2World) * tmpvar_42));
  vec4 v_44;
  v_44.x = tmpvar_43[0].z;
  v_44.y = tmpvar_43[1].z;
  v_44.z = tmpvar_43[2].z;
  v_44.w = tmpvar_43[3].z;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(v_44.xyz);
  vec4 tmpvar_46;
  tmpvar_46 = (gl_ModelViewMatrix * localOrigin_6);
  vec4 tmpvar_47;
  tmpvar_47.xyz = (gl_Vertex.xyz * localScale_5);
  tmpvar_47.w = gl_Vertex.w;
  vec4 tmpvar_48;
  tmpvar_48 = (gl_ProjectionMatrix * (tmpvar_46 + tmpvar_47));
  vec2 tmpvar_49;
  tmpvar_49 = ((2.0 * gl_MultiTexCoord0.xy) - 1.0);
  vec4 tmpvar_50;
  tmpvar_50.z = 0.0;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = tmpvar_49.y;
  tmpvar_50.w = gl_Vertex.w;
  ZYv_3.xyw = tmpvar_50.zyw;
  XZv_2.yzw = tmpvar_50.zyw;
  XYv_1.yzw = tmpvar_50.yzw;
  ZYv_3.z = (tmpvar_49.x * sign(-(tmpvar_45.x)));
  XZv_2.x = (tmpvar_49.x * sign(-(tmpvar_45.y)));
  XYv_1.x = (tmpvar_49.x * sign(tmpvar_45.z));
  ZYv_3.x = ((sign(-(tmpvar_45.x)) * sign(ZYv_3.z)) * tmpvar_45.z);
  XZv_2.y = ((sign(-(tmpvar_45.y)) * sign(XZv_2.x)) * tmpvar_45.x);
  XYv_1.z = ((sign(-(tmpvar_45.z)) * sign(XYv_1.x)) * tmpvar_45.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_45.x)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_45.y)) * sign(tmpvar_49.y)) * tmpvar_45.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_45.z)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  vec4 o_51;
  vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_48 * 0.5);
  vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_48.zw;
  tmpvar_9.xyw = o_51.xyw;
  tmpvar_9.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_54;
  vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_48 * 0.5);
  vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_48.zw;
  gl_Position = tmpvar_48;
  xlv_COLOR = tmpvar_7;
  xlv_TEXCOORD0 = abs(tmpvar_45);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * ZYv_3).xy - tmpvar_46.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XZv_2).xy - tmpvar_46.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XYv_1).xy - tmpvar_46.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_6).xyz));
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = o_54;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform vec4 _ZBufferParams;
void main ()
{
  vec4 color_1;
  vec4 tmpvar_2;
  tmpvar_2 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (texture2D (_LeftTex, xlv_TEXCOORD1), texture2D (_TopTex, xlv_TEXCOORD2), xlv_TEXCOORD0.yyyy), texture2D (_FrontTex, xlv_TEXCOORD3), xlv_TEXCOORD0.zzzz));
  color_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD5);
  color_1.w = (tmpvar_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 24 [glstate_lightmodel_ambient]
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_projection]
Vector 25 [_WorldSpaceCameraPos]
Vector 26 [_ProjectionParams]
Vector 27 [_ScreenParams]
Vector 28 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [unity_MatrixV]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Vector 29 [_LightColor0]
Float 30 [_DetailScale]
Float 31 [_DistFade]
Float 32 [_DistFadeVert]
Float 33 [_MinLight]
Float 34 [_Rotation]
Float 35 [_MaxScale]
Vector 36 [_MaxTrans]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"vs_3_0
; 350 ALU, 4 TEX
dcl_position o0
dcl_color0 o1
dcl_texcoord0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord8 o9
def c37, 0.15915491, 0.50000000, 6.28318501, -3.14159298
def c38, 123.54530334, 2.00000000, -1.00000000, 1.00000000
def c39, 0.00000000, -0.01872930, 0.07426100, -0.21211439
def c40, 1.57072902, 3.14159298, 0.31830987, -0.12123910
def c41, -0.01348047, 0.05747731, 0.19563590, -0.33299461
def c42, 0.99999559, 1.57079601, 0.15915494, 0.50000000
def c43, 6.28318548, 0.00000000, 1.00000000, -0.01000214
def c44, 0.60000002, 0.50000000, 4.03944778, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_2d s0
dcl_2d s1
mov r2.w, c38
mad r10.xy, v2, c38.y, c38.z
mov r1.w, c11
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
dp4 r0.z, r1, c18
dp4 r0.x, r1, c16
dp4 r0.y, r1, c17
frc r1.xyz, -r0
add r0.xyz, -r0, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mad r0.x, r1, c37, c37.y
frc r0.x, r0
mad r1.x, r0, c37.z, c37.w
sincos r0.xy, r1.x
mad r0.x, r1.z, c37, c37.y
mov r1.x, r0.y
frc r0.y, r0.x
mad r0.x, r1.y, c37, c37.y
mad r1.y, r0, c37.z, c37.w
frc r1.x, r0
sincos r0.xy, r1.y
mad r0.x, r1, c37.z, c37.w
sincos r1.xy, r0.x
mov r1.z, r0.y
mul r0.xyz, r1, c38.x
frc r0.xyz, r0
abs r4.xyz, r0
mad r0.xyz, r4, c38.y, c38.z
mul r2.xyz, r0, c36
dp4 r5.z, r2, c10
dp4 r5.x, r2, c8
dp4 r5.y, r2, c9
dp4 r5.w, r2, c11
dp4 r0.z, r5, c18
dp4 r0.x, r5, c16
dp4 r0.y, r5, c17
dp4 r0.w, r5, c19
add r7.xyz, -r5, c25
dp4 r1.z, -r0, c22
dp4 r1.x, -r0, c20
dp4 r1.y, -r0, c21
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul r1.xyz, r0.w, r1
abs r1.xyz, r1
sge r0.w, r1.z, r1.x
add r3.xyz, r1.zxyw, -r1
mad r3.xyz, r0.w, r3, r1
sge r1.w, r3.x, r1.y
add r3.xyz, r3, -r1.yxzw
mad r1.xyz, r1.w, r3, r1.yxzw
dp3 r0.w, -r0, -r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, -r0
abs r3.x, r0
abs r0.w, r0.z
mul r1.zw, r1.xyzy, c37.y
max r1.y, r0.w, r3.x
abs r3.z, r1.x
min r1.x, r0.w, r3
slt r0.w, r0, r3.x
rcp r1.y, r1.y
mul r3.y, r1.x, r1
rcp r1.x, r3.z
mul r1.xy, r1.zwzw, r1.x
mul r3.z, r3.y, r3.y
mad r1.z, r3, c41.x, c41.y
mad r1.z, r1, r3, c40.w
mad r1.z, r1, r3, c41
mad r1.z, r1, r3, c41.w
mad r1.z, r1, r3, c42.x
mul r1.z, r1, r3.y
max r0.w, -r0, r0
slt r0.w, c39.x, r0
add r1.w, -r0, c38
mul r1.w, r1.z, r1
add r1.z, -r1, c42.y
mad r0.w, r0, r1.z, r1
slt r0.z, r0, c39.x
max r0.z, -r0, r0
slt r0.z, c39.x, r0
slt r0.x, r0, c39
max r0.x, -r0, r0
add r1.z, -r0.w, c40.y
add r1.w, -r0.z, c38
mul r0.w, r0, r1
mad r0.z, r0, r1, r0.w
slt r0.x, c39, r0
add r1.w, -r0.x, c38
mul r0.w, r0.z, r1
mad r0.x, r0, -r0.z, r0.w
abs r0.z, r0.y
add r3.x, -r0.z, c38.w
mad r0.w, r0.z, c39.y, c39.z
mad r0.w, r0, r0.z, c39
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r0.z, r0.w, r0, c40.x
mul r0.z, r0, r3.x
slt r0.y, r0, c39.x
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c38.y, r0
mad r0.y, r0, c40, r0.z
mul r1.xy, r1, c30.x
mov r1.z, c39.x
texldl r1, r1.xyzz, s1
mad r0.x, r0, c42.z, c42.w
mov r3.yz, c39.x
frc r3.x, c34
add r3.xyz, r4, r3
mul r4.w, r3.z, c38.y
mul r0.w, r3.x, c43.x
mad r0.z, r0.w, c37.x, c37.y
frc r3.x, r0.z
mad r3.w, r3.x, c37.z, c37
sincos r6.xy, r3.w
mul r3.x, r3.y, c43
mad r3.x, r3, c37, c37.y
frc r3.x, r3
mad r4.y, r3.x, c37.z, c37.w
sincos r3.xy, r4.y
rsq r4.z, r4.w
rcp r3.z, r4.z
mul r3.w, r3.x, r3.z
mul r5.w, r3.y, r3.z
mul r3.x, r3.w, r6
mad r3.y, r5.w, r6, r3.x
mov r6.w, r2.z
mul r0.y, r0, c40.z
mov r0.z, c39.x
texldl r0, r0.xyzz, s0
mul r0, r0, r1
mov o1.xyz, r0
add r1.z, -r4.w, c38.y
mov r1.y, c35.x
add r1.y, c38.z, r1
mad r7.w, r4.x, r1.y, c38
mad r1.w, r3, r3.y, -r6.x
mad r1.x, r5.w, r3.y, -r6.y
mul r1.y, r7.w, r1.w
rsq r1.z, r1.z
rcp r1.w, r1.z
mul r1.z, r1.w, r3.y
mov r3.x, c14.y
mov r4.x, c14
mul r3.xyz, c9, r3.x
mad r3.xyz, c8, r4.x, r3
mov r4.x, c14.z
mad r3.xyz, c10, r4.x, r3
mov r4.x, c14.w
mad r4.xyz, c11, r4.x, r3
mul r3.xyz, r4.y, r1
mul r4.y, r3.w, r6
mad r5.z, r5.w, r6.x, -r4.y
mad r5.x, r5.w, r5.z, -r6
mad r5.y, r3.w, r5.z, r6
mul r6.x, r5.w, r1.w
dp3 r4.y, r7, r7
rsq r8.w, r4.y
add r4.y, -r4.w, c38.w
mul r6.y, r1.w, r3.w
mul r5.z, r1.w, r5
mul r5.x, r7.w, r5
mad r3.xyz, r4.x, r5, r3
mul r6.z, r7.w, r4.y
mad r3.xyz, r4.z, r6, r3
rcp r4.x, r8.w
mul r1.w, -r4.x, c32.x
add_sat r3.w, r1, c38
mul_sat r1.w, r4.x, c31.x
mul r1.w, r1, r3
dp3 r4.y, r3, r3
rsq r3.w, r4.y
mul r8.xyz, r3.w, r3
mov r5.w, r2.x
mul o1.w, r0, r1
slt r0.y, -r8.x, r8.x
slt r0.x, r8, -r8
sub r0.x, r0, r0.y
slt r0.z, r10.y, -r10.y
slt r0.y, -r10, r10
sub r10.z, r0.y, r0
mul r0.y, r10.x, r0.x
mul r1.w, r0.x, r10.z
slt r0.w, r0.y, -r0.y
slt r0.z, -r0.y, r0.y
sub r0.z, r0, r0.w
mul r0.w, r8.y, r1
mul r0.x, r0.z, r0
mad r9.x, r8.z, r0, r0.w
mov r9.z, r0.y
mov r0.x, c12.y
mov r1.w, r2.y
mov r3.x, c12
mul r0, c9, r0.x
mad r0, c8, r3.x, r0
mov r3.x, c12.z
mad r0, c10, r3.x, r0
mov r3.x, c12.w
mad r3, c11, r3.x, r0
mov r4.x, c13.y
mul r0, c9, r4.x
mov r4.x, c13
mad r0, c8, r4.x, r0
mov r4.x, c13.z
mad r0, c10, r4.x, r0
mov r4.x, c13.w
mad r0, c11, r4.x, r0
mul r4, r1, r3.y
mad r4, r5, r3.x, r4
mul r1, r0.y, r1
mad r1, r0.x, r5, r1
mad r1, r0.z, r6, r1
mad r4, r6, r3.z, r4
mad r0, r0.w, c43.yyyz, r1
mad r1, r3.w, c43.yyyz, r4
mov r5.w, v0
mov r5.y, r10
mov r9.yw, r5
dp4 r6.y, r0, r9
dp4 r6.x, r9, r1
slt r3.y, -r8, r8
slt r3.x, r8.y, -r8.y
sub r4.y, r3.x, r3
mul r4.x, r10, r4.y
dp4 r3.y, r2, c1
dp4 r3.x, r2, c0
add r3.zw, -r3.xyxy, r6.xyxy
mad o3.xy, r3.zwzw, c44.x, c44.y
slt r4.w, r4.x, -r4.x
slt r4.z, -r4.x, r4.x
sub r4.z, r4, r4.w
mul r4.w, r10.z, r4.y
mul r5.x, r8.z, r4.w
mul r4.y, r4.z, r4
mad r4.y, r8.x, r4, r5.x
mov r4.zw, r5.xyyw
dp4 r6.y, r0, r4
dp4 r6.x, r1, r4
add r4.xy, -r3, r6
slt r3.w, -r8.z, r8.z
mad o4.xy, r4, c44.x, c44.y
slt r3.z, r8, -r8
sub r4.x, r3.w, r3.z
mul r5.x, r10, r4
sub r3.z, r3, r3.w
mul r4.y, r10.z, r3.z
slt r4.x, r5, -r5
slt r3.w, -r5.x, r5.x
sub r3.w, r3, r4.x
mul r3.z, r3, r3.w
mul r4.x, r8.y, r4.y
mad r5.z, r8.x, r3, r4.x
dp4 r3.w, r2, c3
dp4 r3.z, r2, c2
mov r2.w, v0
mul r2.xyz, v0, r7.w
add r2, r3, r2
dp4 r3.w, r0, r5
dp4 r0.z, r2, c7
dp4 r3.z, r1, r5
add r3.xy, -r3, r3.zwzw
mov r0.w, r0.z
mov r1.w, r0.z
dp4 r0.z, r2, c6
dp4 r0.x, r2, c4
dp4 r0.y, r2, c5
mul r1.xyz, r0.xyww, c37.y
mov o0, r0
mul r1.y, r1, c26.x
mad r1.xy, r1.z, c27.zwzw, r1
dp4 r1.z, v0, c2
mov r1.z, -r1
dp4 r0.y, c28, c28
mov r2.xyz, v1
mov o9, r1
mov r2.w, c39.x
mov o8.xy, r1
dp4 r1.z, r2, c10
dp4 r1.y, r2, c9
dp4 r1.x, r2, c8
dp3 r0.x, r1, r1
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r2.xyz, r0.y, c28
mul r1.xyz, r0.x, r1
dp3_sat r0.x, r1, r2
add r0.x, r0, c43.w
mul r0.y, r0.x, c29.w
mov o8.zw, r0
mul_sat r0.w, r0.y, c44.z
mov r0.x, c33
add r0.xyz, c29, r0.x
mad o5.xy, r3, c44.x, c44.y
abs o2.xyz, r8
mul o6.xyz, r8.w, r7
mad_sat o7.xyz, r0, r0.w, c24
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
ConstBuffer "$Globals" 320 // 316 used size, 16 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Vector 208 [_LightColor0] 4
Float 240 [_DetailScale]
Float 272 [_DistFade]
Float 276 [_DistFadeVert]
Float 284 [_MinLight]
Float 292 [_Rotation]
Float 296 [_MaxScale]
Vector 304 [_MaxTrans] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityPerFrame" 208 // 144 used size, 4 vars
Matrix 0 [glstate_matrix_projection] 4
Vector 64 [glstate_lightmodel_ambient] 4
Matrix 80 [unity_MatrixV] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityPerFrame" 4
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 246 instructions, 12 temp regs, 0 temp arrays:
// ALU 208 float, 8 int, 6 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedohbfmgankcfcohhghemdmjjmpjeihkbbabaaaaaanmccaaaaadaaaaaa
cmaaaaaanmaaaaaapiabaaaaejfdeheokiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaijaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaipaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaajgaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaajoaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaafaepfdejfeejepeoaaedepem
epfcaaeoepfcenebemaafeebeoehefeofeaafeeffiedepepfceeaaklepfdeheo
beabaaaaakaaaaaaaiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaaaeabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaakabaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaakabaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaaakabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
amadaaaaakabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaaakabaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaakabaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaakabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaaakabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaaedepemepfcaafeeffiedepepfceeaaklfdeieefcnmcaaaaa
eaaaabaadhaiaaaafjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaa
abaaaaaaagaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaaajaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
dccabaaaadaaaaaagfaaaaadmccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadpccabaaa
ahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacamaaaaaadiaaaaajhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaacaaaaaafgifcaaaadaaaaaaapaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaadaaaaaaapaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaa
kgikcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaa
egiccaaaaaaaaaaaaeaaaaaapgipcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaa
ebaaaaaghcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaenaaaaaghcaabaaaaaaaaaaaaanaaaaaegacbaaaaaaaaaaadiaaaaak
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaadcbhphecdcbhphecdcbhphec
aaaaaaaabkaaaaafhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaa
aaaaaaaackiacaaaaaaaaaaabcaaaaaaabeaaaaaaaaaialpdcaaaaajicaabaaa
aaaaaaaaakaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaficaabaaa
abaaaaaadkbabaaaaaaaaaaadcaaaaaphcaabaaaacaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaa
aaaaaaaabdaaaaaadiaaaaaipcaabaaaadaaaaaafgafbaaaacaaaaaaegiocaaa
adaaaaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaadaaaaaaaeaaaaaa
agaabaaaacaaaaaaegaobaaaadaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaa
adaaaaaaagaaaaaakgakbaaaacaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegiocaaaadaaaaaaahaaaaaaaaaaaaahpcaabaaa
abaaaaaaegaobaaaabaaaaaaegaobaaaadaaaaaadiaaaaaipcaabaaaaeaaaaaa
fgafbaaaabaaaaaaegiocaaaaeaaaaaaabaaaaaadcaaaaakpcaabaaaaeaaaaaa
egiocaaaaeaaaaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaeaaaaaadcaaaaak
pcaabaaaaeaaaaaaegiocaaaaeaaaaaaacaaaaaakgakbaaaabaaaaaaegaobaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaeaaaaaaadaaaaaapgapbaaa
abaaaaaaegaobaaaaeaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaaipcaabaaaaeaaaaaafgafbaaaacaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaamaaaaaaagaabaaaacaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgakbaaaacaaaaaaegaobaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaaa
aeaaaaaaegiocaaaadaaaaaaapaaaaaadiaaaaaipcaabaaaafaaaaaafgafbaaa
aeaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaa
aaaaaaaaabaaaaaaagaabaaaaeaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaa
afaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaeaaaaaaegaobaaaafaaaaaa
dcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaaaeaaaaaa
egaobaaaafaaaaaadiaaaaajhcaabaaaagaaaaaafgafbaiaebaaaaaaafaaaaaa
bgigcaaaaaaaaaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaa
afaaaaaaagaabaiaebaaaaaaafaaaaaaegacbaaaagaaaaaadcaaaaalhcaabaaa
agaaaaaabgigcaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaafaaaaaaegacbaaa
agaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaaiaaaaaapgapbaia
ebaaaaaaafaaaaaaegacbaaaagaaaaaabaaaaaahicaabaaaacaaaaaaegacbaaa
agaaaaaaegacbaaaagaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaa
diaaaaahhcaabaaaagaaaaaapgapbaaaacaaaaaaegacbaaaagaaaaaadgaaaaag
ecaabaaaahaaaaaackaabaiambaaaaaaagaaaaaabnaaaaajicaabaaaacaaaaaa
ckaabaiaibaaaaaaagaaaaaabkaabaiaibaaaaaaagaaaaaaabaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaaaiaaaaaa
fgaibaiambaaaaaaagaaaaaakgabbaiaibaaaaaaagaaaaaadiaaaaahlcaabaaa
ahaaaaaapgapbaaaacaaaaaajganbaaaaiaaaaaadcaaaaakicaabaaaacaaaaaa
dkaabaaaacaaaaaaakaabaaaaiaaaaaabkaabaiaibaaaaaaagaaaaaabnaaaaai
icaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaibaaaaaaagaaaaaaabaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaihcaabaaa
aiaaaaaabgagbaiaibaaaaaaagaaaaaaegacbaaaahaaaaaadgaaaaagfcaabaaa
ahaaaaaafgaebaiambaaaaaaagaaaaaaaaaaaaahhcaabaaaahaaaaaacgalbaaa
ahaaaaaaegacbaaaaiaaaaaadcaaaaakhcaabaaaagaaaaaapgapbaaaacaaaaaa
egacbaaaahaaaaaaegacbaiaibaaaaaaagaaaaaadiaaaaakmcaabaaaadaaaaaa
kgagbaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaah
mcaabaaaadaaaaaakgaobaaaadaaaaaaagaabaaaagaaaaaadiaaaaaimcaabaaa
adaaaaaakgaobaaaadaaaaaaagiacaaaaaaaaaaaapaaaaaaeiaaaaalpcaabaaa
agaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaabaaaaaajicaabaaaacaaaaaaegacbaiaebaaaaaaafaaaaaaegacbaia
ebaaaaaaafaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaai
hcaabaaaafaaaaaapgapbaaaacaaaaaaigabbaiaebaaaaaaafaaaaaadeaaaaaj
icaabaaaacaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaa
aoaaaaakicaabaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
dkaabaaaacaaaaaaddaaaaajecaabaaaadaaaaaabkaabaiaibaaaaaaafaaaaaa
akaabaiaibaaaaaaafaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
ckaabaaaadaaaaaadiaaaaahecaabaaaadaaaaaadkaabaaaacaaaaaadkaabaaa
acaaaaaadcaaaaajicaabaaaadaaaaaackaabaaaadaaaaaaabeaaaaafpkokkdm
abeaaaaadgfkkolndcaaaaajicaabaaaadaaaaaackaabaaaadaaaaaadkaabaaa
adaaaaaaabeaaaaaochgdidodcaaaaajicaabaaaadaaaaaackaabaaaadaaaaaa
dkaabaaaadaaaaaaabeaaaaaaebnkjlodcaaaaajecaabaaaadaaaaaackaabaaa
adaaaaaadkaabaaaadaaaaaaabeaaaaadiphhpdpdiaaaaahicaabaaaadaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaa
adaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaaaeaaaaaa
bkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaabaaaaahicaabaaa
adaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaadcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaadkaabaaaadaaaaaadbaaaaaimcaabaaa
adaaaaaafgajbaaaafaaaaaafgajbaiaebaaaaaaafaaaaaaabaaaaahecaabaaa
adaaaaaackaabaaaadaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaaddaaaaahecaabaaaadaaaaaabkaabaaa
afaaaaaaakaabaaaafaaaaaadbaaaaaiecaabaaaadaaaaaackaabaaaadaaaaaa
ckaabaiaebaaaaaaadaaaaaadeaaaaahicaabaaaaeaaaaaabkaabaaaafaaaaaa
akaabaaaafaaaaaabnaaaaaiicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaia
ebaaaaaaaeaaaaaaabaaaaahecaabaaaadaaaaaackaabaaaadaaaaaadkaabaaa
aeaaaaaadhaaaaakicaabaaaacaaaaaackaabaaaadaaaaaadkaabaiaebaaaaaa
acaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaafaaaaaadkaabaaaacaaaaaa
abeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaacaaaaaackaabaia
ibaaaaaaafaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaakicaabaaa
acaaaaaadkaabaaaacaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaaiedefjlo
dcaaaaakicaabaaaacaaaaaadkaabaaaacaaaaaackaabaiaibaaaaaaafaaaaaa
abeaaaaakeanmjdpaaaaaaaiecaabaaaadaaaaaackaabaiambaaaaaaafaaaaaa
abeaaaaaaaaaiadpelaaaaafecaabaaaadaaaaaackaabaaaadaaaaaadiaaaaah
icaabaaaaeaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadcaaaaajicaabaaa
aeaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaah
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaadcaaaaajicaabaaa
acaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadkaabaaaadaaaaaadiaaaaah
ccaabaaaafaaaaaadkaabaaaacaaaaaaabeaaaaaidpjkcdoeiaaaaalpcaabaaa
afaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaabeaaaaa
aaaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaagaaaaaaegaobaaaafaaaaaa
aaaaaaajhcaabaaaagaaaaaaegacbaaaaeaaaaaaegiccaiaebaaaaaaabaaaaaa
aeaaaaaaaaaaaaajhcaabaaaaeaaaaaaegacbaiaebaaaaaaaeaaaaaaegiccaaa
abaaaaaaaeaaaaaabaaaaaahicaabaaaacaaaaaaegacbaaaagaaaaaaegacbaaa
agaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaaiecaabaaa
adaaaaaadkaabaaaacaaaaaaakiacaaaaaaaaaaabbaaaaaadccaaaalicaabaaa
acaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaadkaabaaaacaaaaaaabeaaaaa
aaaaiadpdgcaaaafecaabaaaadaaaaaackaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaahiccabaaaabaaaaaa
dkaabaaaacaaaaaadkaabaaaafaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
afaaaaaabkaaaaagbcaabaaaafaaaaaabkiacaaaaaaaaaaabcaaaaaadgaaaaai
gcaabaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaafaaaaaaaaaaaaahicaabaaa
acaaaaaackaabaaaaaaaaaaackaabaaaaaaaaaaaelaaaaaficaabaaaacaaaaaa
dkaabaaaacaaaaaadiaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaa
nlapmjeanlapmjeaaaaaaaaaaaaaaaaadcaaaabamcaabaaaadaaaaaakgakbaia
ebaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaeaaaaaiadpenaaaaahbcaabaaaafaaaaaabcaabaaa
agaaaaaabkaabaaaaaaaaaaaenaaaaahbcaabaaaaaaaaaaabcaabaaaahaaaaaa
akaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaadkaabaaaacaaaaaaakaabaaa
agaaaaaadiaaaaahecaabaaaaaaaaaaadkaabaaaacaaaaaaakaabaaaafaaaaaa
diaaaaahicaabaaaacaaaaaaakaabaaaahaaaaaabkaabaaaaaaaaaaadcaaaaaj
icaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaacaaaaaa
dcaaaaakicaabaaaaeaaaaaabkaabaaaaaaaaaaadkaabaaaacaaaaaaakaabaia
ebaaaaaaahaaaaaadiaaaaahicaabaaaaeaaaaaadkaabaaaaaaaaaaadkaabaaa
aeaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaadaaaaaaanaaaaaaegiccaaa
aeaaaaaaagaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaafaaaaaa
agiacaaaadaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaa
egiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaanaaaaaaegacbaaaafaaaaaa
dcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaa
anaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaagaaaaaapgapbaaaaeaaaaaa
egacbaaaafaaaaaadiaaaaahicaabaaaaeaaaaaaakaabaaaaaaaaaaabkaabaaa
aaaaaaaadcaaaaakicaabaaaaeaaaaaackaabaaaaaaaaaaaakaabaaaahaaaaaa
dkaabaiaebaaaaaaaeaaaaaadcaaaaajicaabaaaafaaaaaabkaabaaaaaaaaaaa
dkaabaaaaeaaaaaaakaabaaaaaaaaaaadiaaaaajocaabaaaahaaaaaafgifcaaa
adaaaaaaamaaaaaaagijcaaaaeaaaaaaagaaaaaadcaaaaalocaabaaaahaaaaaa
agijcaaaaeaaaaaaafaaaaaaagiacaaaadaaaaaaamaaaaaafgaobaaaahaaaaaa
dcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaa
amaaaaaafgaobaaaahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaa
aiaaaaaapgipcaaaadaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaajhcaabaaa
agaaaaaajgahbaaaahaaaaaapgapbaaaafaaaaaaegacbaaaagaaaaaaelaaaaaf
ecaabaaaadaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaadaaaaaadkaabaaa
aaaaaaaadkaabaaaadaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaa
ckaabaaaadaaaaaadiaaaaajhcaabaaaaiaaaaaafgifcaaaadaaaaaaaoaaaaaa
egiccaaaaeaaaaaaagaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaa
afaaaaaaagiacaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaalhcaabaaa
aiaaaaaaegiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaaoaaaaaaegacbaaa
aiaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaa
adaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaajhcaabaaaagaaaaaaegacbaaa
aiaaaaaafgafbaaaaaaaaaaaegacbaaaagaaaaaadgaaaaafccaabaaaajaaaaaa
ckaabaaaagaaaaaadcaaaaakccaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaa
aeaaaaaaakaabaiaebaaaaaaahaaaaaadcaaaaakbcaabaaaaaaaaaaackaabaaa
aaaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaaaaaaaadiaaaaahecaabaaa
aaaaaaaackaabaaaaaaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaahecaabaaaadaaaaaadkaabaaa
aeaaaaaackaabaaaadaaaaaadiaaaaahhcaabaaaakaaaaaapgapbaaaacaaaaaa
egacbaaaafaaaaaadcaaaaajhcaabaaaakaaaaaajgahbaaaahaaaaaakgakbaaa
adaaaaaaegacbaaaakaaaaaadcaaaaajhcaabaaaakaaaaaaegacbaaaaiaaaaaa
pgapbaaaadaaaaaaegacbaaaakaaaaaadiaaaaahhcaabaaaalaaaaaaagaabaaa
aaaaaaaaegacbaaaafaaaaaadiaaaaahkcaabaaaacaaaaaafgafbaaaacaaaaaa
agaebaaaafaaaaaadcaaaaajdcaabaaaacaaaaaajgafbaaaahaaaaaaagaabaaa
acaaaaaangafbaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaaaiaaaaaa
kgakbaaaacaaaaaaegaabaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaabkaabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajlcaabaaaaaaaaaaajganbaaaahaaaaaa
agaabaaaaaaaaaaaegaibaaaalaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaa
aiaaaaaakgakbaaaaaaaaaaaegadbaaaaaaaaaaadgaaaaafbcaabaaaajaaaaaa
ckaabaaaaaaaaaaadgaaaaafecaabaaaajaaaaaackaabaaaakaaaaaabaaaaaah
ecaabaaaaaaaaaaaegacbaaaajaaaaaaegacbaaaajaaaaaaeeaaaaafecaabaaa
aaaaaaaackaabaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaakgakbaaaaaaaaaaa
egacbaaaajaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaibaaaaaaafaaaaaa
diaaaaajmcaabaaaaaaaaaaafgifcaaaadaaaaaaapaaaaaaagiecaaaaeaaaaaa
agaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaafaaaaaaagiacaaa
adaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaa
aeaaaaaaahaaaaaakgikcaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaal
mcaabaaaaaaaaaaaagiecaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaaapaaaaaa
kgaobaaaaaaaaaaaaaaaaaahmcaabaaaaaaaaaaakgaobaaaaaaaaaaaagaebaaa
acaaaaaadbaaaaalhcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaegacbaiaebaaaaaaafaaaaaadbaaaaalhcaabaaaahaaaaaaegacbaia
ebaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaboaaaaai
hcaabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaahaaaaaadcaaaaap
mcaabaaaadaaaaaaagbebaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaea
aaaaaaeaaceaaaaaaaaaaaaaaaaaaaaaaaaaialpaaaaialpdbaaaaahicaabaaa
acaaaaaaabeaaaaaaaaaaaaadkaabaaaadaaaaaadbaaaaahicaabaaaaeaaaaaa
dkaabaaaadaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaacaaaaaadkaabaia
ebaaaaaaacaaaaaadkaabaaaaeaaaaaacgaaaaaiaanaaaaahcaabaaaahaaaaaa
pgapbaaaacaaaaaaegacbaaaacaaaaaaclaaaaafhcaabaaaahaaaaaaegacbaaa
ahaaaaaadiaaaaahhcaabaaaahaaaaaajgafbaaaafaaaaaaegacbaaaahaaaaaa
claaaaafkcaabaaaafaaaaaaagaebaaaacaaaaaadiaaaaahkcaabaaaafaaaaaa
kgakbaaaadaaaaaafganbaaaafaaaaaadbaaaaakmcaabaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafganbaaaafaaaaaadbaaaaakdcaabaaa
aiaaaaaangafbaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
boaaaaaimcaabaaaagaaaaaakgaobaiaebaaaaaaagaaaaaaagaebaaaaiaaaaaa
cgaaaaaiaanaaaaadcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaaagaaaaaa
claaaaafdcaabaaaacaaaaaaegaabaaaacaaaaaadcaaaaajdcaabaaaacaaaaaa
egaabaaaacaaaaaacgakbaaaafaaaaaaegaabaaaahaaaaaadiaaaaahkcaabaaa
acaaaaaafgafbaaaacaaaaaaagaebaaaagaaaaaadiaaaaahdcaabaaaagaaaaaa
pgapbaaaadaaaaaaegaabaaaagaaaaaadcaaaaajmcaabaaaagaaaaaaagaebaaa
aaaaaaaaagaabaaaacaaaaaaagaebaaaagaaaaaadcaaaaajmcaabaaaagaaaaaa
agaebaaaakaaaaaafgafbaaaafaaaaaakgaobaaaagaaaaaadcaaaaajdcaabaaa
acaaaaaaegaabaaaaaaaaaaapgapbaaaafaaaaaangafbaaaacaaaaaadcaaaaaj
dcaabaaaacaaaaaaegaabaaaakaaaaaapgapbaaaadaaaaaaegaabaaaacaaaaaa
dcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaa
acaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaa
acaaaaaadcaaaaapmccabaaaadaaaaaaagaebaaaacaaaaaaaceaaaaaaaaaaaaa
aaaaaaaajkjjbjdpjkjjbjdpaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
dcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaogakbaaa
agaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaa
acaaaaaadcaaaaapdccabaaaadaaaaaaegaabaaaacaaaaaaaceaaaaajkjjbjdp
jkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
dbaaaaahbcaabaaaacaaaaaaabeaaaaaaaaaaaaackaabaaaafaaaaaadbaaaaah
ccaabaaaacaaaaaackaabaaaafaaaaaaabeaaaaaaaaaaaaaboaaaaaibcaabaaa
acaaaaaaakaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaaclaaaaafbcaabaaa
acaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaaacaaaaaa
ckaabaaaadaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaaakaabaaa
acaaaaaadbaaaaahicaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaaaaaaaaaa
dcaaaaajdcaabaaaaaaaaaaaegaabaaaaaaaaaaaagaabaaaacaaaaaaegaabaaa
agaaaaaaboaaaaaibcaabaaaacaaaaaabkaabaiaebaaaaaaacaaaaaadkaabaaa
acaaaaaacgaaaaaiaanaaaaabcaabaaaacaaaaaaakaabaaaacaaaaaackaabaaa
acaaaaaaclaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaajbcaabaaa
acaaaaaaakaabaaaacaaaaaaakaabaaaafaaaaaackaabaaaahaaaaaadcaaaaaj
dcaabaaaaaaaaaaaegaabaaaakaaaaaaagaabaaaacaaaaaaegaabaaaaaaaaaaa
dcaaaaajdcaabaaaaaaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaa
aaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaa
aaaaaaaadcaaaaapdccabaaaaeaaaaaaegaabaaaaaaaaaaaaceaaaaajkjjbjdp
jkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaa
baaaaaahbcaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaaf
bcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaaagaabaaa
aaaaaaaaegacbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaa
amaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
egiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
egiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaaihcaabaaaacaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaa
bacaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaibcaabaaaaaaaaaaa
akaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaaaaaaaaaagijcaaa
aaaaaaaaanaaaaaapgipcaaaaaaaaaaabbaaaaaadccaaaakhccabaaaagaaaaaa
jgahbaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaaeaaaaaaaeaaaaaadiaaaaak
hcaabaaaaaaaaaaaegadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaadp
aaaaaaaadiaaaaaiicaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaa
afaaaaaaaaaaaaahdcaabaaaabaaaaaakgakbaaaaaaaaaaamgaabaaaaaaaaaaa
dgaaaaafpccabaaaahaaaaaaegaobaaaabaaaaaadgaaaaaflccabaaaaiaaaaaa
egambaaaabaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaa
adaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaa
akbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
adaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaa
dgaaaaageccabaaaaiaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  highp vec4 o_73;
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_75;
  tmpvar_75.x = tmpvar_74.x;
  tmpvar_75.y = (tmpvar_74.y * _ProjectionParams.x);
  o_73.xy = (tmpvar_75 + tmpvar_74.w);
  o_73.zw = tmpvar_67.zw;
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = o_73;
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 394
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 495
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 486
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 404
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 417
#line 425
#line 439
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 472
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 476
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 480
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 484
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 509
#line 525
#line 581
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 380
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 382
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 355
mediump vec4 GetShereDetailMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 357
    highp vec3 sphereVectNorm = normalize(sphereVect);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 361
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    highp vec4 uv;
    uv.xy = (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale);
    #line 365
    uv.zw = vec2( 0.0, 0.0);
    return xll_tex2Dlod( texSampler, uv);
}
#line 330
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 332
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 336
    return uv;
}
#line 338
mediump vec4 GetSphereMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 340
    highp vec4 uv;
    highp vec3 sphereVectNorm = normalize(sphereVect);
    uv.xy = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    uv.zw = vec2( 0.0, 0.0);
    #line 344
    mediump vec4 tex = xll_tex2Dlod( texSampler, uv);
    return tex;
}
#line 317
highp vec3 hash( in highp vec3 val ) {
    #line 319
    return fract((sin(val) * 123.545));
}
#line 509
highp mat4 rand_rotation( in highp vec3 x, in highp float scale, in highp vec3 trans ) {
    highp float theta = (x.x * 6.28319);
    highp float phi = (x.y * 6.28319);
    #line 513
    highp float z = (x.z * 2.0);
    highp float r = sqrt(z);
    highp float Vx = (sin(phi) * r);
    highp float Vy = (cos(phi) * r);
    #line 517
    highp float Vz = sqrt((2.0 - z));
    highp float st = sin(theta);
    highp float ct = cos(theta);
    highp float Sx = ((Vx * ct) - (Vy * st));
    #line 521
    highp float Sy = ((Vx * st) + (Vy * ct));
    highp mat4 M = mat4( (scale * ((Vx * Sx) - ct)), ((Vx * Sy) - st), (Vx * Vz), 0.0, ((Vy * Sx) + st), (scale * ((Vy * Sy) - ct)), (Vy * Vz), 0.0, (Vz * Sx), (Vz * Sy), (scale * (1.0 - z)), 0.0, trans.x, trans.y, trans.z, 1.0);
    return M;
}
#line 525
v2f vert( in appdata_t v ) {
    v2f o;
    highp vec4 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0));
    #line 529
    highp vec4 planet_pos = (-(_MainRotation * origin));
    highp vec3 hashVect = abs(hash( normalize(floor(planet_pos.xyz))));
    highp vec4 localOrigin;
    localOrigin.xyz = (((2.0 * hashVect) - 1.0) * _MaxTrans);
    #line 533
    localOrigin.w = 1.0;
    highp float localScale = ((hashVect.x * (_MaxScale - 1.0)) + 1.0);
    origin = (_Object2World * localOrigin);
    highp vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 537
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 541
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    o.baseLight = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    planet_pos = (-(_MainRotation * origin));
    highp vec3 detail_pos = (_DetailRotation * planet_pos).xyz;
    #line 545
    o.color = GetSphereMapNoLOD( _MainTex, planet_pos.xyz);
    o.color *= GetShereDetailMapNoLOD( _DetailTex, detail_pos, _DetailScale);
    o.color.w *= GetDistanceFade( distance( origin, vec4( _WorldSpaceCameraPos, 0.0)), _DistFade, _DistFadeVert);
    highp mat4 M = rand_rotation( (vec3( fract(_Rotation), 0.0, 0.0) + hashVect), localScale, localOrigin.xyz);
    #line 549
    highp mat4 mvMatrix = ((unity_MatrixV * _Object2World) * M);
    highp vec3 viewDir = normalize(xll_matrixindex_mf4x4_i (mvMatrix, 2).xyz);
    o.viewDir = abs(viewDir);
    highp vec4 mvCenter = (glstate_matrix_modelview0 * localOrigin);
    #line 553
    o.pos = (glstate_matrix_projection * (mvCenter + vec4( (v.vertex.xyz * localScale), v.vertex.w)));
    o.camPos = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * localOrigin).xyz));
    highp vec2 texcoodOffsetxy = ((2.0 * v.texcoord) - 1.0);
    highp vec4 texcoordOffset = vec4( texcoodOffsetxy.x, texcoodOffsetxy.y, 0.0, v.vertex.w);
    #line 557
    highp vec4 ZYv = texcoordOffset.zyxw;
    highp vec4 XZv = texcoordOffset.xzyw;
    highp vec4 XYv = texcoordOffset.xyzw;
    ZYv.z *= sign((-viewDir.x));
    #line 561
    XZv.x *= sign((-viewDir.y));
    XYv.x *= sign(viewDir.z);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.z)) * viewDir.z);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.x)) * viewDir.x);
    #line 565
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.x)) * viewDir.x);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.y)) * viewDir.y);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.z)) * viewDir.z);
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.y)) * viewDir.y);
    #line 569
    highp vec2 ZY = ((mvMatrix * ZYv).xy - mvCenter.xy);
    highp vec2 XZ = ((mvMatrix * XZv).xy - mvCenter.xy);
    highp vec2 XY = ((mvMatrix * XYv).xy - mvCenter.xy);
    o.texcoordZY = (vec2( 0.5, 0.5) + (0.6 * ZY));
    #line 573
    o.texcoordXZ = (vec2( 0.5, 0.5) + (0.6 * XZ));
    o.texcoordXY = (vec2( 0.5, 0.5) + (0.6 * XY));
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    #line 577
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out lowp vec4 xlv_COLOR;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.texcoord = vec2(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_COLOR = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD1 = vec2(xl_retval.texcoordZY);
    xlv_TEXCOORD2 = vec2(xl_retval.texcoordXZ);
    xlv_TEXCOORD3 = vec2(xl_retval.texcoordXY);
    xlv_TEXCOORD4 = vec3(xl_retval.camPos);
    xlv_TEXCOORD5 = vec3(xl_retval.baseLight);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 394
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 495
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 486
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 404
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 417
#line 425
#line 439
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 472
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 476
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 480
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 484
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 509
#line 525
#line 581
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 581
lowp vec4 frag( in v2f IN ) {
    mediump float xval = IN.viewDir.x;
    mediump vec4 xtex = texture( _LeftTex, IN.texcoordZY);
    #line 585
    mediump float yval = IN.viewDir.y;
    mediump vec4 ytex = texture( _TopTex, IN.texcoordXZ);
    mediump float zval = IN.viewDir.z;
    mediump vec4 ztex = texture( _FrontTex, IN.texcoordXY);
    #line 589
    mediump vec4 tex = mix( mix( xtex, ytex, vec4( yval)), ztex, vec4( zval));
    mediump vec4 prev = (((0.94 * _Color) * IN.color) * tex);
    mediump vec4 color;
    color.xyz = (prev.xyz * IN.baseLight);
    #line 593
    color.w = prev.w;
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 597
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in lowp vec4 xlv_COLOR;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_COLOR);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD0);
    xlt_IN.texcoordZY = vec2(xlv_TEXCOORD1);
    xlt_IN.texcoordXZ = vec2(xlv_TEXCOORD2);
    xlt_IN.texcoordXY = vec2(xlv_TEXCOORD3);
    xlt_IN.camPos = vec3(xlv_TEXCOORD4);
    xlt_IN.baseLight = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform vec3 _MaxTrans;
uniform float _MaxScale;
uniform float _Rotation;
uniform float _MinLight;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 unity_MatrixV;


uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 XYv_1;
  vec4 XZv_2;
  vec4 ZYv_3;
  vec3 detail_pos_4;
  float localScale_5;
  vec4 localOrigin_6;
  vec4 tmpvar_7;
  vec3 tmpvar_8;
  vec4 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_6.xyz = (((2.0 * tmpvar_10) - 1.0) * _MaxTrans);
  localOrigin_6.w = 1.0;
  localScale_5 = ((tmpvar_10.x * (_MaxScale - 1.0)) + 1.0);
  vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * localOrigin_6);
  vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = gl_Normal;
  tmpvar_8 = clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (normalize((_Object2World * tmpvar_12).xyz), normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0);
  vec4 tmpvar_13;
  tmpvar_13 = -((_MainRotation * tmpvar_11));
  detail_pos_4 = (_DetailRotation * tmpvar_13).xyz;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13.xyz);
  vec2 uv_15;
  float r_16;
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_14.x)))) {
    float y_over_x_17;
    y_over_x_17 = (tmpvar_14.x / tmpvar_14.z);
    float s_18;
    float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_14.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(tmpvar_14.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_16));
  uv_15.y = (0.31831 * (1.5708 - (sign(tmpvar_14.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_14.y))) * (1.5708 + (abs(tmpvar_14.y) * (-0.214602 + (abs(tmpvar_14.y) * (0.0865667 + (abs(tmpvar_14.y) * -0.0310296)))))))))));
  vec4 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(normalize(detail_pos_4));
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  uv_20.xy = (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale);
  uv_20.zw = vec2(0.0, 0.0);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DLod (_MainTex, uv_15, 0.0) * texture2DLod (_DetailTex, uv_20.xy, 0.0));
  tmpvar_7.xyz = tmpvar_24.xyz;
  vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = _WorldSpaceCameraPos;
  float tmpvar_26;
  vec4 p_27;
  p_27 = (tmpvar_11 - tmpvar_25);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  tmpvar_7.w = (tmpvar_24.w * (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0)));
  vec3 tmpvar_28;
  tmpvar_28.yz = vec2(0.0, 0.0);
  tmpvar_28.x = fract(_Rotation);
  vec3 x_29;
  x_29 = (tmpvar_28 + tmpvar_10);
  vec3 trans_30;
  trans_30 = localOrigin_6.xyz;
  float tmpvar_31;
  tmpvar_31 = (x_29.x * 6.28319);
  float tmpvar_32;
  tmpvar_32 = (x_29.y * 6.28319);
  float tmpvar_33;
  tmpvar_33 = (x_29.z * 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (sin(tmpvar_32) * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (cos(tmpvar_32) * tmpvar_34);
  float tmpvar_37;
  tmpvar_37 = sqrt((2.0 - tmpvar_33));
  float tmpvar_38;
  tmpvar_38 = sin(tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = cos(tmpvar_31);
  float tmpvar_40;
  tmpvar_40 = ((tmpvar_35 * tmpvar_39) - (tmpvar_36 * tmpvar_38));
  float tmpvar_41;
  tmpvar_41 = ((tmpvar_35 * tmpvar_38) + (tmpvar_36 * tmpvar_39));
  mat4 tmpvar_42;
  tmpvar_42[0].x = (localScale_5 * ((tmpvar_35 * tmpvar_40) - tmpvar_39));
  tmpvar_42[0].y = ((tmpvar_35 * tmpvar_41) - tmpvar_38);
  tmpvar_42[0].z = (tmpvar_35 * tmpvar_37);
  tmpvar_42[0].w = 0.0;
  tmpvar_42[1].x = ((tmpvar_36 * tmpvar_40) + tmpvar_38);
  tmpvar_42[1].y = (localScale_5 * ((tmpvar_36 * tmpvar_41) - tmpvar_39));
  tmpvar_42[1].z = (tmpvar_36 * tmpvar_37);
  tmpvar_42[1].w = 0.0;
  tmpvar_42[2].x = (tmpvar_37 * tmpvar_40);
  tmpvar_42[2].y = (tmpvar_37 * tmpvar_41);
  tmpvar_42[2].z = (localScale_5 * (1.0 - tmpvar_33));
  tmpvar_42[2].w = 0.0;
  tmpvar_42[3].x = trans_30.x;
  tmpvar_42[3].y = trans_30.y;
  tmpvar_42[3].z = trans_30.z;
  tmpvar_42[3].w = 1.0;
  mat4 tmpvar_43;
  tmpvar_43 = (((unity_MatrixV * _Object2World) * tmpvar_42));
  vec4 v_44;
  v_44.x = tmpvar_43[0].z;
  v_44.y = tmpvar_43[1].z;
  v_44.z = tmpvar_43[2].z;
  v_44.w = tmpvar_43[3].z;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(v_44.xyz);
  vec4 tmpvar_46;
  tmpvar_46 = (gl_ModelViewMatrix * localOrigin_6);
  vec4 tmpvar_47;
  tmpvar_47.xyz = (gl_Vertex.xyz * localScale_5);
  tmpvar_47.w = gl_Vertex.w;
  vec4 tmpvar_48;
  tmpvar_48 = (gl_ProjectionMatrix * (tmpvar_46 + tmpvar_47));
  vec2 tmpvar_49;
  tmpvar_49 = ((2.0 * gl_MultiTexCoord0.xy) - 1.0);
  vec4 tmpvar_50;
  tmpvar_50.z = 0.0;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = tmpvar_49.y;
  tmpvar_50.w = gl_Vertex.w;
  ZYv_3.xyw = tmpvar_50.zyw;
  XZv_2.yzw = tmpvar_50.zyw;
  XYv_1.yzw = tmpvar_50.yzw;
  ZYv_3.z = (tmpvar_49.x * sign(-(tmpvar_45.x)));
  XZv_2.x = (tmpvar_49.x * sign(-(tmpvar_45.y)));
  XYv_1.x = (tmpvar_49.x * sign(tmpvar_45.z));
  ZYv_3.x = ((sign(-(tmpvar_45.x)) * sign(ZYv_3.z)) * tmpvar_45.z);
  XZv_2.y = ((sign(-(tmpvar_45.y)) * sign(XZv_2.x)) * tmpvar_45.x);
  XYv_1.z = ((sign(-(tmpvar_45.z)) * sign(XYv_1.x)) * tmpvar_45.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_45.x)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_45.y)) * sign(tmpvar_49.y)) * tmpvar_45.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_45.z)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  vec4 o_51;
  vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_48 * 0.5);
  vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_48.zw;
  tmpvar_9.xyw = o_51.xyw;
  tmpvar_9.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  vec4 o_54;
  vec4 tmpvar_55;
  tmpvar_55 = (tmpvar_48 * 0.5);
  vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = tmpvar_48.zw;
  gl_Position = tmpvar_48;
  xlv_COLOR = tmpvar_7;
  xlv_TEXCOORD0 = abs(tmpvar_45);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * ZYv_3).xy - tmpvar_46.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XZv_2).xy - tmpvar_46.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XYv_1).xy - tmpvar_46.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_6).xyz));
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD7 = o_54;
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform vec4 _ZBufferParams;
void main ()
{
  vec4 color_1;
  vec4 tmpvar_2;
  tmpvar_2 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (texture2D (_LeftTex, xlv_TEXCOORD1), texture2D (_TopTex, xlv_TEXCOORD2), xlv_TEXCOORD0.yyyy), texture2D (_FrontTex, xlv_TEXCOORD3), xlv_TEXCOORD0.zzzz));
  color_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD5);
  color_1.w = (tmpvar_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 28 [glstate_lightmodel_ambient]
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_projection]
Vector 29 [_WorldSpaceCameraPos]
Vector 30 [_ProjectionParams]
Vector 31 [_ScreenParams]
Vector 32 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [unity_MatrixV]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
Vector 33 [_LightColor0]
Float 34 [_DetailScale]
Float 35 [_DistFade]
Float 36 [_DistFadeVert]
Float 37 [_MinLight]
Float 38 [_Rotation]
Float 39 [_MaxScale]
Vector 40 [_MaxTrans]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"vs_3_0
; 356 ALU, 4 TEX
dcl_position o0
dcl_color0 o1
dcl_texcoord0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord7 o9
dcl_texcoord8 o10
def c41, 0.15915491, 0.50000000, 6.28318501, -3.14159298
def c42, 123.54530334, 2.00000000, -1.00000000, 1.00000000
def c43, 0.00000000, -0.01872930, 0.07426100, -0.21211439
def c44, 1.57072902, 3.14159298, 0.31830987, -0.12123910
def c45, -0.01348047, 0.05747731, 0.19563590, -0.33299461
def c46, 0.99999559, 1.57079601, 0.15915494, 0.50000000
def c47, 6.28318548, 0.00000000, 1.00000000, -0.01000214
def c48, 0.60000002, 0.50000000, 4.03944778, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_2d s0
dcl_2d s1
mov r2.w, c42
mad r10.xy, v2, c42.y, c42.z
mov r1.w, c11
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
dp4 r0.z, r1, c18
dp4 r0.x, r1, c16
dp4 r0.y, r1, c17
frc r1.xyz, -r0
add r0.xyz, -r0, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mad r0.x, r1, c41, c41.y
frc r0.x, r0
mad r1.x, r0, c41.z, c41.w
sincos r0.xy, r1.x
mad r0.x, r1.z, c41, c41.y
mov r1.x, r0.y
frc r0.y, r0.x
mad r0.x, r1.y, c41, c41.y
mad r1.y, r0, c41.z, c41.w
frc r1.x, r0
sincos r0.xy, r1.y
mad r0.x, r1, c41.z, c41.w
sincos r1.xy, r0.x
mov r1.z, r0.y
mul r0.xyz, r1, c42.x
frc r0.xyz, r0
abs r4.xyz, r0
mad r0.xyz, r4, c42.y, c42.z
mul r2.xyz, r0, c40
dp4 r5.z, r2, c10
dp4 r5.x, r2, c8
dp4 r5.y, r2, c9
dp4 r5.w, r2, c11
dp4 r0.z, r5, c18
dp4 r0.x, r5, c16
dp4 r0.y, r5, c17
dp4 r0.w, r5, c19
add r7.xyz, -r5, c29
dp4 r1.z, -r0, c22
dp4 r1.x, -r0, c20
dp4 r1.y, -r0, c21
dp3 r0.w, r1, r1
rsq r0.w, r0.w
mul r1.xyz, r0.w, r1
abs r1.xyz, r1
sge r0.w, r1.z, r1.x
add r3.xyz, r1.zxyw, -r1
mad r3.xyz, r0.w, r3, r1
sge r1.w, r3.x, r1.y
add r3.xyz, r3, -r1.yxzw
mad r1.xyz, r1.w, r3, r1.yxzw
dp3 r0.w, -r0, -r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, -r0
abs r3.x, r0
abs r0.w, r0.z
mul r1.zw, r1.xyzy, c41.y
max r1.y, r0.w, r3.x
abs r3.z, r1.x
min r1.x, r0.w, r3
slt r0.w, r0, r3.x
rcp r1.y, r1.y
mul r3.y, r1.x, r1
rcp r1.x, r3.z
mul r1.xy, r1.zwzw, r1.x
mul r3.z, r3.y, r3.y
mad r1.z, r3, c45.x, c45.y
mad r1.z, r1, r3, c44.w
mad r1.z, r1, r3, c45
mad r1.z, r1, r3, c45.w
mad r1.z, r1, r3, c46.x
mul r1.z, r1, r3.y
max r0.w, -r0, r0
slt r0.w, c43.x, r0
add r1.w, -r0, c42
mul r1.w, r1.z, r1
add r1.z, -r1, c46.y
mad r0.w, r0, r1.z, r1
slt r0.z, r0, c43.x
max r0.z, -r0, r0
slt r0.z, c43.x, r0
slt r0.x, r0, c43
max r0.x, -r0, r0
add r1.z, -r0.w, c44.y
add r1.w, -r0.z, c42
mul r0.w, r0, r1
mad r0.z, r0, r1, r0.w
slt r0.x, c43, r0
add r1.w, -r0.x, c42
mul r0.w, r0.z, r1
mad r0.x, r0, -r0.z, r0.w
abs r0.z, r0.y
add r3.x, -r0.z, c42.w
mad r0.w, r0.z, c43.y, c43.z
mad r0.w, r0, r0.z, c43
rsq r3.x, r3.x
rcp r3.x, r3.x
mad r0.z, r0.w, r0, c44.x
mul r0.z, r0, r3.x
slt r0.y, r0, c43.x
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c42.y, r0
mad r0.y, r0, c44, r0.z
mul r1.xy, r1, c34.x
mov r1.z, c43.x
texldl r1, r1.xyzz, s1
mad r0.x, r0, c46.z, c46.w
mov r3.yz, c43.x
frc r3.x, c38
add r3.xyz, r4, r3
mul r4.w, r3.z, c42.y
mul r0.w, r3.x, c47.x
mad r0.z, r0.w, c41.x, c41.y
frc r3.x, r0.z
mad r3.w, r3.x, c41.z, c41
sincos r6.xy, r3.w
mul r3.x, r3.y, c47
mad r3.x, r3, c41, c41.y
frc r3.x, r3
mad r4.y, r3.x, c41.z, c41.w
sincos r3.xy, r4.y
rsq r4.z, r4.w
rcp r3.z, r4.z
mul r3.w, r3.x, r3.z
mul r5.w, r3.y, r3.z
mul r3.x, r3.w, r6
mad r3.y, r5.w, r6, r3.x
mov r6.w, r2.z
mul r0.y, r0, c44.z
mov r0.z, c43.x
texldl r0, r0.xyzz, s0
mul r0, r0, r1
mov o1.xyz, r0
add r1.z, -r4.w, c42.y
mov r1.y, c39.x
add r1.y, c42.z, r1
mad r7.w, r4.x, r1.y, c42
mad r1.w, r3, r3.y, -r6.x
mad r1.x, r5.w, r3.y, -r6.y
mul r1.y, r7.w, r1.w
rsq r1.z, r1.z
rcp r1.w, r1.z
mul r1.z, r1.w, r3.y
mov r3.x, c14.y
mov r4.x, c14
mul r3.xyz, c9, r3.x
mad r3.xyz, c8, r4.x, r3
mov r4.x, c14.z
mad r3.xyz, c10, r4.x, r3
mov r4.x, c14.w
mad r4.xyz, c11, r4.x, r3
mul r3.xyz, r4.y, r1
mul r4.y, r3.w, r6
mad r5.z, r5.w, r6.x, -r4.y
mad r5.x, r5.w, r5.z, -r6
mad r5.y, r3.w, r5.z, r6
mul r6.x, r5.w, r1.w
dp3 r4.y, r7, r7
rsq r8.w, r4.y
add r4.y, -r4.w, c42.w
mul r6.y, r1.w, r3.w
mul r5.z, r1.w, r5
mul r5.x, r7.w, r5
mad r3.xyz, r4.x, r5, r3
mul r6.z, r7.w, r4.y
mad r3.xyz, r4.z, r6, r3
rcp r4.x, r8.w
mul r1.w, -r4.x, c36.x
add_sat r3.w, r1, c42
mul_sat r1.w, r4.x, c35.x
mul r1.w, r1, r3
dp3 r4.y, r3, r3
rsq r3.w, r4.y
mul r8.xyz, r3.w, r3
mov r5.w, r2.x
mul o1.w, r0, r1
slt r0.y, -r8.x, r8.x
slt r0.x, r8, -r8
sub r0.x, r0, r0.y
slt r0.z, r10.y, -r10.y
slt r0.y, -r10, r10
sub r10.z, r0.y, r0
mul r0.y, r10.x, r0.x
mul r1.w, r0.x, r10.z
slt r0.w, r0.y, -r0.y
slt r0.z, -r0.y, r0.y
sub r0.z, r0, r0.w
mul r0.w, r8.y, r1
mul r0.x, r0.z, r0
mad r9.x, r8.z, r0, r0.w
mov r9.z, r0.y
mov r0.x, c12.y
mov r1.w, r2.y
mov r3.x, c12
mul r0, c9, r0.x
mad r0, c8, r3.x, r0
mov r3.x, c12.z
mad r0, c10, r3.x, r0
mov r3.x, c12.w
mad r3, c11, r3.x, r0
mov r4.x, c13.y
mul r0, c9, r4.x
mov r4.x, c13
mad r0, c8, r4.x, r0
mov r4.x, c13.z
mad r0, c10, r4.x, r0
mov r4.x, c13.w
mad r0, c11, r4.x, r0
mul r4, r1, r3.y
mad r4, r5, r3.x, r4
mul r1, r0.y, r1
mad r1, r0.x, r5, r1
mad r1, r0.z, r6, r1
mad r4, r6, r3.z, r4
mad r0, r0.w, c47.yyyz, r1
mad r1, r3.w, c47.yyyz, r4
mov r5.w, v0
mov r5.y, r10
mov r9.yw, r5
dp4 r6.y, r0, r9
dp4 r6.x, r9, r1
slt r3.y, -r8, r8
slt r3.x, r8.y, -r8.y
sub r4.y, r3.x, r3
mul r4.x, r10, r4.y
dp4 r3.y, r2, c1
dp4 r3.x, r2, c0
add r3.zw, -r3.xyxy, r6.xyxy
mad o3.xy, r3.zwzw, c48.x, c48.y
slt r4.w, r4.x, -r4.x
slt r4.z, -r4.x, r4.x
sub r4.z, r4, r4.w
mul r4.w, r10.z, r4.y
mul r5.x, r8.z, r4.w
mul r4.y, r4.z, r4
mad r4.y, r8.x, r4, r5.x
mov r4.zw, r5.xyyw
dp4 r6.y, r0, r4
dp4 r6.x, r1, r4
add r4.xy, -r3, r6
slt r3.w, -r8.z, r8.z
mad o4.xy, r4, c48.x, c48.y
slt r3.z, r8, -r8
sub r4.x, r3.w, r3.z
mul r5.x, r10, r4
sub r3.z, r3, r3.w
mul r4.y, r10.z, r3.z
slt r4.x, r5, -r5
slt r3.w, -r5.x, r5.x
sub r3.w, r3, r4.x
mul r3.z, r3, r3.w
mul r4.x, r8.y, r4.y
mad r5.z, r8.x, r3, r4.x
dp4 r3.w, r2, c3
dp4 r3.z, r2, c2
mov r2.w, v0
mul r2.xyz, v0, r7.w
add r2, r3, r2
dp4 r3.w, r0, r5
dp4 r0.z, r2, c7
dp4 r3.z, r1, r5
add r3.xy, -r3, r3.zwzw
mov r0.w, r0.z
mov r1.w, r0.z
dp4 r0.z, r2, c6
dp4 r0.x, r2, c4
dp4 r0.y, r2, c5
mul r1.xyz, r0.xyww, c41.y
mov o0, r0
mul r1.y, r1, c30.x
mad r1.xy, r1.z, c31.zwzw, r1
dp4 r1.z, v0, c2
mov r1.z, -r1
dp4 r0.y, c32, c32
mov r2.xyz, v1
mov o10, r1
mov r2.w, c43.x
mov o9.xy, r1
dp4 r1.z, r2, c10
dp4 r1.y, r2, c9
dp4 r1.x, r2, c8
dp3 r0.x, r1, r1
rsq r0.y, r0.y
rsq r0.x, r0.x
mul r2.xyz, r0.y, c32
mul r1.xyz, r0.x, r1
dp3_sat r0.x, r1, r2
add r0.x, r0, c47.w
mul r0.y, r0.x, c33.w
mov o9.zw, r0
mul_sat r0.w, r0.y, c48.z
mov r0.x, c37
add r0.xyz, c33, r0.x
mad_sat o7.xyz, r0, r0.w, c28
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mad o5.xy, r3, c48.x, c48.y
abs o2.xyz, r8
mul o6.xyz, r8.w, r7
dp4 o8.y, r0, c25
dp4 o8.x, r0, c24
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
ConstBuffer "$Globals" 384 // 380 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 208 [_LightMatrix0] 4
Vector 272 [_LightColor0] 4
Float 304 [_DetailScale]
Float 336 [_DistFade]
Float 340 [_DistFadeVert]
Float 348 [_MinLight]
Float 356 [_Rotation]
Float 360 [_MaxScale]
Vector 368 [_MaxTrans] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityPerFrame" 208 // 144 used size, 4 vars
Matrix 0 [glstate_matrix_projection] 4
Vector 64 [glstate_lightmodel_ambient] 4
Matrix 80 [unity_MatrixV] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityPerFrame" 4
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 254 instructions, 12 temp regs, 0 temp arrays:
// ALU 216 float, 8 int, 6 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednfkebkiggpekblocnkeilpadhnddoopoabaaaaaadaceaaaaadaaaaaa
cmaaaaaanmaaaaaabaacaaaaejfdeheokiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaijaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaipaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaajgaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaajoaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaafaepfdejfeejepeoaaedepem
epfcaaeoepfcenebemaafeebeoehefeofeaafeeffiedepepfceeaaklepfdeheo
cmabaaaaalaaaaaaaiaaaaaabaabaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaabmabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaccabaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaccabaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaaccabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
amadaaaaccabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaaccabaaaa
agaaaaaaaaaaaaaaadaaaaaaaeaaaaaaamadaaaaccabaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahaiaaaaccabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahaiaaaaccabaaaaahaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaccabaaaa
aiaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
edepemepfcaafeeffiedepepfceeaaklfdeieefcbiccaaaaeaaaabaaigaiaaaa
fjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaa
fjaaaaaeegiocaaaaeaaaaaaajaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
pccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaa
gfaaaaadmccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadmccabaaa
aeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaad
pccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagiaaaaacamaaaaaadiaaaaaj
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaafgifcaaaadaaaaaaapaaaaaa
dcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaadaaaaaa
apaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
adaaaaaakgikcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaaeaaaaaapgipcaaaadaaaaaaapaaaaaaegacbaaa
aaaaaaaaebaaaaaghcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaenaaaaaghcaabaaaaaaaaaaaaanaaaaaegacbaaaaaaaaaaa
diaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaadcbhphecdcbhphec
dcbhphecaaaaaaaabkaaaaafhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaai
icaabaaaaaaaaaaackiacaaaaaaaaaaabgaaaaaaabeaaaaaaaaaialpdcaaaaaj
icaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaf
icaabaaaabaaaaaadkbabaaaaaaaaaaadcaaaaaphcaabaaaacaaaaaaegacbaaa
aaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egiccaaaaaaaaaaabhaaaaaadiaaaaaipcaabaaaadaaaaaafgafbaaaacaaaaaa
egiocaaaadaaaaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaadaaaaaa
aeaaaaaaagaabaaaacaaaaaaegaobaaaadaaaaaadcaaaaakpcaabaaaadaaaaaa
egiocaaaadaaaaaaagaaaaaakgakbaaaacaaaaaaegaobaaaadaaaaaaaaaaaaai
pcaabaaaadaaaaaaegaobaaaadaaaaaaegiocaaaadaaaaaaahaaaaaaaaaaaaah
pcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaadaaaaaadiaaaaaipcaabaaa
aeaaaaaafgafbaaaabaaaaaaegiocaaaaeaaaaaaabaaaaaadcaaaaakpcaabaaa
aeaaaaaaegiocaaaaeaaaaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaeaaaaaa
dcaaaaakpcaabaaaaeaaaaaaegiocaaaaeaaaaaaacaaaaaakgakbaaaabaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaeaaaaaaadaaaaaa
pgapbaaaabaaaaaaegaobaaaaeaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaaeaaaaaafgafbaaaacaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaamaaaaaaagaabaaa
acaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaa
aoaaaaaakgakbaaaacaaaaaaegaobaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaaaaeaaaaaaegiocaaaadaaaaaaapaaaaaadiaaaaaipcaabaaaafaaaaaa
fgafbaaaaeaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaafaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaeaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaafaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaeaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aeaaaaaaegaobaaaafaaaaaadiaaaaajhcaabaaaagaaaaaafgafbaiaebaaaaaa
afaaaaaabgigcaaaaaaaaaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaa
aaaaaaaaafaaaaaaagaabaiaebaaaaaaafaaaaaaegacbaaaagaaaaaadcaaaaal
hcaabaaaagaaaaaabgigcaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaafaaaaaa
egacbaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaaiaaaaaa
pgapbaiaebaaaaaaafaaaaaaegacbaaaagaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaagaaaaaaegacbaaaagaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaadiaaaaahhcaabaaaagaaaaaapgapbaaaacaaaaaaegacbaaaagaaaaaa
dgaaaaagecaabaaaahaaaaaackaabaiambaaaaaaagaaaaaabnaaaaajicaabaaa
acaaaaaackaabaiaibaaaaaaagaaaaaabkaabaiaibaaaaaaagaaaaaaabaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaa
aiaaaaaafgaibaiambaaaaaaagaaaaaakgabbaiaibaaaaaaagaaaaaadiaaaaah
lcaabaaaahaaaaaapgapbaaaacaaaaaajganbaaaaiaaaaaadcaaaaakicaabaaa
acaaaaaadkaabaaaacaaaaaaakaabaaaaiaaaaaabkaabaiaibaaaaaaagaaaaaa
bnaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaaakaabaiaibaaaaaaagaaaaaa
abaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaai
hcaabaaaaiaaaaaabgagbaiaibaaaaaaagaaaaaaegacbaaaahaaaaaadgaaaaag
fcaabaaaahaaaaaafgaebaiambaaaaaaagaaaaaaaaaaaaahhcaabaaaahaaaaaa
cgalbaaaahaaaaaaegacbaaaaiaaaaaadcaaaaakhcaabaaaagaaaaaapgapbaaa
acaaaaaaegacbaaaahaaaaaaegacbaiaibaaaaaaagaaaaaadiaaaaakmcaabaaa
adaaaaaakgagbaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
aoaaaaahmcaabaaaadaaaaaakgaobaaaadaaaaaaagaabaaaagaaaaaadiaaaaai
mcaabaaaadaaaaaakgaobaaaadaaaaaaagiacaaaaaaaaaaabdaaaaaaeiaaaaal
pcaabaaaagaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaajicaabaaaacaaaaaaegacbaiaebaaaaaaafaaaaaa
egacbaiaebaaaaaaafaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaa
diaaaaaihcaabaaaafaaaaaapgapbaaaacaaaaaaigabbaiaebaaaaaaafaaaaaa
deaaaaajicaabaaaacaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaa
afaaaaaaaoaaaaakicaabaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdkaabaaaacaaaaaaddaaaaajecaabaaaadaaaaaabkaabaiaibaaaaaa
afaaaaaaakaabaiaibaaaaaaafaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaadiaaaaahecaabaaaadaaaaaadkaabaaaacaaaaaa
dkaabaaaacaaaaaadcaaaaajicaabaaaadaaaaaackaabaaaadaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajicaabaaaadaaaaaackaabaaaadaaaaaa
dkaabaaaadaaaaaaabeaaaaaochgdidodcaaaaajicaabaaaadaaaaaackaabaaa
adaaaaaadkaabaaaadaaaaaaabeaaaaaaebnkjlodcaaaaajecaabaaaadaaaaaa
ckaabaaaadaaaaaadkaabaaaadaaaaaaabeaaaaadiphhpdpdiaaaaahicaabaaa
adaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadcaaaaajicaabaaaadaaaaaa
dkaabaaaadaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
aeaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaabaaaaah
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaadcaaaaajicaabaaa
acaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadkaabaaaadaaaaaadbaaaaai
mcaabaaaadaaaaaafgajbaaaafaaaaaafgajbaiaebaaaaaaafaaaaaaabaaaaah
ecaabaaaadaaaaaackaabaaaadaaaaaaabeaaaaanlapejmaaaaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaaddaaaaahecaabaaaadaaaaaa
bkaabaaaafaaaaaaakaabaaaafaaaaaadbaaaaaiecaabaaaadaaaaaackaabaaa
adaaaaaackaabaiaebaaaaaaadaaaaaadeaaaaahicaabaaaaeaaaaaabkaabaaa
afaaaaaaakaabaaaafaaaaaabnaaaaaiicaabaaaaeaaaaaadkaabaaaaeaaaaaa
dkaabaiaebaaaaaaaeaaaaaaabaaaaahecaabaaaadaaaaaackaabaaaadaaaaaa
dkaabaaaaeaaaaaadhaaaaakicaabaaaacaaaaaackaabaaaadaaaaaadkaabaia
ebaaaaaaacaaaaaadkaabaaaacaaaaaadcaaaaajbcaabaaaafaaaaaadkaabaaa
acaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakicaabaaaacaaaaaa
ckaabaiaibaaaaaaafaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
icaabaaaacaaaaaadkaabaaaacaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaa
iedefjlodcaaaaakicaabaaaacaaaaaadkaabaaaacaaaaaackaabaiaibaaaaaa
afaaaaaaabeaaaaakeanmjdpaaaaaaaiecaabaaaadaaaaaackaabaiambaaaaaa
afaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaadaaaaaackaabaaaadaaaaaa
diaaaaahicaabaaaaeaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahicaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadkaabaaaadaaaaaa
diaaaaahccaabaaaafaaaaaadkaabaaaacaaaaaaabeaaaaaidpjkcdoeiaaaaal
pcaabaaaafaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
abeaaaaaaaaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaagaaaaaaegaobaaa
afaaaaaaaaaaaaajhcaabaaaagaaaaaaegacbaaaaeaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhcaabaaaaeaaaaaaegacbaiaebaaaaaaaeaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahicaabaaaacaaaaaaegacbaaaagaaaaaa
egacbaaaagaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaai
ecaabaaaadaaaaaadkaabaaaacaaaaaaakiacaaaaaaaaaaabfaaaaaadccaaaal
icaabaaaacaaaaaabkiacaiaebaaaaaaaaaaaaaabfaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaaiadpdgcaaaafecaabaaaadaaaaaackaabaaaadaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaahiccabaaa
abaaaaaadkaabaaaacaaaaaadkaabaaaafaaaaaadgaaaaafhccabaaaabaaaaaa
egacbaaaafaaaaaabkaaaaagbcaabaaaafaaaaaabkiacaaaaaaaaaaabgaaaaaa
dgaaaaaigcaabaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaafaaaaaaaaaaaaah
icaabaaaacaaaaaackaabaaaaaaaaaaackaabaaaaaaaaaaaelaaaaaficaabaaa
acaaaaaadkaabaaaacaaaaaadiaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
aceaaaaanlapmjeanlapmjeaaaaaaaaaaaaaaaaadcaaaabamcaabaaaadaaaaaa
kgakbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaea
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaiadpenaaaaahbcaabaaaafaaaaaa
bcaabaaaagaaaaaabkaabaaaaaaaaaaaenaaaaahbcaabaaaaaaaaaaabcaabaaa
ahaaaaaaakaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaadkaabaaaacaaaaaa
akaabaaaagaaaaaadiaaaaahecaabaaaaaaaaaaadkaabaaaacaaaaaaakaabaaa
afaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaaahaaaaaabkaabaaaaaaaaaaa
dcaaaaajicaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaa
acaaaaaadcaaaaakicaabaaaaeaaaaaabkaabaaaaaaaaaaadkaabaaaacaaaaaa
akaabaiaebaaaaaaahaaaaaadiaaaaahicaabaaaaeaaaaaadkaabaaaaaaaaaaa
dkaabaaaaeaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaadaaaaaaanaaaaaa
egiccaaaaeaaaaaaagaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaa
afaaaaaaagiacaaaadaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaa
afaaaaaaegiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaanaaaaaaegacbaaa
afaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaa
adaaaaaaanaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaagaaaaaapgapbaaa
aeaaaaaaegacbaaaafaaaaaadiaaaaahicaabaaaaeaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadcaaaaakicaabaaaaeaaaaaackaabaaaaaaaaaaaakaabaaa
ahaaaaaadkaabaiaebaaaaaaaeaaaaaadcaaaaajicaabaaaafaaaaaabkaabaaa
aaaaaaaadkaabaaaaeaaaaaaakaabaaaaaaaaaaadiaaaaajocaabaaaahaaaaaa
fgifcaaaadaaaaaaamaaaaaaagijcaaaaeaaaaaaagaaaaaadcaaaaalocaabaaa
ahaaaaaaagijcaaaaeaaaaaaafaaaaaaagiacaaaadaaaaaaamaaaaaafgaobaaa
ahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaaahaaaaaakgikcaaa
adaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaa
aeaaaaaaaiaaaaaapgipcaaaadaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaaj
hcaabaaaagaaaaaajgahbaaaahaaaaaapgapbaaaafaaaaaaegacbaaaagaaaaaa
elaaaaafecaabaaaadaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaadaaaaaa
dkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaadaaaaaadiaaaaajhcaabaaaaiaaaaaafgifcaaaadaaaaaa
aoaaaaaaegiccaaaaeaaaaaaagaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaa
aeaaaaaaafaaaaaaagiacaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaal
hcaabaaaaiaaaaaaegiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaaoaaaaaa
egacbaaaaiaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaaaiaaaaaa
pgipcaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaajhcaabaaaagaaaaaa
egacbaaaaiaaaaaafgafbaaaaaaaaaaaegacbaaaagaaaaaadgaaaaafccaabaaa
ajaaaaaackaabaaaagaaaaaadcaaaaakccaabaaaaaaaaaaackaabaaaaaaaaaaa
dkaabaaaaeaaaaaaakaabaiaebaaaaaaahaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckaabaaaaaaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaaaaaaaaaadiaaaaah
ecaabaaaaaaaaaaackaabaaaaaaaaaaackaabaaaadaaaaaadiaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaahecaabaaaadaaaaaa
dkaabaaaaeaaaaaackaabaaaadaaaaaadiaaaaahhcaabaaaakaaaaaapgapbaaa
acaaaaaaegacbaaaafaaaaaadcaaaaajhcaabaaaakaaaaaajgahbaaaahaaaaaa
kgakbaaaadaaaaaaegacbaaaakaaaaaadcaaaaajhcaabaaaakaaaaaaegacbaaa
aiaaaaaapgapbaaaadaaaaaaegacbaaaakaaaaaadiaaaaahhcaabaaaalaaaaaa
agaabaaaaaaaaaaaegacbaaaafaaaaaadiaaaaahkcaabaaaacaaaaaafgafbaaa
acaaaaaaagaebaaaafaaaaaadcaaaaajdcaabaaaacaaaaaajgafbaaaahaaaaaa
agaabaaaacaaaaaangafbaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaa
aiaaaaaakgakbaaaacaaaaaaegaabaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaa
bkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajlcaabaaaaaaaaaaajganbaaa
ahaaaaaaagaabaaaaaaaaaaaegaibaaaalaaaaaadcaaaaajhcaabaaaaaaaaaaa
egacbaaaaiaaaaaakgakbaaaaaaaaaaaegadbaaaaaaaaaaadgaaaaafbcaabaaa
ajaaaaaackaabaaaaaaaaaaadgaaaaafecaabaaaajaaaaaackaabaaaakaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaajaaaaaaegacbaaaajaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaajaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaibaaaaaa
afaaaaaadiaaaaajmcaabaaaaaaaaaaafgifcaaaadaaaaaaapaaaaaaagiecaaa
aeaaaaaaagaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaafaaaaaa
agiacaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaaaaaaaaaa
agiecaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaa
dcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaa
apaaaaaakgaobaaaaaaaaaaaaaaaaaahmcaabaaaaaaaaaaakgaobaaaaaaaaaaa
agaebaaaacaaaaaadbaaaaalhcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaegacbaiaebaaaaaaafaaaaaadbaaaaalhcaabaaaahaaaaaa
egacbaiaebaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
boaaaaaihcaabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaahaaaaaa
dcaaaaapmcaabaaaadaaaaaaagbebaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaeaaaaaaaeaaceaaaaaaaaaaaaaaaaaaaaaaaaaialpaaaaialpdbaaaaah
icaabaaaacaaaaaaabeaaaaaaaaaaaaadkaabaaaadaaaaaadbaaaaahicaabaaa
aeaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaaaaboaaaaaiicaabaaaacaaaaaa
dkaabaiaebaaaaaaacaaaaaadkaabaaaaeaaaaaacgaaaaaiaanaaaaahcaabaaa
ahaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaaclaaaaafhcaabaaaahaaaaaa
egacbaaaahaaaaaadiaaaaahhcaabaaaahaaaaaajgafbaaaafaaaaaaegacbaaa
ahaaaaaaclaaaaafkcaabaaaafaaaaaaagaebaaaacaaaaaadiaaaaahkcaabaaa
afaaaaaakgakbaaaadaaaaaafganbaaaafaaaaaadbaaaaakmcaabaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafganbaaaafaaaaaadbaaaaak
dcaabaaaaiaaaaaangafbaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaboaaaaaimcaabaaaagaaaaaakgaobaiaebaaaaaaagaaaaaaagaebaaa
aiaaaaaacgaaaaaiaanaaaaadcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaa
agaaaaaaclaaaaafdcaabaaaacaaaaaaegaabaaaacaaaaaadcaaaaajdcaabaaa
acaaaaaaegaabaaaacaaaaaacgakbaaaafaaaaaaegaabaaaahaaaaaadiaaaaah
kcaabaaaacaaaaaafgafbaaaacaaaaaaagaebaaaagaaaaaadiaaaaahdcaabaaa
agaaaaaapgapbaaaadaaaaaaegaabaaaagaaaaaadcaaaaajmcaabaaaagaaaaaa
agaebaaaaaaaaaaaagaabaaaacaaaaaaagaebaaaagaaaaaadcaaaaajmcaabaaa
agaaaaaaagaebaaaakaaaaaafgafbaaaafaaaaaakgaobaaaagaaaaaadcaaaaaj
dcaabaaaacaaaaaaegaabaaaaaaaaaaapgapbaaaafaaaaaangafbaaaacaaaaaa
dcaaaaajdcaabaaaacaaaaaaegaabaaaakaaaaaapgapbaaaadaaaaaaegaabaaa
acaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaa
egaabaaaacaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaa
egaabaaaacaaaaaadcaaaaapmccabaaaadaaaaaaagaebaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaaaajkjjbjdpjkjjbjdpaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpdcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaa
ogakbaaaagaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaa
egaabaaaacaaaaaadcaaaaapdccabaaaadaaaaaaegaabaaaacaaaaaaaceaaaaa
jkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaadbaaaaahbcaabaaaacaaaaaaabeaaaaaaaaaaaaackaabaaaafaaaaaa
dbaaaaahccaabaaaacaaaaaackaabaaaafaaaaaaabeaaaaaaaaaaaaaboaaaaai
bcaabaaaacaaaaaaakaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaaclaaaaaf
bcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaahbcaabaaaacaaaaaaakaabaaa
acaaaaaackaabaaaadaaaaaadbaaaaahccaabaaaacaaaaaaabeaaaaaaaaaaaaa
akaabaaaacaaaaaadbaaaaahicaabaaaacaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaaaadcaaaaajdcaabaaaaaaaaaaaegaabaaaaaaaaaaaagaabaaaacaaaaaa
egaabaaaagaaaaaaboaaaaaibcaabaaaacaaaaaabkaabaiaebaaaaaaacaaaaaa
dkaabaaaacaaaaaacgaaaaaiaanaaaaabcaabaaaacaaaaaaakaabaaaacaaaaaa
ckaabaaaacaaaaaaclaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadcaaaaaj
bcaabaaaacaaaaaaakaabaaaacaaaaaaakaabaaaafaaaaaackaabaaaahaaaaaa
dcaaaaajdcaabaaaaaaaaaaaegaabaaaakaaaaaaagaabaaaacaaaaaaegaabaaa
aaaaaaaadcaaaaajdcaabaaaaaaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaa
egaabaaaaaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaiaebaaaaaaadaaaaaa
egaabaaaaaaaaaaadcaaaaapdccabaaaaeaaaaaaegaabaaaaaaaaaaaaceaaaaa
jkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaa
aaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaa
aoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaai
dcaabaaaacaaaaaafgafbaaaaaaaaaaaegiacaaaaaaaaaaaaoaaaaaadcaaaaak
dcaabaaaaaaaaaaaegiacaaaaaaaaaaaanaaaaaaagaabaaaaaaaaaaaegaabaaa
acaaaaaadcaaaaakdcaabaaaaaaaaaaaegiacaaaaaaaaaaaapaaaaaakgakbaaa
aaaaaaaaegaabaaaaaaaaaaadcaaaaakmccabaaaaeaaaaaaagiecaaaaaaaaaaa
baaaaaaapgapbaaaaaaaaaaaagaebaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaaagaabaaaaaaaaaaaegacbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaadkiacaaa
aaaaaaaabbaaaaaadicaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajocaabaaaaaaaaaaaagijcaaaaaaaaaaabbaaaaaapgipcaaa
aaaaaaaabfaaaaaadccaaaakhccabaaaagaaaaaajgahbaaaaaaaaaaaagaabaaa
aaaaaaaaegiccaaaaeaaaaaaaeaaaaaadiaaaaakhcaabaaaaaaaaaaaegadbaaa
abaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaadiaaaaaiicaabaaa
aaaaaaaabkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaaaaaaaaahdcaabaaa
abaaaaaakgakbaaaaaaaaaaamgaabaaaaaaaaaaadgaaaaafpccabaaaahaaaaaa
egaobaaaabaaaaaadgaaaaaflccabaaaaiaaaaaaegambaaaabaaaaaadiaaaaai
bcaabaaaaaaaaaaabkbabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaa
aaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackbabaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadkbabaaaaaaaaaaaakaabaaaaaaaaaaadgaaaaageccabaaaaiaaaaaa
akaabaiaebaaaaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  highp vec4 o_73;
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_75;
  tmpvar_75.x = tmpvar_74.x;
  tmpvar_75.y = (tmpvar_74.y * _ProjectionParams.x);
  o_73.xy = (tmpvar_75 + tmpvar_74.w);
  o_73.zw = tmpvar_67.zw;
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = o_73;
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 396
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 497
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 488
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 394
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 406
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 419
#line 427
#line 441
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 474
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 478
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 482
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 486
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 512
#line 528
#line 585
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 380
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 382
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 355
mediump vec4 GetShereDetailMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 357
    highp vec3 sphereVectNorm = normalize(sphereVect);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 361
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    highp vec4 uv;
    uv.xy = (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale);
    #line 365
    uv.zw = vec2( 0.0, 0.0);
    return xll_tex2Dlod( texSampler, uv);
}
#line 330
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 332
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 336
    return uv;
}
#line 338
mediump vec4 GetSphereMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 340
    highp vec4 uv;
    highp vec3 sphereVectNorm = normalize(sphereVect);
    uv.xy = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    uv.zw = vec2( 0.0, 0.0);
    #line 344
    mediump vec4 tex = xll_tex2Dlod( texSampler, uv);
    return tex;
}
#line 317
highp vec3 hash( in highp vec3 val ) {
    #line 319
    return fract((sin(val) * 123.545));
}
#line 512
highp mat4 rand_rotation( in highp vec3 x, in highp float scale, in highp vec3 trans ) {
    highp float theta = (x.x * 6.28319);
    highp float phi = (x.y * 6.28319);
    #line 516
    highp float z = (x.z * 2.0);
    highp float r = sqrt(z);
    highp float Vx = (sin(phi) * r);
    highp float Vy = (cos(phi) * r);
    #line 520
    highp float Vz = sqrt((2.0 - z));
    highp float st = sin(theta);
    highp float ct = cos(theta);
    highp float Sx = ((Vx * ct) - (Vy * st));
    #line 524
    highp float Sy = ((Vx * st) + (Vy * ct));
    highp mat4 M = mat4( (scale * ((Vx * Sx) - ct)), ((Vx * Sy) - st), (Vx * Vz), 0.0, ((Vy * Sx) + st), (scale * ((Vy * Sy) - ct)), (Vy * Vz), 0.0, (Vz * Sx), (Vz * Sy), (scale * (1.0 - z)), 0.0, trans.x, trans.y, trans.z, 1.0);
    return M;
}
#line 528
v2f vert( in appdata_t v ) {
    v2f o;
    highp vec4 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0));
    #line 532
    highp vec4 planet_pos = (-(_MainRotation * origin));
    highp vec3 hashVect = abs(hash( normalize(floor(planet_pos.xyz))));
    highp vec4 localOrigin;
    localOrigin.xyz = (((2.0 * hashVect) - 1.0) * _MaxTrans);
    #line 536
    localOrigin.w = 1.0;
    highp float localScale = ((hashVect.x * (_MaxScale - 1.0)) + 1.0);
    origin = (_Object2World * localOrigin);
    highp vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 540
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 544
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    o.baseLight = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    planet_pos = (-(_MainRotation * origin));
    highp vec3 detail_pos = (_DetailRotation * planet_pos).xyz;
    #line 548
    o.color = GetSphereMapNoLOD( _MainTex, planet_pos.xyz);
    o.color *= GetShereDetailMapNoLOD( _DetailTex, detail_pos, _DetailScale);
    o.color.w *= GetDistanceFade( distance( origin, vec4( _WorldSpaceCameraPos, 0.0)), _DistFade, _DistFadeVert);
    highp mat4 M = rand_rotation( (vec3( fract(_Rotation), 0.0, 0.0) + hashVect), localScale, localOrigin.xyz);
    #line 552
    highp mat4 mvMatrix = ((unity_MatrixV * _Object2World) * M);
    highp vec3 viewDir = normalize(xll_matrixindex_mf4x4_i (mvMatrix, 2).xyz);
    o.viewDir = abs(viewDir);
    highp vec4 mvCenter = (glstate_matrix_modelview0 * localOrigin);
    #line 556
    o.pos = (glstate_matrix_projection * (mvCenter + vec4( (v.vertex.xyz * localScale), v.vertex.w)));
    o.camPos = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * localOrigin).xyz));
    highp vec2 texcoodOffsetxy = ((2.0 * v.texcoord) - 1.0);
    highp vec4 texcoordOffset = vec4( texcoodOffsetxy.x, texcoodOffsetxy.y, 0.0, v.vertex.w);
    #line 560
    highp vec4 ZYv = texcoordOffset.zyxw;
    highp vec4 XZv = texcoordOffset.xzyw;
    highp vec4 XYv = texcoordOffset.xyzw;
    ZYv.z *= sign((-viewDir.x));
    #line 564
    XZv.x *= sign((-viewDir.y));
    XYv.x *= sign(viewDir.z);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.z)) * viewDir.z);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.x)) * viewDir.x);
    #line 568
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.x)) * viewDir.x);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.y)) * viewDir.y);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.z)) * viewDir.z);
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.y)) * viewDir.y);
    #line 572
    highp vec2 ZY = ((mvMatrix * ZYv).xy - mvCenter.xy);
    highp vec2 XZ = ((mvMatrix * XZv).xy - mvCenter.xy);
    highp vec2 XY = ((mvMatrix * XYv).xy - mvCenter.xy);
    o.texcoordZY = (vec2( 0.5, 0.5) + (0.6 * ZY));
    #line 576
    o.texcoordXZ = (vec2( 0.5, 0.5) + (0.6 * XZ));
    o.texcoordXY = (vec2( 0.5, 0.5) + (0.6 * XY));
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    #line 580
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out lowp vec4 xlv_COLOR;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.texcoord = vec2(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_COLOR = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD1 = vec2(xl_retval.texcoordZY);
    xlv_TEXCOORD2 = vec2(xl_retval.texcoordXZ);
    xlv_TEXCOORD3 = vec2(xl_retval.texcoordXY);
    xlv_TEXCOORD4 = vec3(xl_retval.camPos);
    xlv_TEXCOORD5 = vec3(xl_retval.baseLight);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 396
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 497
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 488
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 394
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 406
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 419
#line 427
#line 441
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 474
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 478
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 482
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 486
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 512
#line 528
#line 585
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 585
lowp vec4 frag( in v2f IN ) {
    mediump float xval = IN.viewDir.x;
    mediump vec4 xtex = texture( _LeftTex, IN.texcoordZY);
    #line 589
    mediump float yval = IN.viewDir.y;
    mediump vec4 ytex = texture( _TopTex, IN.texcoordXZ);
    mediump float zval = IN.viewDir.z;
    mediump vec4 ztex = texture( _FrontTex, IN.texcoordXY);
    #line 593
    mediump vec4 tex = mix( mix( xtex, ytex, vec4( yval)), ztex, vec4( zval));
    mediump vec4 prev = (((0.94 * _Color) * IN.color) * tex);
    mediump vec4 color;
    color.xyz = (prev.xyz * IN.baseLight);
    #line 597
    color.w = prev.w;
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 601
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in lowp vec4 xlv_COLOR;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_COLOR);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD0);
    xlt_IN.texcoordZY = vec2(xlv_TEXCOORD1);
    xlt_IN.texcoordXZ = vec2(xlv_TEXCOORD2);
    xlt_IN.texcoordXY = vec2(xlv_TEXCOORD3);
    xlt_IN.camPos = vec3(xlv_TEXCOORD4);
    xlt_IN.baseLight = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform vec3 _MaxTrans;
uniform float _MaxScale;
uniform float _Rotation;
uniform float _MinLight;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 unity_MatrixV;


uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 XYv_1;
  vec4 XZv_2;
  vec4 ZYv_3;
  vec3 detail_pos_4;
  float localScale_5;
  vec4 localOrigin_6;
  vec4 tmpvar_7;
  vec3 tmpvar_8;
  vec4 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_6.xyz = (((2.0 * tmpvar_10) - 1.0) * _MaxTrans);
  localOrigin_6.w = 1.0;
  localScale_5 = ((tmpvar_10.x * (_MaxScale - 1.0)) + 1.0);
  vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * localOrigin_6);
  vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = gl_Normal;
  tmpvar_8 = clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (normalize((_Object2World * tmpvar_12).xyz), normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0);
  vec4 tmpvar_13;
  tmpvar_13 = -((_MainRotation * tmpvar_11));
  detail_pos_4 = (_DetailRotation * tmpvar_13).xyz;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13.xyz);
  vec2 uv_15;
  float r_16;
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_14.x)))) {
    float y_over_x_17;
    y_over_x_17 = (tmpvar_14.x / tmpvar_14.z);
    float s_18;
    float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_14.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(tmpvar_14.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_16));
  uv_15.y = (0.31831 * (1.5708 - (sign(tmpvar_14.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_14.y))) * (1.5708 + (abs(tmpvar_14.y) * (-0.214602 + (abs(tmpvar_14.y) * (0.0865667 + (abs(tmpvar_14.y) * -0.0310296)))))))))));
  vec4 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(normalize(detail_pos_4));
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  uv_20.xy = (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale);
  uv_20.zw = vec2(0.0, 0.0);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DLod (_MainTex, uv_15, 0.0) * texture2DLod (_DetailTex, uv_20.xy, 0.0));
  tmpvar_7.xyz = tmpvar_24.xyz;
  vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = _WorldSpaceCameraPos;
  float tmpvar_26;
  vec4 p_27;
  p_27 = (tmpvar_11 - tmpvar_25);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  tmpvar_7.w = (tmpvar_24.w * (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0)));
  vec3 tmpvar_28;
  tmpvar_28.yz = vec2(0.0, 0.0);
  tmpvar_28.x = fract(_Rotation);
  vec3 x_29;
  x_29 = (tmpvar_28 + tmpvar_10);
  vec3 trans_30;
  trans_30 = localOrigin_6.xyz;
  float tmpvar_31;
  tmpvar_31 = (x_29.x * 6.28319);
  float tmpvar_32;
  tmpvar_32 = (x_29.y * 6.28319);
  float tmpvar_33;
  tmpvar_33 = (x_29.z * 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (sin(tmpvar_32) * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (cos(tmpvar_32) * tmpvar_34);
  float tmpvar_37;
  tmpvar_37 = sqrt((2.0 - tmpvar_33));
  float tmpvar_38;
  tmpvar_38 = sin(tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = cos(tmpvar_31);
  float tmpvar_40;
  tmpvar_40 = ((tmpvar_35 * tmpvar_39) - (tmpvar_36 * tmpvar_38));
  float tmpvar_41;
  tmpvar_41 = ((tmpvar_35 * tmpvar_38) + (tmpvar_36 * tmpvar_39));
  mat4 tmpvar_42;
  tmpvar_42[0].x = (localScale_5 * ((tmpvar_35 * tmpvar_40) - tmpvar_39));
  tmpvar_42[0].y = ((tmpvar_35 * tmpvar_41) - tmpvar_38);
  tmpvar_42[0].z = (tmpvar_35 * tmpvar_37);
  tmpvar_42[0].w = 0.0;
  tmpvar_42[1].x = ((tmpvar_36 * tmpvar_40) + tmpvar_38);
  tmpvar_42[1].y = (localScale_5 * ((tmpvar_36 * tmpvar_41) - tmpvar_39));
  tmpvar_42[1].z = (tmpvar_36 * tmpvar_37);
  tmpvar_42[1].w = 0.0;
  tmpvar_42[2].x = (tmpvar_37 * tmpvar_40);
  tmpvar_42[2].y = (tmpvar_37 * tmpvar_41);
  tmpvar_42[2].z = (localScale_5 * (1.0 - tmpvar_33));
  tmpvar_42[2].w = 0.0;
  tmpvar_42[3].x = trans_30.x;
  tmpvar_42[3].y = trans_30.y;
  tmpvar_42[3].z = trans_30.z;
  tmpvar_42[3].w = 1.0;
  mat4 tmpvar_43;
  tmpvar_43 = (((unity_MatrixV * _Object2World) * tmpvar_42));
  vec4 v_44;
  v_44.x = tmpvar_43[0].z;
  v_44.y = tmpvar_43[1].z;
  v_44.z = tmpvar_43[2].z;
  v_44.w = tmpvar_43[3].z;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(v_44.xyz);
  vec4 tmpvar_46;
  tmpvar_46 = (gl_ModelViewMatrix * localOrigin_6);
  vec4 tmpvar_47;
  tmpvar_47.xyz = (gl_Vertex.xyz * localScale_5);
  tmpvar_47.w = gl_Vertex.w;
  vec4 tmpvar_48;
  tmpvar_48 = (gl_ProjectionMatrix * (tmpvar_46 + tmpvar_47));
  vec2 tmpvar_49;
  tmpvar_49 = ((2.0 * gl_MultiTexCoord0.xy) - 1.0);
  vec4 tmpvar_50;
  tmpvar_50.z = 0.0;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = tmpvar_49.y;
  tmpvar_50.w = gl_Vertex.w;
  ZYv_3.xyw = tmpvar_50.zyw;
  XZv_2.yzw = tmpvar_50.zyw;
  XYv_1.yzw = tmpvar_50.yzw;
  ZYv_3.z = (tmpvar_49.x * sign(-(tmpvar_45.x)));
  XZv_2.x = (tmpvar_49.x * sign(-(tmpvar_45.y)));
  XYv_1.x = (tmpvar_49.x * sign(tmpvar_45.z));
  ZYv_3.x = ((sign(-(tmpvar_45.x)) * sign(ZYv_3.z)) * tmpvar_45.z);
  XZv_2.y = ((sign(-(tmpvar_45.y)) * sign(XZv_2.x)) * tmpvar_45.x);
  XYv_1.z = ((sign(-(tmpvar_45.z)) * sign(XYv_1.x)) * tmpvar_45.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_45.x)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_45.y)) * sign(tmpvar_49.y)) * tmpvar_45.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_45.z)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  vec4 o_51;
  vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_48 * 0.5);
  vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_48.zw;
  tmpvar_9.xyw = o_51.xyw;
  tmpvar_9.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_48;
  xlv_COLOR = tmpvar_7;
  xlv_TEXCOORD0 = abs(tmpvar_45);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * ZYv_3).xy - tmpvar_46.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XZv_2).xy - tmpvar_46.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XYv_1).xy - tmpvar_46.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_6).xyz));
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform vec4 _ZBufferParams;
void main ()
{
  vec4 color_1;
  vec4 tmpvar_2;
  tmpvar_2 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (texture2D (_LeftTex, xlv_TEXCOORD1), texture2D (_TopTex, xlv_TEXCOORD2), xlv_TEXCOORD0.yyyy), texture2D (_FrontTex, xlv_TEXCOORD3), xlv_TEXCOORD0.zzzz));
  color_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD5);
  color_1.w = (tmpvar_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 28 [glstate_lightmodel_ambient]
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_projection]
Vector 29 [_WorldSpaceCameraPos]
Vector 30 [_ProjectionParams]
Vector 31 [_ScreenParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 33 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [unity_MatrixV]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
Vector 34 [_LightColor0]
Float 35 [_DetailScale]
Float 36 [_DistFade]
Float 37 [_DistFadeVert]
Float 38 [_MinLight]
Float 39 [_Rotation]
Float 40 [_MaxScale]
Vector 41 [_MaxTrans]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"vs_3_0
; 355 ALU, 4 TEX
dcl_position o0
dcl_color0 o1
dcl_texcoord0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord7 o9
dcl_texcoord8 o10
def c42, 0.15915491, 0.50000000, 6.28318501, -3.14159298
def c43, 123.54530334, 2.00000000, -1.00000000, 1.00000000
def c44, 0.00000000, -0.01872930, 0.07426100, -0.21211439
def c45, 1.57072902, 3.14159298, 0.31830987, -0.12123910
def c46, -0.01348047, 0.05747731, 0.19563590, -0.33299461
def c47, 0.99999559, 1.57079601, 0.15915494, 0.50000000
def c48, 6.28318548, 0.00000000, 1.00000000, -0.01000214
def c49, 0.60000002, 0.50000000, 4.03944778, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_2d s0
dcl_2d s1
mad r10.xy, v2, c43.y, c43.z
mov r1.w, c11
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
dp4 r0.z, r1, c18
dp4 r0.x, r1, c16
dp4 r0.y, r1, c17
frc r1.xyz, -r0
add r0.xyz, -r0, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mad r0.x, r1, c42, c42.y
frc r0.x, r0
mad r1.x, r0, c42.z, c42.w
sincos r0.xy, r1.x
mad r0.x, r1.z, c42, c42.y
mov r1.x, r0.y
frc r0.y, r0.x
mad r0.x, r1.y, c42, c42.y
mad r1.y, r0, c42.z, c42.w
frc r1.x, r0
sincos r0.xy, r1.y
mad r0.x, r1, c42.z, c42.w
sincos r1.xy, r0.x
mov r1.z, r0.y
mul r0.xyz, r1, c43.x
frc r0.xyz, r0
abs r6.xyz, r0
mad r0.xyz, r6, c43.y, c43.z
mul r0.xyz, r0, c41
mov r0.w, c43
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
dp4 r2.w, r0, c11
dp4 r1.z, r2, c18
dp4 r1.x, r2, c16
dp4 r1.y, r2, c17
dp4 r1.w, r2, c19
add r7.xyz, -r2, c29
dp3 r2.x, r7, r7
rsq r8.w, r2.x
dp4 r3.z, -r1, c22
dp4 r3.x, -r1, c20
dp4 r3.y, -r1, c21
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mul r3.xyz, r1.w, r3
abs r3.xyz, r3
sge r1.w, r3.z, r3.x
add r4.xyz, r3.zxyw, -r3
mad r4.xyz, r1.w, r4, r3
sge r2.w, r4.x, r3.y
add r4.xyz, r4, -r3.yxzw
mad r3.xyz, r2.w, r4, r3.yxzw
dp3 r1.w, -r1, -r1
rsq r1.w, r1.w
mul r1.xyz, r1.w, -r1
abs r2.w, r1.x
abs r1.w, r1.z
mul r3.zw, r3.xyzy, c42.y
max r3.y, r1.w, r2.w
abs r4.y, r3.x
min r3.x, r1.w, r2.w
slt r1.w, r1, r2
rcp r3.y, r3.y
mul r4.x, r3, r3.y
rcp r3.x, r4.y
mul r3.xy, r3.zwzw, r3.x
mul r4.y, r4.x, r4.x
mad r3.z, r4.y, c46.x, c46.y
mad r3.z, r3, r4.y, c45.w
mad r2.w, r3.z, r4.y, c46.z
mad r2.w, r2, r4.y, c46
mad r2.w, r2, r4.y, c47.x
mul r2.w, r2, r4.x
max r1.w, -r1, r1
slt r1.w, c44.x, r1
add r3.z, -r1.w, c43.w
mul r3.z, r2.w, r3
add r2.w, -r2, c47.y
mad r1.w, r1, r2, r3.z
slt r1.z, r1, c44.x
max r1.z, -r1, r1
slt r1.z, c44.x, r1
slt r1.x, r1, c44
max r1.x, -r1, r1
add r2.w, -r1, c45.y
add r3.z, -r1, c43.w
mul r1.w, r1, r3.z
slt r1.x, c44, r1
mad r1.z, r1, r2.w, r1.w
add r3.z, -r1.x, c43.w
mul r1.w, r1.z, r3.z
mad r1.x, r1, -r1.z, r1.w
abs r1.z, r1.y
add r2.w, -r1.z, c43
mad r1.w, r1.z, c44.y, c44.z
mad r1.w, r1, r1.z, c44
rsq r2.w, r2.w
rcp r2.w, r2.w
mad r1.z, r1.w, r1, c45.x
mul r1.z, r1, r2.w
slt r1.y, r1, c44.x
mul r1.w, r1.y, r1.z
mad r1.z, -r1.w, c43.y, r1
mad r1.y, r1, c45, r1.z
mul r3.xy, r3, c35.x
mov r3.z, c44.x
texldl r3, r3.xyzz, s1
mad r1.x, r1, c47.z, c47.w
mov r4.yz, c44.x
frc r4.x, c39
add r4.xyz, r6, r4
mul r1.w, r4.x, c48.x
mad r1.z, r1.w, c42.x, c42.y
frc r2.w, r1.z
mad r4.x, r2.w, c42.z, c42.w
sincos r5.xy, r4.x
mul r2.w, r4.y, c48.x
mad r2.w, r2, c42.x, c42.y
frc r4.x, r2.w
mul r2.w, r4.z, c43.y
mad r5.z, r4.x, c42, c42.w
sincos r4.xy, r5.z
rsq r5.w, r2.w
rcp r4.z, r5.w
mul r4.w, r4.x, r4.z
mul r5.z, r4.y, r4
mul r4.x, r4.w, r5
mad r4.y, r5.z, r5, r4.x
mov r5.w, c14.x
mul r1.y, r1, c45.z
mov r1.z, c44.x
texldl r1, r1.xyzz, s0
mul r3, r1, r3
add r1.z, -r2.w, c43.y
mov o1.xyz, r3
mov r1.y, c40.x
add r1.y, c43.z, r1
mad r1.x, r5.z, r4.y, -r5.y
mad r7.w, r6.x, r1.y, c43
mad r1.w, r4, r4.y, -r5.x
mul r1.y, r7.w, r1.w
rsq r1.z, r1.z
rcp r1.w, r1.z
mul r1.z, r1.w, r4.y
mov r4.x, c14.y
mul r4.xyz, c9, r4.x
mad r4.xyz, c8, r5.w, r4
mov r5.w, c14.z
mad r4.xyz, c10, r5.w, r4
mov r5.w, c14
mad r6.xyz, c11, r5.w, r4
mul r5.w, r4, r5.y
mad r2.z, r5, r5.x, -r5.w
mad r2.y, r5.z, r2.z, -r5.x
mul r2.x, r7.w, r2.y
mad r2.y, r4.w, r2.z, r5
mul r5.x, r5.z, r1.w
add r2.w, -r2, c43
mul r5.y, r1.w, r4.w
mul r2.z, r1.w, r2
mul r4.xyz, r6.y, r1
rcp r5.w, r8.w
mul r5.z, r7.w, r2.w
mad r4.xyz, r6.x, r2, r4
mad r4.xyz, r6.z, r5, r4
mul r1.w, -r5, c37.x
add_sat r2.w, r1, c43
mul_sat r1.w, r5, c36.x
mul r1.w, r1, r2
dp3 r4.w, r4, r4
rsq r2.w, r4.w
mul r8.xyz, r2.w, r4
mul o1.w, r3, r1
slt r2.w, -r8.x, r8.x
slt r1.w, r8.x, -r8.x
sub r1.w, r1, r2
slt r3.x, r10.y, -r10.y
slt r2.w, -r10.y, r10.y
sub r10.z, r2.w, r3.x
mul r2.w, r10.x, r1
mul r3.z, r1.w, r10
slt r3.y, r2.w, -r2.w
slt r3.x, -r2.w, r2.w
sub r3.x, r3, r3.y
mov r9.z, r2.w
mov r2.w, r0.x
mul r1.w, r3.x, r1
mul r3.y, r8, r3.z
mad r9.x, r8.z, r1.w, r3.y
mov r1.w, c12.y
mul r3, c9, r1.w
mov r1.w, c12.x
mad r3, c8, r1.w, r3
mov r1.w, c12.z
mad r3, c10, r1.w, r3
mov r1.w, c12
mad r6, c11, r1.w, r3
mov r1.w, r0.y
mul r4, r1, r6.y
mov r3.x, c13.y
mov r5.w, c13.x
mul r3, c9, r3.x
mad r3, c8, r5.w, r3
mov r5.w, c13.z
mad r3, c10, r5.w, r3
mov r5.w, c13
mad r3, c11, r5.w, r3
mul r1, r3.y, r1
mov r5.w, r0.z
mad r1, r3.x, r2, r1
mad r1, r3.z, r5, r1
mad r1, r3.w, c48.yyyz, r1
mad r4, r2, r6.x, r4
mad r4, r5, r6.z, r4
mad r2, r6.w, c48.yyyz, r4
dp4 r5.y, r0, c1
dp4 r5.x, r0, c0
mov r4.w, v0
mov r4.y, r10
mov r9.yw, r4
dp4 r3.y, r1, r9
dp4 r3.x, r9, r2
slt r3.w, -r8.y, r8.y
slt r3.z, r8.y, -r8.y
sub r4.x, r3.z, r3.w
add r3.zw, -r5.xyxy, r3.xyxy
mul r3.x, r10, r4
mad o3.xy, r3.zwzw, c49.x, c49.y
slt r3.z, r3.x, -r3.x
slt r3.y, -r3.x, r3.x
sub r3.y, r3, r3.z
mul r3.z, r10, r4.x
mul r3.y, r3, r4.x
mul r4.x, r8.z, r3.z
mad r3.y, r8.x, r3, r4.x
mov r3.zw, r4.xyyw
dp4 r5.w, r1, r3
dp4 r5.z, r2, r3
add r3.xy, -r5, r5.zwzw
slt r3.w, -r8.z, r8.z
slt r3.z, r8, -r8
sub r4.x, r3.w, r3.z
sub r3.z, r3, r3.w
mul r4.x, r10, r4
mul r5.z, r10, r3
dp4 r5.w, r0, c3
slt r4.z, r4.x, -r4.x
slt r3.w, -r4.x, r4.x
sub r3.w, r3, r4.z
mul r4.z, r8.y, r5
dp4 r5.z, r0, c2
mul r3.z, r3, r3.w
mad r4.z, r8.x, r3, r4
dp4 r1.y, r1, r4
dp4 r1.x, r2, r4
mad o4.xy, r3, c49.x, c49.y
add r3.xy, -r5, r1
mov r0.w, v0
mul r0.xyz, v0, r7.w
add r0, r5, r0
dp4 r2.w, r0, c7
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
mov r1.w, r2
dp4 r1.z, r0, c6
mul r2.xyz, r1.xyww, c42.y
mov o0, r1
mul r2.y, r2, c30.x
mov r1.xyz, v1
mov r1.w, c44.x
dp4 r0.z, r1, c10
dp4 r0.y, r1, c9
dp4 r0.x, r1, c8
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c32, c32
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c32
dp3_sat r0.x, r0, r1
add r0.x, r0, c48.w
mul r0.y, r0.x, c34.w
mul_sat r0.w, r0.y, c49.z
mov r0.x, c38
add r0.xyz, c34, r0.x
mad_sat o7.xyz, r0, r0.w, c28
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o8.z, r0, c26
dp4 o8.y, r0, c25
dp4 o8.x, r0, c24
dp4 r0.w, v0, c2
mad o5.xy, r3, c49.x, c49.y
mad o10.xy, r2.z, c31.zwzw, r2
abs o2.xyz, r8
mov o10.w, r2
mul o6.xyz, r8.w, r7
add o9.xyz, r0, -c33
mov o10.z, -r0.w
"
}

SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
ConstBuffer "$Globals" 320 // 316 used size, 16 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
Vector 208 [_LightColor0] 4
Float 240 [_DetailScale]
Float 272 [_DistFade]
Float 276 [_DistFadeVert]
Float 284 [_MinLight]
Float 292 [_Rotation]
Float 296 [_MaxScale]
Vector 304 [_MaxTrans] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityPerFrame" 208 // 144 used size, 4 vars
Matrix 0 [glstate_matrix_projection] 4
Vector 64 [glstate_lightmodel_ambient] 4
Matrix 80 [unity_MatrixV] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityPerFrame" 4
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 254 instructions, 12 temp regs, 0 temp arrays:
// ALU 217 float, 8 int, 6 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmfgejmepbhogipblgelkknoeoijakeahabaaaaaaeaceaaaaadaaaaaa
cmaaaaaanmaaaaaabaacaaaaejfdeheokiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaijaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaipaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaajgaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaajoaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaafaepfdejfeejepeoaaedepem
epfcaaeoepfcenebemaafeebeoehefeofeaafeeffiedepepfceeaaklepfdeheo
cmabaaaaalaaaaaaaiaaaaaabaabaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaabmabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaccabaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaccabaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaaccabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
amadaaaaccabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaaccabaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaccabaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaccabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaccabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaiaaaaccabaaaa
aiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
edepemepfcaafeeffiedepepfceeaaklfdeieefcciccaaaaeaaaabaaikaiaaaa
fjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaa
fjaaaaaeegiocaaaaeaaaaaaajaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
pccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaa
gfaaaaadmccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaad
hccabaaaaiaaaaaagfaaaaadpccabaaaajaaaaaagiaaaaacamaaaaaadiaaaaaj
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaafgifcaaaadaaaaaaapaaaaaa
dcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaadaaaaaa
apaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
adaaaaaakgikcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaaeaaaaaapgipcaaaadaaaaaaapaaaaaaegacbaaa
aaaaaaaaebaaaaaghcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaenaaaaaghcaabaaaaaaaaaaaaanaaaaaegacbaaaaaaaaaaa
diaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaadcbhphecdcbhphec
dcbhphecaaaaaaaabkaaaaafhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaai
icaabaaaaaaaaaaackiacaaaaaaaaaaabcaaaaaaabeaaaaaaaaaialpdcaaaaaj
icaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaf
icaabaaaabaaaaaadkbabaaaaaaaaaaadcaaaaaphcaabaaaacaaaaaaegacbaaa
aaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaadiaaaaaipcaabaaaadaaaaaafgafbaaaacaaaaaa
egiocaaaadaaaaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaadaaaaaa
aeaaaaaaagaabaaaacaaaaaaegaobaaaadaaaaaadcaaaaakpcaabaaaadaaaaaa
egiocaaaadaaaaaaagaaaaaakgakbaaaacaaaaaaegaobaaaadaaaaaaaaaaaaai
pcaabaaaadaaaaaaegaobaaaadaaaaaaegiocaaaadaaaaaaahaaaaaaaaaaaaah
pcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaadaaaaaadiaaaaaipcaabaaa
aeaaaaaafgafbaaaabaaaaaaegiocaaaaeaaaaaaabaaaaaadcaaaaakpcaabaaa
aeaaaaaaegiocaaaaeaaaaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaeaaaaaa
dcaaaaakpcaabaaaaeaaaaaaegiocaaaaeaaaaaaacaaaaaakgakbaaaabaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaeaaaaaaadaaaaaa
pgapbaaaabaaaaaaegaobaaaaeaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaaeaaaaaafgafbaaaacaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaamaaaaaaagaabaaa
acaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaa
aoaaaaaakgakbaaaacaaaaaaegaobaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaaaaeaaaaaaegiocaaaadaaaaaaapaaaaaadiaaaaaipcaabaaaafaaaaaa
fgafbaaaaeaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaafaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaeaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaafaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaeaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aeaaaaaaegaobaaaafaaaaaadiaaaaajhcaabaaaagaaaaaafgafbaiaebaaaaaa
afaaaaaabgigcaaaaaaaaaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaa
aaaaaaaaafaaaaaaagaabaiaebaaaaaaafaaaaaaegacbaaaagaaaaaadcaaaaal
hcaabaaaagaaaaaabgigcaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaafaaaaaa
egacbaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaaiaaaaaa
pgapbaiaebaaaaaaafaaaaaaegacbaaaagaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaagaaaaaaegacbaaaagaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahhcaabaaaagaaaaaakgakbaaaabaaaaaaegacbaaaagaaaaaa
dgaaaaagecaabaaaahaaaaaackaabaiambaaaaaaagaaaaaabnaaaaajecaabaaa
abaaaaaackaabaiaibaaaaaaagaaaaaabkaabaiaibaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaa
aiaaaaaafgaibaiambaaaaaaagaaaaaakgabbaiaibaaaaaaagaaaaaadiaaaaah
lcaabaaaahaaaaaakgakbaaaabaaaaaajganbaaaaiaaaaaadcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaaiaaaaaabkaabaiaibaaaaaaagaaaaaa
bnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaagaaaaaa
abaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
hcaabaaaaiaaaaaabgagbaiaibaaaaaaagaaaaaaegacbaaaahaaaaaadgaaaaag
fcaabaaaahaaaaaafgaebaiambaaaaaaagaaaaaaaaaaaaahhcaabaaaahaaaaaa
cgalbaaaahaaaaaaegacbaaaaiaaaaaadcaaaaakhcaabaaaagaaaaaakgakbaaa
abaaaaaaegacbaaaahaaaaaaegacbaiaibaaaaaaagaaaaaadiaaaaakmcaabaaa
adaaaaaakgagbaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
aoaaaaahmcaabaaaadaaaaaakgaobaaaadaaaaaaagaabaaaagaaaaaadiaaaaai
mcaabaaaadaaaaaakgaobaaaadaaaaaaagiacaaaaaaaaaaaapaaaaaaeiaaaaal
pcaabaaaagaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaajecaabaaaabaaaaaaegacbaiaebaaaaaaafaaaaaa
egacbaiaebaaaaaaafaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaaihcaabaaaafaaaaaakgakbaaaabaaaaaaigabbaiaebaaaaaaafaaaaaa
deaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaa
afaaaaaaaoaaaaakecaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpckaabaaaabaaaaaaddaaaaajicaabaaaacaaaaaabkaabaiaibaaaaaa
afaaaaaaakaabaiaibaaaaaaafaaaaaadiaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaackaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaa
ckaabaaaadaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaadaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
adaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaaadaaaaaa
ckaabaaaadaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
adaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaabaaaaah
ecaabaaaadaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadbaaaaai
mcaabaaaadaaaaaafgajbaaaafaaaaaafgajbaiaebaaaaaaafaaaaaaabaaaaah
icaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaanlapejmaaaaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaaddaaaaahicaabaaaacaaaaaa
bkaabaaaafaaaaaaakaabaaaafaaaaaadbaaaaaiicaabaaaacaaaaaadkaabaaa
acaaaaaadkaabaiaebaaaaaaacaaaaaadeaaaaahecaabaaaadaaaaaabkaabaaa
afaaaaaaakaabaaaafaaaaaabnaaaaaiecaabaaaadaaaaaackaabaaaadaaaaaa
ckaabaiaebaaaaaaadaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
ckaabaaaadaaaaaadhaaaaakecaabaaaabaaaaaadkaabaaaacaaaaaackaabaia
ebaaaaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaafaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakecaabaaaabaaaaaa
ckaabaiaibaaaaaaafaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaibaaaaaa
afaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaacaaaaaackaabaiambaaaaaa
afaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaa
diaaaaahecaabaaaadaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaaj
ecaabaaaadaaaaaackaabaaaadaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahecaabaaaadaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaa
diaaaaahccaabaaaafaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoeiaaaaal
pcaabaaaafaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
abeaaaaaaaaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaagaaaaaaegaobaaa
afaaaaaaaaaaaaajhcaabaaaagaaaaaaegacbaaaaeaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhcaabaaaaeaaaaaaegacbaiaebaaaaaaaeaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaagaaaaaa
egacbaaaagaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaai
icaabaaaacaaaaaackaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaadccaaaal
ecaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaiadpdgcaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahiccabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaafaaaaaadgaaaaafhccabaaaabaaaaaa
egacbaaaafaaaaaabkaaaaagbcaabaaaafaaaaaabkiacaaaaaaaaaaabcaaaaaa
dgaaaaaigcaabaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaafaaaaaaaaaaaaah
ecaabaaaabaaaaaackaabaaaaaaaaaaackaabaaaaaaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
aceaaaaanlapmjeanlapmjeaaaaaaaaaaaaaaaaadcaaaabamcaabaaaadaaaaaa
kgakbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaea
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaiadpenaaaaahbcaabaaaafaaaaaa
bcaabaaaagaaaaaabkaabaaaaaaaaaaaenaaaaahbcaabaaaaaaaaaaabcaabaaa
ahaaaaaaakaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaackaabaaaabaaaaaa
akaabaaaagaaaaaadiaaaaahecaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaa
afaaaaaadiaaaaahecaabaaaabaaaaaaakaabaaaahaaaaaabkaabaaaaaaaaaaa
dcaaaaajecaabaaaabaaaaaackaabaaaaaaaaaaaakaabaaaaaaaaaaackaabaaa
abaaaaaadcaaaaakicaabaaaacaaaaaabkaabaaaaaaaaaaackaabaaaabaaaaaa
akaabaiaebaaaaaaahaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaacaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaadaaaaaaanaaaaaa
egiccaaaaeaaaaaaagaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaa
afaaaaaaagiacaaaadaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaa
afaaaaaaegiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaanaaaaaaegacbaaa
afaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaa
adaaaaaaanaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaagaaaaaapgapbaaa
acaaaaaaegacbaaaafaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadcaaaaakicaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaa
ahaaaaaadkaabaiaebaaaaaaacaaaaaadcaaaaajicaabaaaaeaaaaaabkaabaaa
aaaaaaaadkaabaaaacaaaaaaakaabaaaaaaaaaaadiaaaaajocaabaaaahaaaaaa
fgifcaaaadaaaaaaamaaaaaaagijcaaaaeaaaaaaagaaaaaadcaaaaalocaabaaa
ahaaaaaaagijcaaaaeaaaaaaafaaaaaaagiacaaaadaaaaaaamaaaaaafgaobaaa
ahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaaahaaaaaakgikcaaa
adaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaa
aeaaaaaaaiaaaaaapgipcaaaadaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaaj
hcaabaaaagaaaaaajgahbaaaahaaaaaapgapbaaaaeaaaaaaegacbaaaagaaaaaa
elaaaaafecaabaaaadaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaadaaaaaa
dkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaadaaaaaadiaaaaajhcaabaaaaiaaaaaafgifcaaaadaaaaaa
aoaaaaaaegiccaaaaeaaaaaaagaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaa
aeaaaaaaafaaaaaaagiacaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaal
hcaabaaaaiaaaaaaegiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaaoaaaaaa
egacbaaaaiaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaaaiaaaaaa
pgipcaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaajhcaabaaaagaaaaaa
egacbaaaaiaaaaaafgafbaaaaaaaaaaaegacbaaaagaaaaaadgaaaaafccaabaaa
ajaaaaaackaabaaaagaaaaaadcaaaaakccaabaaaaaaaaaaackaabaaaaaaaaaaa
dkaabaaaacaaaaaaakaabaiaebaaaaaaahaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckaabaaaaaaaaaaackaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaadiaaaaah
ecaabaaaaaaaaaaackaabaaaaaaaaaaackaabaaaadaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaahhcaabaaaakaaaaaakgakbaaa
abaaaaaaegacbaaaafaaaaaadcaaaaajhcaabaaaakaaaaaajgahbaaaahaaaaaa
pgapbaaaacaaaaaaegacbaaaakaaaaaadcaaaaajhcaabaaaakaaaaaaegacbaaa
aiaaaaaapgapbaaaadaaaaaaegacbaaaakaaaaaadiaaaaahhcaabaaaalaaaaaa
agaabaaaaaaaaaaaegacbaaaafaaaaaadiaaaaahkcaabaaaacaaaaaafgafbaaa
acaaaaaaagaebaaaafaaaaaadcaaaaajdcaabaaaacaaaaaajgafbaaaahaaaaaa
agaabaaaacaaaaaangafbaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaa
aiaaaaaakgakbaaaacaaaaaaegaabaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaa
bkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajlcaabaaaaaaaaaaajganbaaa
ahaaaaaaagaabaaaaaaaaaaaegaibaaaalaaaaaadcaaaaajhcaabaaaaaaaaaaa
egacbaaaaiaaaaaakgakbaaaaaaaaaaaegadbaaaaaaaaaaadgaaaaafbcaabaaa
ajaaaaaackaabaaaaaaaaaaadgaaaaafecaabaaaajaaaaaackaabaaaakaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaajaaaaaaegacbaaaajaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaajaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaibaaaaaa
afaaaaaadiaaaaajmcaabaaaaaaaaaaafgifcaaaadaaaaaaapaaaaaaagiecaaa
aeaaaaaaagaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaafaaaaaa
agiacaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaaaaaaaaaa
agiecaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaa
dcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaa
apaaaaaakgaobaaaaaaaaaaaaaaaaaahmcaabaaaaaaaaaaakgaobaaaaaaaaaaa
agaebaaaacaaaaaadbaaaaalhcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaegacbaiaebaaaaaaafaaaaaadbaaaaalhcaabaaaahaaaaaa
egacbaiaebaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
boaaaaaihcaabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaahaaaaaa
dcaaaaapmcaabaaaadaaaaaaagbebaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaeaaaaaaaeaaceaaaaaaaaaaaaaaaaaaaaaaaaaialpaaaaialpdbaaaaah
ecaabaaaabaaaaaaabeaaaaaaaaaaaaadkaabaaaadaaaaaadbaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaaabaaaaaa
ckaabaiaebaaaaaaabaaaaaadkaabaaaacaaaaaacgaaaaaiaanaaaaahcaabaaa
ahaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaaclaaaaafhcaabaaaahaaaaaa
egacbaaaahaaaaaadiaaaaahhcaabaaaahaaaaaajgafbaaaafaaaaaaegacbaaa
ahaaaaaaclaaaaafkcaabaaaafaaaaaaagaebaaaacaaaaaadiaaaaahkcaabaaa
afaaaaaakgakbaaaadaaaaaafganbaaaafaaaaaadbaaaaakmcaabaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafganbaaaafaaaaaadbaaaaak
dcaabaaaaiaaaaaangafbaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaboaaaaaimcaabaaaagaaaaaakgaobaiaebaaaaaaagaaaaaaagaebaaa
aiaaaaaacgaaaaaiaanaaaaadcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaa
agaaaaaaclaaaaafdcaabaaaacaaaaaaegaabaaaacaaaaaadcaaaaajdcaabaaa
acaaaaaaegaabaaaacaaaaaacgakbaaaafaaaaaaegaabaaaahaaaaaadiaaaaah
kcaabaaaacaaaaaafgafbaaaacaaaaaaagaebaaaagaaaaaadiaaaaahdcaabaaa
agaaaaaapgapbaaaadaaaaaaegaabaaaagaaaaaadcaaaaajmcaabaaaagaaaaaa
agaebaaaaaaaaaaaagaabaaaacaaaaaaagaebaaaagaaaaaadcaaaaajmcaabaaa
agaaaaaaagaebaaaakaaaaaafgafbaaaafaaaaaakgaobaaaagaaaaaadcaaaaaj
dcaabaaaacaaaaaaegaabaaaaaaaaaaapgapbaaaafaaaaaangafbaaaacaaaaaa
dcaaaaajdcaabaaaacaaaaaaegaabaaaakaaaaaapgapbaaaadaaaaaaegaabaaa
acaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaa
egaabaaaacaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaa
egaabaaaacaaaaaadcaaaaapmccabaaaadaaaaaaagaebaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaaaajkjjbjdpjkjjbjdpaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpdcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaa
ogakbaaaagaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaa
egaabaaaacaaaaaadcaaaaapdccabaaaadaaaaaaegaabaaaacaaaaaaaceaaaaa
jkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaadbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaackaabaaaafaaaaaa
dbaaaaahbcaabaaaacaaaaaackaabaaaafaaaaaaabeaaaaaaaaaaaaaboaaaaai
ecaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaacaaaaaaclaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaackaabaaaadaaaaaadbaaaaahbcaabaaaacaaaaaaabeaaaaaaaaaaaaa
ckaabaaaabaaaaaadbaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaa
aaaaaaaadcaaaaajdcaabaaaaaaaaaaaegaabaaaaaaaaaaakgakbaaaabaaaaaa
egaabaaaagaaaaaaboaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaa
bkaabaaaacaaaaaacgaaaaaiaanaaaaaecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaaaacaaaaaaclaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaackaabaaaahaaaaaa
dcaaaaajdcaabaaaaaaaaaaaegaabaaaakaaaaaakgakbaaaabaaaaaaegaabaaa
aaaaaaaadcaaaaajdcaabaaaaaaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaa
egaabaaaaaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaiaebaaaaaaadaaaaaa
egaabaaaaaaaaaaadcaaaaapdccabaaaaeaaaaaaegaabaaaaaaaaaaaaceaaaaa
jkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
agaabaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaacaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaacaaaaaa
aaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaaaaaaaaa
agijcaaaaaaaaaaaanaaaaaapgipcaaaaaaaaaaabbaaaaaadccaaaakhccabaaa
agaaaaaajgahbaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaaeaaaaaaaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaalaaaaaakgakbaaaaaaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaamaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaajhccabaaaaiaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaadiaaaaakhcaabaaaaaaaaaaa
egadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaadgaaaaaf
iccabaaaajaaaaaadkaabaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
aaaaaaaamgaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 401
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 502
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 493
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform samplerCube _ShadowMapTexture;
#line 399
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 411
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 424
#line 432
#line 446
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 479
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 483
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 487
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 491
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 517
#line 533
#line 590
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 380
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 382
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 355
mediump vec4 GetShereDetailMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 357
    highp vec3 sphereVectNorm = normalize(sphereVect);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 361
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    highp vec4 uv;
    uv.xy = (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale);
    #line 365
    uv.zw = vec2( 0.0, 0.0);
    return xll_tex2Dlod( texSampler, uv);
}
#line 330
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 332
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 336
    return uv;
}
#line 338
mediump vec4 GetSphereMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 340
    highp vec4 uv;
    highp vec3 sphereVectNorm = normalize(sphereVect);
    uv.xy = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    uv.zw = vec2( 0.0, 0.0);
    #line 344
    mediump vec4 tex = xll_tex2Dlod( texSampler, uv);
    return tex;
}
#line 317
highp vec3 hash( in highp vec3 val ) {
    #line 319
    return fract((sin(val) * 123.545));
}
#line 517
highp mat4 rand_rotation( in highp vec3 x, in highp float scale, in highp vec3 trans ) {
    highp float theta = (x.x * 6.28319);
    highp float phi = (x.y * 6.28319);
    #line 521
    highp float z = (x.z * 2.0);
    highp float r = sqrt(z);
    highp float Vx = (sin(phi) * r);
    highp float Vy = (cos(phi) * r);
    #line 525
    highp float Vz = sqrt((2.0 - z));
    highp float st = sin(theta);
    highp float ct = cos(theta);
    highp float Sx = ((Vx * ct) - (Vy * st));
    #line 529
    highp float Sy = ((Vx * st) + (Vy * ct));
    highp mat4 M = mat4( (scale * ((Vx * Sx) - ct)), ((Vx * Sy) - st), (Vx * Vz), 0.0, ((Vy * Sx) + st), (scale * ((Vy * Sy) - ct)), (Vy * Vz), 0.0, (Vz * Sx), (Vz * Sy), (scale * (1.0 - z)), 0.0, trans.x, trans.y, trans.z, 1.0);
    return M;
}
#line 533
v2f vert( in appdata_t v ) {
    v2f o;
    highp vec4 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0));
    #line 537
    highp vec4 planet_pos = (-(_MainRotation * origin));
    highp vec3 hashVect = abs(hash( normalize(floor(planet_pos.xyz))));
    highp vec4 localOrigin;
    localOrigin.xyz = (((2.0 * hashVect) - 1.0) * _MaxTrans);
    #line 541
    localOrigin.w = 1.0;
    highp float localScale = ((hashVect.x * (_MaxScale - 1.0)) + 1.0);
    origin = (_Object2World * localOrigin);
    highp vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 545
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 549
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    o.baseLight = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    planet_pos = (-(_MainRotation * origin));
    highp vec3 detail_pos = (_DetailRotation * planet_pos).xyz;
    #line 553
    o.color = GetSphereMapNoLOD( _MainTex, planet_pos.xyz);
    o.color *= GetShereDetailMapNoLOD( _DetailTex, detail_pos, _DetailScale);
    o.color.w *= GetDistanceFade( distance( origin, vec4( _WorldSpaceCameraPos, 0.0)), _DistFade, _DistFadeVert);
    highp mat4 M = rand_rotation( (vec3( fract(_Rotation), 0.0, 0.0) + hashVect), localScale, localOrigin.xyz);
    #line 557
    highp mat4 mvMatrix = ((unity_MatrixV * _Object2World) * M);
    highp vec3 viewDir = normalize(xll_matrixindex_mf4x4_i (mvMatrix, 2).xyz);
    o.viewDir = abs(viewDir);
    highp vec4 mvCenter = (glstate_matrix_modelview0 * localOrigin);
    #line 561
    o.pos = (glstate_matrix_projection * (mvCenter + vec4( (v.vertex.xyz * localScale), v.vertex.w)));
    o.camPos = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * localOrigin).xyz));
    highp vec2 texcoodOffsetxy = ((2.0 * v.texcoord) - 1.0);
    highp vec4 texcoordOffset = vec4( texcoodOffsetxy.x, texcoodOffsetxy.y, 0.0, v.vertex.w);
    #line 565
    highp vec4 ZYv = texcoordOffset.zyxw;
    highp vec4 XZv = texcoordOffset.xzyw;
    highp vec4 XYv = texcoordOffset.xyzw;
    ZYv.z *= sign((-viewDir.x));
    #line 569
    XZv.x *= sign((-viewDir.y));
    XYv.x *= sign(viewDir.z);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.z)) * viewDir.z);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.x)) * viewDir.x);
    #line 573
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.x)) * viewDir.x);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.y)) * viewDir.y);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.z)) * viewDir.z);
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.y)) * viewDir.y);
    #line 577
    highp vec2 ZY = ((mvMatrix * ZYv).xy - mvCenter.xy);
    highp vec2 XZ = ((mvMatrix * XZv).xy - mvCenter.xy);
    highp vec2 XY = ((mvMatrix * XYv).xy - mvCenter.xy);
    o.texcoordZY = (vec2( 0.5, 0.5) + (0.6 * ZY));
    #line 581
    o.texcoordXZ = (vec2( 0.5, 0.5) + (0.6 * XZ));
    o.texcoordXY = (vec2( 0.5, 0.5) + (0.6 * XY));
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    #line 585
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out lowp vec4 xlv_COLOR;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.texcoord = vec2(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_COLOR = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD1 = vec2(xl_retval.texcoordZY);
    xlv_TEXCOORD2 = vec2(xl_retval.texcoordXZ);
    xlv_TEXCOORD3 = vec2(xl_retval.texcoordXY);
    xlv_TEXCOORD4 = vec3(xl_retval.camPos);
    xlv_TEXCOORD5 = vec3(xl_retval.baseLight);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 401
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 502
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 493
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform samplerCube _ShadowMapTexture;
#line 399
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 411
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 424
#line 432
#line 446
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 479
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 483
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 487
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 491
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 517
#line 533
#line 590
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 590
lowp vec4 frag( in v2f IN ) {
    mediump float xval = IN.viewDir.x;
    mediump vec4 xtex = texture( _LeftTex, IN.texcoordZY);
    #line 594
    mediump float yval = IN.viewDir.y;
    mediump vec4 ytex = texture( _TopTex, IN.texcoordXZ);
    mediump float zval = IN.viewDir.z;
    mediump vec4 ztex = texture( _FrontTex, IN.texcoordXY);
    #line 598
    mediump vec4 tex = mix( mix( xtex, ytex, vec4( yval)), ztex, vec4( zval));
    mediump vec4 prev = (((0.94 * _Color) * IN.color) * tex);
    mediump vec4 color;
    color.xyz = (prev.xyz * IN.baseLight);
    #line 602
    color.w = prev.w;
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 606
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in lowp vec4 xlv_COLOR;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_COLOR);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD0);
    xlt_IN.texcoordZY = vec2(xlv_TEXCOORD1);
    xlt_IN.texcoordXZ = vec2(xlv_TEXCOORD2);
    xlt_IN.texcoordXY = vec2(xlv_TEXCOORD3);
    xlt_IN.camPos = vec3(xlv_TEXCOORD4);
    xlt_IN.baseLight = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform vec3 _MaxTrans;
uniform float _MaxScale;
uniform float _Rotation;
uniform float _MinLight;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 unity_MatrixV;


uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 XYv_1;
  vec4 XZv_2;
  vec4 ZYv_3;
  vec3 detail_pos_4;
  float localScale_5;
  vec4 localOrigin_6;
  vec4 tmpvar_7;
  vec3 tmpvar_8;
  vec4 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_6.xyz = (((2.0 * tmpvar_10) - 1.0) * _MaxTrans);
  localOrigin_6.w = 1.0;
  localScale_5 = ((tmpvar_10.x * (_MaxScale - 1.0)) + 1.0);
  vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * localOrigin_6);
  vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = gl_Normal;
  tmpvar_8 = clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (normalize((_Object2World * tmpvar_12).xyz), normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0);
  vec4 tmpvar_13;
  tmpvar_13 = -((_MainRotation * tmpvar_11));
  detail_pos_4 = (_DetailRotation * tmpvar_13).xyz;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13.xyz);
  vec2 uv_15;
  float r_16;
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_14.x)))) {
    float y_over_x_17;
    y_over_x_17 = (tmpvar_14.x / tmpvar_14.z);
    float s_18;
    float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_14.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(tmpvar_14.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_16));
  uv_15.y = (0.31831 * (1.5708 - (sign(tmpvar_14.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_14.y))) * (1.5708 + (abs(tmpvar_14.y) * (-0.214602 + (abs(tmpvar_14.y) * (0.0865667 + (abs(tmpvar_14.y) * -0.0310296)))))))))));
  vec4 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(normalize(detail_pos_4));
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  uv_20.xy = (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale);
  uv_20.zw = vec2(0.0, 0.0);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DLod (_MainTex, uv_15, 0.0) * texture2DLod (_DetailTex, uv_20.xy, 0.0));
  tmpvar_7.xyz = tmpvar_24.xyz;
  vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = _WorldSpaceCameraPos;
  float tmpvar_26;
  vec4 p_27;
  p_27 = (tmpvar_11 - tmpvar_25);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  tmpvar_7.w = (tmpvar_24.w * (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0)));
  vec3 tmpvar_28;
  tmpvar_28.yz = vec2(0.0, 0.0);
  tmpvar_28.x = fract(_Rotation);
  vec3 x_29;
  x_29 = (tmpvar_28 + tmpvar_10);
  vec3 trans_30;
  trans_30 = localOrigin_6.xyz;
  float tmpvar_31;
  tmpvar_31 = (x_29.x * 6.28319);
  float tmpvar_32;
  tmpvar_32 = (x_29.y * 6.28319);
  float tmpvar_33;
  tmpvar_33 = (x_29.z * 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (sin(tmpvar_32) * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (cos(tmpvar_32) * tmpvar_34);
  float tmpvar_37;
  tmpvar_37 = sqrt((2.0 - tmpvar_33));
  float tmpvar_38;
  tmpvar_38 = sin(tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = cos(tmpvar_31);
  float tmpvar_40;
  tmpvar_40 = ((tmpvar_35 * tmpvar_39) - (tmpvar_36 * tmpvar_38));
  float tmpvar_41;
  tmpvar_41 = ((tmpvar_35 * tmpvar_38) + (tmpvar_36 * tmpvar_39));
  mat4 tmpvar_42;
  tmpvar_42[0].x = (localScale_5 * ((tmpvar_35 * tmpvar_40) - tmpvar_39));
  tmpvar_42[0].y = ((tmpvar_35 * tmpvar_41) - tmpvar_38);
  tmpvar_42[0].z = (tmpvar_35 * tmpvar_37);
  tmpvar_42[0].w = 0.0;
  tmpvar_42[1].x = ((tmpvar_36 * tmpvar_40) + tmpvar_38);
  tmpvar_42[1].y = (localScale_5 * ((tmpvar_36 * tmpvar_41) - tmpvar_39));
  tmpvar_42[1].z = (tmpvar_36 * tmpvar_37);
  tmpvar_42[1].w = 0.0;
  tmpvar_42[2].x = (tmpvar_37 * tmpvar_40);
  tmpvar_42[2].y = (tmpvar_37 * tmpvar_41);
  tmpvar_42[2].z = (localScale_5 * (1.0 - tmpvar_33));
  tmpvar_42[2].w = 0.0;
  tmpvar_42[3].x = trans_30.x;
  tmpvar_42[3].y = trans_30.y;
  tmpvar_42[3].z = trans_30.z;
  tmpvar_42[3].w = 1.0;
  mat4 tmpvar_43;
  tmpvar_43 = (((unity_MatrixV * _Object2World) * tmpvar_42));
  vec4 v_44;
  v_44.x = tmpvar_43[0].z;
  v_44.y = tmpvar_43[1].z;
  v_44.z = tmpvar_43[2].z;
  v_44.w = tmpvar_43[3].z;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(v_44.xyz);
  vec4 tmpvar_46;
  tmpvar_46 = (gl_ModelViewMatrix * localOrigin_6);
  vec4 tmpvar_47;
  tmpvar_47.xyz = (gl_Vertex.xyz * localScale_5);
  tmpvar_47.w = gl_Vertex.w;
  vec4 tmpvar_48;
  tmpvar_48 = (gl_ProjectionMatrix * (tmpvar_46 + tmpvar_47));
  vec2 tmpvar_49;
  tmpvar_49 = ((2.0 * gl_MultiTexCoord0.xy) - 1.0);
  vec4 tmpvar_50;
  tmpvar_50.z = 0.0;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = tmpvar_49.y;
  tmpvar_50.w = gl_Vertex.w;
  ZYv_3.xyw = tmpvar_50.zyw;
  XZv_2.yzw = tmpvar_50.zyw;
  XYv_1.yzw = tmpvar_50.yzw;
  ZYv_3.z = (tmpvar_49.x * sign(-(tmpvar_45.x)));
  XZv_2.x = (tmpvar_49.x * sign(-(tmpvar_45.y)));
  XYv_1.x = (tmpvar_49.x * sign(tmpvar_45.z));
  ZYv_3.x = ((sign(-(tmpvar_45.x)) * sign(ZYv_3.z)) * tmpvar_45.z);
  XZv_2.y = ((sign(-(tmpvar_45.y)) * sign(XZv_2.x)) * tmpvar_45.x);
  XYv_1.z = ((sign(-(tmpvar_45.z)) * sign(XYv_1.x)) * tmpvar_45.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_45.x)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_45.y)) * sign(tmpvar_49.y)) * tmpvar_45.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_45.z)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  vec4 o_51;
  vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_48 * 0.5);
  vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_48.zw;
  tmpvar_9.xyw = o_51.xyw;
  tmpvar_9.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_48;
  xlv_COLOR = tmpvar_7;
  xlv_TEXCOORD0 = abs(tmpvar_45);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * ZYv_3).xy - tmpvar_46.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XZv_2).xy - tmpvar_46.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XYv_1).xy - tmpvar_46.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_6).xyz));
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform vec4 _ZBufferParams;
void main ()
{
  vec4 color_1;
  vec4 tmpvar_2;
  tmpvar_2 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (texture2D (_LeftTex, xlv_TEXCOORD1), texture2D (_TopTex, xlv_TEXCOORD2), xlv_TEXCOORD0.yyyy), texture2D (_FrontTex, xlv_TEXCOORD3), xlv_TEXCOORD0.zzzz));
  color_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD5);
  color_1.w = (tmpvar_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 28 [glstate_lightmodel_ambient]
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_projection]
Vector 29 [_WorldSpaceCameraPos]
Vector 30 [_ProjectionParams]
Vector 31 [_ScreenParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 33 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [unity_MatrixV]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
Vector 34 [_LightColor0]
Float 35 [_DetailScale]
Float 36 [_DistFade]
Float 37 [_DistFadeVert]
Float 38 [_MinLight]
Float 39 [_Rotation]
Float 40 [_MaxScale]
Vector 41 [_MaxTrans]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"vs_3_0
; 355 ALU, 4 TEX
dcl_position o0
dcl_color0 o1
dcl_texcoord0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord7 o9
dcl_texcoord8 o10
def c42, 0.15915491, 0.50000000, 6.28318501, -3.14159298
def c43, 123.54530334, 2.00000000, -1.00000000, 1.00000000
def c44, 0.00000000, -0.01872930, 0.07426100, -0.21211439
def c45, 1.57072902, 3.14159298, 0.31830987, -0.12123910
def c46, -0.01348047, 0.05747731, 0.19563590, -0.33299461
def c47, 0.99999559, 1.57079601, 0.15915494, 0.50000000
def c48, 6.28318548, 0.00000000, 1.00000000, -0.01000214
def c49, 0.60000002, 0.50000000, 4.03944778, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_2d s0
dcl_2d s1
mad r10.xy, v2, c43.y, c43.z
mov r1.w, c11
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
dp4 r0.z, r1, c18
dp4 r0.x, r1, c16
dp4 r0.y, r1, c17
frc r1.xyz, -r0
add r0.xyz, -r0, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mad r0.x, r1, c42, c42.y
frc r0.x, r0
mad r1.x, r0, c42.z, c42.w
sincos r0.xy, r1.x
mad r0.x, r1.z, c42, c42.y
mov r1.x, r0.y
frc r0.y, r0.x
mad r0.x, r1.y, c42, c42.y
mad r1.y, r0, c42.z, c42.w
frc r1.x, r0
sincos r0.xy, r1.y
mad r0.x, r1, c42.z, c42.w
sincos r1.xy, r0.x
mov r1.z, r0.y
mul r0.xyz, r1, c43.x
frc r0.xyz, r0
abs r6.xyz, r0
mad r0.xyz, r6, c43.y, c43.z
mul r0.xyz, r0, c41
mov r0.w, c43
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
dp4 r2.w, r0, c11
dp4 r1.z, r2, c18
dp4 r1.x, r2, c16
dp4 r1.y, r2, c17
dp4 r1.w, r2, c19
add r7.xyz, -r2, c29
dp3 r2.x, r7, r7
rsq r8.w, r2.x
dp4 r3.z, -r1, c22
dp4 r3.x, -r1, c20
dp4 r3.y, -r1, c21
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mul r3.xyz, r1.w, r3
abs r3.xyz, r3
sge r1.w, r3.z, r3.x
add r4.xyz, r3.zxyw, -r3
mad r4.xyz, r1.w, r4, r3
sge r2.w, r4.x, r3.y
add r4.xyz, r4, -r3.yxzw
mad r3.xyz, r2.w, r4, r3.yxzw
dp3 r1.w, -r1, -r1
rsq r1.w, r1.w
mul r1.xyz, r1.w, -r1
abs r2.w, r1.x
abs r1.w, r1.z
mul r3.zw, r3.xyzy, c42.y
max r3.y, r1.w, r2.w
abs r4.y, r3.x
min r3.x, r1.w, r2.w
slt r1.w, r1, r2
rcp r3.y, r3.y
mul r4.x, r3, r3.y
rcp r3.x, r4.y
mul r3.xy, r3.zwzw, r3.x
mul r4.y, r4.x, r4.x
mad r3.z, r4.y, c46.x, c46.y
mad r3.z, r3, r4.y, c45.w
mad r2.w, r3.z, r4.y, c46.z
mad r2.w, r2, r4.y, c46
mad r2.w, r2, r4.y, c47.x
mul r2.w, r2, r4.x
max r1.w, -r1, r1
slt r1.w, c44.x, r1
add r3.z, -r1.w, c43.w
mul r3.z, r2.w, r3
add r2.w, -r2, c47.y
mad r1.w, r1, r2, r3.z
slt r1.z, r1, c44.x
max r1.z, -r1, r1
slt r1.z, c44.x, r1
slt r1.x, r1, c44
max r1.x, -r1, r1
add r2.w, -r1, c45.y
add r3.z, -r1, c43.w
mul r1.w, r1, r3.z
slt r1.x, c44, r1
mad r1.z, r1, r2.w, r1.w
add r3.z, -r1.x, c43.w
mul r1.w, r1.z, r3.z
mad r1.x, r1, -r1.z, r1.w
abs r1.z, r1.y
add r2.w, -r1.z, c43
mad r1.w, r1.z, c44.y, c44.z
mad r1.w, r1, r1.z, c44
rsq r2.w, r2.w
rcp r2.w, r2.w
mad r1.z, r1.w, r1, c45.x
mul r1.z, r1, r2.w
slt r1.y, r1, c44.x
mul r1.w, r1.y, r1.z
mad r1.z, -r1.w, c43.y, r1
mad r1.y, r1, c45, r1.z
mul r3.xy, r3, c35.x
mov r3.z, c44.x
texldl r3, r3.xyzz, s1
mad r1.x, r1, c47.z, c47.w
mov r4.yz, c44.x
frc r4.x, c39
add r4.xyz, r6, r4
mul r1.w, r4.x, c48.x
mad r1.z, r1.w, c42.x, c42.y
frc r2.w, r1.z
mad r4.x, r2.w, c42.z, c42.w
sincos r5.xy, r4.x
mul r2.w, r4.y, c48.x
mad r2.w, r2, c42.x, c42.y
frc r4.x, r2.w
mul r2.w, r4.z, c43.y
mad r5.z, r4.x, c42, c42.w
sincos r4.xy, r5.z
rsq r5.w, r2.w
rcp r4.z, r5.w
mul r4.w, r4.x, r4.z
mul r5.z, r4.y, r4
mul r4.x, r4.w, r5
mad r4.y, r5.z, r5, r4.x
mov r5.w, c14.x
mul r1.y, r1, c45.z
mov r1.z, c44.x
texldl r1, r1.xyzz, s0
mul r3, r1, r3
add r1.z, -r2.w, c43.y
mov o1.xyz, r3
mov r1.y, c40.x
add r1.y, c43.z, r1
mad r1.x, r5.z, r4.y, -r5.y
mad r7.w, r6.x, r1.y, c43
mad r1.w, r4, r4.y, -r5.x
mul r1.y, r7.w, r1.w
rsq r1.z, r1.z
rcp r1.w, r1.z
mul r1.z, r1.w, r4.y
mov r4.x, c14.y
mul r4.xyz, c9, r4.x
mad r4.xyz, c8, r5.w, r4
mov r5.w, c14.z
mad r4.xyz, c10, r5.w, r4
mov r5.w, c14
mad r6.xyz, c11, r5.w, r4
mul r5.w, r4, r5.y
mad r2.z, r5, r5.x, -r5.w
mad r2.y, r5.z, r2.z, -r5.x
mul r2.x, r7.w, r2.y
mad r2.y, r4.w, r2.z, r5
mul r5.x, r5.z, r1.w
add r2.w, -r2, c43
mul r5.y, r1.w, r4.w
mul r2.z, r1.w, r2
mul r4.xyz, r6.y, r1
rcp r5.w, r8.w
mul r5.z, r7.w, r2.w
mad r4.xyz, r6.x, r2, r4
mad r4.xyz, r6.z, r5, r4
mul r1.w, -r5, c37.x
add_sat r2.w, r1, c43
mul_sat r1.w, r5, c36.x
mul r1.w, r1, r2
dp3 r4.w, r4, r4
rsq r2.w, r4.w
mul r8.xyz, r2.w, r4
mul o1.w, r3, r1
slt r2.w, -r8.x, r8.x
slt r1.w, r8.x, -r8.x
sub r1.w, r1, r2
slt r3.x, r10.y, -r10.y
slt r2.w, -r10.y, r10.y
sub r10.z, r2.w, r3.x
mul r2.w, r10.x, r1
mul r3.z, r1.w, r10
slt r3.y, r2.w, -r2.w
slt r3.x, -r2.w, r2.w
sub r3.x, r3, r3.y
mov r9.z, r2.w
mov r2.w, r0.x
mul r1.w, r3.x, r1
mul r3.y, r8, r3.z
mad r9.x, r8.z, r1.w, r3.y
mov r1.w, c12.y
mul r3, c9, r1.w
mov r1.w, c12.x
mad r3, c8, r1.w, r3
mov r1.w, c12.z
mad r3, c10, r1.w, r3
mov r1.w, c12
mad r6, c11, r1.w, r3
mov r1.w, r0.y
mul r4, r1, r6.y
mov r3.x, c13.y
mov r5.w, c13.x
mul r3, c9, r3.x
mad r3, c8, r5.w, r3
mov r5.w, c13.z
mad r3, c10, r5.w, r3
mov r5.w, c13
mad r3, c11, r5.w, r3
mul r1, r3.y, r1
mov r5.w, r0.z
mad r1, r3.x, r2, r1
mad r1, r3.z, r5, r1
mad r1, r3.w, c48.yyyz, r1
mad r4, r2, r6.x, r4
mad r4, r5, r6.z, r4
mad r2, r6.w, c48.yyyz, r4
dp4 r5.y, r0, c1
dp4 r5.x, r0, c0
mov r4.w, v0
mov r4.y, r10
mov r9.yw, r4
dp4 r3.y, r1, r9
dp4 r3.x, r9, r2
slt r3.w, -r8.y, r8.y
slt r3.z, r8.y, -r8.y
sub r4.x, r3.z, r3.w
add r3.zw, -r5.xyxy, r3.xyxy
mul r3.x, r10, r4
mad o3.xy, r3.zwzw, c49.x, c49.y
slt r3.z, r3.x, -r3.x
slt r3.y, -r3.x, r3.x
sub r3.y, r3, r3.z
mul r3.z, r10, r4.x
mul r3.y, r3, r4.x
mul r4.x, r8.z, r3.z
mad r3.y, r8.x, r3, r4.x
mov r3.zw, r4.xyyw
dp4 r5.w, r1, r3
dp4 r5.z, r2, r3
add r3.xy, -r5, r5.zwzw
slt r3.w, -r8.z, r8.z
slt r3.z, r8, -r8
sub r4.x, r3.w, r3.z
sub r3.z, r3, r3.w
mul r4.x, r10, r4
mul r5.z, r10, r3
dp4 r5.w, r0, c3
slt r4.z, r4.x, -r4.x
slt r3.w, -r4.x, r4.x
sub r3.w, r3, r4.z
mul r4.z, r8.y, r5
dp4 r5.z, r0, c2
mul r3.z, r3, r3.w
mad r4.z, r8.x, r3, r4
dp4 r1.y, r1, r4
dp4 r1.x, r2, r4
mad o4.xy, r3, c49.x, c49.y
add r3.xy, -r5, r1
mov r0.w, v0
mul r0.xyz, v0, r7.w
add r0, r5, r0
dp4 r2.w, r0, c7
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
mov r1.w, r2
dp4 r1.z, r0, c6
mul r2.xyz, r1.xyww, c42.y
mov o0, r1
mul r2.y, r2, c30.x
mov r1.xyz, v1
mov r1.w, c44.x
dp4 r0.z, r1, c10
dp4 r0.y, r1, c9
dp4 r0.x, r1, c8
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c32, c32
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c32
dp3_sat r0.x, r0, r1
add r0.x, r0, c48.w
mul r0.y, r0.x, c34.w
mul_sat r0.w, r0.y, c49.z
mov r0.x, c38
add r0.xyz, c34, r0.x
mad_sat o7.xyz, r0, r0.w, c28
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o8.z, r0, c26
dp4 o8.y, r0, c25
dp4 o8.x, r0, c24
dp4 r0.w, v0, c2
mad o5.xy, r3, c49.x, c49.y
mad o10.xy, r2.z, c31.zwzw, r2
abs o2.xyz, r8
mov o10.w, r2
mul o6.xyz, r8.w, r7
add o9.xyz, r0, -c33
mov o10.z, -r0.w
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
ConstBuffer "$Globals" 320 // 316 used size, 16 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
Vector 208 [_LightColor0] 4
Float 240 [_DetailScale]
Float 272 [_DistFade]
Float 276 [_DistFadeVert]
Float 284 [_MinLight]
Float 292 [_Rotation]
Float 296 [_MaxScale]
Vector 304 [_MaxTrans] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityPerFrame" 208 // 144 used size, 4 vars
Matrix 0 [glstate_matrix_projection] 4
Vector 64 [glstate_lightmodel_ambient] 4
Matrix 80 [unity_MatrixV] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityPerFrame" 4
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 254 instructions, 12 temp regs, 0 temp arrays:
// ALU 217 float, 8 int, 6 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmfgejmepbhogipblgelkknoeoijakeahabaaaaaaeaceaaaaadaaaaaa
cmaaaaaanmaaaaaabaacaaaaejfdeheokiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaijaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaipaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaajgaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaajoaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaafaepfdejfeejepeoaaedepem
epfcaaeoepfcenebemaafeebeoehefeofeaafeeffiedepepfceeaaklepfdeheo
cmabaaaaalaaaaaaaiaaaaaabaabaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaabmabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaccabaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaccabaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaaccabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
amadaaaaccabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaaccabaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaccabaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaccabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaccabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaiaaaaccabaaaa
aiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
edepemepfcaafeeffiedepepfceeaaklfdeieefcciccaaaaeaaaabaaikaiaaaa
fjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaa
fjaaaaaeegiocaaaaeaaaaaaajaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
pccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaa
gfaaaaadmccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaad
hccabaaaaiaaaaaagfaaaaadpccabaaaajaaaaaagiaaaaacamaaaaaadiaaaaaj
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaafgifcaaaadaaaaaaapaaaaaa
dcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaadaaaaaa
apaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
adaaaaaakgikcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaaeaaaaaapgipcaaaadaaaaaaapaaaaaaegacbaaa
aaaaaaaaebaaaaaghcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaenaaaaaghcaabaaaaaaaaaaaaanaaaaaegacbaaaaaaaaaaa
diaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaadcbhphecdcbhphec
dcbhphecaaaaaaaabkaaaaafhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaai
icaabaaaaaaaaaaackiacaaaaaaaaaaabcaaaaaaabeaaaaaaaaaialpdcaaaaaj
icaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaf
icaabaaaabaaaaaadkbabaaaaaaaaaaadcaaaaaphcaabaaaacaaaaaaegacbaaa
aaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaadiaaaaaipcaabaaaadaaaaaafgafbaaaacaaaaaa
egiocaaaadaaaaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaadaaaaaa
aeaaaaaaagaabaaaacaaaaaaegaobaaaadaaaaaadcaaaaakpcaabaaaadaaaaaa
egiocaaaadaaaaaaagaaaaaakgakbaaaacaaaaaaegaobaaaadaaaaaaaaaaaaai
pcaabaaaadaaaaaaegaobaaaadaaaaaaegiocaaaadaaaaaaahaaaaaaaaaaaaah
pcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaadaaaaaadiaaaaaipcaabaaa
aeaaaaaafgafbaaaabaaaaaaegiocaaaaeaaaaaaabaaaaaadcaaaaakpcaabaaa
aeaaaaaaegiocaaaaeaaaaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaeaaaaaa
dcaaaaakpcaabaaaaeaaaaaaegiocaaaaeaaaaaaacaaaaaakgakbaaaabaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaeaaaaaaadaaaaaa
pgapbaaaabaaaaaaegaobaaaaeaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaaeaaaaaafgafbaaaacaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaamaaaaaaagaabaaa
acaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaa
aoaaaaaakgakbaaaacaaaaaaegaobaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaaaaeaaaaaaegiocaaaadaaaaaaapaaaaaadiaaaaaipcaabaaaafaaaaaa
fgafbaaaaeaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaafaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaeaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaafaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaeaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aeaaaaaaegaobaaaafaaaaaadiaaaaajhcaabaaaagaaaaaafgafbaiaebaaaaaa
afaaaaaabgigcaaaaaaaaaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaa
aaaaaaaaafaaaaaaagaabaiaebaaaaaaafaaaaaaegacbaaaagaaaaaadcaaaaal
hcaabaaaagaaaaaabgigcaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaafaaaaaa
egacbaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaaiaaaaaa
pgapbaiaebaaaaaaafaaaaaaegacbaaaagaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaagaaaaaaegacbaaaagaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahhcaabaaaagaaaaaakgakbaaaabaaaaaaegacbaaaagaaaaaa
dgaaaaagecaabaaaahaaaaaackaabaiambaaaaaaagaaaaaabnaaaaajecaabaaa
abaaaaaackaabaiaibaaaaaaagaaaaaabkaabaiaibaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaa
aiaaaaaafgaibaiambaaaaaaagaaaaaakgabbaiaibaaaaaaagaaaaaadiaaaaah
lcaabaaaahaaaaaakgakbaaaabaaaaaajganbaaaaiaaaaaadcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaaiaaaaaabkaabaiaibaaaaaaagaaaaaa
bnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaagaaaaaa
abaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
hcaabaaaaiaaaaaabgagbaiaibaaaaaaagaaaaaaegacbaaaahaaaaaadgaaaaag
fcaabaaaahaaaaaafgaebaiambaaaaaaagaaaaaaaaaaaaahhcaabaaaahaaaaaa
cgalbaaaahaaaaaaegacbaaaaiaaaaaadcaaaaakhcaabaaaagaaaaaakgakbaaa
abaaaaaaegacbaaaahaaaaaaegacbaiaibaaaaaaagaaaaaadiaaaaakmcaabaaa
adaaaaaakgagbaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
aoaaaaahmcaabaaaadaaaaaakgaobaaaadaaaaaaagaabaaaagaaaaaadiaaaaai
mcaabaaaadaaaaaakgaobaaaadaaaaaaagiacaaaaaaaaaaaapaaaaaaeiaaaaal
pcaabaaaagaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaajecaabaaaabaaaaaaegacbaiaebaaaaaaafaaaaaa
egacbaiaebaaaaaaafaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaaihcaabaaaafaaaaaakgakbaaaabaaaaaaigabbaiaebaaaaaaafaaaaaa
deaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaa
afaaaaaaaoaaaaakecaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpckaabaaaabaaaaaaddaaaaajicaabaaaacaaaaaabkaabaiaibaaaaaa
afaaaaaaakaabaiaibaaaaaaafaaaaaadiaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaackaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaa
ckaabaaaadaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaadaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
adaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaaadaaaaaa
ckaabaaaadaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
adaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaabaaaaah
ecaabaaaadaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadbaaaaai
mcaabaaaadaaaaaafgajbaaaafaaaaaafgajbaiaebaaaaaaafaaaaaaabaaaaah
icaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaanlapejmaaaaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaaddaaaaahicaabaaaacaaaaaa
bkaabaaaafaaaaaaakaabaaaafaaaaaadbaaaaaiicaabaaaacaaaaaadkaabaaa
acaaaaaadkaabaiaebaaaaaaacaaaaaadeaaaaahecaabaaaadaaaaaabkaabaaa
afaaaaaaakaabaaaafaaaaaabnaaaaaiecaabaaaadaaaaaackaabaaaadaaaaaa
ckaabaiaebaaaaaaadaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
ckaabaaaadaaaaaadhaaaaakecaabaaaabaaaaaadkaabaaaacaaaaaackaabaia
ebaaaaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaafaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakecaabaaaabaaaaaa
ckaabaiaibaaaaaaafaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaibaaaaaa
afaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaacaaaaaackaabaiambaaaaaa
afaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaa
diaaaaahecaabaaaadaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaaj
ecaabaaaadaaaaaackaabaaaadaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahecaabaaaadaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaa
diaaaaahccaabaaaafaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoeiaaaaal
pcaabaaaafaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
abeaaaaaaaaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaagaaaaaaegaobaaa
afaaaaaaaaaaaaajhcaabaaaagaaaaaaegacbaaaaeaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhcaabaaaaeaaaaaaegacbaiaebaaaaaaaeaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaagaaaaaa
egacbaaaagaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaai
icaabaaaacaaaaaackaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaadccaaaal
ecaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaiadpdgcaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahiccabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaafaaaaaadgaaaaafhccabaaaabaaaaaa
egacbaaaafaaaaaabkaaaaagbcaabaaaafaaaaaabkiacaaaaaaaaaaabcaaaaaa
dgaaaaaigcaabaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaafaaaaaaaaaaaaah
ecaabaaaabaaaaaackaabaaaaaaaaaaackaabaaaaaaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
aceaaaaanlapmjeanlapmjeaaaaaaaaaaaaaaaaadcaaaabamcaabaaaadaaaaaa
kgakbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaea
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaiadpenaaaaahbcaabaaaafaaaaaa
bcaabaaaagaaaaaabkaabaaaaaaaaaaaenaaaaahbcaabaaaaaaaaaaabcaabaaa
ahaaaaaaakaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaackaabaaaabaaaaaa
akaabaaaagaaaaaadiaaaaahecaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaa
afaaaaaadiaaaaahecaabaaaabaaaaaaakaabaaaahaaaaaabkaabaaaaaaaaaaa
dcaaaaajecaabaaaabaaaaaackaabaaaaaaaaaaaakaabaaaaaaaaaaackaabaaa
abaaaaaadcaaaaakicaabaaaacaaaaaabkaabaaaaaaaaaaackaabaaaabaaaaaa
akaabaiaebaaaaaaahaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaacaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaadaaaaaaanaaaaaa
egiccaaaaeaaaaaaagaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaa
afaaaaaaagiacaaaadaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaa
afaaaaaaegiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaanaaaaaaegacbaaa
afaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaa
adaaaaaaanaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaagaaaaaapgapbaaa
acaaaaaaegacbaaaafaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadcaaaaakicaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaa
ahaaaaaadkaabaiaebaaaaaaacaaaaaadcaaaaajicaabaaaaeaaaaaabkaabaaa
aaaaaaaadkaabaaaacaaaaaaakaabaaaaaaaaaaadiaaaaajocaabaaaahaaaaaa
fgifcaaaadaaaaaaamaaaaaaagijcaaaaeaaaaaaagaaaaaadcaaaaalocaabaaa
ahaaaaaaagijcaaaaeaaaaaaafaaaaaaagiacaaaadaaaaaaamaaaaaafgaobaaa
ahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaaahaaaaaakgikcaaa
adaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaa
aeaaaaaaaiaaaaaapgipcaaaadaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaaj
hcaabaaaagaaaaaajgahbaaaahaaaaaapgapbaaaaeaaaaaaegacbaaaagaaaaaa
elaaaaafecaabaaaadaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaadaaaaaa
dkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaadaaaaaadiaaaaajhcaabaaaaiaaaaaafgifcaaaadaaaaaa
aoaaaaaaegiccaaaaeaaaaaaagaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaa
aeaaaaaaafaaaaaaagiacaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaal
hcaabaaaaiaaaaaaegiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaaoaaaaaa
egacbaaaaiaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaaaiaaaaaa
pgipcaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaajhcaabaaaagaaaaaa
egacbaaaaiaaaaaafgafbaaaaaaaaaaaegacbaaaagaaaaaadgaaaaafccaabaaa
ajaaaaaackaabaaaagaaaaaadcaaaaakccaabaaaaaaaaaaackaabaaaaaaaaaaa
dkaabaaaacaaaaaaakaabaiaebaaaaaaahaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckaabaaaaaaaaaaackaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaadiaaaaah
ecaabaaaaaaaaaaackaabaaaaaaaaaaackaabaaaadaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaahhcaabaaaakaaaaaakgakbaaa
abaaaaaaegacbaaaafaaaaaadcaaaaajhcaabaaaakaaaaaajgahbaaaahaaaaaa
pgapbaaaacaaaaaaegacbaaaakaaaaaadcaaaaajhcaabaaaakaaaaaaegacbaaa
aiaaaaaapgapbaaaadaaaaaaegacbaaaakaaaaaadiaaaaahhcaabaaaalaaaaaa
agaabaaaaaaaaaaaegacbaaaafaaaaaadiaaaaahkcaabaaaacaaaaaafgafbaaa
acaaaaaaagaebaaaafaaaaaadcaaaaajdcaabaaaacaaaaaajgafbaaaahaaaaaa
agaabaaaacaaaaaangafbaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaa
aiaaaaaakgakbaaaacaaaaaaegaabaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaa
bkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajlcaabaaaaaaaaaaajganbaaa
ahaaaaaaagaabaaaaaaaaaaaegaibaaaalaaaaaadcaaaaajhcaabaaaaaaaaaaa
egacbaaaaiaaaaaakgakbaaaaaaaaaaaegadbaaaaaaaaaaadgaaaaafbcaabaaa
ajaaaaaackaabaaaaaaaaaaadgaaaaafecaabaaaajaaaaaackaabaaaakaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaajaaaaaaegacbaaaajaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaajaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaibaaaaaa
afaaaaaadiaaaaajmcaabaaaaaaaaaaafgifcaaaadaaaaaaapaaaaaaagiecaaa
aeaaaaaaagaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaafaaaaaa
agiacaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaaaaaaaaaa
agiecaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaa
dcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaa
apaaaaaakgaobaaaaaaaaaaaaaaaaaahmcaabaaaaaaaaaaakgaobaaaaaaaaaaa
agaebaaaacaaaaaadbaaaaalhcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaegacbaiaebaaaaaaafaaaaaadbaaaaalhcaabaaaahaaaaaa
egacbaiaebaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
boaaaaaihcaabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaahaaaaaa
dcaaaaapmcaabaaaadaaaaaaagbebaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaeaaaaaaaeaaceaaaaaaaaaaaaaaaaaaaaaaaaaialpaaaaialpdbaaaaah
ecaabaaaabaaaaaaabeaaaaaaaaaaaaadkaabaaaadaaaaaadbaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaaabaaaaaa
ckaabaiaebaaaaaaabaaaaaadkaabaaaacaaaaaacgaaaaaiaanaaaaahcaabaaa
ahaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaaclaaaaafhcaabaaaahaaaaaa
egacbaaaahaaaaaadiaaaaahhcaabaaaahaaaaaajgafbaaaafaaaaaaegacbaaa
ahaaaaaaclaaaaafkcaabaaaafaaaaaaagaebaaaacaaaaaadiaaaaahkcaabaaa
afaaaaaakgakbaaaadaaaaaafganbaaaafaaaaaadbaaaaakmcaabaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafganbaaaafaaaaaadbaaaaak
dcaabaaaaiaaaaaangafbaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaboaaaaaimcaabaaaagaaaaaakgaobaiaebaaaaaaagaaaaaaagaebaaa
aiaaaaaacgaaaaaiaanaaaaadcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaa
agaaaaaaclaaaaafdcaabaaaacaaaaaaegaabaaaacaaaaaadcaaaaajdcaabaaa
acaaaaaaegaabaaaacaaaaaacgakbaaaafaaaaaaegaabaaaahaaaaaadiaaaaah
kcaabaaaacaaaaaafgafbaaaacaaaaaaagaebaaaagaaaaaadiaaaaahdcaabaaa
agaaaaaapgapbaaaadaaaaaaegaabaaaagaaaaaadcaaaaajmcaabaaaagaaaaaa
agaebaaaaaaaaaaaagaabaaaacaaaaaaagaebaaaagaaaaaadcaaaaajmcaabaaa
agaaaaaaagaebaaaakaaaaaafgafbaaaafaaaaaakgaobaaaagaaaaaadcaaaaaj
dcaabaaaacaaaaaaegaabaaaaaaaaaaapgapbaaaafaaaaaangafbaaaacaaaaaa
dcaaaaajdcaabaaaacaaaaaaegaabaaaakaaaaaapgapbaaaadaaaaaaegaabaaa
acaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaa
egaabaaaacaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaa
egaabaaaacaaaaaadcaaaaapmccabaaaadaaaaaaagaebaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaaaajkjjbjdpjkjjbjdpaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpdcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaa
ogakbaaaagaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaa
egaabaaaacaaaaaadcaaaaapdccabaaaadaaaaaaegaabaaaacaaaaaaaceaaaaa
jkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaadbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaackaabaaaafaaaaaa
dbaaaaahbcaabaaaacaaaaaackaabaaaafaaaaaaabeaaaaaaaaaaaaaboaaaaai
ecaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaacaaaaaaclaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaackaabaaaadaaaaaadbaaaaahbcaabaaaacaaaaaaabeaaaaaaaaaaaaa
ckaabaaaabaaaaaadbaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaa
aaaaaaaadcaaaaajdcaabaaaaaaaaaaaegaabaaaaaaaaaaakgakbaaaabaaaaaa
egaabaaaagaaaaaaboaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaa
bkaabaaaacaaaaaacgaaaaaiaanaaaaaecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaaaacaaaaaaclaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaackaabaaaahaaaaaa
dcaaaaajdcaabaaaaaaaaaaaegaabaaaakaaaaaakgakbaaaabaaaaaaegaabaaa
aaaaaaaadcaaaaajdcaabaaaaaaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaa
egaabaaaaaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaiaebaaaaaaadaaaaaa
egaabaaaaaaaaaaadcaaaaapdccabaaaaeaaaaaaegaabaaaaaaaaaaaaceaaaaa
jkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
agaabaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaacaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaacaaaaaa
aaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaaaaaaaaa
agijcaaaaaaaaaaaanaaaaaapgipcaaaaaaaaaaabbaaaaaadccaaaakhccabaaa
agaaaaaajgahbaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaaeaaaaaaaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaalaaaaaakgakbaaaaaaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaamaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaajhccabaaaaiaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaadiaaaaakhcaabaaaaaaaaaaa
egadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaadgaaaaaf
iccabaaaajaaaaaadkaabaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
aaaaaaaamgaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 402
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 503
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 494
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform samplerCube _ShadowMapTexture;
#line 399
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 412
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 425
#line 433
#line 447
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 480
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 484
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 488
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 492
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 518
#line 534
#line 591
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 380
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 382
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 355
mediump vec4 GetShereDetailMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 357
    highp vec3 sphereVectNorm = normalize(sphereVect);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 361
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    highp vec4 uv;
    uv.xy = (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale);
    #line 365
    uv.zw = vec2( 0.0, 0.0);
    return xll_tex2Dlod( texSampler, uv);
}
#line 330
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 332
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 336
    return uv;
}
#line 338
mediump vec4 GetSphereMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 340
    highp vec4 uv;
    highp vec3 sphereVectNorm = normalize(sphereVect);
    uv.xy = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    uv.zw = vec2( 0.0, 0.0);
    #line 344
    mediump vec4 tex = xll_tex2Dlod( texSampler, uv);
    return tex;
}
#line 317
highp vec3 hash( in highp vec3 val ) {
    #line 319
    return fract((sin(val) * 123.545));
}
#line 518
highp mat4 rand_rotation( in highp vec3 x, in highp float scale, in highp vec3 trans ) {
    highp float theta = (x.x * 6.28319);
    highp float phi = (x.y * 6.28319);
    #line 522
    highp float z = (x.z * 2.0);
    highp float r = sqrt(z);
    highp float Vx = (sin(phi) * r);
    highp float Vy = (cos(phi) * r);
    #line 526
    highp float Vz = sqrt((2.0 - z));
    highp float st = sin(theta);
    highp float ct = cos(theta);
    highp float Sx = ((Vx * ct) - (Vy * st));
    #line 530
    highp float Sy = ((Vx * st) + (Vy * ct));
    highp mat4 M = mat4( (scale * ((Vx * Sx) - ct)), ((Vx * Sy) - st), (Vx * Vz), 0.0, ((Vy * Sx) + st), (scale * ((Vy * Sy) - ct)), (Vy * Vz), 0.0, (Vz * Sx), (Vz * Sy), (scale * (1.0 - z)), 0.0, trans.x, trans.y, trans.z, 1.0);
    return M;
}
#line 534
v2f vert( in appdata_t v ) {
    v2f o;
    highp vec4 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0));
    #line 538
    highp vec4 planet_pos = (-(_MainRotation * origin));
    highp vec3 hashVect = abs(hash( normalize(floor(planet_pos.xyz))));
    highp vec4 localOrigin;
    localOrigin.xyz = (((2.0 * hashVect) - 1.0) * _MaxTrans);
    #line 542
    localOrigin.w = 1.0;
    highp float localScale = ((hashVect.x * (_MaxScale - 1.0)) + 1.0);
    origin = (_Object2World * localOrigin);
    highp vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 546
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 550
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    o.baseLight = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    planet_pos = (-(_MainRotation * origin));
    highp vec3 detail_pos = (_DetailRotation * planet_pos).xyz;
    #line 554
    o.color = GetSphereMapNoLOD( _MainTex, planet_pos.xyz);
    o.color *= GetShereDetailMapNoLOD( _DetailTex, detail_pos, _DetailScale);
    o.color.w *= GetDistanceFade( distance( origin, vec4( _WorldSpaceCameraPos, 0.0)), _DistFade, _DistFadeVert);
    highp mat4 M = rand_rotation( (vec3( fract(_Rotation), 0.0, 0.0) + hashVect), localScale, localOrigin.xyz);
    #line 558
    highp mat4 mvMatrix = ((unity_MatrixV * _Object2World) * M);
    highp vec3 viewDir = normalize(xll_matrixindex_mf4x4_i (mvMatrix, 2).xyz);
    o.viewDir = abs(viewDir);
    highp vec4 mvCenter = (glstate_matrix_modelview0 * localOrigin);
    #line 562
    o.pos = (glstate_matrix_projection * (mvCenter + vec4( (v.vertex.xyz * localScale), v.vertex.w)));
    o.camPos = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * localOrigin).xyz));
    highp vec2 texcoodOffsetxy = ((2.0 * v.texcoord) - 1.0);
    highp vec4 texcoordOffset = vec4( texcoodOffsetxy.x, texcoodOffsetxy.y, 0.0, v.vertex.w);
    #line 566
    highp vec4 ZYv = texcoordOffset.zyxw;
    highp vec4 XZv = texcoordOffset.xzyw;
    highp vec4 XYv = texcoordOffset.xyzw;
    ZYv.z *= sign((-viewDir.x));
    #line 570
    XZv.x *= sign((-viewDir.y));
    XYv.x *= sign(viewDir.z);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.z)) * viewDir.z);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.x)) * viewDir.x);
    #line 574
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.x)) * viewDir.x);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.y)) * viewDir.y);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.z)) * viewDir.z);
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.y)) * viewDir.y);
    #line 578
    highp vec2 ZY = ((mvMatrix * ZYv).xy - mvCenter.xy);
    highp vec2 XZ = ((mvMatrix * XZv).xy - mvCenter.xy);
    highp vec2 XY = ((mvMatrix * XYv).xy - mvCenter.xy);
    o.texcoordZY = (vec2( 0.5, 0.5) + (0.6 * ZY));
    #line 582
    o.texcoordXZ = (vec2( 0.5, 0.5) + (0.6 * XZ));
    o.texcoordXY = (vec2( 0.5, 0.5) + (0.6 * XY));
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    #line 586
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out lowp vec4 xlv_COLOR;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.texcoord = vec2(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_COLOR = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD1 = vec2(xl_retval.texcoordZY);
    xlv_TEXCOORD2 = vec2(xl_retval.texcoordXZ);
    xlv_TEXCOORD3 = vec2(xl_retval.texcoordXY);
    xlv_TEXCOORD4 = vec3(xl_retval.camPos);
    xlv_TEXCOORD5 = vec3(xl_retval.baseLight);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 402
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 503
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 494
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform samplerCube _ShadowMapTexture;
#line 399
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 412
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 425
#line 433
#line 447
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 480
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 484
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 488
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 492
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 518
#line 534
#line 591
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 591
lowp vec4 frag( in v2f IN ) {
    mediump float xval = IN.viewDir.x;
    mediump vec4 xtex = texture( _LeftTex, IN.texcoordZY);
    #line 595
    mediump float yval = IN.viewDir.y;
    mediump vec4 ytex = texture( _TopTex, IN.texcoordXZ);
    mediump float zval = IN.viewDir.z;
    mediump vec4 ztex = texture( _FrontTex, IN.texcoordXY);
    #line 599
    mediump vec4 tex = mix( mix( xtex, ytex, vec4( yval)), ztex, vec4( zval));
    mediump vec4 prev = (((0.94 * _Color) * IN.color) * tex);
    mediump vec4 color;
    color.xyz = (prev.xyz * IN.baseLight);
    #line 603
    color.w = prev.w;
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 607
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in lowp vec4 xlv_COLOR;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_COLOR);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD0);
    xlt_IN.texcoordZY = vec2(xlv_TEXCOORD1);
    xlt_IN.texcoordXZ = vec2(xlv_TEXCOORD2);
    xlt_IN.texcoordXY = vec2(xlv_TEXCOORD3);
    xlt_IN.camPos = vec3(xlv_TEXCOORD4);
    xlt_IN.baseLight = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform vec3 _MaxTrans;
uniform float _MaxScale;
uniform float _Rotation;
uniform float _MinLight;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 unity_MatrixV;


uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 XYv_1;
  vec4 XZv_2;
  vec4 ZYv_3;
  vec3 detail_pos_4;
  float localScale_5;
  vec4 localOrigin_6;
  vec4 tmpvar_7;
  vec3 tmpvar_8;
  vec4 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_6.xyz = (((2.0 * tmpvar_10) - 1.0) * _MaxTrans);
  localOrigin_6.w = 1.0;
  localScale_5 = ((tmpvar_10.x * (_MaxScale - 1.0)) + 1.0);
  vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * localOrigin_6);
  vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = gl_Normal;
  tmpvar_8 = clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (normalize((_Object2World * tmpvar_12).xyz), normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0);
  vec4 tmpvar_13;
  tmpvar_13 = -((_MainRotation * tmpvar_11));
  detail_pos_4 = (_DetailRotation * tmpvar_13).xyz;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13.xyz);
  vec2 uv_15;
  float r_16;
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_14.x)))) {
    float y_over_x_17;
    y_over_x_17 = (tmpvar_14.x / tmpvar_14.z);
    float s_18;
    float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_14.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(tmpvar_14.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_16));
  uv_15.y = (0.31831 * (1.5708 - (sign(tmpvar_14.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_14.y))) * (1.5708 + (abs(tmpvar_14.y) * (-0.214602 + (abs(tmpvar_14.y) * (0.0865667 + (abs(tmpvar_14.y) * -0.0310296)))))))))));
  vec4 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(normalize(detail_pos_4));
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  uv_20.xy = (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale);
  uv_20.zw = vec2(0.0, 0.0);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DLod (_MainTex, uv_15, 0.0) * texture2DLod (_DetailTex, uv_20.xy, 0.0));
  tmpvar_7.xyz = tmpvar_24.xyz;
  vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = _WorldSpaceCameraPos;
  float tmpvar_26;
  vec4 p_27;
  p_27 = (tmpvar_11 - tmpvar_25);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  tmpvar_7.w = (tmpvar_24.w * (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0)));
  vec3 tmpvar_28;
  tmpvar_28.yz = vec2(0.0, 0.0);
  tmpvar_28.x = fract(_Rotation);
  vec3 x_29;
  x_29 = (tmpvar_28 + tmpvar_10);
  vec3 trans_30;
  trans_30 = localOrigin_6.xyz;
  float tmpvar_31;
  tmpvar_31 = (x_29.x * 6.28319);
  float tmpvar_32;
  tmpvar_32 = (x_29.y * 6.28319);
  float tmpvar_33;
  tmpvar_33 = (x_29.z * 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (sin(tmpvar_32) * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (cos(tmpvar_32) * tmpvar_34);
  float tmpvar_37;
  tmpvar_37 = sqrt((2.0 - tmpvar_33));
  float tmpvar_38;
  tmpvar_38 = sin(tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = cos(tmpvar_31);
  float tmpvar_40;
  tmpvar_40 = ((tmpvar_35 * tmpvar_39) - (tmpvar_36 * tmpvar_38));
  float tmpvar_41;
  tmpvar_41 = ((tmpvar_35 * tmpvar_38) + (tmpvar_36 * tmpvar_39));
  mat4 tmpvar_42;
  tmpvar_42[0].x = (localScale_5 * ((tmpvar_35 * tmpvar_40) - tmpvar_39));
  tmpvar_42[0].y = ((tmpvar_35 * tmpvar_41) - tmpvar_38);
  tmpvar_42[0].z = (tmpvar_35 * tmpvar_37);
  tmpvar_42[0].w = 0.0;
  tmpvar_42[1].x = ((tmpvar_36 * tmpvar_40) + tmpvar_38);
  tmpvar_42[1].y = (localScale_5 * ((tmpvar_36 * tmpvar_41) - tmpvar_39));
  tmpvar_42[1].z = (tmpvar_36 * tmpvar_37);
  tmpvar_42[1].w = 0.0;
  tmpvar_42[2].x = (tmpvar_37 * tmpvar_40);
  tmpvar_42[2].y = (tmpvar_37 * tmpvar_41);
  tmpvar_42[2].z = (localScale_5 * (1.0 - tmpvar_33));
  tmpvar_42[2].w = 0.0;
  tmpvar_42[3].x = trans_30.x;
  tmpvar_42[3].y = trans_30.y;
  tmpvar_42[3].z = trans_30.z;
  tmpvar_42[3].w = 1.0;
  mat4 tmpvar_43;
  tmpvar_43 = (((unity_MatrixV * _Object2World) * tmpvar_42));
  vec4 v_44;
  v_44.x = tmpvar_43[0].z;
  v_44.y = tmpvar_43[1].z;
  v_44.z = tmpvar_43[2].z;
  v_44.w = tmpvar_43[3].z;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(v_44.xyz);
  vec4 tmpvar_46;
  tmpvar_46 = (gl_ModelViewMatrix * localOrigin_6);
  vec4 tmpvar_47;
  tmpvar_47.xyz = (gl_Vertex.xyz * localScale_5);
  tmpvar_47.w = gl_Vertex.w;
  vec4 tmpvar_48;
  tmpvar_48 = (gl_ProjectionMatrix * (tmpvar_46 + tmpvar_47));
  vec2 tmpvar_49;
  tmpvar_49 = ((2.0 * gl_MultiTexCoord0.xy) - 1.0);
  vec4 tmpvar_50;
  tmpvar_50.z = 0.0;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = tmpvar_49.y;
  tmpvar_50.w = gl_Vertex.w;
  ZYv_3.xyw = tmpvar_50.zyw;
  XZv_2.yzw = tmpvar_50.zyw;
  XYv_1.yzw = tmpvar_50.yzw;
  ZYv_3.z = (tmpvar_49.x * sign(-(tmpvar_45.x)));
  XZv_2.x = (tmpvar_49.x * sign(-(tmpvar_45.y)));
  XYv_1.x = (tmpvar_49.x * sign(tmpvar_45.z));
  ZYv_3.x = ((sign(-(tmpvar_45.x)) * sign(ZYv_3.z)) * tmpvar_45.z);
  XZv_2.y = ((sign(-(tmpvar_45.y)) * sign(XZv_2.x)) * tmpvar_45.x);
  XYv_1.z = ((sign(-(tmpvar_45.z)) * sign(XYv_1.x)) * tmpvar_45.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_45.x)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_45.y)) * sign(tmpvar_49.y)) * tmpvar_45.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_45.z)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  vec4 o_51;
  vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_48 * 0.5);
  vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_48.zw;
  tmpvar_9.xyw = o_51.xyw;
  tmpvar_9.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_48;
  xlv_COLOR = tmpvar_7;
  xlv_TEXCOORD0 = abs(tmpvar_45);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * ZYv_3).xy - tmpvar_46.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XZv_2).xy - tmpvar_46.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XYv_1).xy - tmpvar_46.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_6).xyz));
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform vec4 _ZBufferParams;
void main ()
{
  vec4 color_1;
  vec4 tmpvar_2;
  tmpvar_2 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (texture2D (_LeftTex, xlv_TEXCOORD1), texture2D (_TopTex, xlv_TEXCOORD2), xlv_TEXCOORD0.yyyy), texture2D (_FrontTex, xlv_TEXCOORD3), xlv_TEXCOORD0.zzzz));
  color_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD5);
  color_1.w = (tmpvar_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 32 [glstate_lightmodel_ambient]
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_projection]
Vector 33 [_WorldSpaceCameraPos]
Vector 34 [_ProjectionParams]
Vector 35 [_ScreenParams]
Vector 36 [_WorldSpaceLightPos0]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [unity_MatrixV]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Matrix 28 [_LightMatrix0]
Vector 37 [_LightColor0]
Float 38 [_DetailScale]
Float 39 [_DistFade]
Float 40 [_DistFadeVert]
Float 41 [_MinLight]
Float 42 [_Rotation]
Float 43 [_MaxScale]
Vector 44 [_MaxTrans]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"vs_3_0
; 359 ALU, 4 TEX
dcl_position o0
dcl_color0 o1
dcl_texcoord0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord7 o9
dcl_texcoord8 o10
def c45, 0.15915491, 0.50000000, 6.28318501, -3.14159298
def c46, 123.54530334, 2.00000000, -1.00000000, 1.00000000
def c47, 0.00000000, -0.01872930, 0.07426100, -0.21211439
def c48, 1.57072902, 3.14159298, 0.31830987, -0.12123910
def c49, -0.01348047, 0.05747731, 0.19563590, -0.33299461
def c50, 0.99999559, 1.57079601, 0.15915494, 0.50000000
def c51, 6.28318548, 0.00000000, 1.00000000, -0.01000214
def c52, 0.60000002, 0.50000000, 4.03944778, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_2d s0
dcl_2d s1
mad r10.xy, v2, c46.y, c46.z
mov r1.w, c15
mov r1.z, c14.w
mov r1.x, c12.w
mov r1.y, c13.w
dp4 r0.z, r1, c22
dp4 r0.x, r1, c20
dp4 r0.y, r1, c21
frc r1.xyz, -r0
add r0.xyz, -r0, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mad r0.x, r1, c45, c45.y
frc r0.x, r0
mad r1.x, r0, c45.z, c45.w
sincos r0.xy, r1.x
mad r0.x, r1.z, c45, c45.y
mov r1.x, r0.y
frc r0.y, r0.x
mad r0.x, r1.y, c45, c45.y
mad r1.y, r0, c45.z, c45.w
frc r1.x, r0
sincos r0.xy, r1.y
mad r0.x, r1, c45.z, c45.w
sincos r1.xy, r0.x
mov r1.z, r0.y
mul r0.xyz, r1, c46.x
frc r0.xyz, r0
abs r6.xyz, r0
mad r0.xyz, r6, c46.y, c46.z
mul r0.xyz, r0, c44
mov r0.w, c46
dp4 r2.z, r0, c14
dp4 r2.x, r0, c12
dp4 r2.y, r0, c13
dp4 r2.w, r0, c15
dp4 r1.z, r2, c22
dp4 r1.x, r2, c20
dp4 r1.y, r2, c21
dp4 r1.w, r2, c23
add r7.xyz, -r2, c33
dp3 r2.x, r7, r7
rsq r8.w, r2.x
dp4 r3.z, -r1, c26
dp4 r3.x, -r1, c24
dp4 r3.y, -r1, c25
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mul r3.xyz, r1.w, r3
abs r3.xyz, r3
sge r1.w, r3.z, r3.x
add r4.xyz, r3.zxyw, -r3
mad r4.xyz, r1.w, r4, r3
sge r2.w, r4.x, r3.y
add r4.xyz, r4, -r3.yxzw
mad r3.xyz, r2.w, r4, r3.yxzw
dp3 r1.w, -r1, -r1
rsq r1.w, r1.w
mul r1.xyz, r1.w, -r1
abs r2.w, r1.x
abs r1.w, r1.z
mul r3.zw, r3.xyzy, c45.y
max r3.y, r1.w, r2.w
abs r4.y, r3.x
min r3.x, r1.w, r2.w
slt r1.w, r1, r2
rcp r3.y, r3.y
mul r4.x, r3, r3.y
rcp r3.x, r4.y
mul r3.xy, r3.zwzw, r3.x
mul r4.y, r4.x, r4.x
mad r3.z, r4.y, c49.x, c49.y
mad r3.z, r3, r4.y, c48.w
mad r2.w, r3.z, r4.y, c49.z
mad r2.w, r2, r4.y, c49
mad r2.w, r2, r4.y, c50.x
mul r2.w, r2, r4.x
max r1.w, -r1, r1
slt r1.w, c47.x, r1
add r3.z, -r1.w, c46.w
mul r3.z, r2.w, r3
add r2.w, -r2, c50.y
mad r1.w, r1, r2, r3.z
slt r1.z, r1, c47.x
max r1.z, -r1, r1
slt r1.z, c47.x, r1
slt r1.x, r1, c47
max r1.x, -r1, r1
add r2.w, -r1, c48.y
add r3.z, -r1, c46.w
mul r1.w, r1, r3.z
slt r1.x, c47, r1
mad r1.z, r1, r2.w, r1.w
add r3.z, -r1.x, c46.w
mul r1.w, r1.z, r3.z
mad r1.x, r1, -r1.z, r1.w
abs r1.z, r1.y
add r2.w, -r1.z, c46
mad r1.w, r1.z, c47.y, c47.z
mad r1.w, r1, r1.z, c47
rsq r2.w, r2.w
rcp r2.w, r2.w
mad r1.z, r1.w, r1, c48.x
mul r1.z, r1, r2.w
slt r1.y, r1, c47.x
mul r1.w, r1.y, r1.z
mad r1.z, -r1.w, c46.y, r1
mad r1.y, r1, c48, r1.z
mul r3.xy, r3, c38.x
mov r3.z, c47.x
texldl r3, r3.xyzz, s1
mad r1.x, r1, c50.z, c50.w
mov r4.yz, c47.x
frc r4.x, c42
add r4.xyz, r6, r4
mul r1.w, r4.x, c51.x
mad r1.z, r1.w, c45.x, c45.y
frc r2.w, r1.z
mad r4.x, r2.w, c45.z, c45.w
sincos r5.xy, r4.x
mul r2.w, r4.y, c51.x
mad r2.w, r2, c45.x, c45.y
frc r4.x, r2.w
mul r2.w, r4.z, c46.y
mad r5.z, r4.x, c45, c45.w
sincos r4.xy, r5.z
rsq r5.w, r2.w
rcp r4.z, r5.w
mul r4.w, r4.x, r4.z
mul r5.z, r4.y, r4
mul r4.x, r4.w, r5
mad r4.y, r5.z, r5, r4.x
mov r5.w, c18.x
mul r1.y, r1, c48.z
mov r1.z, c47.x
texldl r1, r1.xyzz, s0
mul r3, r1, r3
add r1.z, -r2.w, c46.y
mov o1.xyz, r3
mov r1.y, c43.x
add r1.y, c46.z, r1
mad r1.x, r5.z, r4.y, -r5.y
mad r7.w, r6.x, r1.y, c46
mad r1.w, r4, r4.y, -r5.x
mul r1.y, r7.w, r1.w
rsq r1.z, r1.z
rcp r1.w, r1.z
mul r1.z, r1.w, r4.y
mov r4.x, c18.y
mul r4.xyz, c13, r4.x
mad r4.xyz, c12, r5.w, r4
mov r5.w, c18.z
mad r4.xyz, c14, r5.w, r4
mov r5.w, c18
mad r6.xyz, c15, r5.w, r4
mul r5.w, r4, r5.y
mad r2.z, r5, r5.x, -r5.w
mad r2.y, r5.z, r2.z, -r5.x
mul r2.x, r7.w, r2.y
mad r2.y, r4.w, r2.z, r5
mul r5.x, r5.z, r1.w
add r2.w, -r2, c46
mul r5.y, r1.w, r4.w
mul r2.z, r1.w, r2
mul r4.xyz, r6.y, r1
rcp r5.w, r8.w
mul r5.z, r7.w, r2.w
mad r4.xyz, r6.x, r2, r4
mad r4.xyz, r6.z, r5, r4
mul r1.w, -r5, c40.x
add_sat r2.w, r1, c46
mul_sat r1.w, r5, c39.x
mul r1.w, r1, r2
dp3 r4.w, r4, r4
rsq r2.w, r4.w
mul r8.xyz, r2.w, r4
mul o1.w, r3, r1
slt r2.w, -r8.x, r8.x
slt r1.w, r8.x, -r8.x
sub r1.w, r1, r2
slt r3.x, r10.y, -r10.y
slt r2.w, -r10.y, r10.y
sub r10.z, r2.w, r3.x
mul r2.w, r10.x, r1
mul r3.z, r1.w, r10
slt r3.y, r2.w, -r2.w
slt r3.x, -r2.w, r2.w
sub r3.x, r3, r3.y
mov r9.z, r2.w
mov r2.w, r0.x
mul r1.w, r3.x, r1
mul r3.y, r8, r3.z
mad r9.x, r8.z, r1.w, r3.y
mov r1.w, c16.y
mul r3, c13, r1.w
mov r1.w, c16.x
mad r3, c12, r1.w, r3
mov r1.w, c16.z
mad r3, c14, r1.w, r3
mov r1.w, c16
mad r6, c15, r1.w, r3
mov r1.w, r0.y
mul r4, r1, r6.y
mov r3.x, c17.y
mov r5.w, c17.x
mul r3, c13, r3.x
mad r3, c12, r5.w, r3
mov r5.w, c17.z
mad r3, c14, r5.w, r3
mov r5.w, c17
mad r3, c15, r5.w, r3
mul r1, r3.y, r1
mov r5.w, r0.z
mad r1, r3.x, r2, r1
mad r1, r3.z, r5, r1
mad r1, r3.w, c51.yyyz, r1
mad r4, r2, r6.x, r4
mad r4, r5, r6.z, r4
mad r2, r6.w, c51.yyyz, r4
dp4 r5.y, r0, c1
dp4 r5.x, r0, c0
mov r4.w, v0
mov r4.y, r10
mov r9.yw, r4
dp4 r3.y, r1, r9
dp4 r3.x, r9, r2
slt r3.w, -r8.y, r8.y
slt r3.z, r8.y, -r8.y
sub r4.x, r3.z, r3.w
add r3.zw, -r5.xyxy, r3.xyxy
mul r3.x, r10, r4
mad o3.xy, r3.zwzw, c52.x, c52.y
slt r3.z, r3.x, -r3.x
slt r3.y, -r3.x, r3.x
sub r3.y, r3, r3.z
mul r3.z, r10, r4.x
mul r3.y, r3, r4.x
mul r4.x, r8.z, r3.z
mad r3.y, r8.x, r3, r4.x
mov r3.zw, r4.xyyw
dp4 r5.w, r1, r3
dp4 r5.z, r2, r3
add r3.xy, -r5, r5.zwzw
slt r3.w, -r8.z, r8.z
slt r3.z, r8, -r8
sub r4.x, r3.w, r3.z
sub r3.z, r3, r3.w
mul r4.x, r10, r4
mul r5.z, r10, r3
dp4 r5.w, r0, c3
slt r4.z, r4.x, -r4.x
slt r3.w, -r4.x, r4.x
sub r3.w, r3, r4.z
mul r4.z, r8.y, r5
dp4 r5.z, r0, c2
mul r3.z, r3, r3.w
mad r4.z, r8.x, r3, r4
dp4 r1.y, r1, r4
dp4 r1.x, r2, r4
mad o4.xy, r3, c52.x, c52.y
add r3.xy, -r5, r1
mov r0.w, v0
mul r0.xyz, v0, r7.w
add r0, r5, r0
dp4 r2.w, r0, c7
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
mov r1.w, r2
dp4 r1.z, r0, c6
mul r2.xyz, r1.xyww, c45.y
mov o0, r1
mul r2.y, r2, c34.x
mov r1.xyz, v1
mov r1.w, c47.x
dp4 r0.z, r1, c14
dp4 r0.y, r1, c13
dp4 r0.x, r1, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c36, c36
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c36
dp3_sat r0.x, r0, r1
add r0.x, r0, c51.w
mul r0.y, r0.x, c37.w
dp4 r1.x, v0, c2
mul_sat r0.w, r0.y, c52.z
mov r0.x, c41
add r0.xyz, c37, r0.x
mad_sat o7.xyz, r0, r0.w, c32
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.x, v0, c12
dp4 r0.y, v0, c13
mad o5.xy, r3, c52.x, c52.y
mad o10.xy, r2.z, c35.zwzw, r2
abs o2.xyz, r8
mov o10.w, r2
mul o6.xyz, r8.w, r7
dp4 o8.w, r0, c31
dp4 o8.z, r0, c30
dp4 o8.y, r0, c29
dp4 o8.x, r0, c28
dp4 o9.w, r0, c11
dp4 o9.z, r0, c10
dp4 o9.y, r0, c9
dp4 o9.x, r0, c8
mov o10.z, -r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
ConstBuffer "$Globals" 384 // 380 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 208 [_LightMatrix0] 4
Vector 272 [_LightColor0] 4
Float 304 [_DetailScale]
Float 336 [_DistFade]
Float 340 [_DistFadeVert]
Float 348 [_MinLight]
Float 356 [_Rotation]
Float 360 [_MaxScale]
Vector 368 [_MaxTrans] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityPerFrame" 208 // 144 used size, 4 vars
Matrix 0 [glstate_matrix_projection] 4
Vector 64 [glstate_lightmodel_ambient] 4
Matrix 80 [unity_MatrixV] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
BindCB "UnityPerFrame" 5
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 257 instructions, 12 temp regs, 0 temp arrays:
// ALU 220 float, 8 int, 6 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddajajmflnjilaichddkmdjkabcmkdmndabaaaaaameceaaaaadaaaaaa
cmaaaaaanmaaaaaabaacaaaaejfdeheokiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaijaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaipaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaajgaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaajoaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaafaepfdejfeejepeoaaedepem
epfcaaeoepfcenebemaafeebeoehefeofeaafeeffiedepepfceeaaklepfdeheo
cmabaaaaalaaaaaaaiaaaaaabaabaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaabmabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaccabaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaccabaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaaccabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
amadaaaaccabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaaccabaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaccabaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaccabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaaccabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaccabaaaa
aiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
edepemepfcaafeeffiedepepfceeaaklfdeieefckmccaaaaeaaaabaaklaiaaaa
fjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaamaaaaaa
fjaaaaaeegiocaaaaeaaaaaabaaaaaaafjaaaaaeegiocaaaafaaaaaaajaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafpaaaaadpcbabaaa
aaaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaaeaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaadmccabaaaadaaaaaagfaaaaad
dccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagfaaaaadpccabaaa
ajaaaaaagiaaaaacamaaaaaadiaaaaajhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
acaaaaaafgifcaaaaeaaaaaaapaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaabaaaaaaagiacaaaaeaaaaaaapaaaaaaegacbaaaaaaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgikcaaaaeaaaaaaapaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgipcaaaaeaaaaaaapaaaaaaegacbaaaaaaaaaaaebaaaaaghcaabaaaaaaaaaaa
egacbaiaebaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaenaaaaaghcaabaaa
aaaaaaaaaanaaaaaegacbaaaaaaaaaaadiaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaaceaaaaadcbhphecdcbhphecdcbhphecaaaaaaaabkaaaaafhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaackiacaaaaaaaaaaa
bgaaaaaaabeaaaaaaaaaialpdcaaaaajicaabaaaaaaaaaaaakaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegbcbaaaaaaaaaaadgaaaaaficaabaaaabaaaaaadkbabaaaaaaaaaaa
dcaaaaaphcaabaaaacaaaaaaegacbaaaaaaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaadiaaaaai
pcaabaaaadaaaaaafgafbaaaacaaaaaaegiocaaaaeaaaaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaaegiocaaaaeaaaaaaaeaaaaaaagaabaaaacaaaaaaegaobaaa
adaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaaeaaaaaaagaaaaaakgakbaaa
acaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaa
egiocaaaaeaaaaaaahaaaaaaaaaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadiaaaaaipcaabaaaaeaaaaaafgafbaaaabaaaaaaegiocaaa
afaaaaaaabaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaafaaaaaaaaaaaaaa
agaabaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaa
afaaaaaaacaaaaaakgakbaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaafaaaaaaadaaaaaapgapbaaaabaaaaaaegaobaaaaeaaaaaa
dgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaeaaaaaa
egiocaaaaeaaaaaaamaaaaaaagaabaaaacaaaaaaegaobaaaaeaaaaaadcaaaaak
pcaabaaaaeaaaaaaegiocaaaaeaaaaaaaoaaaaaakgakbaaaacaaaaaaegaobaaa
aeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaaaaeaaaaaaegiocaaaaeaaaaaa
apaaaaaadiaaaaaipcaabaaaafaaaaaafgafbaaaaeaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaa
aeaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaa
adaaaaaakgakbaaaaeaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaafaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgapbaaaaeaaaaaaegaobaaaafaaaaaadiaaaaaj
hcaabaaaagaaaaaafgafbaiaebaaaaaaafaaaaaabgigcaaaaaaaaaaaagaaaaaa
dcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
afaaaaaaegacbaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaafaaaaaaegacbaaaagaaaaaadcaaaaalhcaabaaa
agaaaaaabgigcaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaafaaaaaaegacbaaa
agaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaagaaaaaaegacbaaaagaaaaaa
eeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahhcaabaaaagaaaaaa
kgakbaaaabaaaaaaegacbaaaagaaaaaadgaaaaagecaabaaaahaaaaaackaabaia
mbaaaaaaagaaaaaabnaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaagaaaaaa
bkaabaiaibaaaaaaagaaaaaaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaajpcaabaaaaiaaaaaafgaibaiambaaaaaaagaaaaaa
kgabbaiaibaaaaaaagaaaaaadiaaaaahlcaabaaaahaaaaaakgakbaaaabaaaaaa
jganbaaaaiaaaaaadcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
aiaaaaaabkaabaiaibaaaaaaagaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaagaaaaaaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaihcaabaaaaiaaaaaabgagbaiaibaaaaaa
agaaaaaaegacbaaaahaaaaaadgaaaaagfcaabaaaahaaaaaafgaebaiambaaaaaa
agaaaaaaaaaaaaahhcaabaaaahaaaaaacgalbaaaahaaaaaaegacbaaaaiaaaaaa
dcaaaaakhcaabaaaagaaaaaakgakbaaaabaaaaaaegacbaaaahaaaaaaegacbaia
ibaaaaaaagaaaaaadiaaaaakmcaabaaaadaaaaaakgagbaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaahmcaabaaaadaaaaaakgaobaaa
adaaaaaaagaabaaaagaaaaaadiaaaaaimcaabaaaadaaaaaakgaobaaaadaaaaaa
agiacaaaaaaaaaaabdaaaaaaeiaaaaalpcaabaaaagaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaajecaabaaa
abaaaaaaegacbaiaebaaaaaaafaaaaaaegacbaiaebaaaaaaafaaaaaaeeaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaihcaabaaaafaaaaaakgakbaaa
abaaaaaaigabbaiaebaaaaaaafaaaaaadeaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaaoaaaaakecaabaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpckaabaaaabaaaaaaddaaaaaj
icaabaaaacaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaah
icaabaaaacaaaaaackaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajecaabaaa
adaaaaaadkaabaaaacaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ecaabaaaadaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaaochgdido
dcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaa
aebnkjlodcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaa
abeaaaaadiphhpdpdiaaaaahecaabaaaadaaaaaackaabaaaabaaaaaadkaabaaa
acaaaaaadcaaaaajecaabaaaadaaaaaackaabaaaadaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajicaabaaaadaaaaaabkaabaiaibaaaaaaafaaaaaa
akaabaiaibaaaaaaafaaaaaaabaaaaahecaabaaaadaaaaaadkaabaaaadaaaaaa
ckaabaaaadaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaadbaaaaaimcaabaaaadaaaaaafgajbaaaafaaaaaa
fgajbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaacaaaaaackaabaaaadaaaaaa
abeaaaaanlapejmaaaaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
acaaaaaaddaaaaahicaabaaaacaaaaaabkaabaaaafaaaaaaakaabaaaafaaaaaa
dbaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaiaebaaaaaaacaaaaaa
deaaaaahecaabaaaadaaaaaabkaabaaaafaaaaaaakaabaaaafaaaaaabnaaaaai
ecaabaaaadaaaaaackaabaaaadaaaaaackaabaiaebaaaaaaadaaaaaaabaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadhaaaaakecaabaaa
abaaaaaadkaabaaaacaaaaaackaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaafaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakecaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaiaibaaaaaaafaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaakeanmjdpaaaaaaai
icaabaaaacaaaaaackaabaiambaaaaaaafaaaaaaabeaaaaaaaaaiadpelaaaaaf
icaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaahecaabaaaadaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaaadaaaaaackaabaaaadaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahecaabaaaadaaaaaadkaabaaa
adaaaaaackaabaaaadaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaahccaabaaaafaaaaaackaabaaa
abaaaaaaabeaaaaaidpjkcdoeiaaaaalpcaabaaaafaaaaaaegaabaaaafaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadiaaaaahpcaabaaa
afaaaaaaegaobaaaagaaaaaaegaobaaaafaaaaaaaaaaaaajhcaabaaaagaaaaaa
egacbaaaaeaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaaaaaaaaajhcaabaaa
aeaaaaaaegacbaiaebaaaaaaaeaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaagaaaaaaegacbaaaagaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaaiicaabaaaacaaaaaackaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaadccaaaalecaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaabfaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpdgcaaaaficaabaaa
acaaaaaadkaabaaaacaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaacaaaaaadiaaaaahiccabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
afaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaafaaaaaabkaaaaagbcaabaaa
afaaaaaabkiacaaaaaaaaaaabgaaaaaadgaaaaaigcaabaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaafaaaaaaaaaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaa
ckaabaaaaaaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaak
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaanlapmjeanlapmjeaaaaaaaaa
aaaaaaaadcaaaabamcaabaaaadaaaaaakgakbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaea
aaaaiadpenaaaaahbcaabaaaafaaaaaabcaabaaaagaaaaaabkaabaaaaaaaaaaa
enaaaaahbcaabaaaaaaaaaaabcaabaaaahaaaaaaakaabaaaaaaaaaaadiaaaaah
ccaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaaagaaaaaadiaaaaahecaabaaa
aaaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaadiaaaaahecaabaaaabaaaaaa
akaabaaaahaaaaaabkaabaaaaaaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
aaaaaaaaakaabaaaaaaaaaaackaabaaaabaaaaaadcaaaaakicaabaaaacaaaaaa
bkaabaaaaaaaaaaackaabaaaabaaaaaaakaabaiaebaaaaaaahaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaajhcaabaaa
afaaaaaafgifcaaaaeaaaaaaanaaaaaaegiccaaaafaaaaaaagaaaaaadcaaaaal
hcaabaaaafaaaaaaegiccaaaafaaaaaaafaaaaaaagiacaaaaeaaaaaaanaaaaaa
egacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaafaaaaaaahaaaaaa
kgikcaaaaeaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaa
egiccaaaafaaaaaaaiaaaaaapgipcaaaaeaaaaaaanaaaaaaegacbaaaafaaaaaa
diaaaaahhcaabaaaagaaaaaapgapbaaaacaaaaaaegacbaaaafaaaaaadiaaaaah
icaabaaaacaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakicaabaaa
acaaaaaackaabaaaaaaaaaaaakaabaaaahaaaaaadkaabaiaebaaaaaaacaaaaaa
dcaaaaajicaabaaaaeaaaaaabkaabaaaaaaaaaaadkaabaaaacaaaaaaakaabaaa
aaaaaaaadiaaaaajocaabaaaahaaaaaafgifcaaaaeaaaaaaamaaaaaaagijcaaa
afaaaaaaagaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaaafaaaaaaafaaaaaa
agiacaaaaeaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaalocaabaaaahaaaaaa
agijcaaaafaaaaaaahaaaaaakgikcaaaaeaaaaaaamaaaaaafgaobaaaahaaaaaa
dcaaaaalocaabaaaahaaaaaaagijcaaaafaaaaaaaiaaaaaapgipcaaaaeaaaaaa
amaaaaaafgaobaaaahaaaaaadcaaaaajhcaabaaaagaaaaaajgahbaaaahaaaaaa
pgapbaaaaeaaaaaaegacbaaaagaaaaaaelaaaaafecaabaaaadaaaaaackaabaaa
adaaaaaadiaaaaahicaabaaaadaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaa
diaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaadaaaaaadiaaaaaj
hcaabaaaaiaaaaaafgifcaaaaeaaaaaaaoaaaaaaegiccaaaafaaaaaaagaaaaaa
dcaaaaalhcaabaaaaiaaaaaaegiccaaaafaaaaaaafaaaaaaagiacaaaaeaaaaaa
aoaaaaaaegacbaaaaiaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaafaaaaaa
ahaaaaaakgikcaaaaeaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaalhcaabaaa
aiaaaaaaegiccaaaafaaaaaaaiaaaaaapgipcaaaaeaaaaaaaoaaaaaaegacbaaa
aiaaaaaadcaaaaajhcaabaaaagaaaaaaegacbaaaaiaaaaaafgafbaaaaaaaaaaa
egacbaaaagaaaaaadgaaaaafccaabaaaajaaaaaackaabaaaagaaaaaadcaaaaak
ccaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaa
ahaaaaaadcaaaaakbcaabaaaaaaaaaaackaabaaaaaaaaaaackaabaaaabaaaaaa
akaabaiaebaaaaaaaaaaaaaadiaaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaa
ckaabaaaadaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaackaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaa
diaaaaahhcaabaaaakaaaaaakgakbaaaabaaaaaaegacbaaaafaaaaaadcaaaaaj
hcaabaaaakaaaaaajgahbaaaahaaaaaapgapbaaaacaaaaaaegacbaaaakaaaaaa
dcaaaaajhcaabaaaakaaaaaaegacbaaaaiaaaaaapgapbaaaadaaaaaaegacbaaa
akaaaaaadiaaaaahhcaabaaaalaaaaaaagaabaaaaaaaaaaaegacbaaaafaaaaaa
diaaaaahkcaabaaaacaaaaaafgafbaaaacaaaaaaagaebaaaafaaaaaadcaaaaaj
dcaabaaaacaaaaaajgafbaaaahaaaaaaagaabaaaacaaaaaangafbaaaacaaaaaa
dcaaaaajdcaabaaaacaaaaaaegaabaaaaiaaaaaakgakbaaaacaaaaaaegaabaaa
acaaaaaadiaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajlcaabaaaaaaaaaaajganbaaaahaaaaaaagaabaaaaaaaaaaaegaibaaa
alaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaiaaaaaakgakbaaaaaaaaaaa
egadbaaaaaaaaaaadgaaaaafbcaabaaaajaaaaaackaabaaaaaaaaaaadgaaaaaf
ecaabaaaajaaaaaackaabaaaakaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
ajaaaaaaegacbaaaajaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhcaabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaajaaaaaadgaaaaag
hccabaaaacaaaaaaegacbaiaibaaaaaaafaaaaaadiaaaaajmcaabaaaaaaaaaaa
fgifcaaaaeaaaaaaapaaaaaaagiecaaaafaaaaaaagaaaaaadcaaaaalmcaabaaa
aaaaaaaaagiecaaaafaaaaaaafaaaaaaagiacaaaaeaaaaaaapaaaaaakgaobaaa
aaaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaaafaaaaaaahaaaaaakgikcaaa
aeaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaa
afaaaaaaaiaaaaaapgipcaaaaeaaaaaaapaaaaaakgaobaaaaaaaaaaaaaaaaaah
mcaabaaaaaaaaaaakgaobaaaaaaaaaaaagaebaaaacaaaaaadbaaaaalhcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaegacbaiaebaaaaaa
afaaaaaadbaaaaalhcaabaaaahaaaaaaegacbaiaebaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaboaaaaaihcaabaaaacaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaahaaaaaadcaaaaapmcaabaaaadaaaaaaagbebaaa
aeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaceaaaaaaaaaaaaa
aaaaaaaaaaaaialpaaaaialpdbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaa
dkaabaaaadaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaa
aaaaaaaaboaaaaaiecaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadkaabaaa
acaaaaaacgaaaaaiaanaaaaahcaabaaaahaaaaaakgakbaaaabaaaaaaegacbaaa
acaaaaaaclaaaaafhcaabaaaahaaaaaaegacbaaaahaaaaaadiaaaaahhcaabaaa
ahaaaaaajgafbaaaafaaaaaaegacbaaaahaaaaaaclaaaaafkcaabaaaafaaaaaa
agaebaaaacaaaaaadiaaaaahkcaabaaaafaaaaaakgakbaaaadaaaaaafganbaaa
afaaaaaadbaaaaakmcaabaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaafganbaaaafaaaaaadbaaaaakdcaabaaaaiaaaaaangafbaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaboaaaaaimcaabaaaagaaaaaa
kgaobaiaebaaaaaaagaaaaaaagaebaaaaiaaaaaacgaaaaaiaanaaaaadcaabaaa
acaaaaaaegaabaaaacaaaaaaogakbaaaagaaaaaaclaaaaafdcaabaaaacaaaaaa
egaabaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaaacaaaaaacgakbaaa
afaaaaaaegaabaaaahaaaaaadiaaaaahkcaabaaaacaaaaaafgafbaaaacaaaaaa
agaebaaaagaaaaaadiaaaaahdcaabaaaagaaaaaapgapbaaaadaaaaaaegaabaaa
agaaaaaadcaaaaajmcaabaaaagaaaaaaagaebaaaaaaaaaaaagaabaaaacaaaaaa
agaebaaaagaaaaaadcaaaaajmcaabaaaagaaaaaaagaebaaaakaaaaaafgafbaaa
afaaaaaakgaobaaaagaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaaaaaaaaaa
pgapbaaaafaaaaaangafbaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaa
akaaaaaapgapbaaaadaaaaaaegaabaaaacaaaaaadcaaaaajdcaabaaaacaaaaaa
ogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaaacaaaaaaaaaaaaaidcaabaaa
acaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaaacaaaaaadcaaaaapmccabaaa
adaaaaaaagaebaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaajkjjbjdpjkjjbjdp
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpdcaaaaajdcaabaaaacaaaaaa
ogakbaaaaaaaaaaapgbpbaaaaaaaaaaaogakbaaaagaaaaaaaaaaaaaidcaabaaa
acaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaaacaaaaaadcaaaaapdccabaaa
adaaaaaaegaabaaaacaaaaaaaceaaaaajkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadbaaaaahecaabaaaabaaaaaa
abeaaaaaaaaaaaaackaabaaaafaaaaaadbaaaaahbcaabaaaacaaaaaackaabaaa
afaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaakaabaaaacaaaaaaclaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaackaabaaaadaaaaaadbaaaaah
bcaabaaaacaaaaaaabeaaaaaaaaaaaaackaabaaaabaaaaaadbaaaaahccaabaaa
acaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaadcaaaaajdcaabaaaaaaaaaaa
egaabaaaaaaaaaaakgakbaaaabaaaaaaegaabaaaagaaaaaaboaaaaaiecaabaaa
abaaaaaaakaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaacgaaaaaiaanaaaaa
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaaaacaaaaaaclaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaaaafaaaaaackaabaaaahaaaaaadcaaaaajdcaabaaaaaaaaaaaegaabaaa
akaaaaaakgakbaaaabaaaaaaegaabaaaaaaaaaaadcaaaaajdcaabaaaaaaaaaaa
ogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaaaaaaaaaaaaaaaaaidcaabaaa
aaaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaaaaaaaaaadcaaaaapdccabaaa
aeaaaaaaegaabaaaaaaaaaaaaceaaaaajkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaaagaabaaaaaaaaaaaegacbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaadkiacaaa
aaaaaaaabbaaaaaadicaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajocaabaaaaaaaaaaaagijcaaaaaaaaaaabbaaaaaapgipcaaa
aaaaaaaabfaaaaaadccaaaakhccabaaaagaaaaaajgahbaaaaaaaaaaaagaabaaa
aaaaaaaaegiccaaaafaaaaaaaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaaoaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaa
ahaaaaaaegiocaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaa
diaaaaaipcaabaaaacaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaakhcaabaaa
aaaaaaaaegadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaa
dgaaaaaficcabaaaajaaaaaadkaabaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaaaaaaaaahdccabaaaajaaaaaa
kgakbaaaaaaaaaaamgaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaaeaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
aeaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaaeaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaaeaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 411
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 512
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 503
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 402
uniform sampler2D _LightTextureB0;
#line 407
#line 421
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 434
#line 442
#line 456
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 489
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 493
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 497
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 501
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 527
#line 543
#line 600
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 380
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 382
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 355
mediump vec4 GetShereDetailMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 357
    highp vec3 sphereVectNorm = normalize(sphereVect);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 361
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    highp vec4 uv;
    uv.xy = (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale);
    #line 365
    uv.zw = vec2( 0.0, 0.0);
    return xll_tex2Dlod( texSampler, uv);
}
#line 330
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 332
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 336
    return uv;
}
#line 338
mediump vec4 GetSphereMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 340
    highp vec4 uv;
    highp vec3 sphereVectNorm = normalize(sphereVect);
    uv.xy = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    uv.zw = vec2( 0.0, 0.0);
    #line 344
    mediump vec4 tex = xll_tex2Dlod( texSampler, uv);
    return tex;
}
#line 317
highp vec3 hash( in highp vec3 val ) {
    #line 319
    return fract((sin(val) * 123.545));
}
#line 527
highp mat4 rand_rotation( in highp vec3 x, in highp float scale, in highp vec3 trans ) {
    highp float theta = (x.x * 6.28319);
    highp float phi = (x.y * 6.28319);
    #line 531
    highp float z = (x.z * 2.0);
    highp float r = sqrt(z);
    highp float Vx = (sin(phi) * r);
    highp float Vy = (cos(phi) * r);
    #line 535
    highp float Vz = sqrt((2.0 - z));
    highp float st = sin(theta);
    highp float ct = cos(theta);
    highp float Sx = ((Vx * ct) - (Vy * st));
    #line 539
    highp float Sy = ((Vx * st) + (Vy * ct));
    highp mat4 M = mat4( (scale * ((Vx * Sx) - ct)), ((Vx * Sy) - st), (Vx * Vz), 0.0, ((Vy * Sx) + st), (scale * ((Vy * Sy) - ct)), (Vy * Vz), 0.0, (Vz * Sx), (Vz * Sy), (scale * (1.0 - z)), 0.0, trans.x, trans.y, trans.z, 1.0);
    return M;
}
#line 543
v2f vert( in appdata_t v ) {
    v2f o;
    highp vec4 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0));
    #line 547
    highp vec4 planet_pos = (-(_MainRotation * origin));
    highp vec3 hashVect = abs(hash( normalize(floor(planet_pos.xyz))));
    highp vec4 localOrigin;
    localOrigin.xyz = (((2.0 * hashVect) - 1.0) * _MaxTrans);
    #line 551
    localOrigin.w = 1.0;
    highp float localScale = ((hashVect.x * (_MaxScale - 1.0)) + 1.0);
    origin = (_Object2World * localOrigin);
    highp vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 555
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 559
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    o.baseLight = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    planet_pos = (-(_MainRotation * origin));
    highp vec3 detail_pos = (_DetailRotation * planet_pos).xyz;
    #line 563
    o.color = GetSphereMapNoLOD( _MainTex, planet_pos.xyz);
    o.color *= GetShereDetailMapNoLOD( _DetailTex, detail_pos, _DetailScale);
    o.color.w *= GetDistanceFade( distance( origin, vec4( _WorldSpaceCameraPos, 0.0)), _DistFade, _DistFadeVert);
    highp mat4 M = rand_rotation( (vec3( fract(_Rotation), 0.0, 0.0) + hashVect), localScale, localOrigin.xyz);
    #line 567
    highp mat4 mvMatrix = ((unity_MatrixV * _Object2World) * M);
    highp vec3 viewDir = normalize(xll_matrixindex_mf4x4_i (mvMatrix, 2).xyz);
    o.viewDir = abs(viewDir);
    highp vec4 mvCenter = (glstate_matrix_modelview0 * localOrigin);
    #line 571
    o.pos = (glstate_matrix_projection * (mvCenter + vec4( (v.vertex.xyz * localScale), v.vertex.w)));
    o.camPos = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * localOrigin).xyz));
    highp vec2 texcoodOffsetxy = ((2.0 * v.texcoord) - 1.0);
    highp vec4 texcoordOffset = vec4( texcoodOffsetxy.x, texcoodOffsetxy.y, 0.0, v.vertex.w);
    #line 575
    highp vec4 ZYv = texcoordOffset.zyxw;
    highp vec4 XZv = texcoordOffset.xzyw;
    highp vec4 XYv = texcoordOffset.xyzw;
    ZYv.z *= sign((-viewDir.x));
    #line 579
    XZv.x *= sign((-viewDir.y));
    XYv.x *= sign(viewDir.z);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.z)) * viewDir.z);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.x)) * viewDir.x);
    #line 583
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.x)) * viewDir.x);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.y)) * viewDir.y);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.z)) * viewDir.z);
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.y)) * viewDir.y);
    #line 587
    highp vec2 ZY = ((mvMatrix * ZYv).xy - mvCenter.xy);
    highp vec2 XZ = ((mvMatrix * XZv).xy - mvCenter.xy);
    highp vec2 XY = ((mvMatrix * XYv).xy - mvCenter.xy);
    o.texcoordZY = (vec2( 0.5, 0.5) + (0.6 * ZY));
    #line 591
    o.texcoordXZ = (vec2( 0.5, 0.5) + (0.6 * XZ));
    o.texcoordXY = (vec2( 0.5, 0.5) + (0.6 * XY));
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    #line 595
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out lowp vec4 xlv_COLOR;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.texcoord = vec2(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_COLOR = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD1 = vec2(xl_retval.texcoordZY);
    xlv_TEXCOORD2 = vec2(xl_retval.texcoordXZ);
    xlv_TEXCOORD3 = vec2(xl_retval.texcoordXY);
    xlv_TEXCOORD4 = vec3(xl_retval.camPos);
    xlv_TEXCOORD5 = vec3(xl_retval.baseLight);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 411
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 512
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 503
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 402
uniform sampler2D _LightTextureB0;
#line 407
#line 421
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 434
#line 442
#line 456
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 489
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 493
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 497
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 501
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 527
#line 543
#line 600
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 600
lowp vec4 frag( in v2f IN ) {
    mediump float xval = IN.viewDir.x;
    mediump vec4 xtex = texture( _LeftTex, IN.texcoordZY);
    #line 604
    mediump float yval = IN.viewDir.y;
    mediump vec4 ytex = texture( _TopTex, IN.texcoordXZ);
    mediump float zval = IN.viewDir.z;
    mediump vec4 ztex = texture( _FrontTex, IN.texcoordXY);
    #line 608
    mediump vec4 tex = mix( mix( xtex, ytex, vec4( yval)), ztex, vec4( zval));
    mediump vec4 prev = (((0.94 * _Color) * IN.color) * tex);
    mediump vec4 color;
    color.xyz = (prev.xyz * IN.baseLight);
    #line 612
    color.w = prev.w;
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 616
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in lowp vec4 xlv_COLOR;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_COLOR);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD0);
    xlt_IN.texcoordZY = vec2(xlv_TEXCOORD1);
    xlt_IN.texcoordXZ = vec2(xlv_TEXCOORD2);
    xlt_IN.texcoordXY = vec2(xlv_TEXCOORD3);
    xlt_IN.camPos = vec3(xlv_TEXCOORD4);
    xlt_IN.baseLight = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform vec3 _MaxTrans;
uniform float _MaxScale;
uniform float _Rotation;
uniform float _MinLight;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 unity_MatrixV;


uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 XYv_1;
  vec4 XZv_2;
  vec4 ZYv_3;
  vec3 detail_pos_4;
  float localScale_5;
  vec4 localOrigin_6;
  vec4 tmpvar_7;
  vec3 tmpvar_8;
  vec4 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_6.xyz = (((2.0 * tmpvar_10) - 1.0) * _MaxTrans);
  localOrigin_6.w = 1.0;
  localScale_5 = ((tmpvar_10.x * (_MaxScale - 1.0)) + 1.0);
  vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * localOrigin_6);
  vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = gl_Normal;
  tmpvar_8 = clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (normalize((_Object2World * tmpvar_12).xyz), normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0);
  vec4 tmpvar_13;
  tmpvar_13 = -((_MainRotation * tmpvar_11));
  detail_pos_4 = (_DetailRotation * tmpvar_13).xyz;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13.xyz);
  vec2 uv_15;
  float r_16;
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_14.x)))) {
    float y_over_x_17;
    y_over_x_17 = (tmpvar_14.x / tmpvar_14.z);
    float s_18;
    float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_14.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(tmpvar_14.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_16));
  uv_15.y = (0.31831 * (1.5708 - (sign(tmpvar_14.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_14.y))) * (1.5708 + (abs(tmpvar_14.y) * (-0.214602 + (abs(tmpvar_14.y) * (0.0865667 + (abs(tmpvar_14.y) * -0.0310296)))))))))));
  vec4 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(normalize(detail_pos_4));
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  uv_20.xy = (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale);
  uv_20.zw = vec2(0.0, 0.0);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DLod (_MainTex, uv_15, 0.0) * texture2DLod (_DetailTex, uv_20.xy, 0.0));
  tmpvar_7.xyz = tmpvar_24.xyz;
  vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = _WorldSpaceCameraPos;
  float tmpvar_26;
  vec4 p_27;
  p_27 = (tmpvar_11 - tmpvar_25);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  tmpvar_7.w = (tmpvar_24.w * (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0)));
  vec3 tmpvar_28;
  tmpvar_28.yz = vec2(0.0, 0.0);
  tmpvar_28.x = fract(_Rotation);
  vec3 x_29;
  x_29 = (tmpvar_28 + tmpvar_10);
  vec3 trans_30;
  trans_30 = localOrigin_6.xyz;
  float tmpvar_31;
  tmpvar_31 = (x_29.x * 6.28319);
  float tmpvar_32;
  tmpvar_32 = (x_29.y * 6.28319);
  float tmpvar_33;
  tmpvar_33 = (x_29.z * 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (sin(tmpvar_32) * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (cos(tmpvar_32) * tmpvar_34);
  float tmpvar_37;
  tmpvar_37 = sqrt((2.0 - tmpvar_33));
  float tmpvar_38;
  tmpvar_38 = sin(tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = cos(tmpvar_31);
  float tmpvar_40;
  tmpvar_40 = ((tmpvar_35 * tmpvar_39) - (tmpvar_36 * tmpvar_38));
  float tmpvar_41;
  tmpvar_41 = ((tmpvar_35 * tmpvar_38) + (tmpvar_36 * tmpvar_39));
  mat4 tmpvar_42;
  tmpvar_42[0].x = (localScale_5 * ((tmpvar_35 * tmpvar_40) - tmpvar_39));
  tmpvar_42[0].y = ((tmpvar_35 * tmpvar_41) - tmpvar_38);
  tmpvar_42[0].z = (tmpvar_35 * tmpvar_37);
  tmpvar_42[0].w = 0.0;
  tmpvar_42[1].x = ((tmpvar_36 * tmpvar_40) + tmpvar_38);
  tmpvar_42[1].y = (localScale_5 * ((tmpvar_36 * tmpvar_41) - tmpvar_39));
  tmpvar_42[1].z = (tmpvar_36 * tmpvar_37);
  tmpvar_42[1].w = 0.0;
  tmpvar_42[2].x = (tmpvar_37 * tmpvar_40);
  tmpvar_42[2].y = (tmpvar_37 * tmpvar_41);
  tmpvar_42[2].z = (localScale_5 * (1.0 - tmpvar_33));
  tmpvar_42[2].w = 0.0;
  tmpvar_42[3].x = trans_30.x;
  tmpvar_42[3].y = trans_30.y;
  tmpvar_42[3].z = trans_30.z;
  tmpvar_42[3].w = 1.0;
  mat4 tmpvar_43;
  tmpvar_43 = (((unity_MatrixV * _Object2World) * tmpvar_42));
  vec4 v_44;
  v_44.x = tmpvar_43[0].z;
  v_44.y = tmpvar_43[1].z;
  v_44.z = tmpvar_43[2].z;
  v_44.w = tmpvar_43[3].z;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(v_44.xyz);
  vec4 tmpvar_46;
  tmpvar_46 = (gl_ModelViewMatrix * localOrigin_6);
  vec4 tmpvar_47;
  tmpvar_47.xyz = (gl_Vertex.xyz * localScale_5);
  tmpvar_47.w = gl_Vertex.w;
  vec4 tmpvar_48;
  tmpvar_48 = (gl_ProjectionMatrix * (tmpvar_46 + tmpvar_47));
  vec2 tmpvar_49;
  tmpvar_49 = ((2.0 * gl_MultiTexCoord0.xy) - 1.0);
  vec4 tmpvar_50;
  tmpvar_50.z = 0.0;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = tmpvar_49.y;
  tmpvar_50.w = gl_Vertex.w;
  ZYv_3.xyw = tmpvar_50.zyw;
  XZv_2.yzw = tmpvar_50.zyw;
  XYv_1.yzw = tmpvar_50.yzw;
  ZYv_3.z = (tmpvar_49.x * sign(-(tmpvar_45.x)));
  XZv_2.x = (tmpvar_49.x * sign(-(tmpvar_45.y)));
  XYv_1.x = (tmpvar_49.x * sign(tmpvar_45.z));
  ZYv_3.x = ((sign(-(tmpvar_45.x)) * sign(ZYv_3.z)) * tmpvar_45.z);
  XZv_2.y = ((sign(-(tmpvar_45.y)) * sign(XZv_2.x)) * tmpvar_45.x);
  XYv_1.z = ((sign(-(tmpvar_45.z)) * sign(XYv_1.x)) * tmpvar_45.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_45.x)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_45.y)) * sign(tmpvar_49.y)) * tmpvar_45.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_45.z)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  vec4 o_51;
  vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_48 * 0.5);
  vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_48.zw;
  tmpvar_9.xyw = o_51.xyw;
  tmpvar_9.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_48;
  xlv_COLOR = tmpvar_7;
  xlv_TEXCOORD0 = abs(tmpvar_45);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * ZYv_3).xy - tmpvar_46.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XZv_2).xy - tmpvar_46.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XYv_1).xy - tmpvar_46.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_6).xyz));
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform vec4 _ZBufferParams;
void main ()
{
  vec4 color_1;
  vec4 tmpvar_2;
  tmpvar_2 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (texture2D (_LeftTex, xlv_TEXCOORD1), texture2D (_TopTex, xlv_TEXCOORD2), xlv_TEXCOORD0.yyyy), texture2D (_FrontTex, xlv_TEXCOORD3), xlv_TEXCOORD0.zzzz));
  color_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD5);
  color_1.w = (tmpvar_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 32 [glstate_lightmodel_ambient]
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_projection]
Vector 33 [_WorldSpaceCameraPos]
Vector 34 [_ProjectionParams]
Vector 35 [_ScreenParams]
Vector 36 [_WorldSpaceLightPos0]
Matrix 8 [unity_World2Shadow0]
Matrix 12 [_Object2World]
Matrix 16 [unity_MatrixV]
Matrix 20 [_MainRotation]
Matrix 24 [_DetailRotation]
Matrix 28 [_LightMatrix0]
Vector 37 [_LightColor0]
Float 38 [_DetailScale]
Float 39 [_DistFade]
Float 40 [_DistFadeVert]
Float 41 [_MinLight]
Float 42 [_Rotation]
Float 43 [_MaxScale]
Vector 44 [_MaxTrans]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"vs_3_0
; 359 ALU, 4 TEX
dcl_position o0
dcl_color0 o1
dcl_texcoord0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord7 o9
dcl_texcoord8 o10
def c45, 0.15915491, 0.50000000, 6.28318501, -3.14159298
def c46, 123.54530334, 2.00000000, -1.00000000, 1.00000000
def c47, 0.00000000, -0.01872930, 0.07426100, -0.21211439
def c48, 1.57072902, 3.14159298, 0.31830987, -0.12123910
def c49, -0.01348047, 0.05747731, 0.19563590, -0.33299461
def c50, 0.99999559, 1.57079601, 0.15915494, 0.50000000
def c51, 6.28318548, 0.00000000, 1.00000000, -0.01000214
def c52, 0.60000002, 0.50000000, 4.03944778, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_2d s0
dcl_2d s1
mad r10.xy, v2, c46.y, c46.z
mov r1.w, c15
mov r1.z, c14.w
mov r1.x, c12.w
mov r1.y, c13.w
dp4 r0.z, r1, c22
dp4 r0.x, r1, c20
dp4 r0.y, r1, c21
frc r1.xyz, -r0
add r0.xyz, -r0, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mad r0.x, r1, c45, c45.y
frc r0.x, r0
mad r1.x, r0, c45.z, c45.w
sincos r0.xy, r1.x
mad r0.x, r1.z, c45, c45.y
mov r1.x, r0.y
frc r0.y, r0.x
mad r0.x, r1.y, c45, c45.y
mad r1.y, r0, c45.z, c45.w
frc r1.x, r0
sincos r0.xy, r1.y
mad r0.x, r1, c45.z, c45.w
sincos r1.xy, r0.x
mov r1.z, r0.y
mul r0.xyz, r1, c46.x
frc r0.xyz, r0
abs r6.xyz, r0
mad r0.xyz, r6, c46.y, c46.z
mul r0.xyz, r0, c44
mov r0.w, c46
dp4 r2.z, r0, c14
dp4 r2.x, r0, c12
dp4 r2.y, r0, c13
dp4 r2.w, r0, c15
dp4 r1.z, r2, c22
dp4 r1.x, r2, c20
dp4 r1.y, r2, c21
dp4 r1.w, r2, c23
add r7.xyz, -r2, c33
dp3 r2.x, r7, r7
rsq r8.w, r2.x
dp4 r3.z, -r1, c26
dp4 r3.x, -r1, c24
dp4 r3.y, -r1, c25
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mul r3.xyz, r1.w, r3
abs r3.xyz, r3
sge r1.w, r3.z, r3.x
add r4.xyz, r3.zxyw, -r3
mad r4.xyz, r1.w, r4, r3
sge r2.w, r4.x, r3.y
add r4.xyz, r4, -r3.yxzw
mad r3.xyz, r2.w, r4, r3.yxzw
dp3 r1.w, -r1, -r1
rsq r1.w, r1.w
mul r1.xyz, r1.w, -r1
abs r2.w, r1.x
abs r1.w, r1.z
mul r3.zw, r3.xyzy, c45.y
max r3.y, r1.w, r2.w
abs r4.y, r3.x
min r3.x, r1.w, r2.w
slt r1.w, r1, r2
rcp r3.y, r3.y
mul r4.x, r3, r3.y
rcp r3.x, r4.y
mul r3.xy, r3.zwzw, r3.x
mul r4.y, r4.x, r4.x
mad r3.z, r4.y, c49.x, c49.y
mad r3.z, r3, r4.y, c48.w
mad r2.w, r3.z, r4.y, c49.z
mad r2.w, r2, r4.y, c49
mad r2.w, r2, r4.y, c50.x
mul r2.w, r2, r4.x
max r1.w, -r1, r1
slt r1.w, c47.x, r1
add r3.z, -r1.w, c46.w
mul r3.z, r2.w, r3
add r2.w, -r2, c50.y
mad r1.w, r1, r2, r3.z
slt r1.z, r1, c47.x
max r1.z, -r1, r1
slt r1.z, c47.x, r1
slt r1.x, r1, c47
max r1.x, -r1, r1
add r2.w, -r1, c48.y
add r3.z, -r1, c46.w
mul r1.w, r1, r3.z
slt r1.x, c47, r1
mad r1.z, r1, r2.w, r1.w
add r3.z, -r1.x, c46.w
mul r1.w, r1.z, r3.z
mad r1.x, r1, -r1.z, r1.w
abs r1.z, r1.y
add r2.w, -r1.z, c46
mad r1.w, r1.z, c47.y, c47.z
mad r1.w, r1, r1.z, c47
rsq r2.w, r2.w
rcp r2.w, r2.w
mad r1.z, r1.w, r1, c48.x
mul r1.z, r1, r2.w
slt r1.y, r1, c47.x
mul r1.w, r1.y, r1.z
mad r1.z, -r1.w, c46.y, r1
mad r1.y, r1, c48, r1.z
mul r3.xy, r3, c38.x
mov r3.z, c47.x
texldl r3, r3.xyzz, s1
mad r1.x, r1, c50.z, c50.w
mov r4.yz, c47.x
frc r4.x, c42
add r4.xyz, r6, r4
mul r1.w, r4.x, c51.x
mad r1.z, r1.w, c45.x, c45.y
frc r2.w, r1.z
mad r4.x, r2.w, c45.z, c45.w
sincos r5.xy, r4.x
mul r2.w, r4.y, c51.x
mad r2.w, r2, c45.x, c45.y
frc r4.x, r2.w
mul r2.w, r4.z, c46.y
mad r5.z, r4.x, c45, c45.w
sincos r4.xy, r5.z
rsq r5.w, r2.w
rcp r4.z, r5.w
mul r4.w, r4.x, r4.z
mul r5.z, r4.y, r4
mul r4.x, r4.w, r5
mad r4.y, r5.z, r5, r4.x
mov r5.w, c18.x
mul r1.y, r1, c48.z
mov r1.z, c47.x
texldl r1, r1.xyzz, s0
mul r3, r1, r3
add r1.z, -r2.w, c46.y
mov o1.xyz, r3
mov r1.y, c43.x
add r1.y, c46.z, r1
mad r1.x, r5.z, r4.y, -r5.y
mad r7.w, r6.x, r1.y, c46
mad r1.w, r4, r4.y, -r5.x
mul r1.y, r7.w, r1.w
rsq r1.z, r1.z
rcp r1.w, r1.z
mul r1.z, r1.w, r4.y
mov r4.x, c18.y
mul r4.xyz, c13, r4.x
mad r4.xyz, c12, r5.w, r4
mov r5.w, c18.z
mad r4.xyz, c14, r5.w, r4
mov r5.w, c18
mad r6.xyz, c15, r5.w, r4
mul r5.w, r4, r5.y
mad r2.z, r5, r5.x, -r5.w
mad r2.y, r5.z, r2.z, -r5.x
mul r2.x, r7.w, r2.y
mad r2.y, r4.w, r2.z, r5
mul r5.x, r5.z, r1.w
add r2.w, -r2, c46
mul r5.y, r1.w, r4.w
mul r2.z, r1.w, r2
mul r4.xyz, r6.y, r1
rcp r5.w, r8.w
mul r5.z, r7.w, r2.w
mad r4.xyz, r6.x, r2, r4
mad r4.xyz, r6.z, r5, r4
mul r1.w, -r5, c40.x
add_sat r2.w, r1, c46
mul_sat r1.w, r5, c39.x
mul r1.w, r1, r2
dp3 r4.w, r4, r4
rsq r2.w, r4.w
mul r8.xyz, r2.w, r4
mul o1.w, r3, r1
slt r2.w, -r8.x, r8.x
slt r1.w, r8.x, -r8.x
sub r1.w, r1, r2
slt r3.x, r10.y, -r10.y
slt r2.w, -r10.y, r10.y
sub r10.z, r2.w, r3.x
mul r2.w, r10.x, r1
mul r3.z, r1.w, r10
slt r3.y, r2.w, -r2.w
slt r3.x, -r2.w, r2.w
sub r3.x, r3, r3.y
mov r9.z, r2.w
mov r2.w, r0.x
mul r1.w, r3.x, r1
mul r3.y, r8, r3.z
mad r9.x, r8.z, r1.w, r3.y
mov r1.w, c16.y
mul r3, c13, r1.w
mov r1.w, c16.x
mad r3, c12, r1.w, r3
mov r1.w, c16.z
mad r3, c14, r1.w, r3
mov r1.w, c16
mad r6, c15, r1.w, r3
mov r1.w, r0.y
mul r4, r1, r6.y
mov r3.x, c17.y
mov r5.w, c17.x
mul r3, c13, r3.x
mad r3, c12, r5.w, r3
mov r5.w, c17.z
mad r3, c14, r5.w, r3
mov r5.w, c17
mad r3, c15, r5.w, r3
mul r1, r3.y, r1
mov r5.w, r0.z
mad r1, r3.x, r2, r1
mad r1, r3.z, r5, r1
mad r1, r3.w, c51.yyyz, r1
mad r4, r2, r6.x, r4
mad r4, r5, r6.z, r4
mad r2, r6.w, c51.yyyz, r4
dp4 r5.y, r0, c1
dp4 r5.x, r0, c0
mov r4.w, v0
mov r4.y, r10
mov r9.yw, r4
dp4 r3.y, r1, r9
dp4 r3.x, r9, r2
slt r3.w, -r8.y, r8.y
slt r3.z, r8.y, -r8.y
sub r4.x, r3.z, r3.w
add r3.zw, -r5.xyxy, r3.xyxy
mul r3.x, r10, r4
mad o3.xy, r3.zwzw, c52.x, c52.y
slt r3.z, r3.x, -r3.x
slt r3.y, -r3.x, r3.x
sub r3.y, r3, r3.z
mul r3.z, r10, r4.x
mul r3.y, r3, r4.x
mul r4.x, r8.z, r3.z
mad r3.y, r8.x, r3, r4.x
mov r3.zw, r4.xyyw
dp4 r5.w, r1, r3
dp4 r5.z, r2, r3
add r3.xy, -r5, r5.zwzw
slt r3.w, -r8.z, r8.z
slt r3.z, r8, -r8
sub r4.x, r3.w, r3.z
sub r3.z, r3, r3.w
mul r4.x, r10, r4
mul r5.z, r10, r3
dp4 r5.w, r0, c3
slt r4.z, r4.x, -r4.x
slt r3.w, -r4.x, r4.x
sub r3.w, r3, r4.z
mul r4.z, r8.y, r5
dp4 r5.z, r0, c2
mul r3.z, r3, r3.w
mad r4.z, r8.x, r3, r4
dp4 r1.y, r1, r4
dp4 r1.x, r2, r4
mad o4.xy, r3, c52.x, c52.y
add r3.xy, -r5, r1
mov r0.w, v0
mul r0.xyz, v0, r7.w
add r0, r5, r0
dp4 r2.w, r0, c7
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
mov r1.w, r2
dp4 r1.z, r0, c6
mul r2.xyz, r1.xyww, c45.y
mov o0, r1
mul r2.y, r2, c34.x
mov r1.xyz, v1
mov r1.w, c47.x
dp4 r0.z, r1, c14
dp4 r0.y, r1, c13
dp4 r0.x, r1, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c36, c36
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c36
dp3_sat r0.x, r0, r1
add r0.x, r0, c51.w
mul r0.y, r0.x, c37.w
dp4 r1.x, v0, c2
mul_sat r0.w, r0.y, c52.z
mov r0.x, c41
add r0.xyz, c37, r0.x
mad_sat o7.xyz, r0, r0.w, c32
dp4 r0.w, v0, c15
dp4 r0.z, v0, c14
dp4 r0.x, v0, c12
dp4 r0.y, v0, c13
mad o5.xy, r3, c52.x, c52.y
mad o10.xy, r2.z, c35.zwzw, r2
abs o2.xyz, r8
mov o10.w, r2
mul o6.xyz, r8.w, r7
dp4 o8.w, r0, c31
dp4 o8.z, r0, c30
dp4 o8.y, r0, c29
dp4 o8.x, r0, c28
dp4 o9.w, r0, c11
dp4 o9.z, r0, c10
dp4 o9.y, r0, c9
dp4 o9.x, r0, c8
mov o10.z, -r1.x
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
ConstBuffer "$Globals" 384 // 380 used size, 17 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 208 [_LightMatrix0] 4
Vector 272 [_LightColor0] 4
Float 304 [_DetailScale]
Float 336 [_DistFade]
Float 340 [_DistFadeVert]
Float 348 [_MinLight]
Float 356 [_Rotation]
Float 360 [_MaxScale]
Vector 368 [_MaxTrans] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityPerFrame" 208 // 144 used size, 4 vars
Matrix 0 [glstate_matrix_projection] 4
Vector 64 [glstate_lightmodel_ambient] 4
Matrix 80 [unity_MatrixV] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityShadows" 3
BindCB "UnityPerDraw" 4
BindCB "UnityPerFrame" 5
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 257 instructions, 12 temp regs, 0 temp arrays:
// ALU 220 float, 8 int, 6 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddajajmflnjilaichddkmdjkabcmkdmndabaaaaaameceaaaaadaaaaaa
cmaaaaaanmaaaaaabaacaaaaejfdeheokiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaijaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaipaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaajgaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaajoaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaafaepfdejfeejepeoaaedepem
epfcaaeoepfcenebemaafeebeoehefeofeaafeeffiedepepfceeaaklepfdeheo
cmabaaaaalaaaaaaaiaaaaaabaabaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaabmabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaccabaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaccabaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaaccabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
amadaaaaccabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaaccabaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaccabaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaccabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaa
apaaaaaaccabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaapaaaaaaccabaaaa
aiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
edepemepfcaafeeffiedepepfceeaaklfdeieefckmccaaaaeaaaabaaklaiaaaa
fjaaaaaeegiocaaaaaaaaaaabiaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaaamaaaaaa
fjaaaaaeegiocaaaaeaaaaaabaaaaaaafjaaaaaeegiocaaaafaaaaaaajaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafpaaaaadpcbabaaa
aaaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaaeaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaadpccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaaddccabaaaadaaaaaagfaaaaadmccabaaaadaaaaaagfaaaaad
dccabaaaaeaaaaaagfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaa
gfaaaaadpccabaaaahaaaaaagfaaaaadpccabaaaaiaaaaaagfaaaaadpccabaaa
ajaaaaaagiaaaaacamaaaaaadiaaaaajhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
acaaaaaafgifcaaaaeaaaaaaapaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaa
aaaaaaaaabaaaaaaagiacaaaaeaaaaaaapaaaaaaegacbaaaaaaaaaaadcaaaaal
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaadaaaaaakgikcaaaaeaaaaaaapaaaaaa
egacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaaaeaaaaaa
pgipcaaaaeaaaaaaapaaaaaaegacbaaaaaaaaaaaebaaaaaghcaabaaaaaaaaaaa
egacbaiaebaaaaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaaenaaaaaghcaabaaa
aaaaaaaaaanaaaaaegacbaaaaaaaaaaadiaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaaceaaaaadcbhphecdcbhphecdcbhphecaaaaaaaabkaaaaafhcaabaaa
aaaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaackiacaaaaaaaaaaa
bgaaaaaaabeaaaaaaaaaialpdcaaaaajicaabaaaaaaaaaaaakaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegbcbaaaaaaaaaaadgaaaaaficaabaaaabaaaaaadkbabaaaaaaaaaaa
dcaaaaaphcaabaaaacaaaaaaegacbaaaaaaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaadiaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaegiccaaaaaaaaaaabhaaaaaadiaaaaai
pcaabaaaadaaaaaafgafbaaaacaaaaaaegiocaaaaeaaaaaaafaaaaaadcaaaaak
pcaabaaaadaaaaaaegiocaaaaeaaaaaaaeaaaaaaagaabaaaacaaaaaaegaobaaa
adaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaaeaaaaaaagaaaaaakgakbaaa
acaaaaaaegaobaaaadaaaaaaaaaaaaaipcaabaaaadaaaaaaegaobaaaadaaaaaa
egiocaaaaeaaaaaaahaaaaaaaaaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaa
egaobaaaadaaaaaadiaaaaaipcaabaaaaeaaaaaafgafbaaaabaaaaaaegiocaaa
afaaaaaaabaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaafaaaaaaaaaaaaaa
agaabaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaa
afaaaaaaacaaaaaakgakbaaaabaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaafaaaaaaadaaaaaapgapbaaaabaaaaaaegaobaaaaeaaaaaa
dgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaaeaaaaaa
fgafbaaaacaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaeaaaaaa
egiocaaaaeaaaaaaamaaaaaaagaabaaaacaaaaaaegaobaaaaeaaaaaadcaaaaak
pcaabaaaaeaaaaaaegiocaaaaeaaaaaaaoaaaaaakgakbaaaacaaaaaaegaobaaa
aeaaaaaaaaaaaaaipcaabaaaaeaaaaaaegaobaaaaeaaaaaaegiocaaaaeaaaaaa
apaaaaaadiaaaaaipcaabaaaafaaaaaafgafbaaaaeaaaaaaegiocaaaaaaaaaaa
acaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaaabaaaaaaagaabaaa
aeaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaa
adaaaaaakgakbaaaaeaaaaaaegaobaaaafaaaaaadcaaaaakpcaabaaaafaaaaaa
egiocaaaaaaaaaaaaeaaaaaapgapbaaaaeaaaaaaegaobaaaafaaaaaadiaaaaaj
hcaabaaaagaaaaaafgafbaiaebaaaaaaafaaaaaabgigcaaaaaaaaaaaagaaaaaa
dcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaafaaaaaaagaabaiaebaaaaaa
afaaaaaaegacbaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaa
ahaaaaaakgakbaiaebaaaaaaafaaaaaaegacbaaaagaaaaaadcaaaaalhcaabaaa
agaaaaaabgigcaaaaaaaaaaaaiaaaaaapgapbaiaebaaaaaaafaaaaaaegacbaaa
agaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaagaaaaaaegacbaaaagaaaaaa
eeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahhcaabaaaagaaaaaa
kgakbaaaabaaaaaaegacbaaaagaaaaaadgaaaaagecaabaaaahaaaaaackaabaia
mbaaaaaaagaaaaaabnaaaaajecaabaaaabaaaaaackaabaiaibaaaaaaagaaaaaa
bkaabaiaibaaaaaaagaaaaaaabaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaiadpaaaaaaajpcaabaaaaiaaaaaafgaibaiambaaaaaaagaaaaaa
kgabbaiaibaaaaaaagaaaaaadiaaaaahlcaabaaaahaaaaaakgakbaaaabaaaaaa
jganbaaaaiaaaaaadcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaaakaabaaa
aiaaaaaabkaabaiaibaaaaaaagaaaaaabnaaaaaiecaabaaaabaaaaaackaabaaa
abaaaaaaakaabaiaibaaaaaaagaaaaaaabaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaihcaabaaaaiaaaaaabgagbaiaibaaaaaa
agaaaaaaegacbaaaahaaaaaadgaaaaagfcaabaaaahaaaaaafgaebaiambaaaaaa
agaaaaaaaaaaaaahhcaabaaaahaaaaaacgalbaaaahaaaaaaegacbaaaaiaaaaaa
dcaaaaakhcaabaaaagaaaaaakgakbaaaabaaaaaaegacbaaaahaaaaaaegacbaia
ibaaaaaaagaaaaaadiaaaaakmcaabaaaadaaaaaakgagbaaaagaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaadpaoaaaaahmcaabaaaadaaaaaakgaobaaa
adaaaaaaagaabaaaagaaaaaadiaaaaaimcaabaaaadaaaaaakgaobaaaadaaaaaa
agiacaaaaaaaaaaabdaaaaaaeiaaaaalpcaabaaaagaaaaaaogakbaaaadaaaaaa
eghobaaaabaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaabaaaaaajecaabaaa
abaaaaaaegacbaiaebaaaaaaafaaaaaaegacbaiaebaaaaaaafaaaaaaeeaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaaihcaabaaaafaaaaaakgakbaaa
abaaaaaaigabbaiaebaaaaaaafaaaaaadeaaaaajecaabaaaabaaaaaabkaabaia
ibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaaoaaaaakecaabaaaabaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpckaabaaaabaaaaaaddaaaaaj
icaabaaaacaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaah
icaabaaaacaaaaaackaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajecaabaaa
adaaaaaadkaabaaaacaaaaaaabeaaaaafpkokkdmabeaaaaadgfkkolndcaaaaaj
ecaabaaaadaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaaochgdido
dcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaa
aebnkjlodcaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaa
abeaaaaadiphhpdpdiaaaaahecaabaaaadaaaaaackaabaaaabaaaaaadkaabaaa
acaaaaaadcaaaaajecaabaaaadaaaaaackaabaaaadaaaaaaabeaaaaaaaaaaama
abeaaaaanlapmjdpdbaaaaajicaabaaaadaaaaaabkaabaiaibaaaaaaafaaaaaa
akaabaiaibaaaaaaafaaaaaaabaaaaahecaabaaaadaaaaaadkaabaaaadaaaaaa
ckaabaaaadaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaadbaaaaaimcaabaaaadaaaaaafgajbaaaafaaaaaa
fgajbaiaebaaaaaaafaaaaaaabaaaaahicaabaaaacaaaaaackaabaaaadaaaaaa
abeaaaaanlapejmaaaaaaaahecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
acaaaaaaddaaaaahicaabaaaacaaaaaabkaabaaaafaaaaaaakaabaaaafaaaaaa
dbaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaiaebaaaaaaacaaaaaa
deaaaaahecaabaaaadaaaaaabkaabaaaafaaaaaaakaabaaaafaaaaaabnaaaaai
ecaabaaaadaaaaaackaabaaaadaaaaaackaabaiaebaaaaaaadaaaaaaabaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadhaaaaakecaabaaa
abaaaaaadkaabaaaacaaaaaackaabaiaebaaaaaaabaaaaaackaabaaaabaaaaaa
dcaaaaajbcaabaaaafaaaaaackaabaaaabaaaaaaabeaaaaaidpjccdoabeaaaaa
aaaaaadpdcaaaaakecaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaa
dagojjlmabeaaaaachbgjidndcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaiaibaaaaaaafaaaaaaabeaaaaaiedefjlodcaaaaakecaabaaaabaaaaaa
ckaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaakeanmjdpaaaaaaai
icaabaaaacaaaaaackaabaiambaaaaaaafaaaaaaabeaaaaaaaaaiadpelaaaaaf
icaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaahecaabaaaadaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaaadaaaaaackaabaaaadaaaaaa
abeaaaaaaaaaaamaabeaaaaanlapejeaabaaaaahecaabaaaadaaaaaadkaabaaa
adaaaaaackaabaaaadaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaahccaabaaaafaaaaaackaabaaa
abaaaaaaabeaaaaaidpjkcdoeiaaaaalpcaabaaaafaaaaaaegaabaaaafaaaaaa
eghobaaaaaaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadiaaaaahpcaabaaa
afaaaaaaegaobaaaagaaaaaaegaobaaaafaaaaaaaaaaaaajhcaabaaaagaaaaaa
egacbaaaaeaaaaaaegiccaiaebaaaaaaabaaaaaaaeaaaaaaaaaaaaajhcaabaaa
aeaaaaaaegacbaiaebaaaaaaaeaaaaaaegiccaaaabaaaaaaaeaaaaaabaaaaaah
ecaabaaaabaaaaaaegacbaaaagaaaaaaegacbaaaagaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaaiicaabaaaacaaaaaackaabaaaabaaaaaa
akiacaaaaaaaaaaabfaaaaaadccaaaalecaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaabfaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpdgcaaaaficaabaaa
acaaaaaadkaabaaaacaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaa
dkaabaaaacaaaaaadiaaaaahiccabaaaabaaaaaackaabaaaabaaaaaadkaabaaa
afaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaaafaaaaaabkaaaaagbcaabaaa
afaaaaaabkiacaaaaaaaaaaabgaaaaaadgaaaaaigcaabaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaafaaaaaaaaaaaaahecaabaaaabaaaaaackaabaaaaaaaaaaa
ckaabaaaaaaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaak
dcaabaaaaaaaaaaaegaabaaaaaaaaaaaaceaaaaanlapmjeanlapmjeaaaaaaaaa
aaaaaaaadcaaaabamcaabaaaadaaaaaakgakbaiaebaaaaaaaaaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaea
aaaaiadpenaaaaahbcaabaaaafaaaaaabcaabaaaagaaaaaabkaabaaaaaaaaaaa
enaaaaahbcaabaaaaaaaaaaabcaabaaaahaaaaaaakaabaaaaaaaaaaadiaaaaah
ccaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaaagaaaaaadiaaaaahecaabaaa
aaaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaadiaaaaahecaabaaaabaaaaaa
akaabaaaahaaaaaabkaabaaaaaaaaaaadcaaaaajecaabaaaabaaaaaackaabaaa
aaaaaaaaakaabaaaaaaaaaaackaabaaaabaaaaaadcaaaaakicaabaaaacaaaaaa
bkaabaaaaaaaaaaackaabaaaabaaaaaaakaabaiaebaaaaaaahaaaaaadiaaaaah
icaabaaaacaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaajhcaabaaa
afaaaaaafgifcaaaaeaaaaaaanaaaaaaegiccaaaafaaaaaaagaaaaaadcaaaaal
hcaabaaaafaaaaaaegiccaaaafaaaaaaafaaaaaaagiacaaaaeaaaaaaanaaaaaa
egacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaafaaaaaaahaaaaaa
kgikcaaaaeaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaa
egiccaaaafaaaaaaaiaaaaaapgipcaaaaeaaaaaaanaaaaaaegacbaaaafaaaaaa
diaaaaahhcaabaaaagaaaaaapgapbaaaacaaaaaaegacbaaaafaaaaaadiaaaaah
icaabaaaacaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakicaabaaa
acaaaaaackaabaaaaaaaaaaaakaabaaaahaaaaaadkaabaiaebaaaaaaacaaaaaa
dcaaaaajicaabaaaaeaaaaaabkaabaaaaaaaaaaadkaabaaaacaaaaaaakaabaaa
aaaaaaaadiaaaaajocaabaaaahaaaaaafgifcaaaaeaaaaaaamaaaaaaagijcaaa
afaaaaaaagaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaaafaaaaaaafaaaaaa
agiacaaaaeaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaalocaabaaaahaaaaaa
agijcaaaafaaaaaaahaaaaaakgikcaaaaeaaaaaaamaaaaaafgaobaaaahaaaaaa
dcaaaaalocaabaaaahaaaaaaagijcaaaafaaaaaaaiaaaaaapgipcaaaaeaaaaaa
amaaaaaafgaobaaaahaaaaaadcaaaaajhcaabaaaagaaaaaajgahbaaaahaaaaaa
pgapbaaaaeaaaaaaegacbaaaagaaaaaaelaaaaafecaabaaaadaaaaaackaabaaa
adaaaaaadiaaaaahicaabaaaadaaaaaadkaabaaaaaaaaaaadkaabaaaadaaaaaa
diaaaaahccaabaaaaaaaaaaabkaabaaaaaaaaaaackaabaaaadaaaaaadiaaaaaj
hcaabaaaaiaaaaaafgifcaaaaeaaaaaaaoaaaaaaegiccaaaafaaaaaaagaaaaaa
dcaaaaalhcaabaaaaiaaaaaaegiccaaaafaaaaaaafaaaaaaagiacaaaaeaaaaaa
aoaaaaaaegacbaaaaiaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaafaaaaaa
ahaaaaaakgikcaaaaeaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaalhcaabaaa
aiaaaaaaegiccaaaafaaaaaaaiaaaaaapgipcaaaaeaaaaaaaoaaaaaaegacbaaa
aiaaaaaadcaaaaajhcaabaaaagaaaaaaegacbaaaaiaaaaaafgafbaaaaaaaaaaa
egacbaaaagaaaaaadgaaaaafccaabaaaajaaaaaackaabaaaagaaaaaadcaaaaak
ccaabaaaaaaaaaaackaabaaaaaaaaaaadkaabaaaacaaaaaaakaabaiaebaaaaaa
ahaaaaaadcaaaaakbcaabaaaaaaaaaaackaabaaaaaaaaaaackaabaaaabaaaaaa
akaabaiaebaaaaaaaaaaaaaadiaaaaahecaabaaaaaaaaaaackaabaaaaaaaaaaa
ckaabaaaadaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaackaabaaa
adaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaa
diaaaaahhcaabaaaakaaaaaakgakbaaaabaaaaaaegacbaaaafaaaaaadcaaaaaj
hcaabaaaakaaaaaajgahbaaaahaaaaaapgapbaaaacaaaaaaegacbaaaakaaaaaa
dcaaaaajhcaabaaaakaaaaaaegacbaaaaiaaaaaapgapbaaaadaaaaaaegacbaaa
akaaaaaadiaaaaahhcaabaaaalaaaaaaagaabaaaaaaaaaaaegacbaaaafaaaaaa
diaaaaahkcaabaaaacaaaaaafgafbaaaacaaaaaaagaebaaaafaaaaaadcaaaaaj
dcaabaaaacaaaaaajgafbaaaahaaaaaaagaabaaaacaaaaaangafbaaaacaaaaaa
dcaaaaajdcaabaaaacaaaaaaegaabaaaaiaaaaaakgakbaaaacaaaaaaegaabaaa
acaaaaaadiaaaaahbcaabaaaaaaaaaaabkaabaaaaaaaaaaadkaabaaaaaaaaaaa
dcaaaaajlcaabaaaaaaaaaaajganbaaaahaaaaaaagaabaaaaaaaaaaaegaibaaa
alaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaiaaaaaakgakbaaaaaaaaaaa
egadbaaaaaaaaaaadgaaaaafbcaabaaaajaaaaaackaabaaaaaaaaaaadgaaaaaf
ecaabaaaajaaaaaackaabaaaakaaaaaabaaaaaahecaabaaaaaaaaaaaegacbaaa
ajaaaaaaegacbaaaajaaaaaaeeaaaaafecaabaaaaaaaaaaackaabaaaaaaaaaaa
diaaaaahhcaabaaaafaaaaaakgakbaaaaaaaaaaaegacbaaaajaaaaaadgaaaaag
hccabaaaacaaaaaaegacbaiaibaaaaaaafaaaaaadiaaaaajmcaabaaaaaaaaaaa
fgifcaaaaeaaaaaaapaaaaaaagiecaaaafaaaaaaagaaaaaadcaaaaalmcaabaaa
aaaaaaaaagiecaaaafaaaaaaafaaaaaaagiacaaaaeaaaaaaapaaaaaakgaobaaa
aaaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaaafaaaaaaahaaaaaakgikcaaa
aeaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaa
afaaaaaaaiaaaaaapgipcaaaaeaaaaaaapaaaaaakgaobaaaaaaaaaaaaaaaaaah
mcaabaaaaaaaaaaakgaobaaaaaaaaaaaagaebaaaacaaaaaadbaaaaalhcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaegacbaiaebaaaaaa
afaaaaaadbaaaaalhcaabaaaahaaaaaaegacbaiaebaaaaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaboaaaaaihcaabaaaacaaaaaaegacbaia
ebaaaaaaacaaaaaaegacbaaaahaaaaaadcaaaaapmcaabaaaadaaaaaaagbebaaa
aeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaceaaaaaaaaaaaaa
aaaaaaaaaaaaialpaaaaialpdbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaa
dkaabaaaadaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaa
aaaaaaaaboaaaaaiecaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadkaabaaa
acaaaaaacgaaaaaiaanaaaaahcaabaaaahaaaaaakgakbaaaabaaaaaaegacbaaa
acaaaaaaclaaaaafhcaabaaaahaaaaaaegacbaaaahaaaaaadiaaaaahhcaabaaa
ahaaaaaajgafbaaaafaaaaaaegacbaaaahaaaaaaclaaaaafkcaabaaaafaaaaaa
agaebaaaacaaaaaadiaaaaahkcaabaaaafaaaaaakgakbaaaadaaaaaafganbaaa
afaaaaaadbaaaaakmcaabaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaafganbaaaafaaaaaadbaaaaakdcaabaaaaiaaaaaangafbaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaboaaaaaimcaabaaaagaaaaaa
kgaobaiaebaaaaaaagaaaaaaagaebaaaaiaaaaaacgaaaaaiaanaaaaadcaabaaa
acaaaaaaegaabaaaacaaaaaaogakbaaaagaaaaaaclaaaaafdcaabaaaacaaaaaa
egaabaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaaacaaaaaacgakbaaa
afaaaaaaegaabaaaahaaaaaadiaaaaahkcaabaaaacaaaaaafgafbaaaacaaaaaa
agaebaaaagaaaaaadiaaaaahdcaabaaaagaaaaaapgapbaaaadaaaaaaegaabaaa
agaaaaaadcaaaaajmcaabaaaagaaaaaaagaebaaaaaaaaaaaagaabaaaacaaaaaa
agaebaaaagaaaaaadcaaaaajmcaabaaaagaaaaaaagaebaaaakaaaaaafgafbaaa
afaaaaaakgaobaaaagaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaaaaaaaaaa
pgapbaaaafaaaaaangafbaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaa
akaaaaaapgapbaaaadaaaaaaegaabaaaacaaaaaadcaaaaajdcaabaaaacaaaaaa
ogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaaacaaaaaaaaaaaaaidcaabaaa
acaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaaacaaaaaadcaaaaapmccabaaa
adaaaaaaagaebaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaajkjjbjdpjkjjbjdp
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadpdcaaaaajdcaabaaaacaaaaaa
ogakbaaaaaaaaaaapgbpbaaaaaaaaaaaogakbaaaagaaaaaaaaaaaaaidcaabaaa
acaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaaacaaaaaadcaaaaapdccabaaa
adaaaaaaegaabaaaacaaaaaaaceaaaaajkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaadbaaaaahecaabaaaabaaaaaa
abeaaaaaaaaaaaaackaabaaaafaaaaaadbaaaaahbcaabaaaacaaaaaackaabaaa
afaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaakaabaaaacaaaaaaclaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaahecaabaaaabaaaaaackaabaaaabaaaaaackaabaaaadaaaaaadbaaaaah
bcaabaaaacaaaaaaabeaaaaaaaaaaaaackaabaaaabaaaaaadbaaaaahccaabaaa
acaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaadcaaaaajdcaabaaaaaaaaaaa
egaabaaaaaaaaaaakgakbaaaabaaaaaaegaabaaaagaaaaaaboaaaaaiecaabaaa
abaaaaaaakaabaiaebaaaaaaacaaaaaabkaabaaaacaaaaaacgaaaaaiaanaaaaa
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaaaacaaaaaaclaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
akaabaaaafaaaaaackaabaaaahaaaaaadcaaaaajdcaabaaaaaaaaaaaegaabaaa
akaaaaaakgakbaaaabaaaaaaegaabaaaaaaaaaaadcaaaaajdcaabaaaaaaaaaaa
ogakbaaaaaaaaaaapgbpbaaaaaaaaaaaegaabaaaaaaaaaaaaaaaaaaidcaabaaa
aaaaaaaaegaabaiaebaaaaaaadaaaaaaegaabaaaaaaaaaaadcaaaaapdccabaaa
aeaaaaaaegaabaaaaaaaaaaaaceaaaaajkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaa
aaaaaaaadiaaaaahhccabaaaafaaaaaaagaabaaaaaaaaaaaegacbaaaaeaaaaaa
diaaaaaihcaabaaaaaaaaaaafgbfbaaaacaaaaaaegiccaaaaeaaaaaaanaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaamaaaaaaagbabaaaacaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaeaaaaaaaoaaaaaa
kgbkbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaabbaaaaaj
icaabaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaaegiocaaaacaaaaaaaaaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaaihcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegiccaaaacaaaaaaaaaaaaaabacaaaahbcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaknhcdlmdiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaapnekibdpdiaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaadkiacaaa
aaaaaaaabbaaaaaadicaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
aaaaiaeaaaaaaaajocaabaaaaaaaaaaaagijcaaaaaaaaaaabbaaaaaapgipcaaa
aaaaaaaabfaaaaaadccaaaakhccabaaaagaaaaaajgahbaaaaaaaaaaaagaabaaa
aaaaaaaaegiccaaaafaaaaaaaeaaaaaadiaaaaaipcaabaaaaaaaaaaafgbfbaaa
aaaaaaaaegiocaaaaeaaaaaaanaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
aeaaaaaaamaaaaaaagbabaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaa
aaaaaaaaegiocaaaaeaaaaaaaoaaaaaakgbkbaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaaeaaaaaaapaaaaaapgbpbaaaaaaaaaaa
egaobaaaaaaaaaaadiaaaaaipcaabaaaacaaaaaafgafbaaaaaaaaaaaegiocaaa
aaaaaaaaaoaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaaaaaaaaaanaaaaaa
agaabaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaa
aaaaaaaaapaaaaaakgakbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaa
ahaaaaaaegiocaaaaaaaaaaabaaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaa
diaaaaaipcaabaaaacaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaajaaaaaa
dcaaaaakpcaabaaaacaaaaaaegiocaaaadaaaaaaaiaaaaaaagaabaaaaaaaaaaa
egaobaaaacaaaaaadcaaaaakpcaabaaaacaaaaaaegiocaaaadaaaaaaakaaaaaa
kgakbaaaaaaaaaaaegaobaaaacaaaaaadcaaaaakpccabaaaaiaaaaaaegiocaaa
adaaaaaaalaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaadiaaaaakhcaabaaa
aaaaaaaaegadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaa
dgaaaaaficcabaaaajaaaaaadkaabaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaa
bkaabaaaaaaaaaaaakiacaaaabaaaaaaafaaaaaaaaaaaaahdccabaaaajaaaaaa
kgakbaaaaaaaaaaamgaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaa
aaaaaaaackiacaaaaeaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaa
aeaaaaaaaeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaa
aaaaaaaackiacaaaaeaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaakbcaabaaaaaaaaaaackiacaaaaeaaaaaaahaaaaaadkbabaaaaaaaaaaa
akaabaaaaaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 411
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 512
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 503
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 402
uniform sampler2D _LightTextureB0;
#line 407
#line 421
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 434
#line 442
#line 456
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 489
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 493
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 497
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 501
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 527
#line 543
#line 600
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 380
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 382
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 355
mediump vec4 GetShereDetailMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 357
    highp vec3 sphereVectNorm = normalize(sphereVect);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 361
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    highp vec4 uv;
    uv.xy = (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale);
    #line 365
    uv.zw = vec2( 0.0, 0.0);
    return xll_tex2Dlod( texSampler, uv);
}
#line 330
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 332
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 336
    return uv;
}
#line 338
mediump vec4 GetSphereMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 340
    highp vec4 uv;
    highp vec3 sphereVectNorm = normalize(sphereVect);
    uv.xy = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    uv.zw = vec2( 0.0, 0.0);
    #line 344
    mediump vec4 tex = xll_tex2Dlod( texSampler, uv);
    return tex;
}
#line 317
highp vec3 hash( in highp vec3 val ) {
    #line 319
    return fract((sin(val) * 123.545));
}
#line 527
highp mat4 rand_rotation( in highp vec3 x, in highp float scale, in highp vec3 trans ) {
    highp float theta = (x.x * 6.28319);
    highp float phi = (x.y * 6.28319);
    #line 531
    highp float z = (x.z * 2.0);
    highp float r = sqrt(z);
    highp float Vx = (sin(phi) * r);
    highp float Vy = (cos(phi) * r);
    #line 535
    highp float Vz = sqrt((2.0 - z));
    highp float st = sin(theta);
    highp float ct = cos(theta);
    highp float Sx = ((Vx * ct) - (Vy * st));
    #line 539
    highp float Sy = ((Vx * st) + (Vy * ct));
    highp mat4 M = mat4( (scale * ((Vx * Sx) - ct)), ((Vx * Sy) - st), (Vx * Vz), 0.0, ((Vy * Sx) + st), (scale * ((Vy * Sy) - ct)), (Vy * Vz), 0.0, (Vz * Sx), (Vz * Sy), (scale * (1.0 - z)), 0.0, trans.x, trans.y, trans.z, 1.0);
    return M;
}
#line 543
v2f vert( in appdata_t v ) {
    v2f o;
    highp vec4 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0));
    #line 547
    highp vec4 planet_pos = (-(_MainRotation * origin));
    highp vec3 hashVect = abs(hash( normalize(floor(planet_pos.xyz))));
    highp vec4 localOrigin;
    localOrigin.xyz = (((2.0 * hashVect) - 1.0) * _MaxTrans);
    #line 551
    localOrigin.w = 1.0;
    highp float localScale = ((hashVect.x * (_MaxScale - 1.0)) + 1.0);
    origin = (_Object2World * localOrigin);
    highp vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 555
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 559
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    o.baseLight = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    planet_pos = (-(_MainRotation * origin));
    highp vec3 detail_pos = (_DetailRotation * planet_pos).xyz;
    #line 563
    o.color = GetSphereMapNoLOD( _MainTex, planet_pos.xyz);
    o.color *= GetShereDetailMapNoLOD( _DetailTex, detail_pos, _DetailScale);
    o.color.w *= GetDistanceFade( distance( origin, vec4( _WorldSpaceCameraPos, 0.0)), _DistFade, _DistFadeVert);
    highp mat4 M = rand_rotation( (vec3( fract(_Rotation), 0.0, 0.0) + hashVect), localScale, localOrigin.xyz);
    #line 567
    highp mat4 mvMatrix = ((unity_MatrixV * _Object2World) * M);
    highp vec3 viewDir = normalize(xll_matrixindex_mf4x4_i (mvMatrix, 2).xyz);
    o.viewDir = abs(viewDir);
    highp vec4 mvCenter = (glstate_matrix_modelview0 * localOrigin);
    #line 571
    o.pos = (glstate_matrix_projection * (mvCenter + vec4( (v.vertex.xyz * localScale), v.vertex.w)));
    o.camPos = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * localOrigin).xyz));
    highp vec2 texcoodOffsetxy = ((2.0 * v.texcoord) - 1.0);
    highp vec4 texcoordOffset = vec4( texcoodOffsetxy.x, texcoodOffsetxy.y, 0.0, v.vertex.w);
    #line 575
    highp vec4 ZYv = texcoordOffset.zyxw;
    highp vec4 XZv = texcoordOffset.xzyw;
    highp vec4 XYv = texcoordOffset.xyzw;
    ZYv.z *= sign((-viewDir.x));
    #line 579
    XZv.x *= sign((-viewDir.y));
    XYv.x *= sign(viewDir.z);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.z)) * viewDir.z);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.x)) * viewDir.x);
    #line 583
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.x)) * viewDir.x);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.y)) * viewDir.y);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.z)) * viewDir.z);
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.y)) * viewDir.y);
    #line 587
    highp vec2 ZY = ((mvMatrix * ZYv).xy - mvCenter.xy);
    highp vec2 XZ = ((mvMatrix * XZv).xy - mvCenter.xy);
    highp vec2 XY = ((mvMatrix * XYv).xy - mvCenter.xy);
    o.texcoordZY = (vec2( 0.5, 0.5) + (0.6 * ZY));
    #line 591
    o.texcoordXZ = (vec2( 0.5, 0.5) + (0.6 * XZ));
    o.texcoordXY = (vec2( 0.5, 0.5) + (0.6 * XY));
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    #line 595
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out lowp vec4 xlv_COLOR;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.texcoord = vec2(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_COLOR = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD1 = vec2(xl_retval.texcoordZY);
    xlv_TEXCOORD2 = vec2(xl_retval.texcoordXZ);
    xlv_TEXCOORD3 = vec2(xl_retval.texcoordXY);
    xlv_TEXCOORD4 = vec3(xl_retval.camPos);
    xlv_TEXCOORD5 = vec3(xl_retval.baseLight);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 411
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 512
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec4 projPos;
};
#line 503
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 402
uniform sampler2D _LightTextureB0;
#line 407
#line 421
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 434
#line 442
#line 456
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 489
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 493
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 497
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 501
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 527
#line 543
#line 600
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 600
lowp vec4 frag( in v2f IN ) {
    mediump float xval = IN.viewDir.x;
    mediump vec4 xtex = texture( _LeftTex, IN.texcoordZY);
    #line 604
    mediump float yval = IN.viewDir.y;
    mediump vec4 ytex = texture( _TopTex, IN.texcoordXZ);
    mediump float zval = IN.viewDir.z;
    mediump vec4 ztex = texture( _FrontTex, IN.texcoordXY);
    #line 608
    mediump vec4 tex = mix( mix( xtex, ytex, vec4( yval)), ztex, vec4( zval));
    mediump vec4 prev = (((0.94 * _Color) * IN.color) * tex);
    mediump vec4 color;
    color.xyz = (prev.xyz * IN.baseLight);
    #line 612
    color.w = prev.w;
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 616
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in lowp vec4 xlv_COLOR;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_COLOR);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD0);
    xlt_IN.texcoordZY = vec2(xlv_TEXCOORD1);
    xlt_IN.texcoordXZ = vec2(xlv_TEXCOORD2);
    xlt_IN.texcoordXY = vec2(xlv_TEXCOORD3);
    xlt_IN.camPos = vec3(xlv_TEXCOORD4);
    xlt_IN.baseLight = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform vec3 _MaxTrans;
uniform float _MaxScale;
uniform float _Rotation;
uniform float _MinLight;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 unity_MatrixV;


uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 XYv_1;
  vec4 XZv_2;
  vec4 ZYv_3;
  vec3 detail_pos_4;
  float localScale_5;
  vec4 localOrigin_6;
  vec4 tmpvar_7;
  vec3 tmpvar_8;
  vec4 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_6.xyz = (((2.0 * tmpvar_10) - 1.0) * _MaxTrans);
  localOrigin_6.w = 1.0;
  localScale_5 = ((tmpvar_10.x * (_MaxScale - 1.0)) + 1.0);
  vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * localOrigin_6);
  vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = gl_Normal;
  tmpvar_8 = clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (normalize((_Object2World * tmpvar_12).xyz), normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0);
  vec4 tmpvar_13;
  tmpvar_13 = -((_MainRotation * tmpvar_11));
  detail_pos_4 = (_DetailRotation * tmpvar_13).xyz;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13.xyz);
  vec2 uv_15;
  float r_16;
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_14.x)))) {
    float y_over_x_17;
    y_over_x_17 = (tmpvar_14.x / tmpvar_14.z);
    float s_18;
    float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_14.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(tmpvar_14.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_16));
  uv_15.y = (0.31831 * (1.5708 - (sign(tmpvar_14.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_14.y))) * (1.5708 + (abs(tmpvar_14.y) * (-0.214602 + (abs(tmpvar_14.y) * (0.0865667 + (abs(tmpvar_14.y) * -0.0310296)))))))))));
  vec4 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(normalize(detail_pos_4));
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  uv_20.xy = (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale);
  uv_20.zw = vec2(0.0, 0.0);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DLod (_MainTex, uv_15, 0.0) * texture2DLod (_DetailTex, uv_20.xy, 0.0));
  tmpvar_7.xyz = tmpvar_24.xyz;
  vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = _WorldSpaceCameraPos;
  float tmpvar_26;
  vec4 p_27;
  p_27 = (tmpvar_11 - tmpvar_25);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  tmpvar_7.w = (tmpvar_24.w * (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0)));
  vec3 tmpvar_28;
  tmpvar_28.yz = vec2(0.0, 0.0);
  tmpvar_28.x = fract(_Rotation);
  vec3 x_29;
  x_29 = (tmpvar_28 + tmpvar_10);
  vec3 trans_30;
  trans_30 = localOrigin_6.xyz;
  float tmpvar_31;
  tmpvar_31 = (x_29.x * 6.28319);
  float tmpvar_32;
  tmpvar_32 = (x_29.y * 6.28319);
  float tmpvar_33;
  tmpvar_33 = (x_29.z * 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (sin(tmpvar_32) * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (cos(tmpvar_32) * tmpvar_34);
  float tmpvar_37;
  tmpvar_37 = sqrt((2.0 - tmpvar_33));
  float tmpvar_38;
  tmpvar_38 = sin(tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = cos(tmpvar_31);
  float tmpvar_40;
  tmpvar_40 = ((tmpvar_35 * tmpvar_39) - (tmpvar_36 * tmpvar_38));
  float tmpvar_41;
  tmpvar_41 = ((tmpvar_35 * tmpvar_38) + (tmpvar_36 * tmpvar_39));
  mat4 tmpvar_42;
  tmpvar_42[0].x = (localScale_5 * ((tmpvar_35 * tmpvar_40) - tmpvar_39));
  tmpvar_42[0].y = ((tmpvar_35 * tmpvar_41) - tmpvar_38);
  tmpvar_42[0].z = (tmpvar_35 * tmpvar_37);
  tmpvar_42[0].w = 0.0;
  tmpvar_42[1].x = ((tmpvar_36 * tmpvar_40) + tmpvar_38);
  tmpvar_42[1].y = (localScale_5 * ((tmpvar_36 * tmpvar_41) - tmpvar_39));
  tmpvar_42[1].z = (tmpvar_36 * tmpvar_37);
  tmpvar_42[1].w = 0.0;
  tmpvar_42[2].x = (tmpvar_37 * tmpvar_40);
  tmpvar_42[2].y = (tmpvar_37 * tmpvar_41);
  tmpvar_42[2].z = (localScale_5 * (1.0 - tmpvar_33));
  tmpvar_42[2].w = 0.0;
  tmpvar_42[3].x = trans_30.x;
  tmpvar_42[3].y = trans_30.y;
  tmpvar_42[3].z = trans_30.z;
  tmpvar_42[3].w = 1.0;
  mat4 tmpvar_43;
  tmpvar_43 = (((unity_MatrixV * _Object2World) * tmpvar_42));
  vec4 v_44;
  v_44.x = tmpvar_43[0].z;
  v_44.y = tmpvar_43[1].z;
  v_44.z = tmpvar_43[2].z;
  v_44.w = tmpvar_43[3].z;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(v_44.xyz);
  vec4 tmpvar_46;
  tmpvar_46 = (gl_ModelViewMatrix * localOrigin_6);
  vec4 tmpvar_47;
  tmpvar_47.xyz = (gl_Vertex.xyz * localScale_5);
  tmpvar_47.w = gl_Vertex.w;
  vec4 tmpvar_48;
  tmpvar_48 = (gl_ProjectionMatrix * (tmpvar_46 + tmpvar_47));
  vec2 tmpvar_49;
  tmpvar_49 = ((2.0 * gl_MultiTexCoord0.xy) - 1.0);
  vec4 tmpvar_50;
  tmpvar_50.z = 0.0;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = tmpvar_49.y;
  tmpvar_50.w = gl_Vertex.w;
  ZYv_3.xyw = tmpvar_50.zyw;
  XZv_2.yzw = tmpvar_50.zyw;
  XYv_1.yzw = tmpvar_50.yzw;
  ZYv_3.z = (tmpvar_49.x * sign(-(tmpvar_45.x)));
  XZv_2.x = (tmpvar_49.x * sign(-(tmpvar_45.y)));
  XYv_1.x = (tmpvar_49.x * sign(tmpvar_45.z));
  ZYv_3.x = ((sign(-(tmpvar_45.x)) * sign(ZYv_3.z)) * tmpvar_45.z);
  XZv_2.y = ((sign(-(tmpvar_45.y)) * sign(XZv_2.x)) * tmpvar_45.x);
  XYv_1.z = ((sign(-(tmpvar_45.z)) * sign(XYv_1.x)) * tmpvar_45.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_45.x)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_45.y)) * sign(tmpvar_49.y)) * tmpvar_45.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_45.z)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  vec4 o_51;
  vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_48 * 0.5);
  vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_48.zw;
  tmpvar_9.xyw = o_51.xyw;
  tmpvar_9.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_48;
  xlv_COLOR = tmpvar_7;
  xlv_TEXCOORD0 = abs(tmpvar_45);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * ZYv_3).xy - tmpvar_46.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XZv_2).xy - tmpvar_46.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XYv_1).xy - tmpvar_46.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_6).xyz));
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform vec4 _ZBufferParams;
void main ()
{
  vec4 color_1;
  vec4 tmpvar_2;
  tmpvar_2 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (texture2D (_LeftTex, xlv_TEXCOORD1), texture2D (_TopTex, xlv_TEXCOORD2), xlv_TEXCOORD0.yyyy), texture2D (_FrontTex, xlv_TEXCOORD3), xlv_TEXCOORD0.zzzz));
  color_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD5);
  color_1.w = (tmpvar_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 28 [glstate_lightmodel_ambient]
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_projection]
Vector 29 [_WorldSpaceCameraPos]
Vector 30 [_ProjectionParams]
Vector 31 [_ScreenParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 33 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [unity_MatrixV]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
Vector 34 [_LightColor0]
Float 35 [_DetailScale]
Float 36 [_DistFade]
Float 37 [_DistFadeVert]
Float 38 [_MinLight]
Float 39 [_Rotation]
Float 40 [_MaxScale]
Vector 41 [_MaxTrans]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"vs_3_0
; 355 ALU, 4 TEX
dcl_position o0
dcl_color0 o1
dcl_texcoord0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord7 o9
dcl_texcoord8 o10
def c42, 0.15915491, 0.50000000, 6.28318501, -3.14159298
def c43, 123.54530334, 2.00000000, -1.00000000, 1.00000000
def c44, 0.00000000, -0.01872930, 0.07426100, -0.21211439
def c45, 1.57072902, 3.14159298, 0.31830987, -0.12123910
def c46, -0.01348047, 0.05747731, 0.19563590, -0.33299461
def c47, 0.99999559, 1.57079601, 0.15915494, 0.50000000
def c48, 6.28318548, 0.00000000, 1.00000000, -0.01000214
def c49, 0.60000002, 0.50000000, 4.03944778, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_2d s0
dcl_2d s1
mad r10.xy, v2, c43.y, c43.z
mov r1.w, c11
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
dp4 r0.z, r1, c18
dp4 r0.x, r1, c16
dp4 r0.y, r1, c17
frc r1.xyz, -r0
add r0.xyz, -r0, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mad r0.x, r1, c42, c42.y
frc r0.x, r0
mad r1.x, r0, c42.z, c42.w
sincos r0.xy, r1.x
mad r0.x, r1.z, c42, c42.y
mov r1.x, r0.y
frc r0.y, r0.x
mad r0.x, r1.y, c42, c42.y
mad r1.y, r0, c42.z, c42.w
frc r1.x, r0
sincos r0.xy, r1.y
mad r0.x, r1, c42.z, c42.w
sincos r1.xy, r0.x
mov r1.z, r0.y
mul r0.xyz, r1, c43.x
frc r0.xyz, r0
abs r6.xyz, r0
mad r0.xyz, r6, c43.y, c43.z
mul r0.xyz, r0, c41
mov r0.w, c43
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
dp4 r2.w, r0, c11
dp4 r1.z, r2, c18
dp4 r1.x, r2, c16
dp4 r1.y, r2, c17
dp4 r1.w, r2, c19
add r7.xyz, -r2, c29
dp3 r2.x, r7, r7
rsq r8.w, r2.x
dp4 r3.z, -r1, c22
dp4 r3.x, -r1, c20
dp4 r3.y, -r1, c21
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mul r3.xyz, r1.w, r3
abs r3.xyz, r3
sge r1.w, r3.z, r3.x
add r4.xyz, r3.zxyw, -r3
mad r4.xyz, r1.w, r4, r3
sge r2.w, r4.x, r3.y
add r4.xyz, r4, -r3.yxzw
mad r3.xyz, r2.w, r4, r3.yxzw
dp3 r1.w, -r1, -r1
rsq r1.w, r1.w
mul r1.xyz, r1.w, -r1
abs r2.w, r1.x
abs r1.w, r1.z
mul r3.zw, r3.xyzy, c42.y
max r3.y, r1.w, r2.w
abs r4.y, r3.x
min r3.x, r1.w, r2.w
slt r1.w, r1, r2
rcp r3.y, r3.y
mul r4.x, r3, r3.y
rcp r3.x, r4.y
mul r3.xy, r3.zwzw, r3.x
mul r4.y, r4.x, r4.x
mad r3.z, r4.y, c46.x, c46.y
mad r3.z, r3, r4.y, c45.w
mad r2.w, r3.z, r4.y, c46.z
mad r2.w, r2, r4.y, c46
mad r2.w, r2, r4.y, c47.x
mul r2.w, r2, r4.x
max r1.w, -r1, r1
slt r1.w, c44.x, r1
add r3.z, -r1.w, c43.w
mul r3.z, r2.w, r3
add r2.w, -r2, c47.y
mad r1.w, r1, r2, r3.z
slt r1.z, r1, c44.x
max r1.z, -r1, r1
slt r1.z, c44.x, r1
slt r1.x, r1, c44
max r1.x, -r1, r1
add r2.w, -r1, c45.y
add r3.z, -r1, c43.w
mul r1.w, r1, r3.z
slt r1.x, c44, r1
mad r1.z, r1, r2.w, r1.w
add r3.z, -r1.x, c43.w
mul r1.w, r1.z, r3.z
mad r1.x, r1, -r1.z, r1.w
abs r1.z, r1.y
add r2.w, -r1.z, c43
mad r1.w, r1.z, c44.y, c44.z
mad r1.w, r1, r1.z, c44
rsq r2.w, r2.w
rcp r2.w, r2.w
mad r1.z, r1.w, r1, c45.x
mul r1.z, r1, r2.w
slt r1.y, r1, c44.x
mul r1.w, r1.y, r1.z
mad r1.z, -r1.w, c43.y, r1
mad r1.y, r1, c45, r1.z
mul r3.xy, r3, c35.x
mov r3.z, c44.x
texldl r3, r3.xyzz, s1
mad r1.x, r1, c47.z, c47.w
mov r4.yz, c44.x
frc r4.x, c39
add r4.xyz, r6, r4
mul r1.w, r4.x, c48.x
mad r1.z, r1.w, c42.x, c42.y
frc r2.w, r1.z
mad r4.x, r2.w, c42.z, c42.w
sincos r5.xy, r4.x
mul r2.w, r4.y, c48.x
mad r2.w, r2, c42.x, c42.y
frc r4.x, r2.w
mul r2.w, r4.z, c43.y
mad r5.z, r4.x, c42, c42.w
sincos r4.xy, r5.z
rsq r5.w, r2.w
rcp r4.z, r5.w
mul r4.w, r4.x, r4.z
mul r5.z, r4.y, r4
mul r4.x, r4.w, r5
mad r4.y, r5.z, r5, r4.x
mov r5.w, c14.x
mul r1.y, r1, c45.z
mov r1.z, c44.x
texldl r1, r1.xyzz, s0
mul r3, r1, r3
add r1.z, -r2.w, c43.y
mov o1.xyz, r3
mov r1.y, c40.x
add r1.y, c43.z, r1
mad r1.x, r5.z, r4.y, -r5.y
mad r7.w, r6.x, r1.y, c43
mad r1.w, r4, r4.y, -r5.x
mul r1.y, r7.w, r1.w
rsq r1.z, r1.z
rcp r1.w, r1.z
mul r1.z, r1.w, r4.y
mov r4.x, c14.y
mul r4.xyz, c9, r4.x
mad r4.xyz, c8, r5.w, r4
mov r5.w, c14.z
mad r4.xyz, c10, r5.w, r4
mov r5.w, c14
mad r6.xyz, c11, r5.w, r4
mul r5.w, r4, r5.y
mad r2.z, r5, r5.x, -r5.w
mad r2.y, r5.z, r2.z, -r5.x
mul r2.x, r7.w, r2.y
mad r2.y, r4.w, r2.z, r5
mul r5.x, r5.z, r1.w
add r2.w, -r2, c43
mul r5.y, r1.w, r4.w
mul r2.z, r1.w, r2
mul r4.xyz, r6.y, r1
rcp r5.w, r8.w
mul r5.z, r7.w, r2.w
mad r4.xyz, r6.x, r2, r4
mad r4.xyz, r6.z, r5, r4
mul r1.w, -r5, c37.x
add_sat r2.w, r1, c43
mul_sat r1.w, r5, c36.x
mul r1.w, r1, r2
dp3 r4.w, r4, r4
rsq r2.w, r4.w
mul r8.xyz, r2.w, r4
mul o1.w, r3, r1
slt r2.w, -r8.x, r8.x
slt r1.w, r8.x, -r8.x
sub r1.w, r1, r2
slt r3.x, r10.y, -r10.y
slt r2.w, -r10.y, r10.y
sub r10.z, r2.w, r3.x
mul r2.w, r10.x, r1
mul r3.z, r1.w, r10
slt r3.y, r2.w, -r2.w
slt r3.x, -r2.w, r2.w
sub r3.x, r3, r3.y
mov r9.z, r2.w
mov r2.w, r0.x
mul r1.w, r3.x, r1
mul r3.y, r8, r3.z
mad r9.x, r8.z, r1.w, r3.y
mov r1.w, c12.y
mul r3, c9, r1.w
mov r1.w, c12.x
mad r3, c8, r1.w, r3
mov r1.w, c12.z
mad r3, c10, r1.w, r3
mov r1.w, c12
mad r6, c11, r1.w, r3
mov r1.w, r0.y
mul r4, r1, r6.y
mov r3.x, c13.y
mov r5.w, c13.x
mul r3, c9, r3.x
mad r3, c8, r5.w, r3
mov r5.w, c13.z
mad r3, c10, r5.w, r3
mov r5.w, c13
mad r3, c11, r5.w, r3
mul r1, r3.y, r1
mov r5.w, r0.z
mad r1, r3.x, r2, r1
mad r1, r3.z, r5, r1
mad r1, r3.w, c48.yyyz, r1
mad r4, r2, r6.x, r4
mad r4, r5, r6.z, r4
mad r2, r6.w, c48.yyyz, r4
dp4 r5.y, r0, c1
dp4 r5.x, r0, c0
mov r4.w, v0
mov r4.y, r10
mov r9.yw, r4
dp4 r3.y, r1, r9
dp4 r3.x, r9, r2
slt r3.w, -r8.y, r8.y
slt r3.z, r8.y, -r8.y
sub r4.x, r3.z, r3.w
add r3.zw, -r5.xyxy, r3.xyxy
mul r3.x, r10, r4
mad o3.xy, r3.zwzw, c49.x, c49.y
slt r3.z, r3.x, -r3.x
slt r3.y, -r3.x, r3.x
sub r3.y, r3, r3.z
mul r3.z, r10, r4.x
mul r3.y, r3, r4.x
mul r4.x, r8.z, r3.z
mad r3.y, r8.x, r3, r4.x
mov r3.zw, r4.xyyw
dp4 r5.w, r1, r3
dp4 r5.z, r2, r3
add r3.xy, -r5, r5.zwzw
slt r3.w, -r8.z, r8.z
slt r3.z, r8, -r8
sub r4.x, r3.w, r3.z
sub r3.z, r3, r3.w
mul r4.x, r10, r4
mul r5.z, r10, r3
dp4 r5.w, r0, c3
slt r4.z, r4.x, -r4.x
slt r3.w, -r4.x, r4.x
sub r3.w, r3, r4.z
mul r4.z, r8.y, r5
dp4 r5.z, r0, c2
mul r3.z, r3, r3.w
mad r4.z, r8.x, r3, r4
dp4 r1.y, r1, r4
dp4 r1.x, r2, r4
mad o4.xy, r3, c49.x, c49.y
add r3.xy, -r5, r1
mov r0.w, v0
mul r0.xyz, v0, r7.w
add r0, r5, r0
dp4 r2.w, r0, c7
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
mov r1.w, r2
dp4 r1.z, r0, c6
mul r2.xyz, r1.xyww, c42.y
mov o0, r1
mul r2.y, r2, c30.x
mov r1.xyz, v1
mov r1.w, c44.x
dp4 r0.z, r1, c10
dp4 r0.y, r1, c9
dp4 r0.x, r1, c8
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c32, c32
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c32
dp3_sat r0.x, r0, r1
add r0.x, r0, c48.w
mul r0.y, r0.x, c34.w
mul_sat r0.w, r0.y, c49.z
mov r0.x, c38
add r0.xyz, c34, r0.x
mad_sat o7.xyz, r0, r0.w, c28
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o8.z, r0, c26
dp4 o8.y, r0, c25
dp4 o8.x, r0, c24
dp4 r0.w, v0, c2
mad o5.xy, r3, c49.x, c49.y
mad o10.xy, r2.z, c31.zwzw, r2
abs o2.xyz, r8
mov o10.w, r2
mul o6.xyz, r8.w, r7
add o9.xyz, r0, -c33
mov o10.z, -r0.w
"
}

SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
ConstBuffer "$Globals" 320 // 316 used size, 16 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
Vector 208 [_LightColor0] 4
Float 240 [_DetailScale]
Float 272 [_DistFade]
Float 276 [_DistFadeVert]
Float 284 [_MinLight]
Float 292 [_Rotation]
Float 296 [_MaxScale]
Vector 304 [_MaxTrans] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityPerFrame" 208 // 144 used size, 4 vars
Matrix 0 [glstate_matrix_projection] 4
Vector 64 [glstate_lightmodel_ambient] 4
Matrix 80 [unity_MatrixV] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityPerFrame" 4
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 254 instructions, 12 temp regs, 0 temp arrays:
// ALU 217 float, 8 int, 6 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmfgejmepbhogipblgelkknoeoijakeahabaaaaaaeaceaaaaadaaaaaa
cmaaaaaanmaaaaaabaacaaaaejfdeheokiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaijaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaipaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaajgaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaajoaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaafaepfdejfeejepeoaaedepem
epfcaaeoepfcenebemaafeebeoehefeofeaafeeffiedepepfceeaaklepfdeheo
cmabaaaaalaaaaaaaiaaaaaabaabaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaabmabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaccabaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaccabaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaaccabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
amadaaaaccabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaaccabaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaccabaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaccabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaccabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaiaaaaccabaaaa
aiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
edepemepfcaafeeffiedepepfceeaaklfdeieefcciccaaaaeaaaabaaikaiaaaa
fjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaa
fjaaaaaeegiocaaaaeaaaaaaajaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
pccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaa
gfaaaaadmccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaad
hccabaaaaiaaaaaagfaaaaadpccabaaaajaaaaaagiaaaaacamaaaaaadiaaaaaj
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaafgifcaaaadaaaaaaapaaaaaa
dcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaadaaaaaa
apaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
adaaaaaakgikcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaaeaaaaaapgipcaaaadaaaaaaapaaaaaaegacbaaa
aaaaaaaaebaaaaaghcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaenaaaaaghcaabaaaaaaaaaaaaanaaaaaegacbaaaaaaaaaaa
diaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaadcbhphecdcbhphec
dcbhphecaaaaaaaabkaaaaafhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaai
icaabaaaaaaaaaaackiacaaaaaaaaaaabcaaaaaaabeaaaaaaaaaialpdcaaaaaj
icaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaf
icaabaaaabaaaaaadkbabaaaaaaaaaaadcaaaaaphcaabaaaacaaaaaaegacbaaa
aaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaadiaaaaaipcaabaaaadaaaaaafgafbaaaacaaaaaa
egiocaaaadaaaaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaadaaaaaa
aeaaaaaaagaabaaaacaaaaaaegaobaaaadaaaaaadcaaaaakpcaabaaaadaaaaaa
egiocaaaadaaaaaaagaaaaaakgakbaaaacaaaaaaegaobaaaadaaaaaaaaaaaaai
pcaabaaaadaaaaaaegaobaaaadaaaaaaegiocaaaadaaaaaaahaaaaaaaaaaaaah
pcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaadaaaaaadiaaaaaipcaabaaa
aeaaaaaafgafbaaaabaaaaaaegiocaaaaeaaaaaaabaaaaaadcaaaaakpcaabaaa
aeaaaaaaegiocaaaaeaaaaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaeaaaaaa
dcaaaaakpcaabaaaaeaaaaaaegiocaaaaeaaaaaaacaaaaaakgakbaaaabaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaeaaaaaaadaaaaaa
pgapbaaaabaaaaaaegaobaaaaeaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaaeaaaaaafgafbaaaacaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaamaaaaaaagaabaaa
acaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaa
aoaaaaaakgakbaaaacaaaaaaegaobaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaaaaeaaaaaaegiocaaaadaaaaaaapaaaaaadiaaaaaipcaabaaaafaaaaaa
fgafbaaaaeaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaafaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaeaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaafaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaeaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aeaaaaaaegaobaaaafaaaaaadiaaaaajhcaabaaaagaaaaaafgafbaiaebaaaaaa
afaaaaaabgigcaaaaaaaaaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaa
aaaaaaaaafaaaaaaagaabaiaebaaaaaaafaaaaaaegacbaaaagaaaaaadcaaaaal
hcaabaaaagaaaaaabgigcaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaafaaaaaa
egacbaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaaiaaaaaa
pgapbaiaebaaaaaaafaaaaaaegacbaaaagaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaagaaaaaaegacbaaaagaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahhcaabaaaagaaaaaakgakbaaaabaaaaaaegacbaaaagaaaaaa
dgaaaaagecaabaaaahaaaaaackaabaiambaaaaaaagaaaaaabnaaaaajecaabaaa
abaaaaaackaabaiaibaaaaaaagaaaaaabkaabaiaibaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaa
aiaaaaaafgaibaiambaaaaaaagaaaaaakgabbaiaibaaaaaaagaaaaaadiaaaaah
lcaabaaaahaaaaaakgakbaaaabaaaaaajganbaaaaiaaaaaadcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaaiaaaaaabkaabaiaibaaaaaaagaaaaaa
bnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaagaaaaaa
abaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
hcaabaaaaiaaaaaabgagbaiaibaaaaaaagaaaaaaegacbaaaahaaaaaadgaaaaag
fcaabaaaahaaaaaafgaebaiambaaaaaaagaaaaaaaaaaaaahhcaabaaaahaaaaaa
cgalbaaaahaaaaaaegacbaaaaiaaaaaadcaaaaakhcaabaaaagaaaaaakgakbaaa
abaaaaaaegacbaaaahaaaaaaegacbaiaibaaaaaaagaaaaaadiaaaaakmcaabaaa
adaaaaaakgagbaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
aoaaaaahmcaabaaaadaaaaaakgaobaaaadaaaaaaagaabaaaagaaaaaadiaaaaai
mcaabaaaadaaaaaakgaobaaaadaaaaaaagiacaaaaaaaaaaaapaaaaaaeiaaaaal
pcaabaaaagaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaajecaabaaaabaaaaaaegacbaiaebaaaaaaafaaaaaa
egacbaiaebaaaaaaafaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaaihcaabaaaafaaaaaakgakbaaaabaaaaaaigabbaiaebaaaaaaafaaaaaa
deaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaa
afaaaaaaaoaaaaakecaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpckaabaaaabaaaaaaddaaaaajicaabaaaacaaaaaabkaabaiaibaaaaaa
afaaaaaaakaabaiaibaaaaaaafaaaaaadiaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaackaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaa
ckaabaaaadaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaadaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
adaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaaadaaaaaa
ckaabaaaadaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
adaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaabaaaaah
ecaabaaaadaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadbaaaaai
mcaabaaaadaaaaaafgajbaaaafaaaaaafgajbaiaebaaaaaaafaaaaaaabaaaaah
icaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaanlapejmaaaaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaaddaaaaahicaabaaaacaaaaaa
bkaabaaaafaaaaaaakaabaaaafaaaaaadbaaaaaiicaabaaaacaaaaaadkaabaaa
acaaaaaadkaabaiaebaaaaaaacaaaaaadeaaaaahecaabaaaadaaaaaabkaabaaa
afaaaaaaakaabaaaafaaaaaabnaaaaaiecaabaaaadaaaaaackaabaaaadaaaaaa
ckaabaiaebaaaaaaadaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
ckaabaaaadaaaaaadhaaaaakecaabaaaabaaaaaadkaabaaaacaaaaaackaabaia
ebaaaaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaafaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakecaabaaaabaaaaaa
ckaabaiaibaaaaaaafaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaibaaaaaa
afaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaacaaaaaackaabaiambaaaaaa
afaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaa
diaaaaahecaabaaaadaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaaj
ecaabaaaadaaaaaackaabaaaadaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahecaabaaaadaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaa
diaaaaahccaabaaaafaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoeiaaaaal
pcaabaaaafaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
abeaaaaaaaaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaagaaaaaaegaobaaa
afaaaaaaaaaaaaajhcaabaaaagaaaaaaegacbaaaaeaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhcaabaaaaeaaaaaaegacbaiaebaaaaaaaeaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaagaaaaaa
egacbaaaagaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaai
icaabaaaacaaaaaackaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaadccaaaal
ecaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaiadpdgcaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahiccabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaafaaaaaadgaaaaafhccabaaaabaaaaaa
egacbaaaafaaaaaabkaaaaagbcaabaaaafaaaaaabkiacaaaaaaaaaaabcaaaaaa
dgaaaaaigcaabaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaafaaaaaaaaaaaaah
ecaabaaaabaaaaaackaabaaaaaaaaaaackaabaaaaaaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
aceaaaaanlapmjeanlapmjeaaaaaaaaaaaaaaaaadcaaaabamcaabaaaadaaaaaa
kgakbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaea
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaiadpenaaaaahbcaabaaaafaaaaaa
bcaabaaaagaaaaaabkaabaaaaaaaaaaaenaaaaahbcaabaaaaaaaaaaabcaabaaa
ahaaaaaaakaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaackaabaaaabaaaaaa
akaabaaaagaaaaaadiaaaaahecaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaa
afaaaaaadiaaaaahecaabaaaabaaaaaaakaabaaaahaaaaaabkaabaaaaaaaaaaa
dcaaaaajecaabaaaabaaaaaackaabaaaaaaaaaaaakaabaaaaaaaaaaackaabaaa
abaaaaaadcaaaaakicaabaaaacaaaaaabkaabaaaaaaaaaaackaabaaaabaaaaaa
akaabaiaebaaaaaaahaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaacaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaadaaaaaaanaaaaaa
egiccaaaaeaaaaaaagaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaa
afaaaaaaagiacaaaadaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaa
afaaaaaaegiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaanaaaaaaegacbaaa
afaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaa
adaaaaaaanaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaagaaaaaapgapbaaa
acaaaaaaegacbaaaafaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadcaaaaakicaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaa
ahaaaaaadkaabaiaebaaaaaaacaaaaaadcaaaaajicaabaaaaeaaaaaabkaabaaa
aaaaaaaadkaabaaaacaaaaaaakaabaaaaaaaaaaadiaaaaajocaabaaaahaaaaaa
fgifcaaaadaaaaaaamaaaaaaagijcaaaaeaaaaaaagaaaaaadcaaaaalocaabaaa
ahaaaaaaagijcaaaaeaaaaaaafaaaaaaagiacaaaadaaaaaaamaaaaaafgaobaaa
ahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaaahaaaaaakgikcaaa
adaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaa
aeaaaaaaaiaaaaaapgipcaaaadaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaaj
hcaabaaaagaaaaaajgahbaaaahaaaaaapgapbaaaaeaaaaaaegacbaaaagaaaaaa
elaaaaafecaabaaaadaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaadaaaaaa
dkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaadaaaaaadiaaaaajhcaabaaaaiaaaaaafgifcaaaadaaaaaa
aoaaaaaaegiccaaaaeaaaaaaagaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaa
aeaaaaaaafaaaaaaagiacaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaal
hcaabaaaaiaaaaaaegiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaaoaaaaaa
egacbaaaaiaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaaaiaaaaaa
pgipcaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaajhcaabaaaagaaaaaa
egacbaaaaiaaaaaafgafbaaaaaaaaaaaegacbaaaagaaaaaadgaaaaafccaabaaa
ajaaaaaackaabaaaagaaaaaadcaaaaakccaabaaaaaaaaaaackaabaaaaaaaaaaa
dkaabaaaacaaaaaaakaabaiaebaaaaaaahaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckaabaaaaaaaaaaackaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaadiaaaaah
ecaabaaaaaaaaaaackaabaaaaaaaaaaackaabaaaadaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaahhcaabaaaakaaaaaakgakbaaa
abaaaaaaegacbaaaafaaaaaadcaaaaajhcaabaaaakaaaaaajgahbaaaahaaaaaa
pgapbaaaacaaaaaaegacbaaaakaaaaaadcaaaaajhcaabaaaakaaaaaaegacbaaa
aiaaaaaapgapbaaaadaaaaaaegacbaaaakaaaaaadiaaaaahhcaabaaaalaaaaaa
agaabaaaaaaaaaaaegacbaaaafaaaaaadiaaaaahkcaabaaaacaaaaaafgafbaaa
acaaaaaaagaebaaaafaaaaaadcaaaaajdcaabaaaacaaaaaajgafbaaaahaaaaaa
agaabaaaacaaaaaangafbaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaa
aiaaaaaakgakbaaaacaaaaaaegaabaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaa
bkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajlcaabaaaaaaaaaaajganbaaa
ahaaaaaaagaabaaaaaaaaaaaegaibaaaalaaaaaadcaaaaajhcaabaaaaaaaaaaa
egacbaaaaiaaaaaakgakbaaaaaaaaaaaegadbaaaaaaaaaaadgaaaaafbcaabaaa
ajaaaaaackaabaaaaaaaaaaadgaaaaafecaabaaaajaaaaaackaabaaaakaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaajaaaaaaegacbaaaajaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaajaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaibaaaaaa
afaaaaaadiaaaaajmcaabaaaaaaaaaaafgifcaaaadaaaaaaapaaaaaaagiecaaa
aeaaaaaaagaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaafaaaaaa
agiacaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaaaaaaaaaa
agiecaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaa
dcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaa
apaaaaaakgaobaaaaaaaaaaaaaaaaaahmcaabaaaaaaaaaaakgaobaaaaaaaaaaa
agaebaaaacaaaaaadbaaaaalhcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaegacbaiaebaaaaaaafaaaaaadbaaaaalhcaabaaaahaaaaaa
egacbaiaebaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
boaaaaaihcaabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaahaaaaaa
dcaaaaapmcaabaaaadaaaaaaagbebaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaeaaaaaaaeaaceaaaaaaaaaaaaaaaaaaaaaaaaaialpaaaaialpdbaaaaah
ecaabaaaabaaaaaaabeaaaaaaaaaaaaadkaabaaaadaaaaaadbaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaaabaaaaaa
ckaabaiaebaaaaaaabaaaaaadkaabaaaacaaaaaacgaaaaaiaanaaaaahcaabaaa
ahaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaaclaaaaafhcaabaaaahaaaaaa
egacbaaaahaaaaaadiaaaaahhcaabaaaahaaaaaajgafbaaaafaaaaaaegacbaaa
ahaaaaaaclaaaaafkcaabaaaafaaaaaaagaebaaaacaaaaaadiaaaaahkcaabaaa
afaaaaaakgakbaaaadaaaaaafganbaaaafaaaaaadbaaaaakmcaabaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafganbaaaafaaaaaadbaaaaak
dcaabaaaaiaaaaaangafbaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaboaaaaaimcaabaaaagaaaaaakgaobaiaebaaaaaaagaaaaaaagaebaaa
aiaaaaaacgaaaaaiaanaaaaadcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaa
agaaaaaaclaaaaafdcaabaaaacaaaaaaegaabaaaacaaaaaadcaaaaajdcaabaaa
acaaaaaaegaabaaaacaaaaaacgakbaaaafaaaaaaegaabaaaahaaaaaadiaaaaah
kcaabaaaacaaaaaafgafbaaaacaaaaaaagaebaaaagaaaaaadiaaaaahdcaabaaa
agaaaaaapgapbaaaadaaaaaaegaabaaaagaaaaaadcaaaaajmcaabaaaagaaaaaa
agaebaaaaaaaaaaaagaabaaaacaaaaaaagaebaaaagaaaaaadcaaaaajmcaabaaa
agaaaaaaagaebaaaakaaaaaafgafbaaaafaaaaaakgaobaaaagaaaaaadcaaaaaj
dcaabaaaacaaaaaaegaabaaaaaaaaaaapgapbaaaafaaaaaangafbaaaacaaaaaa
dcaaaaajdcaabaaaacaaaaaaegaabaaaakaaaaaapgapbaaaadaaaaaaegaabaaa
acaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaa
egaabaaaacaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaa
egaabaaaacaaaaaadcaaaaapmccabaaaadaaaaaaagaebaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaaaajkjjbjdpjkjjbjdpaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpdcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaa
ogakbaaaagaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaa
egaabaaaacaaaaaadcaaaaapdccabaaaadaaaaaaegaabaaaacaaaaaaaceaaaaa
jkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaadbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaackaabaaaafaaaaaa
dbaaaaahbcaabaaaacaaaaaackaabaaaafaaaaaaabeaaaaaaaaaaaaaboaaaaai
ecaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaacaaaaaaclaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaackaabaaaadaaaaaadbaaaaahbcaabaaaacaaaaaaabeaaaaaaaaaaaaa
ckaabaaaabaaaaaadbaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaa
aaaaaaaadcaaaaajdcaabaaaaaaaaaaaegaabaaaaaaaaaaakgakbaaaabaaaaaa
egaabaaaagaaaaaaboaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaa
bkaabaaaacaaaaaacgaaaaaiaanaaaaaecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaaaacaaaaaaclaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaackaabaaaahaaaaaa
dcaaaaajdcaabaaaaaaaaaaaegaabaaaakaaaaaakgakbaaaabaaaaaaegaabaaa
aaaaaaaadcaaaaajdcaabaaaaaaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaa
egaabaaaaaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaiaebaaaaaaadaaaaaa
egaabaaaaaaaaaaadcaaaaapdccabaaaaeaaaaaaegaabaaaaaaaaaaaaceaaaaa
jkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
agaabaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaacaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaacaaaaaa
aaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaaaaaaaaa
agijcaaaaaaaaaaaanaaaaaapgipcaaaaaaaaaaabbaaaaaadccaaaakhccabaaa
agaaaaaajgahbaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaaeaaaaaaaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaalaaaaaakgakbaaaaaaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaamaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaajhccabaaaaiaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaadiaaaaakhcaabaaaaaaaaaaa
egadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaadgaaaaaf
iccabaaaajaaaaaadkaabaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
aaaaaaaamgaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 407
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 508
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 499
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 406
uniform highp mat4 _LightMatrix0;
#line 417
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 430
#line 438
#line 452
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 485
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 489
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 493
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 497
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 523
#line 539
#line 596
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 380
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 382
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 355
mediump vec4 GetShereDetailMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 357
    highp vec3 sphereVectNorm = normalize(sphereVect);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 361
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    highp vec4 uv;
    uv.xy = (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale);
    #line 365
    uv.zw = vec2( 0.0, 0.0);
    return xll_tex2Dlod( texSampler, uv);
}
#line 330
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 332
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 336
    return uv;
}
#line 338
mediump vec4 GetSphereMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 340
    highp vec4 uv;
    highp vec3 sphereVectNorm = normalize(sphereVect);
    uv.xy = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    uv.zw = vec2( 0.0, 0.0);
    #line 344
    mediump vec4 tex = xll_tex2Dlod( texSampler, uv);
    return tex;
}
#line 317
highp vec3 hash( in highp vec3 val ) {
    #line 319
    return fract((sin(val) * 123.545));
}
#line 523
highp mat4 rand_rotation( in highp vec3 x, in highp float scale, in highp vec3 trans ) {
    highp float theta = (x.x * 6.28319);
    highp float phi = (x.y * 6.28319);
    #line 527
    highp float z = (x.z * 2.0);
    highp float r = sqrt(z);
    highp float Vx = (sin(phi) * r);
    highp float Vy = (cos(phi) * r);
    #line 531
    highp float Vz = sqrt((2.0 - z));
    highp float st = sin(theta);
    highp float ct = cos(theta);
    highp float Sx = ((Vx * ct) - (Vy * st));
    #line 535
    highp float Sy = ((Vx * st) + (Vy * ct));
    highp mat4 M = mat4( (scale * ((Vx * Sx) - ct)), ((Vx * Sy) - st), (Vx * Vz), 0.0, ((Vy * Sx) + st), (scale * ((Vy * Sy) - ct)), (Vy * Vz), 0.0, (Vz * Sx), (Vz * Sy), (scale * (1.0 - z)), 0.0, trans.x, trans.y, trans.z, 1.0);
    return M;
}
#line 539
v2f vert( in appdata_t v ) {
    v2f o;
    highp vec4 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0));
    #line 543
    highp vec4 planet_pos = (-(_MainRotation * origin));
    highp vec3 hashVect = abs(hash( normalize(floor(planet_pos.xyz))));
    highp vec4 localOrigin;
    localOrigin.xyz = (((2.0 * hashVect) - 1.0) * _MaxTrans);
    #line 547
    localOrigin.w = 1.0;
    highp float localScale = ((hashVect.x * (_MaxScale - 1.0)) + 1.0);
    origin = (_Object2World * localOrigin);
    highp vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 551
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 555
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    o.baseLight = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    planet_pos = (-(_MainRotation * origin));
    highp vec3 detail_pos = (_DetailRotation * planet_pos).xyz;
    #line 559
    o.color = GetSphereMapNoLOD( _MainTex, planet_pos.xyz);
    o.color *= GetShereDetailMapNoLOD( _DetailTex, detail_pos, _DetailScale);
    o.color.w *= GetDistanceFade( distance( origin, vec4( _WorldSpaceCameraPos, 0.0)), _DistFade, _DistFadeVert);
    highp mat4 M = rand_rotation( (vec3( fract(_Rotation), 0.0, 0.0) + hashVect), localScale, localOrigin.xyz);
    #line 563
    highp mat4 mvMatrix = ((unity_MatrixV * _Object2World) * M);
    highp vec3 viewDir = normalize(xll_matrixindex_mf4x4_i (mvMatrix, 2).xyz);
    o.viewDir = abs(viewDir);
    highp vec4 mvCenter = (glstate_matrix_modelview0 * localOrigin);
    #line 567
    o.pos = (glstate_matrix_projection * (mvCenter + vec4( (v.vertex.xyz * localScale), v.vertex.w)));
    o.camPos = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * localOrigin).xyz));
    highp vec2 texcoodOffsetxy = ((2.0 * v.texcoord) - 1.0);
    highp vec4 texcoordOffset = vec4( texcoodOffsetxy.x, texcoodOffsetxy.y, 0.0, v.vertex.w);
    #line 571
    highp vec4 ZYv = texcoordOffset.zyxw;
    highp vec4 XZv = texcoordOffset.xzyw;
    highp vec4 XYv = texcoordOffset.xyzw;
    ZYv.z *= sign((-viewDir.x));
    #line 575
    XZv.x *= sign((-viewDir.y));
    XYv.x *= sign(viewDir.z);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.z)) * viewDir.z);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.x)) * viewDir.x);
    #line 579
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.x)) * viewDir.x);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.y)) * viewDir.y);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.z)) * viewDir.z);
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.y)) * viewDir.y);
    #line 583
    highp vec2 ZY = ((mvMatrix * ZYv).xy - mvCenter.xy);
    highp vec2 XZ = ((mvMatrix * XZv).xy - mvCenter.xy);
    highp vec2 XY = ((mvMatrix * XYv).xy - mvCenter.xy);
    o.texcoordZY = (vec2( 0.5, 0.5) + (0.6 * ZY));
    #line 587
    o.texcoordXZ = (vec2( 0.5, 0.5) + (0.6 * XZ));
    o.texcoordXY = (vec2( 0.5, 0.5) + (0.6 * XY));
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    #line 591
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out lowp vec4 xlv_COLOR;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.texcoord = vec2(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_COLOR = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD1 = vec2(xl_retval.texcoordZY);
    xlv_TEXCOORD2 = vec2(xl_retval.texcoordXZ);
    xlv_TEXCOORD3 = vec2(xl_retval.texcoordXY);
    xlv_TEXCOORD4 = vec3(xl_retval.camPos);
    xlv_TEXCOORD5 = vec3(xl_retval.baseLight);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 407
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 508
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 499
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 406
uniform highp mat4 _LightMatrix0;
#line 417
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 430
#line 438
#line 452
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 485
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 489
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 493
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 497
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 523
#line 539
#line 596
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 596
lowp vec4 frag( in v2f IN ) {
    mediump float xval = IN.viewDir.x;
    mediump vec4 xtex = texture( _LeftTex, IN.texcoordZY);
    #line 600
    mediump float yval = IN.viewDir.y;
    mediump vec4 ytex = texture( _TopTex, IN.texcoordXZ);
    mediump float zval = IN.viewDir.z;
    mediump vec4 ztex = texture( _FrontTex, IN.texcoordXY);
    #line 604
    mediump vec4 tex = mix( mix( xtex, ytex, vec4( yval)), ztex, vec4( zval));
    mediump vec4 prev = (((0.94 * _Color) * IN.color) * tex);
    mediump vec4 color;
    color.xyz = (prev.xyz * IN.baseLight);
    #line 608
    color.w = prev.w;
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 612
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in lowp vec4 xlv_COLOR;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_COLOR);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD0);
    xlt_IN.texcoordZY = vec2(xlv_TEXCOORD1);
    xlt_IN.texcoordXZ = vec2(xlv_TEXCOORD2);
    xlt_IN.texcoordXY = vec2(xlv_TEXCOORD3);
    xlt_IN.camPos = vec3(xlv_TEXCOORD4);
    xlt_IN.baseLight = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform vec3 _MaxTrans;
uniform float _MaxScale;
uniform float _Rotation;
uniform float _MinLight;
uniform float _DistFadeVert;
uniform float _DistFade;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _LightColor0;
uniform mat4 _LightMatrix0;
uniform mat4 _DetailRotation;
uniform mat4 _MainRotation;
uniform mat4 unity_MatrixV;


uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 XYv_1;
  vec4 XZv_2;
  vec4 ZYv_3;
  vec3 detail_pos_4;
  float localScale_5;
  vec4 localOrigin_6;
  vec4 tmpvar_7;
  vec3 tmpvar_8;
  vec4 tmpvar_9;
  vec3 tmpvar_10;
  tmpvar_10 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_6.xyz = (((2.0 * tmpvar_10) - 1.0) * _MaxTrans);
  localOrigin_6.w = 1.0;
  localScale_5 = ((tmpvar_10.x * (_MaxScale - 1.0)) + 1.0);
  vec4 tmpvar_11;
  tmpvar_11 = (_Object2World * localOrigin_6);
  vec4 tmpvar_12;
  tmpvar_12.w = 0.0;
  tmpvar_12.xyz = gl_Normal;
  tmpvar_8 = clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (normalize((_Object2World * tmpvar_12).xyz), normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0);
  vec4 tmpvar_13;
  tmpvar_13 = -((_MainRotation * tmpvar_11));
  detail_pos_4 = (_DetailRotation * tmpvar_13).xyz;
  vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13.xyz);
  vec2 uv_15;
  float r_16;
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_14.x)))) {
    float y_over_x_17;
    y_over_x_17 = (tmpvar_14.x / tmpvar_14.z);
    float s_18;
    float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_14.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(tmpvar_14.x) * 1.5708);
  };
  uv_15.x = (0.5 + (0.159155 * r_16));
  uv_15.y = (0.31831 * (1.5708 - (sign(tmpvar_14.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_14.y))) * (1.5708 + (abs(tmpvar_14.y) * (-0.214602 + (abs(tmpvar_14.y) * (0.0865667 + (abs(tmpvar_14.y) * -0.0310296)))))))))));
  vec4 uv_20;
  vec3 tmpvar_21;
  tmpvar_21 = abs(normalize(detail_pos_4));
  float tmpvar_22;
  tmpvar_22 = float((tmpvar_21.z >= tmpvar_21.x));
  vec3 tmpvar_23;
  tmpvar_23 = mix (tmpvar_21.yxz, mix (tmpvar_21, tmpvar_21.zxy, vec3(tmpvar_22)), vec3(float((mix (tmpvar_21.x, tmpvar_21.z, tmpvar_22) >= tmpvar_21.y))));
  uv_20.xy = (((0.5 * tmpvar_23.zy) / abs(tmpvar_23.x)) * _DetailScale);
  uv_20.zw = vec2(0.0, 0.0);
  vec4 tmpvar_24;
  tmpvar_24 = (texture2DLod (_MainTex, uv_15, 0.0) * texture2DLod (_DetailTex, uv_20.xy, 0.0));
  tmpvar_7.xyz = tmpvar_24.xyz;
  vec4 tmpvar_25;
  tmpvar_25.w = 0.0;
  tmpvar_25.xyz = _WorldSpaceCameraPos;
  float tmpvar_26;
  vec4 p_27;
  p_27 = (tmpvar_11 - tmpvar_25);
  tmpvar_26 = sqrt(dot (p_27, p_27));
  tmpvar_7.w = (tmpvar_24.w * (clamp ((_DistFade * tmpvar_26), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_26)), 0.0, 1.0)));
  vec3 tmpvar_28;
  tmpvar_28.yz = vec2(0.0, 0.0);
  tmpvar_28.x = fract(_Rotation);
  vec3 x_29;
  x_29 = (tmpvar_28 + tmpvar_10);
  vec3 trans_30;
  trans_30 = localOrigin_6.xyz;
  float tmpvar_31;
  tmpvar_31 = (x_29.x * 6.28319);
  float tmpvar_32;
  tmpvar_32 = (x_29.y * 6.28319);
  float tmpvar_33;
  tmpvar_33 = (x_29.z * 2.0);
  float tmpvar_34;
  tmpvar_34 = sqrt(tmpvar_33);
  float tmpvar_35;
  tmpvar_35 = (sin(tmpvar_32) * tmpvar_34);
  float tmpvar_36;
  tmpvar_36 = (cos(tmpvar_32) * tmpvar_34);
  float tmpvar_37;
  tmpvar_37 = sqrt((2.0 - tmpvar_33));
  float tmpvar_38;
  tmpvar_38 = sin(tmpvar_31);
  float tmpvar_39;
  tmpvar_39 = cos(tmpvar_31);
  float tmpvar_40;
  tmpvar_40 = ((tmpvar_35 * tmpvar_39) - (tmpvar_36 * tmpvar_38));
  float tmpvar_41;
  tmpvar_41 = ((tmpvar_35 * tmpvar_38) + (tmpvar_36 * tmpvar_39));
  mat4 tmpvar_42;
  tmpvar_42[0].x = (localScale_5 * ((tmpvar_35 * tmpvar_40) - tmpvar_39));
  tmpvar_42[0].y = ((tmpvar_35 * tmpvar_41) - tmpvar_38);
  tmpvar_42[0].z = (tmpvar_35 * tmpvar_37);
  tmpvar_42[0].w = 0.0;
  tmpvar_42[1].x = ((tmpvar_36 * tmpvar_40) + tmpvar_38);
  tmpvar_42[1].y = (localScale_5 * ((tmpvar_36 * tmpvar_41) - tmpvar_39));
  tmpvar_42[1].z = (tmpvar_36 * tmpvar_37);
  tmpvar_42[1].w = 0.0;
  tmpvar_42[2].x = (tmpvar_37 * tmpvar_40);
  tmpvar_42[2].y = (tmpvar_37 * tmpvar_41);
  tmpvar_42[2].z = (localScale_5 * (1.0 - tmpvar_33));
  tmpvar_42[2].w = 0.0;
  tmpvar_42[3].x = trans_30.x;
  tmpvar_42[3].y = trans_30.y;
  tmpvar_42[3].z = trans_30.z;
  tmpvar_42[3].w = 1.0;
  mat4 tmpvar_43;
  tmpvar_43 = (((unity_MatrixV * _Object2World) * tmpvar_42));
  vec4 v_44;
  v_44.x = tmpvar_43[0].z;
  v_44.y = tmpvar_43[1].z;
  v_44.z = tmpvar_43[2].z;
  v_44.w = tmpvar_43[3].z;
  vec3 tmpvar_45;
  tmpvar_45 = normalize(v_44.xyz);
  vec4 tmpvar_46;
  tmpvar_46 = (gl_ModelViewMatrix * localOrigin_6);
  vec4 tmpvar_47;
  tmpvar_47.xyz = (gl_Vertex.xyz * localScale_5);
  tmpvar_47.w = gl_Vertex.w;
  vec4 tmpvar_48;
  tmpvar_48 = (gl_ProjectionMatrix * (tmpvar_46 + tmpvar_47));
  vec2 tmpvar_49;
  tmpvar_49 = ((2.0 * gl_MultiTexCoord0.xy) - 1.0);
  vec4 tmpvar_50;
  tmpvar_50.z = 0.0;
  tmpvar_50.x = tmpvar_49.x;
  tmpvar_50.y = tmpvar_49.y;
  tmpvar_50.w = gl_Vertex.w;
  ZYv_3.xyw = tmpvar_50.zyw;
  XZv_2.yzw = tmpvar_50.zyw;
  XYv_1.yzw = tmpvar_50.yzw;
  ZYv_3.z = (tmpvar_49.x * sign(-(tmpvar_45.x)));
  XZv_2.x = (tmpvar_49.x * sign(-(tmpvar_45.y)));
  XYv_1.x = (tmpvar_49.x * sign(tmpvar_45.z));
  ZYv_3.x = ((sign(-(tmpvar_45.x)) * sign(ZYv_3.z)) * tmpvar_45.z);
  XZv_2.y = ((sign(-(tmpvar_45.y)) * sign(XZv_2.x)) * tmpvar_45.x);
  XYv_1.z = ((sign(-(tmpvar_45.z)) * sign(XYv_1.x)) * tmpvar_45.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_45.x)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_45.y)) * sign(tmpvar_49.y)) * tmpvar_45.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_45.z)) * sign(tmpvar_49.y)) * tmpvar_45.y));
  vec4 o_51;
  vec4 tmpvar_52;
  tmpvar_52 = (tmpvar_48 * 0.5);
  vec2 tmpvar_53;
  tmpvar_53.x = tmpvar_52.x;
  tmpvar_53.y = (tmpvar_52.y * _ProjectionParams.x);
  o_51.xy = (tmpvar_53 + tmpvar_52.w);
  o_51.zw = tmpvar_48.zw;
  tmpvar_9.xyw = o_51.xyw;
  tmpvar_9.z = -((gl_ModelViewMatrix * gl_Vertex).z);
  gl_Position = tmpvar_48;
  xlv_COLOR = tmpvar_7;
  xlv_TEXCOORD0 = abs(tmpvar_45);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * ZYv_3).xy - tmpvar_46.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XZv_2).xy - tmpvar_46.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_43 * XYv_1).xy - tmpvar_46.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_6).xyz));
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
varying vec4 xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec2 xlv_TEXCOORD2;
varying vec2 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
varying vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform float _InvFade;
uniform vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform vec4 _ZBufferParams;
void main ()
{
  vec4 color_1;
  vec4 tmpvar_2;
  tmpvar_2 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (texture2D (_LeftTex, xlv_TEXCOORD1), texture2D (_TopTex, xlv_TEXCOORD2), xlv_TEXCOORD0.yyyy), texture2D (_FrontTex, xlv_TEXCOORD3), xlv_TEXCOORD0.zzzz));
  color_1.xyz = (tmpvar_2.xyz * xlv_TEXCOORD5);
  color_1.w = (tmpvar_2.w * clamp ((_InvFade * ((1.0/(((_ZBufferParams.z * texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x) + _ZBufferParams.w))) - xlv_TEXCOORD8.z)), 0.0, 1.0));
  gl_FragData[0] = color_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "texcoord" TexCoord0
Vector 28 [glstate_lightmodel_ambient]
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_projection]
Vector 29 [_WorldSpaceCameraPos]
Vector 30 [_ProjectionParams]
Vector 31 [_ScreenParams]
Vector 32 [_WorldSpaceLightPos0]
Vector 33 [_LightPositionRange]
Matrix 8 [_Object2World]
Matrix 12 [unity_MatrixV]
Matrix 16 [_MainRotation]
Matrix 20 [_DetailRotation]
Matrix 24 [_LightMatrix0]
Vector 34 [_LightColor0]
Float 35 [_DetailScale]
Float 36 [_DistFade]
Float 37 [_DistFadeVert]
Float 38 [_MinLight]
Float 39 [_Rotation]
Float 40 [_MaxScale]
Vector 41 [_MaxTrans]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailTex] 2D
"vs_3_0
; 355 ALU, 4 TEX
dcl_position o0
dcl_color0 o1
dcl_texcoord0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord7 o9
dcl_texcoord8 o10
def c42, 0.15915491, 0.50000000, 6.28318501, -3.14159298
def c43, 123.54530334, 2.00000000, -1.00000000, 1.00000000
def c44, 0.00000000, -0.01872930, 0.07426100, -0.21211439
def c45, 1.57072902, 3.14159298, 0.31830987, -0.12123910
def c46, -0.01348047, 0.05747731, 0.19563590, -0.33299461
def c47, 0.99999559, 1.57079601, 0.15915494, 0.50000000
def c48, 6.28318548, 0.00000000, 1.00000000, -0.01000214
def c49, 0.60000002, 0.50000000, 4.03944778, 0
dcl_position0 v0
dcl_normal0 v1
dcl_texcoord0 v2
dcl_2d s0
dcl_2d s1
mad r10.xy, v2, c43.y, c43.z
mov r1.w, c11
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
dp4 r0.z, r1, c18
dp4 r0.x, r1, c16
dp4 r0.y, r1, c17
frc r1.xyz, -r0
add r0.xyz, -r0, -r1
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mad r0.x, r1, c42, c42.y
frc r0.x, r0
mad r1.x, r0, c42.z, c42.w
sincos r0.xy, r1.x
mad r0.x, r1.z, c42, c42.y
mov r1.x, r0.y
frc r0.y, r0.x
mad r0.x, r1.y, c42, c42.y
mad r1.y, r0, c42.z, c42.w
frc r1.x, r0
sincos r0.xy, r1.y
mad r0.x, r1, c42.z, c42.w
sincos r1.xy, r0.x
mov r1.z, r0.y
mul r0.xyz, r1, c43.x
frc r0.xyz, r0
abs r6.xyz, r0
mad r0.xyz, r6, c43.y, c43.z
mul r0.xyz, r0, c41
mov r0.w, c43
dp4 r2.z, r0, c10
dp4 r2.x, r0, c8
dp4 r2.y, r0, c9
dp4 r2.w, r0, c11
dp4 r1.z, r2, c18
dp4 r1.x, r2, c16
dp4 r1.y, r2, c17
dp4 r1.w, r2, c19
add r7.xyz, -r2, c29
dp3 r2.x, r7, r7
rsq r8.w, r2.x
dp4 r3.z, -r1, c22
dp4 r3.x, -r1, c20
dp4 r3.y, -r1, c21
dp3 r1.w, r3, r3
rsq r1.w, r1.w
mul r3.xyz, r1.w, r3
abs r3.xyz, r3
sge r1.w, r3.z, r3.x
add r4.xyz, r3.zxyw, -r3
mad r4.xyz, r1.w, r4, r3
sge r2.w, r4.x, r3.y
add r4.xyz, r4, -r3.yxzw
mad r3.xyz, r2.w, r4, r3.yxzw
dp3 r1.w, -r1, -r1
rsq r1.w, r1.w
mul r1.xyz, r1.w, -r1
abs r2.w, r1.x
abs r1.w, r1.z
mul r3.zw, r3.xyzy, c42.y
max r3.y, r1.w, r2.w
abs r4.y, r3.x
min r3.x, r1.w, r2.w
slt r1.w, r1, r2
rcp r3.y, r3.y
mul r4.x, r3, r3.y
rcp r3.x, r4.y
mul r3.xy, r3.zwzw, r3.x
mul r4.y, r4.x, r4.x
mad r3.z, r4.y, c46.x, c46.y
mad r3.z, r3, r4.y, c45.w
mad r2.w, r3.z, r4.y, c46.z
mad r2.w, r2, r4.y, c46
mad r2.w, r2, r4.y, c47.x
mul r2.w, r2, r4.x
max r1.w, -r1, r1
slt r1.w, c44.x, r1
add r3.z, -r1.w, c43.w
mul r3.z, r2.w, r3
add r2.w, -r2, c47.y
mad r1.w, r1, r2, r3.z
slt r1.z, r1, c44.x
max r1.z, -r1, r1
slt r1.z, c44.x, r1
slt r1.x, r1, c44
max r1.x, -r1, r1
add r2.w, -r1, c45.y
add r3.z, -r1, c43.w
mul r1.w, r1, r3.z
slt r1.x, c44, r1
mad r1.z, r1, r2.w, r1.w
add r3.z, -r1.x, c43.w
mul r1.w, r1.z, r3.z
mad r1.x, r1, -r1.z, r1.w
abs r1.z, r1.y
add r2.w, -r1.z, c43
mad r1.w, r1.z, c44.y, c44.z
mad r1.w, r1, r1.z, c44
rsq r2.w, r2.w
rcp r2.w, r2.w
mad r1.z, r1.w, r1, c45.x
mul r1.z, r1, r2.w
slt r1.y, r1, c44.x
mul r1.w, r1.y, r1.z
mad r1.z, -r1.w, c43.y, r1
mad r1.y, r1, c45, r1.z
mul r3.xy, r3, c35.x
mov r3.z, c44.x
texldl r3, r3.xyzz, s1
mad r1.x, r1, c47.z, c47.w
mov r4.yz, c44.x
frc r4.x, c39
add r4.xyz, r6, r4
mul r1.w, r4.x, c48.x
mad r1.z, r1.w, c42.x, c42.y
frc r2.w, r1.z
mad r4.x, r2.w, c42.z, c42.w
sincos r5.xy, r4.x
mul r2.w, r4.y, c48.x
mad r2.w, r2, c42.x, c42.y
frc r4.x, r2.w
mul r2.w, r4.z, c43.y
mad r5.z, r4.x, c42, c42.w
sincos r4.xy, r5.z
rsq r5.w, r2.w
rcp r4.z, r5.w
mul r4.w, r4.x, r4.z
mul r5.z, r4.y, r4
mul r4.x, r4.w, r5
mad r4.y, r5.z, r5, r4.x
mov r5.w, c14.x
mul r1.y, r1, c45.z
mov r1.z, c44.x
texldl r1, r1.xyzz, s0
mul r3, r1, r3
add r1.z, -r2.w, c43.y
mov o1.xyz, r3
mov r1.y, c40.x
add r1.y, c43.z, r1
mad r1.x, r5.z, r4.y, -r5.y
mad r7.w, r6.x, r1.y, c43
mad r1.w, r4, r4.y, -r5.x
mul r1.y, r7.w, r1.w
rsq r1.z, r1.z
rcp r1.w, r1.z
mul r1.z, r1.w, r4.y
mov r4.x, c14.y
mul r4.xyz, c9, r4.x
mad r4.xyz, c8, r5.w, r4
mov r5.w, c14.z
mad r4.xyz, c10, r5.w, r4
mov r5.w, c14
mad r6.xyz, c11, r5.w, r4
mul r5.w, r4, r5.y
mad r2.z, r5, r5.x, -r5.w
mad r2.y, r5.z, r2.z, -r5.x
mul r2.x, r7.w, r2.y
mad r2.y, r4.w, r2.z, r5
mul r5.x, r5.z, r1.w
add r2.w, -r2, c43
mul r5.y, r1.w, r4.w
mul r2.z, r1.w, r2
mul r4.xyz, r6.y, r1
rcp r5.w, r8.w
mul r5.z, r7.w, r2.w
mad r4.xyz, r6.x, r2, r4
mad r4.xyz, r6.z, r5, r4
mul r1.w, -r5, c37.x
add_sat r2.w, r1, c43
mul_sat r1.w, r5, c36.x
mul r1.w, r1, r2
dp3 r4.w, r4, r4
rsq r2.w, r4.w
mul r8.xyz, r2.w, r4
mul o1.w, r3, r1
slt r2.w, -r8.x, r8.x
slt r1.w, r8.x, -r8.x
sub r1.w, r1, r2
slt r3.x, r10.y, -r10.y
slt r2.w, -r10.y, r10.y
sub r10.z, r2.w, r3.x
mul r2.w, r10.x, r1
mul r3.z, r1.w, r10
slt r3.y, r2.w, -r2.w
slt r3.x, -r2.w, r2.w
sub r3.x, r3, r3.y
mov r9.z, r2.w
mov r2.w, r0.x
mul r1.w, r3.x, r1
mul r3.y, r8, r3.z
mad r9.x, r8.z, r1.w, r3.y
mov r1.w, c12.y
mul r3, c9, r1.w
mov r1.w, c12.x
mad r3, c8, r1.w, r3
mov r1.w, c12.z
mad r3, c10, r1.w, r3
mov r1.w, c12
mad r6, c11, r1.w, r3
mov r1.w, r0.y
mul r4, r1, r6.y
mov r3.x, c13.y
mov r5.w, c13.x
mul r3, c9, r3.x
mad r3, c8, r5.w, r3
mov r5.w, c13.z
mad r3, c10, r5.w, r3
mov r5.w, c13
mad r3, c11, r5.w, r3
mul r1, r3.y, r1
mov r5.w, r0.z
mad r1, r3.x, r2, r1
mad r1, r3.z, r5, r1
mad r1, r3.w, c48.yyyz, r1
mad r4, r2, r6.x, r4
mad r4, r5, r6.z, r4
mad r2, r6.w, c48.yyyz, r4
dp4 r5.y, r0, c1
dp4 r5.x, r0, c0
mov r4.w, v0
mov r4.y, r10
mov r9.yw, r4
dp4 r3.y, r1, r9
dp4 r3.x, r9, r2
slt r3.w, -r8.y, r8.y
slt r3.z, r8.y, -r8.y
sub r4.x, r3.z, r3.w
add r3.zw, -r5.xyxy, r3.xyxy
mul r3.x, r10, r4
mad o3.xy, r3.zwzw, c49.x, c49.y
slt r3.z, r3.x, -r3.x
slt r3.y, -r3.x, r3.x
sub r3.y, r3, r3.z
mul r3.z, r10, r4.x
mul r3.y, r3, r4.x
mul r4.x, r8.z, r3.z
mad r3.y, r8.x, r3, r4.x
mov r3.zw, r4.xyyw
dp4 r5.w, r1, r3
dp4 r5.z, r2, r3
add r3.xy, -r5, r5.zwzw
slt r3.w, -r8.z, r8.z
slt r3.z, r8, -r8
sub r4.x, r3.w, r3.z
sub r3.z, r3, r3.w
mul r4.x, r10, r4
mul r5.z, r10, r3
dp4 r5.w, r0, c3
slt r4.z, r4.x, -r4.x
slt r3.w, -r4.x, r4.x
sub r3.w, r3, r4.z
mul r4.z, r8.y, r5
dp4 r5.z, r0, c2
mul r3.z, r3, r3.w
mad r4.z, r8.x, r3, r4
dp4 r1.y, r1, r4
dp4 r1.x, r2, r4
mad o4.xy, r3, c49.x, c49.y
add r3.xy, -r5, r1
mov r0.w, v0
mul r0.xyz, v0, r7.w
add r0, r5, r0
dp4 r2.w, r0, c7
dp4 r1.x, r0, c4
dp4 r1.y, r0, c5
mov r1.w, r2
dp4 r1.z, r0, c6
mul r2.xyz, r1.xyww, c42.y
mov o0, r1
mul r2.y, r2, c30.x
mov r1.xyz, v1
mov r1.w, c44.x
dp4 r0.z, r1, c10
dp4 r0.y, r1, c9
dp4 r0.x, r1, c8
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c32, c32
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c32
dp3_sat r0.x, r0, r1
add r0.x, r0, c48.w
mul r0.y, r0.x, c34.w
mul_sat r0.w, r0.y, c49.z
mov r0.x, c38
add r0.xyz, c34, r0.x
mad_sat o7.xyz, r0, r0.w, c28
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
dp4 o8.z, r0, c26
dp4 o8.y, r0, c25
dp4 o8.x, r0, c24
dp4 r0.w, v0, c2
mad o5.xy, r3, c49.x, c49.y
mad o10.xy, r2.z, c31.zwzw, r2
abs o2.xyz, r8
mov o10.w, r2
mul o6.xyz, r8.w, r7
add o9.xyz, r0, -c33
mov o10.z, -r0.w
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Bind "texcoord" TexCoord0
ConstBuffer "$Globals" 320 // 316 used size, 16 vars
Matrix 16 [_MainRotation] 4
Matrix 80 [_DetailRotation] 4
Matrix 144 [_LightMatrix0] 4
Vector 208 [_LightColor0] 4
Float 240 [_DetailScale]
Float 272 [_DistFade]
Float 276 [_DistFadeVert]
Float 284 [_MinLight]
Float 292 [_Rotation]
Float 296 [_MaxScale]
Vector 304 [_MaxTrans] 3
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityPerFrame" 208 // 144 used size, 4 vars
Matrix 0 [glstate_matrix_projection] 4
Vector 64 [glstate_lightmodel_ambient] 4
Matrix 80 [unity_MatrixV] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityPerFrame" 4
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_DetailTex] 2D 1
// 254 instructions, 12 temp regs, 0 temp arrays:
// ALU 217 float, 8 int, 6 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedmfgejmepbhogipblgelkknoeoijakeahabaaaaaaeaceaaaaadaaaaaa
cmaaaaaanmaaaaaabaacaaaaejfdeheokiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaaijaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaaaaaaipaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaajgaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapaaaaaajoaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadadaaaafaepfdejfeejepeoaaedepem
epfcaaeoepfcenebemaafeebeoehefeofeaafeeffiedepepfceeaaklepfdeheo
cmabaaaaalaaaaaaaiaaaaaabaabaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaa
apaaaaaabmabaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaapaaaaaaccabaaaa
aaaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaccabaaaaabaaaaaaaaaaaaaa
adaaaaaaadaaaaaaadamaaaaccabaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
amadaaaaccabaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaadamaaaaccabaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaccabaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaccabaaaaagaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaccabaaaaahaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaiaaaaccabaaaa
aiaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
edepemepfcaafeeffiedepepfceeaaklfdeieefcciccaaaaeaaaabaaikaiaaaa
fjaaaaaeegiocaaaaaaaaaaabeaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaaacaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaa
fjaaaaaeegiocaaaaeaaaaaaajaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafpaaaaadpcbabaaaaaaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaaeaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
pccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaaddccabaaaadaaaaaa
gfaaaaadmccabaaaadaaaaaagfaaaaaddccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaad
hccabaaaaiaaaaaagfaaaaadpccabaaaajaaaaaagiaaaaacamaaaaaadiaaaaaj
hcaabaaaaaaaaaaaegiccaaaaaaaaaaaacaaaaaafgifcaaaadaaaaaaapaaaaaa
dcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaaagiacaaaadaaaaaa
apaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
adaaaaaakgikcaaaadaaaaaaapaaaaaaegacbaaaaaaaaaaadcaaaaalhcaabaaa
aaaaaaaaegiccaaaaaaaaaaaaeaaaaaapgipcaaaadaaaaaaapaaaaaaegacbaaa
aaaaaaaaebaaaaaghcaabaaaaaaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaenaaaaaghcaabaaaaaaaaaaaaanaaaaaegacbaaaaaaaaaaa
diaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaadcbhphecdcbhphec
dcbhphecaaaaaaaabkaaaaafhcaabaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaai
icaabaaaaaaaaaaackiacaaaaaaaaaaabcaaaaaaabeaaaaaaaaaialpdcaaaaaj
icaabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaiadp
diaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadgaaaaaf
icaabaaaabaaaaaadkbabaaaaaaaaaaadcaaaaaphcaabaaaacaaaaaaegacbaaa
aaaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaaaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaa
egiccaaaaaaaaaaabdaaaaaadiaaaaaipcaabaaaadaaaaaafgafbaaaacaaaaaa
egiocaaaadaaaaaaafaaaaaadcaaaaakpcaabaaaadaaaaaaegiocaaaadaaaaaa
aeaaaaaaagaabaaaacaaaaaaegaobaaaadaaaaaadcaaaaakpcaabaaaadaaaaaa
egiocaaaadaaaaaaagaaaaaakgakbaaaacaaaaaaegaobaaaadaaaaaaaaaaaaai
pcaabaaaadaaaaaaegaobaaaadaaaaaaegiocaaaadaaaaaaahaaaaaaaaaaaaah
pcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaadaaaaaadiaaaaaipcaabaaa
aeaaaaaafgafbaaaabaaaaaaegiocaaaaeaaaaaaabaaaaaadcaaaaakpcaabaaa
aeaaaaaaegiocaaaaeaaaaaaaaaaaaaaagaabaaaabaaaaaaegaobaaaaeaaaaaa
dcaaaaakpcaabaaaaeaaaaaaegiocaaaaeaaaaaaacaaaaaakgakbaaaabaaaaaa
egaobaaaaeaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaeaaaaaaadaaaaaa
pgapbaaaabaaaaaaegaobaaaaeaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaaeaaaaaafgafbaaaacaaaaaaegiocaaaadaaaaaa
anaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaaamaaaaaaagaabaaa
acaaaaaaegaobaaaaeaaaaaadcaaaaakpcaabaaaaeaaaaaaegiocaaaadaaaaaa
aoaaaaaakgakbaaaacaaaaaaegaobaaaaeaaaaaaaaaaaaaipcaabaaaaeaaaaaa
egaobaaaaeaaaaaaegiocaaaadaaaaaaapaaaaaadiaaaaaipcaabaaaafaaaaaa
fgafbaaaaeaaaaaaegiocaaaaaaaaaaaacaaaaaadcaaaaakpcaabaaaafaaaaaa
egiocaaaaaaaaaaaabaaaaaaagaabaaaaeaaaaaaegaobaaaafaaaaaadcaaaaak
pcaabaaaafaaaaaaegiocaaaaaaaaaaaadaaaaaakgakbaaaaeaaaaaaegaobaaa
afaaaaaadcaaaaakpcaabaaaafaaaaaaegiocaaaaaaaaaaaaeaaaaaapgapbaaa
aeaaaaaaegaobaaaafaaaaaadiaaaaajhcaabaaaagaaaaaafgafbaiaebaaaaaa
afaaaaaabgigcaaaaaaaaaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaa
aaaaaaaaafaaaaaaagaabaiaebaaaaaaafaaaaaaegacbaaaagaaaaaadcaaaaal
hcaabaaaagaaaaaabgigcaaaaaaaaaaaahaaaaaakgakbaiaebaaaaaaafaaaaaa
egacbaaaagaaaaaadcaaaaalhcaabaaaagaaaaaabgigcaaaaaaaaaaaaiaaaaaa
pgapbaiaebaaaaaaafaaaaaaegacbaaaagaaaaaabaaaaaahecaabaaaabaaaaaa
egacbaaaagaaaaaaegacbaaaagaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaa
abaaaaaadiaaaaahhcaabaaaagaaaaaakgakbaaaabaaaaaaegacbaaaagaaaaaa
dgaaaaagecaabaaaahaaaaaackaabaiambaaaaaaagaaaaaabnaaaaajecaabaaa
abaaaaaackaabaiaibaaaaaaagaaaaaabkaabaiaibaaaaaaagaaaaaaabaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaajpcaabaaa
aiaaaaaafgaibaiambaaaaaaagaaaaaakgabbaiaibaaaaaaagaaaaaadiaaaaah
lcaabaaaahaaaaaakgakbaaaabaaaaaajganbaaaaiaaaaaadcaaaaakecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaaaaiaaaaaabkaabaiaibaaaaaaagaaaaaa
bnaaaaaiecaabaaaabaaaaaackaabaaaabaaaaaaakaabaiaibaaaaaaagaaaaaa
abaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
hcaabaaaaiaaaaaabgagbaiaibaaaaaaagaaaaaaegacbaaaahaaaaaadgaaaaag
fcaabaaaahaaaaaafgaebaiambaaaaaaagaaaaaaaaaaaaahhcaabaaaahaaaaaa
cgalbaaaahaaaaaaegacbaaaaiaaaaaadcaaaaakhcaabaaaagaaaaaakgakbaaa
abaaaaaaegacbaaaahaaaaaaegacbaiaibaaaaaaagaaaaaadiaaaaakmcaabaaa
adaaaaaakgagbaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaadp
aoaaaaahmcaabaaaadaaaaaakgaobaaaadaaaaaaagaabaaaagaaaaaadiaaaaai
mcaabaaaadaaaaaakgaobaaaadaaaaaaagiacaaaaaaaaaaaapaaaaaaeiaaaaal
pcaabaaaagaaaaaaogakbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaabaaaaaajecaabaaaabaaaaaaegacbaiaebaaaaaaafaaaaaa
egacbaiaebaaaaaaafaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaa
diaaaaaihcaabaaaafaaaaaakgakbaaaabaaaaaaigabbaiaebaaaaaaafaaaaaa
deaaaaajecaabaaaabaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaa
afaaaaaaaoaaaaakecaabaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpckaabaaaabaaaaaaddaaaaajicaabaaaacaaaaaabkaabaiaibaaaaaa
afaaaaaaakaabaiaibaaaaaaafaaaaaadiaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaadkaabaaaacaaaaaadiaaaaahicaabaaaacaaaaaackaabaaaabaaaaaa
ckaabaaaabaaaaaadcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaaabeaaaaa
fpkokkdmabeaaaaadgfkkolndcaaaaajecaabaaaadaaaaaadkaabaaaacaaaaaa
ckaabaaaadaaaaaaabeaaaaaochgdidodcaaaaajecaabaaaadaaaaaadkaabaaa
acaaaaaackaabaaaadaaaaaaabeaaaaaaebnkjlodcaaaaajicaabaaaacaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaadiphhpdpdiaaaaahecaabaaa
adaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaajecaabaaaadaaaaaa
ckaabaaaadaaaaaaabeaaaaaaaaaaamaabeaaaaanlapmjdpdbaaaaajicaabaaa
adaaaaaabkaabaiaibaaaaaaafaaaaaaakaabaiaibaaaaaaafaaaaaaabaaaaah
ecaabaaaadaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaadbaaaaai
mcaabaaaadaaaaaafgajbaaaafaaaaaafgajbaiaebaaaaaaafaaaaaaabaaaaah
icaabaaaacaaaaaackaabaaaadaaaaaaabeaaaaanlapejmaaaaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaaddaaaaahicaabaaaacaaaaaa
bkaabaaaafaaaaaaakaabaaaafaaaaaadbaaaaaiicaabaaaacaaaaaadkaabaaa
acaaaaaadkaabaiaebaaaaaaacaaaaaadeaaaaahecaabaaaadaaaaaabkaabaaa
afaaaaaaakaabaaaafaaaaaabnaaaaaiecaabaaaadaaaaaackaabaaaadaaaaaa
ckaabaiaebaaaaaaadaaaaaaabaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
ckaabaaaadaaaaaadhaaaaakecaabaaaabaaaaaadkaabaaaacaaaaaackaabaia
ebaaaaaaabaaaaaackaabaaaabaaaaaadcaaaaajbcaabaaaafaaaaaackaabaaa
abaaaaaaabeaaaaaidpjccdoabeaaaaaaaaaaadpdcaaaaakecaabaaaabaaaaaa
ckaabaiaibaaaaaaafaaaaaaabeaaaaadagojjlmabeaaaaachbgjidndcaaaaak
ecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaibaaaaaaafaaaaaaabeaaaaa
iedefjlodcaaaaakecaabaaaabaaaaaackaabaaaabaaaaaackaabaiaibaaaaaa
afaaaaaaabeaaaaakeanmjdpaaaaaaaiicaabaaaacaaaaaackaabaiambaaaaaa
afaaaaaaabeaaaaaaaaaiadpelaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaa
diaaaaahecaabaaaadaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadcaaaaaj
ecaabaaaadaaaaaackaabaaaadaaaaaaabeaaaaaaaaaaamaabeaaaaanlapejea
abaaaaahecaabaaaadaaaaaadkaabaaaadaaaaaackaabaaaadaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaackaabaaaadaaaaaa
diaaaaahccaabaaaafaaaaaackaabaaaabaaaaaaabeaaaaaidpjkcdoeiaaaaal
pcaabaaaafaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaa
abeaaaaaaaaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaagaaaaaaegaobaaa
afaaaaaaaaaaaaajhcaabaaaagaaaaaaegacbaaaaeaaaaaaegiccaiaebaaaaaa
abaaaaaaaeaaaaaaaaaaaaajhcaabaaaaeaaaaaaegacbaiaebaaaaaaaeaaaaaa
egiccaaaabaaaaaaaeaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaagaaaaaa
egacbaaaagaaaaaaelaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaai
icaabaaaacaaaaaackaabaaaabaaaaaaakiacaaaaaaaaaaabbaaaaaadccaaaal
ecaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaabbaaaaaackaabaaaabaaaaaa
abeaaaaaaaaaiadpdgcaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaadkaabaaaacaaaaaadiaaaaahiccabaaa
abaaaaaackaabaaaabaaaaaadkaabaaaafaaaaaadgaaaaafhccabaaaabaaaaaa
egacbaaaafaaaaaabkaaaaagbcaabaaaafaaaaaabkiacaaaaaaaaaaabcaaaaaa
dgaaaaaigcaabaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaafaaaaaaaaaaaaah
ecaabaaaabaaaaaackaabaaaaaaaaaaackaabaaaaaaaaaaaelaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaakdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
aceaaaaanlapmjeanlapmjeaaaaaaaaaaaaaaaaadcaaaabamcaabaaaadaaaaaa
kgakbaiaebaaaaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaaaea
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaaaaiadpenaaaaahbcaabaaaafaaaaaa
bcaabaaaagaaaaaabkaabaaaaaaaaaaaenaaaaahbcaabaaaaaaaaaaabcaabaaa
ahaaaaaaakaabaaaaaaaaaaadiaaaaahccaabaaaaaaaaaaackaabaaaabaaaaaa
akaabaaaagaaaaaadiaaaaahecaabaaaaaaaaaaackaabaaaabaaaaaaakaabaaa
afaaaaaadiaaaaahecaabaaaabaaaaaaakaabaaaahaaaaaabkaabaaaaaaaaaaa
dcaaaaajecaabaaaabaaaaaackaabaaaaaaaaaaaakaabaaaaaaaaaaackaabaaa
abaaaaaadcaaaaakicaabaaaacaaaaaabkaabaaaaaaaaaaackaabaaaabaaaaaa
akaabaiaebaaaaaaahaaaaaadiaaaaahicaabaaaacaaaaaadkaabaaaaaaaaaaa
dkaabaaaacaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaadaaaaaaanaaaaaa
egiccaaaaeaaaaaaagaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaa
afaaaaaaagiacaaaadaaaaaaanaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaa
afaaaaaaegiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaanaaaaaaegacbaaa
afaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaaeaaaaaaaiaaaaaapgipcaaa
adaaaaaaanaaaaaaegacbaaaafaaaaaadiaaaaahhcaabaaaagaaaaaapgapbaaa
acaaaaaaegacbaaaafaaaaaadiaaaaahicaabaaaacaaaaaaakaabaaaaaaaaaaa
bkaabaaaaaaaaaaadcaaaaakicaabaaaacaaaaaackaabaaaaaaaaaaaakaabaaa
ahaaaaaadkaabaiaebaaaaaaacaaaaaadcaaaaajicaabaaaaeaaaaaabkaabaaa
aaaaaaaadkaabaaaacaaaaaaakaabaaaaaaaaaaadiaaaaajocaabaaaahaaaaaa
fgifcaaaadaaaaaaamaaaaaaagijcaaaaeaaaaaaagaaaaaadcaaaaalocaabaaa
ahaaaaaaagijcaaaaeaaaaaaafaaaaaaagiacaaaadaaaaaaamaaaaaafgaobaaa
ahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaaaeaaaaaaahaaaaaakgikcaaa
adaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaalocaabaaaahaaaaaaagijcaaa
aeaaaaaaaiaaaaaapgipcaaaadaaaaaaamaaaaaafgaobaaaahaaaaaadcaaaaaj
hcaabaaaagaaaaaajgahbaaaahaaaaaapgapbaaaaeaaaaaaegacbaaaagaaaaaa
elaaaaafecaabaaaadaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaadaaaaaa
dkaabaaaaaaaaaaadkaabaaaadaaaaaadiaaaaahccaabaaaaaaaaaaabkaabaaa
aaaaaaaackaabaaaadaaaaaadiaaaaajhcaabaaaaiaaaaaafgifcaaaadaaaaaa
aoaaaaaaegiccaaaaeaaaaaaagaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaa
aeaaaaaaafaaaaaaagiacaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaal
hcaabaaaaiaaaaaaegiccaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaaoaaaaaa
egacbaaaaiaaaaaadcaaaaalhcaabaaaaiaaaaaaegiccaaaaeaaaaaaaiaaaaaa
pgipcaaaadaaaaaaaoaaaaaaegacbaaaaiaaaaaadcaaaaajhcaabaaaagaaaaaa
egacbaaaaiaaaaaafgafbaaaaaaaaaaaegacbaaaagaaaaaadgaaaaafccaabaaa
ajaaaaaackaabaaaagaaaaaadcaaaaakccaabaaaaaaaaaaackaabaaaaaaaaaaa
dkaabaaaacaaaaaaakaabaiaebaaaaaaahaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckaabaaaaaaaaaaackaabaaaabaaaaaaakaabaiaebaaaaaaaaaaaaaadiaaaaah
ecaabaaaaaaaaaaackaabaaaaaaaaaaackaabaaaadaaaaaadiaaaaahecaabaaa
abaaaaaackaabaaaabaaaaaackaabaaaadaaaaaadiaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaackaabaaaadaaaaaadiaaaaahhcaabaaaakaaaaaakgakbaaa
abaaaaaaegacbaaaafaaaaaadcaaaaajhcaabaaaakaaaaaajgahbaaaahaaaaaa
pgapbaaaacaaaaaaegacbaaaakaaaaaadcaaaaajhcaabaaaakaaaaaaegacbaaa
aiaaaaaapgapbaaaadaaaaaaegacbaaaakaaaaaadiaaaaahhcaabaaaalaaaaaa
agaabaaaaaaaaaaaegacbaaaafaaaaaadiaaaaahkcaabaaaacaaaaaafgafbaaa
acaaaaaaagaebaaaafaaaaaadcaaaaajdcaabaaaacaaaaaajgafbaaaahaaaaaa
agaabaaaacaaaaaangafbaaaacaaaaaadcaaaaajdcaabaaaacaaaaaaegaabaaa
aiaaaaaakgakbaaaacaaaaaaegaabaaaacaaaaaadiaaaaahbcaabaaaaaaaaaaa
bkaabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajlcaabaaaaaaaaaaajganbaaa
ahaaaaaaagaabaaaaaaaaaaaegaibaaaalaaaaaadcaaaaajhcaabaaaaaaaaaaa
egacbaaaaiaaaaaakgakbaaaaaaaaaaaegadbaaaaaaaaaaadgaaaaafbcaabaaa
ajaaaaaackaabaaaaaaaaaaadgaaaaafecaabaaaajaaaaaackaabaaaakaaaaaa
baaaaaahecaabaaaaaaaaaaaegacbaaaajaaaaaaegacbaaaajaaaaaaeeaaaaaf
ecaabaaaaaaaaaaackaabaaaaaaaaaaadiaaaaahhcaabaaaafaaaaaakgakbaaa
aaaaaaaaegacbaaaajaaaaaadgaaaaaghccabaaaacaaaaaaegacbaiaibaaaaaa
afaaaaaadiaaaaajmcaabaaaaaaaaaaafgifcaaaadaaaaaaapaaaaaaagiecaaa
aeaaaaaaagaaaaaadcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaafaaaaaa
agiacaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaadcaaaaalmcaabaaaaaaaaaaa
agiecaaaaeaaaaaaahaaaaaakgikcaaaadaaaaaaapaaaaaakgaobaaaaaaaaaaa
dcaaaaalmcaabaaaaaaaaaaaagiecaaaaeaaaaaaaiaaaaaapgipcaaaadaaaaaa
apaaaaaakgaobaaaaaaaaaaaaaaaaaahmcaabaaaaaaaaaaakgaobaaaaaaaaaaa
agaebaaaacaaaaaadbaaaaalhcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaegacbaiaebaaaaaaafaaaaaadbaaaaalhcaabaaaahaaaaaa
egacbaiaebaaaaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
boaaaaaihcaabaaaacaaaaaaegacbaiaebaaaaaaacaaaaaaegacbaaaahaaaaaa
dcaaaaapmcaabaaaadaaaaaaagbebaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaeaaaaaaaeaaceaaaaaaaaaaaaaaaaaaaaaaaaaialpaaaaialpdbaaaaah
ecaabaaaabaaaaaaabeaaaaaaaaaaaaadkaabaaaadaaaaaadbaaaaahicaabaaa
acaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaaaaboaaaaaiecaabaaaabaaaaaa
ckaabaiaebaaaaaaabaaaaaadkaabaaaacaaaaaacgaaaaaiaanaaaaahcaabaaa
ahaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaaclaaaaafhcaabaaaahaaaaaa
egacbaaaahaaaaaadiaaaaahhcaabaaaahaaaaaajgafbaaaafaaaaaaegacbaaa
ahaaaaaaclaaaaafkcaabaaaafaaaaaaagaebaaaacaaaaaadiaaaaahkcaabaaa
afaaaaaakgakbaaaadaaaaaafganbaaaafaaaaaadbaaaaakmcaabaaaagaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafganbaaaafaaaaaadbaaaaak
dcaabaaaaiaaaaaangafbaaaafaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaboaaaaaimcaabaaaagaaaaaakgaobaiaebaaaaaaagaaaaaaagaebaaa
aiaaaaaacgaaaaaiaanaaaaadcaabaaaacaaaaaaegaabaaaacaaaaaaogakbaaa
agaaaaaaclaaaaafdcaabaaaacaaaaaaegaabaaaacaaaaaadcaaaaajdcaabaaa
acaaaaaaegaabaaaacaaaaaacgakbaaaafaaaaaaegaabaaaahaaaaaadiaaaaah
kcaabaaaacaaaaaafgafbaaaacaaaaaaagaebaaaagaaaaaadiaaaaahdcaabaaa
agaaaaaapgapbaaaadaaaaaaegaabaaaagaaaaaadcaaaaajmcaabaaaagaaaaaa
agaebaaaaaaaaaaaagaabaaaacaaaaaaagaebaaaagaaaaaadcaaaaajmcaabaaa
agaaaaaaagaebaaaakaaaaaafgafbaaaafaaaaaakgaobaaaagaaaaaadcaaaaaj
dcaabaaaacaaaaaaegaabaaaaaaaaaaapgapbaaaafaaaaaangafbaaaacaaaaaa
dcaaaaajdcaabaaaacaaaaaaegaabaaaakaaaaaapgapbaaaadaaaaaaegaabaaa
acaaaaaadcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaa
egaabaaaacaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaa
egaabaaaacaaaaaadcaaaaapmccabaaaadaaaaaaagaebaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaaaajkjjbjdpjkjjbjdpaceaaaaaaaaaaaaaaaaaaaaaaaaaaadp
aaaaaadpdcaaaaajdcaabaaaacaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaa
ogakbaaaagaaaaaaaaaaaaaidcaabaaaacaaaaaaegaabaiaebaaaaaaadaaaaaa
egaabaaaacaaaaaadcaaaaapdccabaaaadaaaaaaegaabaaaacaaaaaaaceaaaaa
jkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaadbaaaaahecaabaaaabaaaaaaabeaaaaaaaaaaaaackaabaaaafaaaaaa
dbaaaaahbcaabaaaacaaaaaackaabaaaafaaaaaaabeaaaaaaaaaaaaaboaaaaai
ecaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaacaaaaaaclaaaaaf
ecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaackaabaaaadaaaaaadbaaaaahbcaabaaaacaaaaaaabeaaaaaaaaaaaaa
ckaabaaaabaaaaaadbaaaaahccaabaaaacaaaaaackaabaaaabaaaaaaabeaaaaa
aaaaaaaadcaaaaajdcaabaaaaaaaaaaaegaabaaaaaaaaaaakgakbaaaabaaaaaa
egaabaaaagaaaaaaboaaaaaiecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaa
bkaabaaaacaaaaaacgaaaaaiaanaaaaaecaabaaaabaaaaaackaabaaaabaaaaaa
ckaabaaaacaaaaaaclaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaafaaaaaackaabaaaahaaaaaa
dcaaaaajdcaabaaaaaaaaaaaegaabaaaakaaaaaakgakbaaaabaaaaaaegaabaaa
aaaaaaaadcaaaaajdcaabaaaaaaaaaaaogakbaaaaaaaaaaapgbpbaaaaaaaaaaa
egaabaaaaaaaaaaaaaaaaaaidcaabaaaaaaaaaaaegaabaiaebaaaaaaadaaaaaa
egaabaaaaaaaaaaadcaaaaapdccabaaaaeaaaaaaegaabaaaaaaaaaaaaceaaaaa
jkjjbjdpjkjjbjdpaaaaaaaaaaaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaaaa
aaaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaa
eeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhccabaaaafaaaaaa
agaabaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaaihcaabaaaaaaaaaaafgbfbaaa
acaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaa
adaaaaaaamaaaaaaagbabaaaacaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaadaaaaaaaoaaaaaakgbkbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaabbaaaaajicaabaaaaaaaaaaaegiocaaaacaaaaaa
aaaaaaaaegiocaaaacaaaaaaaaaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaa
aaaaaaaadiaaaaaihcaabaaaacaaaaaapgapbaaaaaaaaaaaegiccaaaacaaaaaa
aaaaaaaabacaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaacaaaaaa
aaaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaknhcdlmdiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaapnekibdpdiaaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaadkiacaaaaaaaaaaaanaaaaaadicaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaiaeaaaaaaaajocaabaaaaaaaaaaa
agijcaaaaaaaaaaaanaaaaaapgipcaaaaaaaaaaabbaaaaaadccaaaakhccabaaa
agaaaaaajgahbaaaaaaaaaaaagaabaaaaaaaaaaaegiccaaaaeaaaaaaaeaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaamaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaa
adaaaaaaapaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaaakaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaaaaaaaaaajaaaaaaagaabaaaaaaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaaaaaaaaaalaaaaaakgakbaaaaaaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaahaaaaaaegiccaaaaaaaaaaaamaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaaaaaaaaajhccabaaaaiaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaadiaaaaakhcaabaaaaaaaaaaa
egadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaadpaaaaaadpaaaaaaaadgaaaaaf
iccabaaaajaaaaaadkaabaaaabaaaaaadiaaaaaiicaabaaaaaaaaaaabkaabaaa
aaaaaaaaakiacaaaabaaaaaaafaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
aaaaaaaamgaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaabkbabaaaaaaaaaaa
ckiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaackiacaaaadaaaaaa
aeaaaaaaakbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaagaaaaaackbabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaahaaaaaadkbabaaaaaaaaaaaakaabaaa
aaaaaaaadgaaaaageccabaaaajaaaaaaakaabaiaebaaaaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform highp vec3 _MaxTrans;
uniform highp float _MaxScale;
uniform highp float _Rotation;
uniform highp float _MinLight;
uniform highp float _DistFadeVert;
uniform highp float _DistFade;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform lowp vec4 _LightColor0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _DetailRotation;
uniform highp mat4 _MainRotation;
uniform highp mat4 unity_MatrixV;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 XYv_1;
  highp vec4 XZv_2;
  highp vec4 ZYv_3;
  highp vec3 detail_pos_4;
  mediump float NdotL_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  highp float localScale_8;
  highp vec4 localOrigin_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs(fract((sin(normalize(floor(-((_MainRotation * (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)))).xyz))) * 123.545)));
  localOrigin_9.xyz = (((2.0 * tmpvar_13) - 1.0) * _MaxTrans);
  localOrigin_9.w = 1.0;
  localScale_8 = ((tmpvar_13.x * (_MaxScale - 1.0)) + 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14 = (_Object2World * localOrigin_9);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = normalize(_glesNormal);
  highp vec3 tmpvar_16;
  tmpvar_16 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp (dot (normalize((_Object2World * tmpvar_15).xyz), lightDirection_6), 0.0, 1.0);
  NdotL_5 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (((_LightColor0.w * ((NdotL_5 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_20;
  tmpvar_20 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_19)), 0.0, 1.0);
  tmpvar_11 = tmpvar_20;
  highp vec4 tmpvar_21;
  tmpvar_21 = -((_MainRotation * tmpvar_14));
  detail_pos_4 = (_DetailRotation * tmpvar_21).xyz;
  mediump vec4 tex_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_21.xyz);
  highp vec2 uv_24;
  highp float r_25;
  if ((abs(tmpvar_23.z) > (1e-08 * abs(tmpvar_23.x)))) {
    highp float y_over_x_26;
    y_over_x_26 = (tmpvar_23.x / tmpvar_23.z);
    highp float s_27;
    highp float x_28;
    x_28 = (y_over_x_26 * inversesqrt(((y_over_x_26 * y_over_x_26) + 1.0)));
    s_27 = (sign(x_28) * (1.5708 - (sqrt((1.0 - abs(x_28))) * (1.5708 + (abs(x_28) * (-0.214602 + (abs(x_28) * (0.0865667 + (abs(x_28) * -0.0310296)))))))));
    r_25 = s_27;
    if ((tmpvar_23.z < 0.0)) {
      if ((tmpvar_23.x >= 0.0)) {
        r_25 = (s_27 + 3.14159);
      } else {
        r_25 = (r_25 - 3.14159);
      };
    };
  } else {
    r_25 = (sign(tmpvar_23.x) * 1.5708);
  };
  uv_24.x = (0.5 + (0.159155 * r_25));
  uv_24.y = (0.31831 * (1.5708 - (sign(tmpvar_23.y) * (1.5708 - (sqrt((1.0 - abs(tmpvar_23.y))) * (1.5708 + (abs(tmpvar_23.y) * (-0.214602 + (abs(tmpvar_23.y) * (0.0865667 + (abs(tmpvar_23.y) * -0.0310296)))))))))));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2DLod (_MainTex, uv_24, 0.0);
  tex_22 = tmpvar_29;
  tmpvar_10 = tex_22;
  mediump vec4 tmpvar_30;
  highp vec4 uv_31;
  mediump vec3 detailCoords_32;
  mediump float nylerp_33;
  mediump float zxlerp_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = abs(normalize(detail_pos_4));
  highp float tmpvar_36;
  tmpvar_36 = float((tmpvar_35.z >= tmpvar_35.x));
  zxlerp_34 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = float((mix (tmpvar_35.x, tmpvar_35.z, zxlerp_34) >= tmpvar_35.y));
  nylerp_33 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (tmpvar_35, tmpvar_35.zxy, vec3(zxlerp_34));
  detailCoords_32 = tmpvar_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = mix (tmpvar_35.yxz, detailCoords_32, vec3(nylerp_33));
  detailCoords_32 = tmpvar_39;
  mediump float tmpvar_40;
  tmpvar_40 = abs(detailCoords_32.x);
  uv_31.xy = (((0.5 * detailCoords_32.zy) / tmpvar_40) * _DetailScale);
  uv_31.zw = vec2(0.0, 0.0);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DLod (_DetailTex, uv_31.xy, 0.0);
  tmpvar_30 = tmpvar_41;
  mediump vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_10 * tmpvar_30);
  tmpvar_10 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43.w = 0.0;
  tmpvar_43.xyz = _WorldSpaceCameraPos;
  highp float tmpvar_44;
  highp vec4 p_45;
  p_45 = (tmpvar_14 - tmpvar_43);
  tmpvar_44 = sqrt(dot (p_45, p_45));
  highp float tmpvar_46;
  tmpvar_46 = (tmpvar_10.w * (clamp ((_DistFade * tmpvar_44), 0.0, 1.0) * clamp ((1.0 - (_DistFadeVert * tmpvar_44)), 0.0, 1.0)));
  tmpvar_10.w = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47.yz = vec2(0.0, 0.0);
  tmpvar_47.x = fract(_Rotation);
  highp vec3 x_48;
  x_48 = (tmpvar_47 + tmpvar_13);
  highp vec3 trans_49;
  trans_49 = localOrigin_9.xyz;
  highp float tmpvar_50;
  tmpvar_50 = (x_48.x * 6.28319);
  highp float tmpvar_51;
  tmpvar_51 = (x_48.y * 6.28319);
  highp float tmpvar_52;
  tmpvar_52 = (x_48.z * 2.0);
  highp float tmpvar_53;
  tmpvar_53 = sqrt(tmpvar_52);
  highp float tmpvar_54;
  tmpvar_54 = (sin(tmpvar_51) * tmpvar_53);
  highp float tmpvar_55;
  tmpvar_55 = (cos(tmpvar_51) * tmpvar_53);
  highp float tmpvar_56;
  tmpvar_56 = sqrt((2.0 - tmpvar_52));
  highp float tmpvar_57;
  tmpvar_57 = sin(tmpvar_50);
  highp float tmpvar_58;
  tmpvar_58 = cos(tmpvar_50);
  highp float tmpvar_59;
  tmpvar_59 = ((tmpvar_54 * tmpvar_58) - (tmpvar_55 * tmpvar_57));
  highp float tmpvar_60;
  tmpvar_60 = ((tmpvar_54 * tmpvar_57) + (tmpvar_55 * tmpvar_58));
  highp mat4 tmpvar_61;
  tmpvar_61[0].x = (localScale_8 * ((tmpvar_54 * tmpvar_59) - tmpvar_58));
  tmpvar_61[0].y = ((tmpvar_54 * tmpvar_60) - tmpvar_57);
  tmpvar_61[0].z = (tmpvar_54 * tmpvar_56);
  tmpvar_61[0].w = 0.0;
  tmpvar_61[1].x = ((tmpvar_55 * tmpvar_59) + tmpvar_57);
  tmpvar_61[1].y = (localScale_8 * ((tmpvar_55 * tmpvar_60) - tmpvar_58));
  tmpvar_61[1].z = (tmpvar_55 * tmpvar_56);
  tmpvar_61[1].w = 0.0;
  tmpvar_61[2].x = (tmpvar_56 * tmpvar_59);
  tmpvar_61[2].y = (tmpvar_56 * tmpvar_60);
  tmpvar_61[2].z = (localScale_8 * (1.0 - tmpvar_52));
  tmpvar_61[2].w = 0.0;
  tmpvar_61[3].x = trans_49.x;
  tmpvar_61[3].y = trans_49.y;
  tmpvar_61[3].z = trans_49.z;
  tmpvar_61[3].w = 1.0;
  highp mat4 tmpvar_62;
  tmpvar_62 = (((unity_MatrixV * _Object2World) * tmpvar_61));
  vec4 v_63;
  v_63.x = tmpvar_62[0].z;
  v_63.y = tmpvar_62[1].z;
  v_63.z = tmpvar_62[2].z;
  v_63.w = tmpvar_62[3].z;
  vec3 tmpvar_64;
  tmpvar_64 = normalize(v_63.xyz);
  highp vec4 tmpvar_65;
  tmpvar_65 = (glstate_matrix_modelview0 * localOrigin_9);
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = (_glesVertex.xyz * localScale_8);
  tmpvar_66.w = _glesVertex.w;
  highp vec4 tmpvar_67;
  tmpvar_67 = (glstate_matrix_projection * (tmpvar_65 + tmpvar_66));
  highp vec2 tmpvar_68;
  tmpvar_68 = ((2.0 * _glesMultiTexCoord0.xy) - 1.0);
  highp vec4 tmpvar_69;
  tmpvar_69.z = 0.0;
  tmpvar_69.x = tmpvar_68.x;
  tmpvar_69.y = tmpvar_68.y;
  tmpvar_69.w = _glesVertex.w;
  ZYv_3.xyw = tmpvar_69.zyw;
  XZv_2.yzw = tmpvar_69.zyw;
  XYv_1.yzw = tmpvar_69.yzw;
  ZYv_3.z = (tmpvar_68.x * sign(-(tmpvar_64.x)));
  XZv_2.x = (tmpvar_68.x * sign(-(tmpvar_64.y)));
  XYv_1.x = (tmpvar_68.x * sign(tmpvar_64.z));
  ZYv_3.x = ((sign(-(tmpvar_64.x)) * sign(ZYv_3.z)) * tmpvar_64.z);
  XZv_2.y = ((sign(-(tmpvar_64.y)) * sign(XZv_2.x)) * tmpvar_64.x);
  XYv_1.z = ((sign(-(tmpvar_64.z)) * sign(XYv_1.x)) * tmpvar_64.x);
  ZYv_3.x = (ZYv_3.x + ((sign(-(tmpvar_64.x)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  XZv_2.y = (XZv_2.y + ((sign(-(tmpvar_64.y)) * sign(tmpvar_68.y)) * tmpvar_64.z));
  XYv_1.z = (XYv_1.z + ((sign(-(tmpvar_64.z)) * sign(tmpvar_68.y)) * tmpvar_64.y));
  highp vec4 o_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (tmpvar_67 * 0.5);
  highp vec2 tmpvar_72;
  tmpvar_72.x = tmpvar_71.x;
  tmpvar_72.y = (tmpvar_71.y * _ProjectionParams.x);
  o_70.xy = (tmpvar_72 + tmpvar_71.w);
  o_70.zw = tmpvar_67.zw;
  tmpvar_12.xyw = o_70.xyw;
  tmpvar_12.z = -((glstate_matrix_modelview0 * _glesVertex).z);
  gl_Position = tmpvar_67;
  xlv_COLOR = tmpvar_10;
  xlv_TEXCOORD0 = abs(tmpvar_64);
  xlv_TEXCOORD1 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * ZYv_3).xy - tmpvar_65.xy)));
  xlv_TEXCOORD2 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XZv_2).xy - tmpvar_65.xy)));
  xlv_TEXCOORD3 = (vec2(0.5, 0.5) + (0.6 * ((tmpvar_62 * XYv_1).xy - tmpvar_65.xy)));
  xlv_TEXCOORD4 = normalize((_WorldSpaceCameraPos - (_Object2World * localOrigin_9).xyz));
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_12;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
varying lowp vec4 xlv_COLOR;
uniform sampler2D _CameraDepthTexture;
uniform highp float _InvFade;
uniform lowp vec4 _Color;
uniform sampler2D _FrontTex;
uniform sampler2D _LeftTex;
uniform sampler2D _TopTex;
uniform highp vec4 _ZBufferParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp float depth_2;
  mediump vec4 color_3;
  mediump vec4 ztex_4;
  mediump float zval_5;
  mediump vec4 ytex_6;
  mediump float yval_7;
  mediump vec4 xtex_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LeftTex, xlv_TEXCOORD1);
  xtex_8 = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = xlv_TEXCOORD0.y;
  yval_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_TopTex, xlv_TEXCOORD2);
  ytex_6 = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = xlv_TEXCOORD0.z;
  zval_5 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_FrontTex, xlv_TEXCOORD3);
  ztex_4 = tmpvar_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (((0.94 * _Color) * xlv_COLOR) * mix (mix (xtex_8, ytex_6, vec4(yval_7)), ztex_4, vec4(zval_5)));
  color_3.xyz = (tmpvar_14.xyz * xlv_TEXCOORD5);
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_CameraDepthTexture, xlv_TEXCOORD8).x;
  depth_2 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (1.0/(((_ZBufferParams.z * depth_2) + _ZBufferParams.w)));
  depth_2 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (tmpvar_14.w * clamp ((_InvFade * (tmpvar_16 - xlv_TEXCOORD8.z)), 0.0, 1.0));
  color_3.w = tmpvar_17;
  tmpvar_1 = color_3;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 408
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 509
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 500
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 406
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 418
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 431
#line 439
#line 453
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 486
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 490
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 494
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 498
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 524
#line 540
#line 597
#line 284
highp vec4 ComputeScreenPos( in highp vec4 pos ) {
    #line 286
    highp vec4 o = (pos * 0.5);
    o.xy = (vec2( o.x, (o.y * _ProjectionParams.x)) + o.w);
    o.zw = pos.zw;
    return o;
}
#line 380
highp float GetDistanceFade( in highp float dist, in highp float fade, in highp float fadeVert ) {
    #line 382
    highp float fadeDist = (fade * dist);
    highp float distVert = (1.0 - (fadeVert * dist));
    return (xll_saturate_f(fadeDist) * xll_saturate_f(distVert));
}
#line 355
mediump vec4 GetShereDetailMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect, in highp float detailScale ) {
    #line 357
    highp vec3 sphereVectNorm = normalize(sphereVect);
    sphereVectNorm = abs(sphereVectNorm);
    mediump float zxlerp = step( sphereVectNorm.x, sphereVectNorm.z);
    mediump float nylerp = step( sphereVectNorm.y, mix( sphereVectNorm.x, sphereVectNorm.z, zxlerp));
    #line 361
    mediump vec3 detailCoords = mix( sphereVectNorm.xyz, sphereVectNorm.zxy, vec3( zxlerp));
    detailCoords = mix( sphereVectNorm.yxz, detailCoords, vec3( nylerp));
    highp vec4 uv;
    uv.xy = (((0.5 * detailCoords.zy) / abs(detailCoords.x)) * detailScale);
    #line 365
    uv.zw = vec2( 0.0, 0.0);
    return xll_tex2Dlod( texSampler, uv);
}
#line 330
highp vec2 GetSphereUV( in highp vec3 sphereVect, in highp vec2 uvOffset ) {
    #line 332
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereVect.x, sphereVect.z)));
    uv.y = (0.31831 * acos(sphereVect.y));
    uv += uvOffset;
    #line 336
    return uv;
}
#line 338
mediump vec4 GetSphereMapNoLOD( in sampler2D texSampler, in highp vec3 sphereVect ) {
    #line 340
    highp vec4 uv;
    highp vec3 sphereVectNorm = normalize(sphereVect);
    uv.xy = GetSphereUV( sphereVectNorm, vec2( 0.0, 0.0));
    uv.zw = vec2( 0.0, 0.0);
    #line 344
    mediump vec4 tex = xll_tex2Dlod( texSampler, uv);
    return tex;
}
#line 317
highp vec3 hash( in highp vec3 val ) {
    #line 319
    return fract((sin(val) * 123.545));
}
#line 524
highp mat4 rand_rotation( in highp vec3 x, in highp float scale, in highp vec3 trans ) {
    highp float theta = (x.x * 6.28319);
    highp float phi = (x.y * 6.28319);
    #line 528
    highp float z = (x.z * 2.0);
    highp float r = sqrt(z);
    highp float Vx = (sin(phi) * r);
    highp float Vy = (cos(phi) * r);
    #line 532
    highp float Vz = sqrt((2.0 - z));
    highp float st = sin(theta);
    highp float ct = cos(theta);
    highp float Sx = ((Vx * ct) - (Vy * st));
    #line 536
    highp float Sy = ((Vx * st) + (Vy * ct));
    highp mat4 M = mat4( (scale * ((Vx * Sx) - ct)), ((Vx * Sy) - st), (Vx * Vz), 0.0, ((Vy * Sx) + st), (scale * ((Vy * Sy) - ct)), (Vy * Vz), 0.0, (Vz * Sx), (Vz * Sy), (scale * (1.0 - z)), 0.0, trans.x, trans.y, trans.z, 1.0);
    return M;
}
#line 540
v2f vert( in appdata_t v ) {
    v2f o;
    highp vec4 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0));
    #line 544
    highp vec4 planet_pos = (-(_MainRotation * origin));
    highp vec3 hashVect = abs(hash( normalize(floor(planet_pos.xyz))));
    highp vec4 localOrigin;
    localOrigin.xyz = (((2.0 * hashVect) - 1.0) * _MaxTrans);
    #line 548
    localOrigin.w = 1.0;
    highp float localScale = ((hashVect.x * (_MaxScale - 1.0)) + 1.0);
    origin = (_Object2World * localOrigin);
    highp vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    #line 552
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump float NdotL = xll_saturate_f(dot( worldNormal, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 556
    mediump float lightIntensity = xll_saturate_f(((_LightColor0.w * diff) * 4.0));
    o.baseLight = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    planet_pos = (-(_MainRotation * origin));
    highp vec3 detail_pos = (_DetailRotation * planet_pos).xyz;
    #line 560
    o.color = GetSphereMapNoLOD( _MainTex, planet_pos.xyz);
    o.color *= GetShereDetailMapNoLOD( _DetailTex, detail_pos, _DetailScale);
    o.color.w *= GetDistanceFade( distance( origin, vec4( _WorldSpaceCameraPos, 0.0)), _DistFade, _DistFadeVert);
    highp mat4 M = rand_rotation( (vec3( fract(_Rotation), 0.0, 0.0) + hashVect), localScale, localOrigin.xyz);
    #line 564
    highp mat4 mvMatrix = ((unity_MatrixV * _Object2World) * M);
    highp vec3 viewDir = normalize(xll_matrixindex_mf4x4_i (mvMatrix, 2).xyz);
    o.viewDir = abs(viewDir);
    highp vec4 mvCenter = (glstate_matrix_modelview0 * localOrigin);
    #line 568
    o.pos = (glstate_matrix_projection * (mvCenter + vec4( (v.vertex.xyz * localScale), v.vertex.w)));
    o.camPos = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * localOrigin).xyz));
    highp vec2 texcoodOffsetxy = ((2.0 * v.texcoord) - 1.0);
    highp vec4 texcoordOffset = vec4( texcoodOffsetxy.x, texcoodOffsetxy.y, 0.0, v.vertex.w);
    #line 572
    highp vec4 ZYv = texcoordOffset.zyxw;
    highp vec4 XZv = texcoordOffset.xzyw;
    highp vec4 XYv = texcoordOffset.xyzw;
    ZYv.z *= sign((-viewDir.x));
    #line 576
    XZv.x *= sign((-viewDir.y));
    XYv.x *= sign(viewDir.z);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.z)) * viewDir.z);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.x)) * viewDir.x);
    #line 580
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.x)) * viewDir.x);
    ZYv.x += ((sign((-viewDir.x)) * sign(ZYv.y)) * viewDir.y);
    XZv.y += ((sign((-viewDir.y)) * sign(XZv.z)) * viewDir.z);
    XYv.z += ((sign((-viewDir.z)) * sign(XYv.y)) * viewDir.y);
    #line 584
    highp vec2 ZY = ((mvMatrix * ZYv).xy - mvCenter.xy);
    highp vec2 XZ = ((mvMatrix * XZv).xy - mvCenter.xy);
    highp vec2 XY = ((mvMatrix * XYv).xy - mvCenter.xy);
    o.texcoordZY = (vec2( 0.5, 0.5) + (0.6 * ZY));
    #line 588
    o.texcoordXZ = (vec2( 0.5, 0.5) + (0.6 * XZ));
    o.texcoordXY = (vec2( 0.5, 0.5) + (0.6 * XY));
    o.projPos = ComputeScreenPos( o.pos);
    o.projPos.z = (-(glstate_matrix_modelview0 * v.vertex).z);
    #line 592
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out lowp vec4 xlv_COLOR;
out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
out highp vec2 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out mediump vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp vec4 xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.texcoord = vec2(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_COLOR = vec4(xl_retval.color);
    xlv_TEXCOORD0 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD1 = vec2(xl_retval.texcoordZY);
    xlv_TEXCOORD2 = vec2(xl_retval.texcoordXZ);
    xlv_TEXCOORD3 = vec2(xl_retval.texcoordXY);
    xlv_TEXCOORD4 = vec3(xl_retval.camPos);
    xlv_TEXCOORD5 = vec3(xl_retval.baseLight);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = vec4(xl_retval.projPos);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 408
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 509
struct v2f {
    highp vec4 pos;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec2 texcoordZY;
    highp vec2 texcoordXZ;
    highp vec2 texcoordXY;
    highp vec3 camPos;
    mediump vec3 baseLight;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec4 projPos;
};
#line 500
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
    highp vec4 tangent;
    highp vec2 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp mat4 _MainRotation;
uniform highp mat4 _DetailRotation;
#line 386
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 406
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 418
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 431
#line 439
#line 453
uniform sampler2D _TopTex;
uniform sampler2D _LeftTex;
#line 486
uniform sampler2D _FrontTex;
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform highp float _DetailScale;
#line 490
uniform lowp vec4 _Color;
uniform highp float _DistFade;
uniform highp float _DistFadeVert;
uniform highp float _LightScatter;
#line 494
uniform highp float _MinLight;
uniform highp float _InvFade;
uniform highp float _Rotation;
uniform highp float _MaxScale;
#line 498
uniform highp vec3 _MaxTrans;
uniform sampler2D _CameraDepthTexture;
#line 524
#line 540
#line 597
#line 280
highp float LinearEyeDepth( in highp float z ) {
    #line 282
    return (1.0 / ((_ZBufferParams.z * z) + _ZBufferParams.w));
}
#line 597
lowp vec4 frag( in v2f IN ) {
    mediump float xval = IN.viewDir.x;
    mediump vec4 xtex = texture( _LeftTex, IN.texcoordZY);
    #line 601
    mediump float yval = IN.viewDir.y;
    mediump vec4 ytex = texture( _TopTex, IN.texcoordXZ);
    mediump float zval = IN.viewDir.z;
    mediump vec4 ztex = texture( _FrontTex, IN.texcoordXY);
    #line 605
    mediump vec4 tex = mix( mix( xtex, ytex, vec4( yval)), ztex, vec4( zval));
    mediump vec4 prev = (((0.94 * _Color) * IN.color) * tex);
    mediump vec4 color;
    color.xyz = (prev.xyz * IN.baseLight);
    #line 609
    color.w = prev.w;
    highp float depth = textureProj( _CameraDepthTexture, IN.projPos).x;
    depth = LinearEyeDepth( depth);
    highp float partZ = IN.projPos.z;
    #line 613
    highp float fade = xll_saturate_f((_InvFade * (depth - partZ)));
    color.w *= fade;
    return color;
}
in lowp vec4 xlv_COLOR;
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
in highp vec2 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in mediump vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp vec4 xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.color = vec4(xlv_COLOR);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD0);
    xlt_IN.texcoordZY = vec2(xlv_TEXCOORD1);
    xlt_IN.texcoordXZ = vec2(xlv_TEXCOORD2);
    xlt_IN.texcoordXY = vec2(xlv_TEXCOORD3);
    xlt_IN.camPos = vec3(xlv_TEXCOORD4);
    xlt_IN.baseLight = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.projPos = vec4(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 15
//   d3d9 - ALU: 13 to 13, TEX: 4 to 4
//   d3d11 - ALU: 14 to 14, TEX: 4 to 4, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_OFF" }
Vector 0 [_ZBufferParams]
Vector 1 [_Color]
Float 2 [_InvFade]
SetTexture 0 [_LeftTex] 2D
SetTexture 1 [_TopTex] 2D
SetTexture 2 [_FrontTex] 2D
SetTexture 3 [_CameraDepthTexture] 2D
"ps_3_0
; 13 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 0.93994141, 0, 0, 0
dcl_color0 v0
dcl_texcoord0 v1.xyz
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xy
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
texldp r2.x, v6, s3
mad r2.x, r2, c0.z, c0.w
rcp r2.x, r2.x
texld r1, v2, s0
texld r0, v3, s1
add_pp r0, r0, -r1
mad_pp r1, v1.y, r0, r1
texld r0, v4, s2
add_pp r0, r0, -r1
mad_pp r1, v1.z, r0, r1
mul_pp r0, v0, c1
mul_pp r0, r0, r1
mul_pp r0, r0, c3.x
add r2.x, r2, -v6.z
mul_sat r1.x, r2, c2
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, v5
"
}

SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 292 used size, 16 vars
Vector 256 [_Color] 4
Float 288 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 112 [_ZBufferParams] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_LeftTex] 2D 1
SetTexture 1 [_TopTex] 2D 0
SetTexture 2 [_FrontTex] 2D 2
SetTexture 3 [_CameraDepthTexture] 2D 3
// 21 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedldcjkkgccjbebkapbdkfmjnajlmkkjhkabaaaaaabeafaaaaadaaaaaa
cmaaaaaaeiabaaaahmabaaaaejfdeheobeabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaakabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahagaaaaakabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaakabaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaamamaaaaakabaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaaakabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaakabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaakabaaaa
agaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaakabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaaedepemepfcaafeef
fiedepepfceeaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
jaadaaaaeaaaaaaaoeaaaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaae
egiocaaaabaaaaaaaiaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaa
abaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaad
pcbabaaaabaaaaaagcbaaaadgcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaa
gcbaaaadmcbabaaaadaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
adaaaaaaaoaaaaahdcaabaaaaaaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaadcaaaaalbcaabaaaaaaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
aaaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaaaaaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakiacaaaaaaaaaaabcaaaaaaefaaaaajpcaabaaa
abaaaaaaogbkbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaa
dcaaaaajpcaabaaaabaaaaaafgbfbaaaacaaaaaaegaobaaaabaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaaaaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaajpcaabaaaabaaaaaakgbkbaaaacaaaaaaegaobaaa
acaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbobaaaabaaaaaa
egiocaaaaaaaaaaabaaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaa
egaobaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegbcbaaaagaaaaaadgaaaaaf
icaabaaaacaaaaaaabeaaaaanhkdhadpdiaaaaahpcaabaaaabaaaaaaegaobaaa
abaaaaaaegaobaaaacaaaaaadiaaaaahiccabaaaaaaaaaaaakaabaaaaaaaaaaa
dkaabaaaabaaaaaadiaaaaakhccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaa
nhkdhadpnhkdhadpnhkdhadpaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [_ZBufferParams]
Vector 1 [_Color]
Float 2 [_InvFade]
SetTexture 0 [_LeftTex] 2D
SetTexture 1 [_TopTex] 2D
SetTexture 2 [_FrontTex] 2D
SetTexture 3 [_CameraDepthTexture] 2D
"ps_3_0
; 13 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 0.93994141, 0, 0, 0
dcl_color0 v0
dcl_texcoord0 v1.xyz
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xy
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
texldp r2.x, v6, s3
mad r2.x, r2, c0.z, c0.w
rcp r2.x, r2.x
texld r1, v2, s0
texld r0, v3, s1
add_pp r0, r0, -r1
mad_pp r1, v1.y, r0, r1
texld r0, v4, s2
add_pp r0, r0, -r1
mad_pp r1, v1.z, r0, r1
mul_pp r0, v0, c1
mul_pp r0, r0, r1
mul_pp r0, r0, c3.x
add r2.x, r2, -v6.z
mul_sat r1.x, r2, c2
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, v5
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
ConstBuffer "$Globals" 256 // 228 used size, 15 vars
Vector 192 [_Color] 4
Float 224 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 112 [_ZBufferParams] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_LeftTex] 2D 1
SetTexture 1 [_TopTex] 2D 0
SetTexture 2 [_FrontTex] 2D 2
SetTexture 3 [_CameraDepthTexture] 2D 3
// 21 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcmfejolgkncgdhakanblccgingdkbaemabaaaaaapmaeaaaaadaaaaaa
cmaaaaaadaabaaaageabaaaaejfdeheopmaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaapcaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahagaaaapcaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaapcaaaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaamamaaaapcaaaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaapcaaaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaapcaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaapcaaaaaa
aiaaaaaaaaaaaaaaadaaaaaaahaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
edepemepfcaafeeffiedepepfceeaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklklfdeieefcjaadaaaaeaaaaaaaoeaaaaaafjaaaaaeegiocaaaaaaaaaaa
apaaaaaafjaaaaaeegiocaaaabaaaaaaaiaaaaaafkaaaaadaagabaaaaaaaaaaa
fkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaa
adaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaagcbaaaadpcbabaaaabaaaaaagcbaaaadgcbabaaaacaaaaaagcbaaaad
dcbabaaaadaaaaaagcbaaaadmcbabaaaadaaaaaagcbaaaaddcbabaaaaeaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadpcbabaaaahaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacadaaaaaaaoaaaaahdcaabaaaaaaaaaaaegbabaaaahaaaaaa
pgbpbaaaahaaaaaaefaaaaajpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaa
adaaaaaaaagabaaaadaaaaaadcaaaaalbcaabaaaaaaaaaaackiacaaaabaaaaaa
ahaaaaaaakaabaaaaaaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaa
aaaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaackbabaiaebaaaaaaahaaaaaa
dicaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaaakiacaaaaaaaaaaaaoaaaaaa
efaaaaajpcaabaaaabaaaaaaogbkbaaaadaaaaaaeghobaaaabaaaaaaaagabaaa
aaaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaadaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaia
ebaaaaaaacaaaaaadcaaaaajpcaabaaaabaaaaaafgbfbaaaacaaaaaaegaobaaa
abaaaaaaegaobaaaacaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaaeaaaaaa
eghobaaaacaaaaaaaagabaaaacaaaaaaaaaaaaaipcaabaaaacaaaaaaegaobaia
ebaaaaaaabaaaaaaegaobaaaacaaaaaadcaaaaajpcaabaaaabaaaaaakgbkbaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaa
egbobaaaabaaaaaaegiocaaaaaaaaaaaamaaaaaadiaaaaahpcaabaaaabaaaaaa
egaobaaaabaaaaaaegaobaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegbcbaaa
agaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaanhkdhadpdiaaaaahpcaabaaa
abaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaadiaaaaahiccabaaaaaaaaaaa
akaabaaaaaaaaaaadkaabaaaabaaaaaadiaaaaakhccabaaaaaaaaaaaegacbaaa
abaaaaaaaceaaaaanhkdhadpnhkdhadpnhkdhadpaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_OFF" }
Vector 0 [_ZBufferParams]
Vector 1 [_Color]
Float 2 [_InvFade]
SetTexture 0 [_LeftTex] 2D
SetTexture 1 [_TopTex] 2D
SetTexture 2 [_FrontTex] 2D
SetTexture 3 [_CameraDepthTexture] 2D
"ps_3_0
; 13 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 0.93994141, 0, 0, 0
dcl_color0 v0
dcl_texcoord0 v1.xyz
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xy
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
texldp r2.x, v6, s3
mad r2.x, r2, c0.z, c0.w
rcp r2.x, r2.x
texld r1, v2, s0
texld r0, v3, s1
add_pp r0, r0, -r1
mad_pp r1, v1.y, r0, r1
texld r0, v4, s2
add_pp r0, r0, -r1
mad_pp r1, v1.z, r0, r1
mul_pp r0, v0, c1
mul_pp r0, r0, r1
mul_pp r0, r0, c3.x
add r2.x, r2, -v6.z
mul_sat r1.x, r2, c2
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, v5
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 292 used size, 16 vars
Vector 256 [_Color] 4
Float 288 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 112 [_ZBufferParams] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_LeftTex] 2D 1
SetTexture 1 [_TopTex] 2D 0
SetTexture 2 [_FrontTex] 2D 2
SetTexture 3 [_CameraDepthTexture] 2D 3
// 21 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmdmmkopdakfgeacbjmogonjljlcacchoabaaaaaabeafaaaaadaaaaaa
cmaaaaaaeiabaaaahmabaaaaejfdeheobeabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaakabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahagaaaaakabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaakabaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaamamaaaaakabaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaaakabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaakabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaakabaaaa
agaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaakabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaaedepemepfcaafeef
fiedepepfceeaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
jaadaaaaeaaaaaaaoeaaaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaae
egiocaaaabaaaaaaaiaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaa
abaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaad
pcbabaaaabaaaaaagcbaaaadgcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaa
gcbaaaadmcbabaaaadaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
adaaaaaaaoaaaaahdcaabaaaaaaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaadcaaaaalbcaabaaaaaaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
aaaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaaaaaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakiacaaaaaaaaaaabcaaaaaaefaaaaajpcaabaaa
abaaaaaaogbkbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaa
dcaaaaajpcaabaaaabaaaaaafgbfbaaaacaaaaaaegaobaaaabaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaaaaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaajpcaabaaaabaaaaaakgbkbaaaacaaaaaaegaobaaa
acaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbobaaaabaaaaaa
egiocaaaaaaaaaaabaaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaa
egaobaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegbcbaaaagaaaaaadgaaaaaf
icaabaaaacaaaaaaabeaaaaanhkdhadpdiaaaaahpcaabaaaabaaaaaaegaobaaa
abaaaaaaegaobaaaacaaaaaadiaaaaahiccabaaaaaaaaaaaakaabaaaaaaaaaaa
dkaabaaaabaaaaaadiaaaaakhccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaa
nhkdhadpnhkdhadpnhkdhadpaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [_ZBufferParams]
Vector 1 [_Color]
Float 2 [_InvFade]
SetTexture 0 [_LeftTex] 2D
SetTexture 1 [_TopTex] 2D
SetTexture 2 [_FrontTex] 2D
SetTexture 3 [_CameraDepthTexture] 2D
"ps_3_0
; 13 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 0.93994141, 0, 0, 0
dcl_color0 v0
dcl_texcoord0 v1.xyz
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xy
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
texldp r2.x, v6, s3
mad r2.x, r2, c0.z, c0.w
rcp r2.x, r2.x
texld r1, v2, s0
texld r0, v3, s1
add_pp r0, r0, -r1
mad_pp r1, v1.y, r0, r1
texld r0, v4, s2
add_pp r0, r0, -r1
mad_pp r1, v1.z, r0, r1
mul_pp r0, v0, c1
mul_pp r0, r0, r1
mul_pp r0, r0, c3.x
add r2.x, r2, -v6.z
mul_sat r1.x, r2, c2
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, v5
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 292 used size, 16 vars
Vector 256 [_Color] 4
Float 288 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 112 [_ZBufferParams] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_LeftTex] 2D 1
SetTexture 1 [_TopTex] 2D 0
SetTexture 2 [_FrontTex] 2D 2
SetTexture 3 [_CameraDepthTexture] 2D 3
// 21 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedldcjkkgccjbebkapbdkfmjnajlmkkjhkabaaaaaabeafaaaaadaaaaaa
cmaaaaaaeiabaaaahmabaaaaejfdeheobeabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaakabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahagaaaaakabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaakabaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaamamaaaaakabaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaaakabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaakabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaakabaaaa
agaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaakabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaaedepemepfcaafeef
fiedepepfceeaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
jaadaaaaeaaaaaaaoeaaaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaae
egiocaaaabaaaaaaaiaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaa
abaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaad
pcbabaaaabaaaaaagcbaaaadgcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaa
gcbaaaadmcbabaaaadaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
adaaaaaaaoaaaaahdcaabaaaaaaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaadcaaaaalbcaabaaaaaaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
aaaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaaaaaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakiacaaaaaaaaaaabcaaaaaaefaaaaajpcaabaaa
abaaaaaaogbkbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaa
dcaaaaajpcaabaaaabaaaaaafgbfbaaaacaaaaaaegaobaaaabaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaaaaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaajpcaabaaaabaaaaaakgbkbaaaacaaaaaaegaobaaa
acaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbobaaaabaaaaaa
egiocaaaaaaaaaaabaaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaa
egaobaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegbcbaaaagaaaaaadgaaaaaf
icaabaaaacaaaaaaabeaaaaanhkdhadpdiaaaaahpcaabaaaabaaaaaaegaobaaa
abaaaaaaegaobaaaacaaaaaadiaaaaahiccabaaaaaaaaaaaakaabaaaaaaaaaaa
dkaabaaaabaaaaaadiaaaaakhccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaa
nhkdhadpnhkdhadpnhkdhadpaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [_ZBufferParams]
Vector 1 [_Color]
Float 2 [_InvFade]
SetTexture 0 [_LeftTex] 2D
SetTexture 1 [_TopTex] 2D
SetTexture 2 [_FrontTex] 2D
SetTexture 3 [_CameraDepthTexture] 2D
"ps_3_0
; 13 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 0.93994141, 0, 0, 0
dcl_color0 v0
dcl_texcoord0 v1.xyz
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xy
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
texldp r2.x, v6, s3
mad r2.x, r2, c0.z, c0.w
rcp r2.x, r2.x
texld r1, v2, s0
texld r0, v3, s1
add_pp r0, r0, -r1
mad_pp r1, v1.y, r0, r1
texld r0, v4, s2
add_pp r0, r0, -r1
mad_pp r1, v1.z, r0, r1
mul_pp r0, v0, c1
mul_pp r0, r0, r1
mul_pp r0, r0, c3.x
add r2.x, r2, -v6.z
mul_sat r1.x, r2, c2
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, v5
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
ConstBuffer "$Globals" 320 // 292 used size, 16 vars
Vector 256 [_Color] 4
Float 288 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 112 [_ZBufferParams] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_LeftTex] 2D 1
SetTexture 1 [_TopTex] 2D 0
SetTexture 2 [_FrontTex] 2D 2
SetTexture 3 [_CameraDepthTexture] 2D 3
// 21 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedjenlcnboponghmelfphbgdcjldlekgcoabaaaaaabeafaaaaadaaaaaa
cmaaaaaaeiabaaaahmabaaaaejfdeheobeabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaakabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahagaaaaakabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaakabaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaamamaaaaakabaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaaakabaaaaagaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
amaaaaaaakabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaaaaaaakabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaakabaaaaaiaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaaedepemepfcaafeef
fiedepepfceeaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
jaadaaaaeaaaaaaaoeaaaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaae
egiocaaaabaaaaaaaiaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaa
abaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaad
pcbabaaaabaaaaaagcbaaaadgcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaa
gcbaaaadmcbabaaaadaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaahaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
adaaaaaaaoaaaaahdcaabaaaaaaaaaaaegbabaaaahaaaaaapgbpbaaaahaaaaaa
efaaaaajpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaadcaaaaalbcaabaaaaaaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
aaaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaaaaaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaackbabaiaebaaaaaaahaaaaaadicaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakiacaaaaaaaaaaabcaaaaaaefaaaaajpcaabaaa
abaaaaaaogbkbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaa
dcaaaaajpcaabaaaabaaaaaafgbfbaaaacaaaaaaegaobaaaabaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaaaaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaajpcaabaaaabaaaaaakgbkbaaaacaaaaaaegaobaaa
acaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbobaaaabaaaaaa
egiocaaaaaaaaaaabaaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaa
egaobaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegbcbaaaagaaaaaadgaaaaaf
icaabaaaacaaaaaaabeaaaaanhkdhadpdiaaaaahpcaabaaaabaaaaaaegaobaaa
abaaaaaaegaobaaaacaaaaaadiaaaaahiccabaaaaaaaaaaaakaabaaaaaaaaaaa
dkaabaaaabaaaaaadiaaaaakhccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaa
nhkdhadpnhkdhadpnhkdhadpaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
Vector 0 [_ZBufferParams]
Vector 1 [_Color]
Float 2 [_InvFade]
SetTexture 0 [_LeftTex] 2D
SetTexture 1 [_TopTex] 2D
SetTexture 2 [_FrontTex] 2D
SetTexture 3 [_CameraDepthTexture] 2D
"ps_3_0
; 13 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 0.93994141, 0, 0, 0
dcl_color0 v0
dcl_texcoord0 v1.xyz
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xy
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
texldp r2.x, v6, s3
mad r2.x, r2, c0.z, c0.w
rcp r2.x, r2.x
texld r1, v2, s0
texld r0, v3, s1
add_pp r0, r0, -r1
mad_pp r1, v1.y, r0, r1
texld r0, v4, s2
add_pp r0, r0, -r1
mad_pp r1, v1.z, r0, r1
mul_pp r0, v0, c1
mul_pp r0, r0, r1
mul_pp r0, r0, c3.x
add r2.x, r2, -v6.z
mul_sat r1.x, r2, c2
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, v5
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 320 // 292 used size, 16 vars
Vector 256 [_Color] 4
Float 288 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 112 [_ZBufferParams] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_LeftTex] 2D 1
SetTexture 1 [_TopTex] 2D 0
SetTexture 2 [_FrontTex] 2D 2
SetTexture 3 [_CameraDepthTexture] 2D 3
// 21 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgmpnnloogbjlohbpdiccjegnkpjlofejabaaaaaacmafaaaaadaaaaaa
cmaaaaaagaabaaaajeabaaaaejfdeheocmabaaaaalaaaaaaaiaaaaaabaabaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaabmabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaccabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahagaaaaccabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaccabaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaamamaaaaccabaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaaccabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaccabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaccabaaaa
agaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaccabaaaaahaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapaaaaaaccabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaaedepemepfcaafeeffiedepepfceeaakl
epfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
aaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaadaaaaeaaaaaaa
oeaaaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaa
aiaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaadgcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadmcbabaaa
adaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaad
pcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaaaoaaaaah
dcaabaaaaaaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaadcaaaaal
bcaabaaaaaaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaaaaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaaakiacaaaaaaaaaaabcaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaadcaaaaajpcaabaaa
abaaaaaafgbfbaaaacaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaajpcaabaaaabaaaaaakgbkbaaaacaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaaegbobaaaabaaaaaaegiocaaaaaaaaaaa
baaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaa
dgaaaaafhcaabaaaacaaaaaaegbcbaaaagaaaaaadgaaaaaficaabaaaacaaaaaa
abeaaaaanhkdhadpdiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaa
acaaaaaadiaaaaahiccabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaakhccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaanhkdhadpnhkdhadp
nhkdhadpaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [_ZBufferParams]
Vector 1 [_Color]
Float 2 [_InvFade]
SetTexture 0 [_LeftTex] 2D
SetTexture 1 [_TopTex] 2D
SetTexture 2 [_FrontTex] 2D
SetTexture 3 [_CameraDepthTexture] 2D
"ps_3_0
; 13 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 0.93994141, 0, 0, 0
dcl_color0 v0
dcl_texcoord0 v1.xyz
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xy
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
texldp r2.x, v6, s3
mad r2.x, r2, c0.z, c0.w
rcp r2.x, r2.x
texld r1, v2, s0
texld r0, v3, s1
add_pp r0, r0, -r1
mad_pp r1, v1.y, r0, r1
texld r0, v4, s2
add_pp r0, r0, -r1
mad_pp r1, v1.z, r0, r1
mul_pp r0, v0, c1
mul_pp r0, r0, r1
mul_pp r0, r0, c3.x
add r2.x, r2, -v6.z
mul_sat r1.x, r2, c2
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, v5
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 320 // 292 used size, 16 vars
Vector 256 [_Color] 4
Float 288 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 112 [_ZBufferParams] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_LeftTex] 2D 1
SetTexture 1 [_TopTex] 2D 0
SetTexture 2 [_FrontTex] 2D 2
SetTexture 3 [_CameraDepthTexture] 2D 3
// 21 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgmpnnloogbjlohbpdiccjegnkpjlofejabaaaaaacmafaaaaadaaaaaa
cmaaaaaagaabaaaajeabaaaaejfdeheocmabaaaaalaaaaaaaiaaaaaabaabaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaabmabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaccabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahagaaaaccabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaccabaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaamamaaaaccabaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaaccabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaccabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaccabaaaa
agaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaccabaaaaahaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapaaaaaaccabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaaedepemepfcaafeeffiedepepfceeaakl
epfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
aaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaadaaaaeaaaaaaa
oeaaaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaa
aiaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaadgcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadmcbabaaa
adaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaad
pcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaaaoaaaaah
dcaabaaaaaaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaadcaaaaal
bcaabaaaaaaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaaaaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaaakiacaaaaaaaaaaabcaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaadcaaaaajpcaabaaa
abaaaaaafgbfbaaaacaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaajpcaabaaaabaaaaaakgbkbaaaacaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaaegbobaaaabaaaaaaegiocaaaaaaaaaaa
baaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaa
dgaaaaafhcaabaaaacaaaaaaegbcbaaaagaaaaaadgaaaaaficaabaaaacaaaaaa
abeaaaaanhkdhadpdiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaa
acaaaaaadiaaaaahiccabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaakhccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaanhkdhadpnhkdhadp
nhkdhadpaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [_ZBufferParams]
Vector 1 [_Color]
Float 2 [_InvFade]
SetTexture 0 [_LeftTex] 2D
SetTexture 1 [_TopTex] 2D
SetTexture 2 [_FrontTex] 2D
SetTexture 3 [_CameraDepthTexture] 2D
"ps_3_0
; 13 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 0.93994141, 0, 0, 0
dcl_color0 v0
dcl_texcoord0 v1.xyz
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xy
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
texldp r2.x, v6, s3
mad r2.x, r2, c0.z, c0.w
rcp r2.x, r2.x
texld r1, v2, s0
texld r0, v3, s1
add_pp r0, r0, -r1
mad_pp r1, v1.y, r0, r1
texld r0, v4, s2
add_pp r0, r0, -r1
mad_pp r1, v1.z, r0, r1
mul_pp r0, v0, c1
mul_pp r0, r0, r1
mul_pp r0, r0, c3.x
add r2.x, r2, -v6.z
mul_sat r1.x, r2, c2
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, v5
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 320 // 292 used size, 16 vars
Vector 256 [_Color] 4
Float 288 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 112 [_ZBufferParams] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_LeftTex] 2D 1
SetTexture 1 [_TopTex] 2D 0
SetTexture 2 [_FrontTex] 2D 2
SetTexture 3 [_CameraDepthTexture] 2D 3
// 21 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedmdmmkopdakfgeacbjmogonjljlcacchoabaaaaaabeafaaaaadaaaaaa
cmaaaaaaeiabaaaahmabaaaaejfdeheobeabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaakabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahagaaaaakabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaakabaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaamamaaaaakabaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaaakabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaakabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaakabaaaa
agaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaakabaaaaaiaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaaedepemepfcaafeef
fiedepepfceeaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
jaadaaaaeaaaaaaaoeaaaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaae
egiocaaaabaaaaaaaiaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaa
abaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaad
pcbabaaaabaaaaaagcbaaaadgcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaa
gcbaaaadmcbabaaaadaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadhcbabaaa
agaaaaaagcbaaaadpcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
adaaaaaaaoaaaaahdcaabaaaaaaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaa
efaaaaajpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaa
adaaaaaadcaaaaalbcaabaaaaaaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaa
aaaaaaaadkiacaaaabaaaaaaahaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpakaabaaaaaaaaaaaaaaaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakiacaaaaaaaaaaabcaaaaaaefaaaaajpcaabaaa
abaaaaaaogbkbaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaa
dcaaaaajpcaabaaaabaaaaaafgbfbaaaacaaaaaaegaobaaaabaaaaaaegaobaaa
acaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaaaaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaa
egaobaaaacaaaaaadcaaaaajpcaabaaaabaaaaaakgbkbaaaacaaaaaaegaobaaa
acaaaaaaegaobaaaabaaaaaadiaaaaaipcaabaaaacaaaaaaegbobaaaabaaaaaa
egiocaaaaaaaaaaabaaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaa
egaobaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegbcbaaaagaaaaaadgaaaaaf
icaabaaaacaaaaaaabeaaaaanhkdhadpdiaaaaahpcaabaaaabaaaaaaegaobaaa
abaaaaaaegaobaaaacaaaaaadiaaaaahiccabaaaaaaaaaaaakaabaaaaaaaaaaa
dkaabaaaabaaaaaadiaaaaakhccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaa
nhkdhadpnhkdhadpnhkdhadpaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [_ZBufferParams]
Vector 1 [_Color]
Float 2 [_InvFade]
SetTexture 0 [_LeftTex] 2D
SetTexture 1 [_TopTex] 2D
SetTexture 2 [_FrontTex] 2D
SetTexture 3 [_CameraDepthTexture] 2D
"ps_3_0
; 13 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 0.93994141, 0, 0, 0
dcl_color0 v0
dcl_texcoord0 v1.xyz
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xy
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
texldp r2.x, v6, s3
mad r2.x, r2, c0.z, c0.w
rcp r2.x, r2.x
texld r1, v2, s0
texld r0, v3, s1
add_pp r0, r0, -r1
mad_pp r1, v1.y, r0, r1
texld r0, v4, s2
add_pp r0, r0, -r1
mad_pp r1, v1.z, r0, r1
mul_pp r0, v0, c1
mul_pp r0, r0, r1
mul_pp r0, r0, c3.x
add r2.x, r2, -v6.z
mul_sat r1.x, r2, c2
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, v5
"
}

SubProgram "d3d11 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 384 // 356 used size, 17 vars
Vector 320 [_Color] 4
Float 352 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 112 [_ZBufferParams] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_LeftTex] 2D 1
SetTexture 1 [_TopTex] 2D 0
SetTexture 2 [_FrontTex] 2D 2
SetTexture 3 [_CameraDepthTexture] 2D 3
// 21 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedbkaikdnejlhmlgombdnhfghodekgcadbabaaaaaacmafaaaaadaaaaaa
cmaaaaaagaabaaaajeabaaaaejfdeheocmabaaaaalaaaaaaaiaaaaaabaabaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaabmabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaccabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahagaaaaccabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaccabaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaamamaaaaccabaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaaccabaaaaagaaaaaaaaaaaaaaadaaaaaaaeaaaaaa
amaaaaaaccabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaaaaaaccabaaaa
afaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaccabaaaaahaaaaaaaaaaaaaa
adaaaaaaahaaaaaaapaaaaaaccabaaaaaiaaaaaaaaaaaaaaadaaaaaaaiaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaaedepemepfcaafeeffiedepepfceeaakl
epfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
aaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaadaaaaeaaaaaaa
oeaaaaaafjaaaaaeegiocaaaaaaaaaaabhaaaaaafjaaaaaeegiocaaaabaaaaaa
aiaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaadgcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadmcbabaaa
adaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaad
pcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaaaoaaaaah
dcaabaaaaaaaaaaaegbabaaaaiaaaaaapgbpbaaaaiaaaaaaefaaaaajpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaadcaaaaal
bcaabaaaaaaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaaaaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaackbabaiaebaaaaaaaiaaaaaadicaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaaakiacaaaaaaaaaaabgaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaadcaaaaajpcaabaaa
abaaaaaafgbfbaaaacaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaajpcaabaaaabaaaaaakgbkbaaaacaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaaegbobaaaabaaaaaaegiocaaaaaaaaaaa
beaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaa
dgaaaaafhcaabaaaacaaaaaaegbcbaaaagaaaaaadgaaaaaficaabaaaacaaaaaa
abeaaaaanhkdhadpdiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaa
acaaaaaadiaaaaahiccabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaakhccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaanhkdhadpnhkdhadp
nhkdhadpaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" }
Vector 0 [_ZBufferParams]
Vector 1 [_Color]
Float 2 [_InvFade]
SetTexture 0 [_LeftTex] 2D
SetTexture 1 [_TopTex] 2D
SetTexture 2 [_FrontTex] 2D
SetTexture 3 [_CameraDepthTexture] 2D
"ps_3_0
; 13 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 0.93994141, 0, 0, 0
dcl_color0 v0
dcl_texcoord0 v1.xyz
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xy
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
texldp r2.x, v6, s3
mad r2.x, r2, c0.z, c0.w
rcp r2.x, r2.x
texld r1, v2, s0
texld r0, v3, s1
add_pp r0, r0, -r1
mad_pp r1, v1.y, r0, r1
texld r0, v4, s2
add_pp r0, r0, -r1
mad_pp r1, v1.z, r0, r1
mul_pp r0, v0, c1
mul_pp r0, r0, r1
mul_pp r0, r0, c3.x
add r2.x, r2, -v6.z
mul_sat r1.x, r2, c2
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, v5
"
}

SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 320 // 292 used size, 16 vars
Vector 256 [_Color] 4
Float 288 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 112 [_ZBufferParams] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_LeftTex] 2D 1
SetTexture 1 [_TopTex] 2D 0
SetTexture 2 [_FrontTex] 2D 2
SetTexture 3 [_CameraDepthTexture] 2D 3
// 21 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecediegpigegmdibnegnhbdkadnoaapejonlabaaaaaacmafaaaaadaaaaaa
cmaaaaaagaabaaaajeabaaaaejfdeheocmabaaaaalaaaaaaaiaaaaaabaabaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaabmabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaccabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahagaaaaccabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaccabaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaamamaaaaccabaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaaccabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaccabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaccabaaaa
agaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaccabaaaaahaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaahaaaaaaccabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaaedepemepfcaafeeffiedepepfceeaakl
epfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
aaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaadaaaaeaaaaaaa
oeaaaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaa
aiaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaadgcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadmcbabaaa
adaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaad
pcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaaaoaaaaah
dcaabaaaaaaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaadcaaaaal
bcaabaaaaaaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaaaaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaaakiacaaaaaaaaaaabcaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaadcaaaaajpcaabaaa
abaaaaaafgbfbaaaacaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaajpcaabaaaabaaaaaakgbkbaaaacaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaaegbobaaaabaaaaaaegiocaaaaaaaaaaa
baaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaa
dgaaaaafhcaabaaaacaaaaaaegbcbaaaagaaaaaadgaaaaaficaabaaaacaaaaaa
abeaaaaanhkdhadpdiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaa
acaaaaaadiaaaaahiccabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaakhccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaanhkdhadpnhkdhadp
nhkdhadpaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [_ZBufferParams]
Vector 1 [_Color]
Float 2 [_InvFade]
SetTexture 0 [_LeftTex] 2D
SetTexture 1 [_TopTex] 2D
SetTexture 2 [_FrontTex] 2D
SetTexture 3 [_CameraDepthTexture] 2D
"ps_3_0
; 13 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 0.93994141, 0, 0, 0
dcl_color0 v0
dcl_texcoord0 v1.xyz
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xy
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
texldp r2.x, v6, s3
mad r2.x, r2, c0.z, c0.w
rcp r2.x, r2.x
texld r1, v2, s0
texld r0, v3, s1
add_pp r0, r0, -r1
mad_pp r1, v1.y, r0, r1
texld r0, v4, s2
add_pp r0, r0, -r1
mad_pp r1, v1.z, r0, r1
mul_pp r0, v0, c1
mul_pp r0, r0, r1
mul_pp r0, r0, c3.x
add r2.x, r2, -v6.z
mul_sat r1.x, r2, c2
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, v5
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 320 // 292 used size, 16 vars
Vector 256 [_Color] 4
Float 288 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 112 [_ZBufferParams] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_LeftTex] 2D 1
SetTexture 1 [_TopTex] 2D 0
SetTexture 2 [_FrontTex] 2D 2
SetTexture 3 [_CameraDepthTexture] 2D 3
// 21 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecediegpigegmdibnegnhbdkadnoaapejonlabaaaaaacmafaaaaadaaaaaa
cmaaaaaagaabaaaajeabaaaaejfdeheocmabaaaaalaaaaaaaiaaaaaabaabaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaabmabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaccabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahagaaaaccabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaccabaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaamamaaaaccabaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaaccabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaccabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaccabaaaa
agaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaccabaaaaahaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaahaaaaaaccabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaaedepemepfcaafeeffiedepepfceeaakl
epfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
aaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaadaaaaeaaaaaaa
oeaaaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaa
aiaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaadgcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadmcbabaaa
adaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaad
pcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaaaoaaaaah
dcaabaaaaaaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaadcaaaaal
bcaabaaaaaaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaaaaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaaakiacaaaaaaaaaaabcaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaadcaaaaajpcaabaaa
abaaaaaafgbfbaaaacaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaajpcaabaaaabaaaaaakgbkbaaaacaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaaegbobaaaabaaaaaaegiocaaaaaaaaaaa
baaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaa
dgaaaaafhcaabaaaacaaaaaaegbcbaaaagaaaaaadgaaaaaficaabaaaacaaaaaa
abeaaaaanhkdhadpdiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaa
acaaaaaadiaaaaahiccabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaakhccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaanhkdhadpnhkdhadp
nhkdhadpaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [_ZBufferParams]
Vector 1 [_Color]
Float 2 [_InvFade]
SetTexture 0 [_LeftTex] 2D
SetTexture 1 [_TopTex] 2D
SetTexture 2 [_FrontTex] 2D
SetTexture 3 [_CameraDepthTexture] 2D
"ps_3_0
; 13 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 0.93994141, 0, 0, 0
dcl_color0 v0
dcl_texcoord0 v1.xyz
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xy
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
texldp r2.x, v6, s3
mad r2.x, r2, c0.z, c0.w
rcp r2.x, r2.x
texld r1, v2, s0
texld r0, v3, s1
add_pp r0, r0, -r1
mad_pp r1, v1.y, r0, r1
texld r0, v4, s2
add_pp r0, r0, -r1
mad_pp r1, v1.z, r0, r1
mul_pp r0, v0, c1
mul_pp r0, r0, r1
mul_pp r0, r0, c3.x
add r2.x, r2, -v6.z
mul_sat r1.x, r2, c2
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, v5
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 384 // 356 used size, 17 vars
Vector 320 [_Color] 4
Float 352 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 112 [_ZBufferParams] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_LeftTex] 2D 1
SetTexture 1 [_TopTex] 2D 0
SetTexture 2 [_FrontTex] 2D 2
SetTexture 3 [_CameraDepthTexture] 2D 3
// 21 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlbeogoikpkblmjlekdcnclepakjapdmhabaaaaaacmafaaaaadaaaaaa
cmaaaaaagaabaaaajeabaaaaejfdeheocmabaaaaalaaaaaaaiaaaaaabaabaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaabmabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaccabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahagaaaaccabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaccabaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaamamaaaaccabaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaaccabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaccabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaccabaaaa
agaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaccabaaaaahaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapaaaaaaccabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaaedepemepfcaafeeffiedepepfceeaakl
epfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
aaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaadaaaaeaaaaaaa
oeaaaaaafjaaaaaeegiocaaaaaaaaaaabhaaaaaafjaaaaaeegiocaaaabaaaaaa
aiaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaadgcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadmcbabaaa
adaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaad
pcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaaaoaaaaah
dcaabaaaaaaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaadcaaaaal
bcaabaaaaaaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaaaaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaaakiacaaaaaaaaaaabgaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaadcaaaaajpcaabaaa
abaaaaaafgbfbaaaacaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaajpcaabaaaabaaaaaakgbkbaaaacaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaaegbobaaaabaaaaaaegiocaaaaaaaaaaa
beaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaa
dgaaaaafhcaabaaaacaaaaaaegbcbaaaagaaaaaadgaaaaaficaabaaaacaaaaaa
abeaaaaanhkdhadpdiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaa
acaaaaaadiaaaaahiccabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaakhccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaanhkdhadpnhkdhadp
nhkdhadpaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [_ZBufferParams]
Vector 1 [_Color]
Float 2 [_InvFade]
SetTexture 0 [_LeftTex] 2D
SetTexture 1 [_TopTex] 2D
SetTexture 2 [_FrontTex] 2D
SetTexture 3 [_CameraDepthTexture] 2D
"ps_3_0
; 13 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 0.93994141, 0, 0, 0
dcl_color0 v0
dcl_texcoord0 v1.xyz
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xy
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
texldp r2.x, v6, s3
mad r2.x, r2, c0.z, c0.w
rcp r2.x, r2.x
texld r1, v2, s0
texld r0, v3, s1
add_pp r0, r0, -r1
mad_pp r1, v1.y, r0, r1
texld r0, v4, s2
add_pp r0, r0, -r1
mad_pp r1, v1.z, r0, r1
mul_pp r0, v0, c1
mul_pp r0, r0, r1
mul_pp r0, r0, c3.x
add r2.x, r2, -v6.z
mul_sat r1.x, r2, c2
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, v5
"
}

SubProgram "d3d11 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 384 // 356 used size, 17 vars
Vector 320 [_Color] 4
Float 352 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 112 [_ZBufferParams] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_LeftTex] 2D 1
SetTexture 1 [_TopTex] 2D 0
SetTexture 2 [_FrontTex] 2D 2
SetTexture 3 [_CameraDepthTexture] 2D 3
// 21 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlbeogoikpkblmjlekdcnclepakjapdmhabaaaaaacmafaaaaadaaaaaa
cmaaaaaagaabaaaajeabaaaaejfdeheocmabaaaaalaaaaaaaiaaaaaabaabaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaabmabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaccabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahagaaaaccabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaccabaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaamamaaaaccabaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaaccabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaccabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaccabaaaa
agaaaaaaaaaaaaaaadaaaaaaahaaaaaaapaaaaaaccabaaaaahaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaapaaaaaaccabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaaedepemepfcaafeeffiedepepfceeaakl
epfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
aaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaadaaaaeaaaaaaa
oeaaaaaafjaaaaaeegiocaaaaaaaaaaabhaaaaaafjaaaaaeegiocaaaabaaaaaa
aiaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaadgcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadmcbabaaa
adaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaad
pcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaaaoaaaaah
dcaabaaaaaaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaadcaaaaal
bcaabaaaaaaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaaaaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaaakiacaaaaaaaaaaabgaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaadcaaaaajpcaabaaa
abaaaaaafgbfbaaaacaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaajpcaabaaaabaaaaaakgbkbaaaacaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaaegbobaaaabaaaaaaegiocaaaaaaaaaaa
beaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaa
dgaaaaafhcaabaaaacaaaaaaegbcbaaaagaaaaaadgaaaaaficaabaaaacaaaaaa
abeaaaaanhkdhadpdiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaa
acaaaaaadiaaaaahiccabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaakhccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaanhkdhadpnhkdhadp
nhkdhadpaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [_ZBufferParams]
Vector 1 [_Color]
Float 2 [_InvFade]
SetTexture 0 [_LeftTex] 2D
SetTexture 1 [_TopTex] 2D
SetTexture 2 [_FrontTex] 2D
SetTexture 3 [_CameraDepthTexture] 2D
"ps_3_0
; 13 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 0.93994141, 0, 0, 0
dcl_color0 v0
dcl_texcoord0 v1.xyz
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xy
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
texldp r2.x, v6, s3
mad r2.x, r2, c0.z, c0.w
rcp r2.x, r2.x
texld r1, v2, s0
texld r0, v3, s1
add_pp r0, r0, -r1
mad_pp r1, v1.y, r0, r1
texld r0, v4, s2
add_pp r0, r0, -r1
mad_pp r1, v1.z, r0, r1
mul_pp r0, v0, c1
mul_pp r0, r0, r1
mul_pp r0, r0, c3.x
add r2.x, r2, -v6.z
mul_sat r1.x, r2, c2
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, v5
"
}

SubProgram "d3d11 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 320 // 292 used size, 16 vars
Vector 256 [_Color] 4
Float 288 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 112 [_ZBufferParams] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_LeftTex] 2D 1
SetTexture 1 [_TopTex] 2D 0
SetTexture 2 [_FrontTex] 2D 2
SetTexture 3 [_CameraDepthTexture] 2D 3
// 21 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecediegpigegmdibnegnhbdkadnoaapejonlabaaaaaacmafaaaaadaaaaaa
cmaaaaaagaabaaaajeabaaaaejfdeheocmabaaaaalaaaaaaaiaaaaaabaabaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaabmabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaccabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahagaaaaccabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaccabaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaamamaaaaccabaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaaccabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaccabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaccabaaaa
agaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaccabaaaaahaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaahaaaaaaccabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaaedepemepfcaafeeffiedepepfceeaakl
epfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
aaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaadaaaaeaaaaaaa
oeaaaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaa
aiaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaadgcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadmcbabaaa
adaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaad
pcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaaaoaaaaah
dcaabaaaaaaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaadcaaaaal
bcaabaaaaaaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaaaaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaaakiacaaaaaaaaaaabcaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaadcaaaaajpcaabaaa
abaaaaaafgbfbaaaacaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaajpcaabaaaabaaaaaakgbkbaaaacaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaaegbobaaaabaaaaaaegiocaaaaaaaaaaa
baaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaa
dgaaaaafhcaabaaaacaaaaaaegbcbaaaagaaaaaadgaaaaaficaabaaaacaaaaaa
abeaaaaanhkdhadpdiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaa
acaaaaaadiaaaaahiccabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaakhccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaanhkdhadpnhkdhadp
nhkdhadpaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [_ZBufferParams]
Vector 1 [_Color]
Float 2 [_InvFade]
SetTexture 0 [_LeftTex] 2D
SetTexture 1 [_TopTex] 2D
SetTexture 2 [_FrontTex] 2D
SetTexture 3 [_CameraDepthTexture] 2D
"ps_3_0
; 13 ALU, 4 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c3, 0.93994141, 0, 0, 0
dcl_color0 v0
dcl_texcoord0 v1.xyz
dcl_texcoord1 v2.xy
dcl_texcoord2 v3.xy
dcl_texcoord3 v4.xy
dcl_texcoord5 v5.xyz
dcl_texcoord8 v6
texldp r2.x, v6, s3
mad r2.x, r2, c0.z, c0.w
rcp r2.x, r2.x
texld r1, v2, s0
texld r0, v3, s1
add_pp r0, r0, -r1
mad_pp r1, v1.y, r0, r1
texld r0, v4, s2
add_pp r0, r0, -r1
mad_pp r1, v1.z, r0, r1
mul_pp r0, v0, c1
mul_pp r0, r0, r1
mul_pp r0, r0, c3.x
add r2.x, r2, -v6.z
mul_sat r1.x, r2, c2
mul_pp oC0.w, r0, r1.x
mul_pp oC0.xyz, r0, v5
"
}

SubProgram "d3d11 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
ConstBuffer "$Globals" 320 // 292 used size, 16 vars
Vector 256 [_Color] 4
Float 288 [_InvFade]
ConstBuffer "UnityPerCamera" 128 // 128 used size, 8 vars
Vector 112 [_ZBufferParams] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_LeftTex] 2D 1
SetTexture 1 [_TopTex] 2D 0
SetTexture 2 [_FrontTex] 2D 2
SetTexture 3 [_CameraDepthTexture] 2D 3
// 21 instructions, 3 temp regs, 0 temp arrays:
// ALU 14 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecediegpigegmdibnegnhbdkadnoaapejonlabaaaaaacmafaaaaadaaaaaa
cmaaaaaagaabaaaajeabaaaaejfdeheocmabaaaaalaaaaaaaiaaaaaabaabaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaabmabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaaccabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahagaaaaccabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaadadaaaaccabaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaamamaaaaccabaaaaadaaaaaaaaaaaaaa
adaaaaaaaeaaaaaaadadaaaaccabaaaaaeaaaaaaaaaaaaaaadaaaaaaafaaaaaa
ahaaaaaaccabaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaaahahaaaaccabaaaa
agaaaaaaaaaaaaaaadaaaaaaahaaaaaaahaaaaaaccabaaaaahaaaaaaaaaaaaaa
adaaaaaaaiaaaaaaahaaaaaaccabaaaaaiaaaaaaaaaaaaaaadaaaaaaajaaaaaa
apapaaaafdfgfpfaepfdejfeejepeoaaedepemepfcaafeeffiedepepfceeaakl
epfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
aaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcjaadaaaaeaaaaaaa
oeaaaaaafjaaaaaeegiocaaaaaaaaaaabdaaaaaafjaaaaaeegiocaaaabaaaaaa
aiaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaadpcbabaaaabaaaaaa
gcbaaaadgcbabaaaacaaaaaagcbaaaaddcbabaaaadaaaaaagcbaaaadmcbabaaa
adaaaaaagcbaaaaddcbabaaaaeaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaad
pcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaaaoaaaaah
dcaabaaaaaaaaaaaegbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaa
aaaaaaaaegaabaaaaaaaaaaaeghobaaaadaaaaaaaagabaaaadaaaaaadcaaaaal
bcaabaaaaaaaaaaackiacaaaabaaaaaaahaaaaaaakaabaaaaaaaaaaadkiacaaa
abaaaaaaahaaaaaaaoaaaaakbcaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpakaabaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaackbabaiaebaaaaaaajaaaaaadicaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaaakiacaaaaaaaaaaabcaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaa
adaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaaaabaaaaaaegaobaiaebaaaaaaacaaaaaadcaaaaajpcaabaaa
abaaaaaafgbfbaaaacaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaaeaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaa
aaaaaaaipcaabaaaacaaaaaaegaobaiaebaaaaaaabaaaaaaegaobaaaacaaaaaa
dcaaaaajpcaabaaaabaaaaaakgbkbaaaacaaaaaaegaobaaaacaaaaaaegaobaaa
abaaaaaadiaaaaaipcaabaaaacaaaaaaegbobaaaabaaaaaaegiocaaaaaaaaaaa
baaaaaaadiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaacaaaaaa
dgaaaaafhcaabaaaacaaaaaaegbcbaaaagaaaaaadgaaaaaficaabaaaacaaaaaa
abeaaaaanhkdhadpdiaaaaahpcaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaa
acaaaaaadiaaaaahiccabaaaaaaaaaaaakaabaaaaaaaaaaadkaabaaaabaaaaaa
diaaaaakhccabaaaaaaaaaaaegacbaaaabaaaaaaaceaaaaanhkdhadpnhkdhadp
nhkdhadpaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

}

#LINE 271
 
		}
		
	} 
	
}
}