PART
{

// --- general parameters ---
name = FASAMercuryAtlasEng
module = Part
author = Frizzank

// --- asset parameters ---
MODEL
{
  model = FASA/Mercury/FASA_Mercury_Atlas_Eng/Mercury_Atlas_Eng
}
rescaleFactor = 1.0
scale = 1.0

// --- node definitions ---
node_stack_top = 0.0, 0.0, 0.0, 0.0, 1.0, 0.0
node_stack_bottom = 0.0, -4.481, 0.0, 0.0, -1.0, 0.0
node_stack_bottom1 = 0.0, -4.481, 0.0, 0.0, -1.0, 0.0


bulkheadProfiles = size1
heatConductivity = 0.06 // half default
emissiveConstant = 0.8 // engine nozzles are good at radiating.

// --- FX definitions ---

fx_exhaustFlame_blue = 0.0, -0.1, 0.0, 0.0, 1.0, 0.0, running
fx_exhaustSparks_flameout = 0.0, -0.11, 0.0, 0.0, 0.0, 1.0, flameout
fx_smokeTrail_light = 0.0, -1.51, 0.0, 0.0, 1.0, 0.0, running


// --- Sound FX definition ---

sound_vent_medium = engage
sound_rocket_spurts = running
sound_vent_soft = deactivate
sound_explosion_low = flameout

// --- editor parameters ---
TechRequired = advRocketry
entryCost = 2500

cost = 2500
category = Propulsion
subcategory = 0
title = Mercury Atlas Rocket Engine
manufacturer = FASA
description = The Atlas engine was originality designed to launch ICBM's. Why not launch a person instead? Place the engine, then the fairing, then the booster engines.

// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 1,0,1,1,0

// --- standard part parameters ---
mass = 3.25

dragModelType = default
maximum_drag = .24
minimum_drag = .2
angularDrag = 2.5
crashTolerance = 16
breakingForce = 50
breakingTorque = 50
maxTemp = 1600

stagingIcon = LIQUID_ENGINE
 
MODULE
{
	name = ModuleEngines
	thrustVectorTransformName = thrustTransform
	exhaustDamage = True
	ignitionThreshold = 0.1
	minThrust = 0
	maxThrust = 325
	heatProduction = 125
	fxOffset = 0, 0, 0.05
	PROPELLANT
	{
		name = LiquidFuel
       	        ratio = 0.9
		DrawGauge = True
	}
	PROPELLANT
	{
		name = Oxidizer
		ratio = 1.1
	}
	atmosphereCurve
 	{
   	 key = 0 325
  	 key = 1 290
 	}
	
}

MODULE
{
	name = ModuleGimbal
	gimbalTransformName = thrustTransform
	gimbalRange = 0.25
}

MODULE
{
      name = ModuleAnimateHeat
      ThermalAnim = LR91_Anim
}

MODULE
{
	name = ModuleAlternator	
	RESOURCE
	{
		name = ElectricCharge
		rate = 0.5
	}
}
	MODULE
	{
		name = ModuleSurfaceFX
		thrustProviderModuleIndex = 0
		fxMax = 0.6
		maxDistance = 60
		falloff = 2
		thrustTransformName = thrustTransform
	}
//Reflection shader plugin

    MODULE
    {
        name = ReflectiveShaderModule

        // Lower values for performance, higher values for aesthetics (you shouldn't ever need to go higher than 1024).
        CubeMapSize = 16

        // How deep the reflection will be ("how far the reflection camera will view")
        FarClipPlane = 500000000
		// How far away must something be before it is reflected
		NearClipPlane = 2

        // Set to false to render all 6 faces of the CubeMap at once (six times slower~)
        OneFacePerFrame = true

        // The shader to find. The reflective shaders are:
        // Reflective/Diffuse
        // Reflective/VertexLit
        // Reflective/Bumped Diffuse
		//Reflective/Bumped Specular
        ShaderName = Reflective/Bumped Specular
		realTimeReflection = False
		

        // The height of the parallax map. Values are accepted between 0.005 and 0.08.
        ParallaxHeight = 0.01

        // How reflective the reflection will be (Weakest 0.0 - 1.0 Strongest).
        ReflectionStrength = 0.25
		//ReflectionColor = 0, 0, 0, 0

        // Use this variable to specify which meshes to apply the shader to.
        // Not using this variable will default to the first found mesh.
        // Use the actual mesh name for the value. Or you could use:
        // all - to replace the shader on all meshes in the model.
        MeshesToChange = all

        // How shiny the specularity will be (if specular).
        // This value will be automatically set if it already exists on the previous shader and is not defined here.
        Shininess = 1.0
		updateRate = 160

        // These variables should be used together only.
        // These values will be automatically set if they already exist on the previous shader and are not defined here
        SpecColorR = 0.8
        SpecColorG = 0.8
        SpecColorB = 0.8
        SpecColorA = 0.8
		rimFalloff = 5.0
		rimColor = 0.6242, 0.6445, 0.6914, 1.0
		ReflectionColor = 0.6442, 0.6445, 0.64, 1.0
    }
}




