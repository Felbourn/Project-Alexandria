PART
{
	name = companionCube.SW
	module = Part
	author = Starwaster

	MODEL
	{
		model = Copernicus/Parts/testCube/CompanionCube
		scale = 1.0, 1.0, 1.0
	}

	rescaleFactor = 1
	// 7.365 - 0.2713 = 7.0937
	//node_stack_top = 0.0, 6.705, 0.0, 0.0, 1.0, 0.0, 0
	//node_stack_bottom = 0.0, -6.705, 0.0, 0.0, 1.0, 0.0, 0
	//node_attach = 0, 0, 0, 0, 0, 1

	TechRequired = metaMaterials
	entryCost = 12200
	cost = 980
	category = Utility
	subcategory = 0
	title = Companion Cube.

	description = Texture test cube. Also doubles as a serviceable Companion Cube. It will never ever betray you, try to stab you and cannot in fact speak.

	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,0,1,1,0

	mass = 4
	dragModelType = default
	maximum_drag = 0.25
	minimum_drag = 0.25
	angularDrag = 0.5
	crashTolerance = 20
	maxTemp = 3400
	breakingTorque = 10000
	breakingForce = 10000
    MODULE
    {
        name = ReflectiveShaderModule

        // Lower values for performance, higher values for aesthetics (you shouldn't ever need to go higher than 1024).
        CubeMapSize = 128

        // How deep the reflection will be ("how far the reflection camera will view")
        FarClipPlane = 500000000
		// How far away must something be before it is reflected
		//NearClipPlane = 1

        // Set to false to render all 6 faces of the CubeMap at once (six times slower~)
        OneFacePerFrame = true

        // The shader to find. The reflective shaders are:
        // Reflective/Diffuse
        // Reflective/VertexLit
        // Reflective/Bumped Diffuse
        ShaderName = Reflective/Bumped
		realTimeReflection = False
		

        // The height of the parallax map. Values are accepted between 0.005 and 0.08.
        ParallaxHeight = 0.005

        // How reflective the reflection will be (Weakest 0.0 - 1.0 Strongest).
        ReflectionStrength = 0.0
		//ReflectionColor = 0, 0, 0, 0

        // Use this variable to specify which meshes to apply the shader to.
        // Not using this variable will default to the first found mesh.
        // Use the actual mesh name for the value. Or you could use:
        // all - to replace the shader on all meshes in the model.
        //MeshesToChange = polymsh,polymsh_detached,polymsh_detached1

        // How shiny the specularity will be (if specular).
        // This value will be automatically set if it already exists on the previous shader and is not defined here.
        Shininess = 1.0
		updateRate = 300

        // These variables should be used together only.
        // These values will be automatically set if they already exist on the previous shader and are not defined here
        //SpecColorR = 0.5
        //SpecColorG = 0.5
        //SpecColorB = 0.5
        //SpecColorA = 0.5
		//rimFalloff = 5.0
		//rimColor = 0.8242, 0.6445, 0.1914, 1.0
		//ReflectionColor = 0.8242, 0.6445, 0.1914, 1.0
    }
}