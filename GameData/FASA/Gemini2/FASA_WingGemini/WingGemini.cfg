PART
{
// this is a sample config file, for determining a good file format for defining part parameters
// comment line - ignored by cfg parser
// empty lines, or lines without a '=' sign are also ignored
// all other lines are split at the '=' sign, and the left operand is used to know what parameter we are setting
// diferent parameters require data in different formats (see docs), and each module has it's own parameters (again, see docs)
// each assignment must be in a single line. Lines without assignments will be ignored. (You CAN turn on word wrap, though)
// each keyword here relates to an existing variable in the assigned module. If the keyword isn't found, it is ignored.
// conversely, if a keyword is left unassigned (as in not in the file), it will be initialized with it's default value
// This is done automatically, so any public variable defined in the loaded module can be accessed this way (provided it's value can be parsed)


// --- general parameters ---
name = WingGemini
module = Part
author = Frizzank

// --- asset parameters ---
MODEL
{
  model = FASA/Gemini2/FASA_WingGemini/WingGemini
}

rescaleFactor = 1.0
scale = 1.0

// --- editor parameters ---
TechRequired = aerospaceTech
entryCost = 38200
cost = 5000
category = Aero
subcategory = 0
title = Gemini Wings
manufacturer = FASA
description = The Winged Gemini experiment was designed so that Gemini could land on a runway. It would have greatly reduced the cost of recovery, but it was so unstable and hard to control in tests that it was abandoned.  See if you can do better! Make sure you come in nose first, if you start to spin turn off SAS and you will eventually recover, maybe. Also you will have very little control until you get to the thicker part of the atmosphere keep it nose down as long as possible to keep your speed up. Your glide slope should be very steep.

// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 1,0,1,1,0

// --- node definitions ---
// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
node_stack_top = 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0

	DRAG_CUBE
	{
		cube = Default, 0.008417127,1,1.31361, 0.008417127,1,1.31361, 0.07052688,1,0.4886493, 0.07052688,0.02231601,0.1475529, 0.3151167,0.9988997,0.2585402, 0.3151167,0.9993948,0.2585402
	}

mass = 0.05
	thermalMassModifier = 2.25  
	heatConductivity = 0.1
	emissiveConstant = 0.95
	dragModelType = none
maximum_drag = 0.01
minimum_drag = 0.01
angularDrag = 2
crashTolerance = 8
breakingForce = 10
breakingTorque = 15
maxTemp = 3000
explosionPotential = 0.25

//	PhysicsSignificance = 1
	CoMOffset = 0.0, -0.25, 0.2
	mirrorRefAxis = 0, 0, 0
	CoPOffset = 0.0, -1.8, 0.4
	CoLOffset = 0.0, 0.0, 0.5
	bodyLiftMultiplier = 1.9

	MODULE
	{
		name = ModuleLiftingSurface
		useInternalDragModel = True
		deflectionLiftCoeff = 1.9
		dragAtMaxAoA = 0.1
		dragAtMinAoA = 0.01
	}
MODULE
{
	name = ModuleRCS
	thrusterTransformName = RCSthruster
	thrusterPower = 1.0
	resourceName = MonoPropellant
	fxOffset = 0, 0, 0.0
		resourceFlowMode = STAGE_PRIORITY_FLOW
	atmosphereCurve
 	{
   	 key = 0 290
  	 key = 1 180
 	}
}

//MODULE
//{
//	name = ModuleReactionWheel
	
//	PitchTorque = .1
//	YawTorque = .1
//	RollTorque = .75
//	RESOURCE
//	{
//		name = MonoPropellant
//		rate = 0.01
//	}
//}

RESOURCE
{
 name = MonoPropellant
 amount = 40
 maxAmount = 40
}
	MODULE
	{
		name = ModuleAblator
		ablativeResource = Ablator
		lossExp = -9000
		lossConst = 20
		pyrolysisLossFactor = 1000
		reentryConductivity = 0.01
		ablationTempThresh = 600
	}
	RESOURCE
	{
		name = Ablator
		amount = 600
		maxAmount = 600
	}
}


