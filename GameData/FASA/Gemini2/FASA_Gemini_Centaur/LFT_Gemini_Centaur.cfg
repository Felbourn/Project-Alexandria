PART
{
// --- general parameters ---
name = FASAGeminiLFTCentar
module = Part
author = Frizzank

// --- asset parameters ---
MODEL
{
  model = FASA/Gemini2/FASA_Gemini_Centaur/LFT_Gemini_Centaur
}
rescaleFactor = 1.0
scale = 1.0

// --- node definitions ---
node_stack_top = 0.0, 0.2, 0.0, 0.0, 1.0, 0.0, 1

node_stack_bottom = 0.0, -2.2, 0.0, 0.0, -1.0, 0.0, 1
node_stack_bottom1 = 0.0, -0.30, 0.0, 0.0, -1.0, 0.0, 1
node_stack_bottom2 = -0.542, -0.66, 0.0, 0.0, -1.0, 0.0, 0
node_stack_bottom3 = 0.542, -0.66, 0.0, 0.0, -1.0, 0.0, 0
node_stack_bottom4= -0.6, -0.2, 0.0, 0.0, -1.0, 0.0, 0
node_stack_bottom5 = 0.6, -0.2, 0.0, 0.0, -1.0, 0.0, 0

//node_attach = 0.0, 0.0, 1.26, 0.0, 0.0, -1.0, 1
stackSymmetry = 1

// --- editor parameters ---
TechRequired = fuelSystems
entryCost = 4800
cost = 950
category = Propulsion
subcategory = 0
title = Gemini Centaur Engine Plate
manufacturer = FASA
description = A versatile engine mounting plate. It can create many different small engine configurations.  Attaching a decoupler to the bottom node creates a fairing for the attached engine clusters. Attach this to 2.5m fuel tanks to make your own Centaur stage. Comes with a bit of fuel, engines not included!

// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 1,0,1,1,0

// --- standard part parameters ---
mass = 0.05
dragModelType = default
maximum_drag = 0.2
minimum_drag = 0.2
angularDrag = 2
crashTolerance = 16
breakingForce = 160
breakingTorque = 160
maxTemp = 1800


RESOURCE
{
 name = LiquidFuel
 amount = 18
 maxAmount = 18
}

RESOURCE
{
 name = Oxidizer
 amount = 22
 maxAmount = 22
}
MODULE
{
       name = ModuleJettison
       jettisonName = fairing
       bottomNodeName = bottom
       isFairing = True
       jettisonedObjectMass = 0.1
       jettisonForce = 5
       jettisonDirection = 0 0 1
	
}

//Reflection shader plugin
    MODULE
    {
        name = ReflectiveShaderModule

        // Lower values for performance, higher values for aesthetics (you shouldn't ever need to go higher than 1024).
        CubeMapSize = 8

        // How deep the reflection will be ("how far the reflection camera will view")
        FarClipPlane = 500000000
		// How far away must something be before it is reflected
		NearClipPlane = 2

        // Set to false to render all 6 faces of the CubeMap at once (six times slower~)
        OneFacePerFrame = true

        // The shader to find. The reflective shaders are:
        // Reflective/Diffuse
        // Reflective/VertexLit
        // Reflective/Bumped Diffuse
		//Reflective/Bumped Specular
        ShaderName = Reflective/Bumped Specular
		realTimeReflection = False
		

        // The height of the parallax map. Values are accepted between 0.005 and 0.08.
        ParallaxHeight = 0.01

        // How reflective the reflection will be (Weakest 0.0 - 1.0 Strongest).
        ReflectionStrength = 0.2
		//ReflectionColor = 0, 0, 0, 0

        // Use this variable to specify which meshes to apply the shader to.
        // Not using this variable will default to the first found mesh.
        // Use the actual mesh name for the value. Or you could use:
        // all - to replace the shader on all meshes in the model.
        MeshesToChange = Centaur_Dome

        // How shiny the specularity will be (if specular).
        // This value will be automatically set if it already exists on the previous shader and is not defined here.
        Shininess = 1.0
		updateRate = 20

        // These variables should be used together only.
        // These values will be automatically set if they already exist on the previous shader and are not defined here
        SpecColorR = 0.8
        SpecColorG = 0.8
        SpecColorB = 0.8
        SpecColorA = 0.8
		rimFalloff = 5.0
		rimColor = 0.6242, 0.6445, 0.6914, 1.0
		ReflectionColor = 0.6442, 0.6445, 0.64, 1.0
    }


}