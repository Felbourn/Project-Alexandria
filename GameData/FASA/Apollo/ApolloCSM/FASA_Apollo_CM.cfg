PART
{

name = FASAApollo_CM
module = Part
author = DennyTX,Frizzank

// --- asset parameters ---

rescaleFactor = 1
MODEL
{
	model=FASA/Apollo/ApolloCSM/FASAApollo_CM
	scale = 0.63, 0.63, 0.63
	rotation = 0, 0, 0			
}

// --- node definitions ---
// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
//node_stack_top = 0.0, 1.275, 0.0, 0.0, 1.0, 0.0, 1
//node_stack_bottom = 0.0, -0.28, 0.0, 0.0, -1.0, 0.0, 1

node_stack_top = 0.0, 0.763, 0.0, 0.0, 1.0, 0.0, 1
node_stack_bottom = 0.0, -0.645, 0.0, 0.0, -1.0, 0.0, 1

//node_stack_rcs1 = 1.155, -0.585, 0.0, 0.0, 1.0, 0.0, 0
//node_stack_rcs2 = 0.0, -0.585, -1.156, 0.0, 1.0, 0.0, 0
//node_stack_rcs3 = -1.155, -0.585, 0.0, 0.0, 1.0, 0.0, 0
//node_stack_rcs4 = 0.0, -0.585, 1.156, 0.0, 1.0, 0.0, 0
//stackSymmetry = 3


// --- editor parameters ---
TechRequired = commandModules
entryCost = 5000
cost = 7500
category = Pods
subcategory = 0
title = Apollo Command Module
manufacturer = FASA
description = Apollo Command module. maximum of 3 crew.

// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 1,0,1,1,0

stageOffset = 1
childStageOffset = 1

// --- standard part parameters ---
mass = 3.7
dragModelType = default
maximum_drag = 0.20
minimum_drag = 0.15
angularDrag = 1
crashTolerance = 12
breakingForce = 100
breakingTorque = 100
maxTemp = 2600

	bulkheadProfiles = size2
	
CoMOffset = 0.0, -0.9, 0.0
//	CoPOffset = 0.0, 0.1, 0.0
	CoLOffset = 0.0, -0.1, 0.0
	bodyLiftMultiplier = 0.1
vesselType = Ship
//stagingIcon = COMMAND_POD

// --- internal setup ---
CrewCapacity = 3

MODULE
{
    name = FlagDecal
    textureQuadName = Flag
}


MODULE
{
	name = ModuleLight
    lightName = spotlight
	useAnimationDim = true
	lightBrightenSpeed = 3.5
	lightDimSpeed = 3.5
	resourceAmount = 0.001
	animationName = Apollo_CM_Emis
	useResources = true
}

MODULE
{
	name = ModuleCommand
	minimumCrew = 1
}
MODULE 
	{
	name = RasterPropMonitorComputer
	}
RESOURCE
{
	name = ElectricCharge
	amount = 150
	maxAmount = 150
}

RESOURCE
{
	name = MonoPropellant
	amount = 25
	maxAmount = 25
}





MODULE
{
	name = ModuleRCS
	thrusterTransformName = RCSthruster
	thrusterPower = 2.5
	resourceName = MonoPropellant
	fxOffset = 0, 0, 0.0
		resourceFlowMode = STAGE_PRIORITY_FLOW
	atmosphereCurve
 	{
   	 key = 0 250
  	 key = 1 210
 	}
}



MODULE
{
	name = ModuleScienceExperiment	
	
	experimentID = crewReport
	
	experimentActionName = Crew Report
	resetActionName = Discard Crew Report
	reviewActionName = Review Crew Report
	
	useStaging = False	
	useActionGroups = True
	hideUIwhenUnavailable = True	
	rerunnable = True
	
	xmitDataScalar = 1.0
}


MODULE
{
	name = ModuleScienceContainer
	
	reviewActionName = Review Stored Data
	storeActionName = Store Experiments
	evaOnlyStorage = True
	storageRange = 2.0
}

//Reflection shader plugin
    MODULE
    {
        name = ReflectiveShaderModule

        // Lower values for performance, higher values for aesthetics (you shouldn't ever need to go higher than 1024).
        CubeMapSize = 32

        // How deep the reflection will be ("how far the reflection camera will view")
        FarClipPlane = 50000000000
		// How far away must something be before it is reflected
		NearClipPlane = 2

        // Set to false to render all 6 faces of the CubeMap at once (six times slower~)
        OneFacePerFrame = true

        // The shader to find. The reflective shaders are:
        // Reflective/Diffuse
        // Reflective/VertexLit
        // Reflective/Bumped Diffuse
		//Reflective/Bumped Specular
        ShaderName = Reflective/Bumped Specular
		realTimeReflection = False
		

        // The height of the parallax map. Values are accepted between 0.005 and 0.08.
        ParallaxHeight = 0.01

        // How reflective the reflection will be (Weakest 0.0 - 1.0 Strongest).
        ReflectionStrength = 0.12
		//ReflectionColor = 0, 0, 0, 0

        // Use this variable to specify which meshes to apply the shader to.
        // Not using this variable will default to the first found mesh.
        // Use the actual mesh name for the value. Or you could use:
        // all - to replace the shader on all meshes in the model.
        MeshesToChange = Capsule

        // How shiny the specularity will be (if specular).
        // This value will be automatically set if it already exists on the previous shader and is not defined here.
        Shininess = 0.5
		updateRate = 115

        // These variables should be used together only.
        // These values will be automatically set if they already exist on the previous shader and are not defined here
        // These values will be automatically set if they already exist on the previous shader and are not defined here
        SpecColorR = 0.8
        SpecColorG = 0.8
        SpecColorB = 0.8
        SpecColorA = 0.8
//		rimFalloff = 1.0
//		rimColor = 0.642, 0.6445, 0.6414, 1.0
//		ReflectionColor = 0.6442, 0.6445, 0.64, 0.4
    }

	
	
}
